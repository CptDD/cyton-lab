/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-03-14 09:29:20.509104
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[6]);
x12=IKcos(j[5]);
x13=IKsin(j[5]);
x14=((5.0e-6)*x1);
x15=((1.0)*x9);
x16=((0.0009)*x3);
x17=((5.0e-6)*x7);
x18=((0.0718)*x7);
x19=((1.0)*x4);
x20=((0.0718)*x1);
x21=((0.0001)*x6);
x22=((1.0)*x8);
x23=((1.0)*x7);
x24=((0.09746)*x3);
x25=((1.0)*x0);
x26=((0.051425)*x9);
x27=((0.1158)*x4);
x28=((0.09746)*x1);
x29=((1.0)*x3);
x30=(x2*x4);
x31=((-1.0)*x9);
x32=(x1*x2);
x33=(x5*x6);
x34=(x0*x6);
x35=(x2*x7);
x36=((-0.051425)*x5);
x37=((-1.0)*x8);
x38=(x6*x8);
x39=((-1.0)*x3);
x40=(x0*x1);
x41=(x2*x5);
x42=((-1.0)*x7);
x43=((-1.0)*x5);
x44=(x1*x6);
x45=(x0*x3);
x46=(x4*x6);
x47=((1.0)*x41);
x48=(x3*x6*x7);
x49=(x46*x9);
x50=(x23*x44);
x51=(x29*x33);
x52=(x45+((x1*x30)));
x53=((((-1.0)*x19*x2*x3))+x40);
x54=((((-1.0)*x47))+((x34*x7)));
x55=((((-1.0)*x19*x3))+((x25*x32)));
x56=(x47+(((-1.0)*x23*x34)));
x57=((((-1.0)*x1*x19))+(((-1.0)*x2*x25*x3)));
x58=(x54*x8);
x59=(x5*x55);
x60=(x57*x7);
x61=(((x1*x33))+((x55*x7)));
x62=(x60+((x33*x39)));
x63=((((-1.0)*x23*x57))+x51);
x64=((((-1.0)*x19*x38))+(((-1.0)*x15*x56)));
x65=((((-1.0)*x1*x33))+((x42*x55)));
x66=(((x13*x64))+((x12*((x35+((x0*x33)))))));
x67=(((x13*((((x37*x52))+((x31*x65))))))+((x12*((x59+(((-1.0)*x50)))))));
x68=(((x13*((((x31*((((x42*x57))+x51))))+((x37*x53))))))+((x12*((x48+((x5*x57)))))));
eerot[0]=(((x11*((((x52*x9))+((x61*x8))))))+((x10*x67)));
eerot[1]=(((x11*x67))+((x10*((((x37*x61))+((x31*x52)))))));
eerot[2]=((((-1.0)*x12*((((x15*(((((-1.0)*x1*x33))+(((-1.0)*x23*x55))))))+((x22*x52))))))+((x13*((x50+((x43*x55)))))));
eetrans[0]=(((x13*((((x36*x55))+(((0.051425)*x44*x7))))))+((x0*x16))+((x9*((((x14*x30))+(((5.0e-6)*x45))))))+(((0.0009)*x1*x30))+((x28*x33))+(((-1.0)*x1*x21))+((x8*((((x17*x55))+((x14*x33))))))+((x8*(((((-1.0)*x20*x30))+(((-0.0718)*x45))))))+((x7*((((x0*x2*x28))+(((-1.0)*x24*x4))))))+((x12*(((((-0.051425)*x52*x8))+(((-0.051425)*x65*x9))))))+(((-1.0)*x27*x3))+(((0.1158)*x0*x32))+(((0.1255)*x32))+(((-0.001)*x3))+((x9*((((x20*x33))+((x18*x55)))))));
eerot[3]=(((x11*((((x53*x9))+((x62*x8))))))+((x10*x68)));
eerot[4]=(((x10*((((x37*x62))+((x31*x53))))))+((x11*x68)));
eerot[5]=(((x13*((((x39*x6*x7))+((x43*x57))))))+((x12*(((((-1.0)*x15*x63))+(((-1.0)*x22*x53)))))));
IkReal x69=(x3*x30);
IkReal x70=(x3*x33);
IkReal x71=((1.0)*x0);
eetrans[1]=(((x21*x3))+((x7*(((((-1.0)*x28*x4))+(((-1.0)*x2*x24*x71))))))+(((0.0009)*x40))+(((-1.0)*x1*x27))+((x13*(((((-0.051425)*x48))+((x36*x57))))))+((x9*(((((-5.0e-6)*x69))+((x0*x14))))))+(((-1.0)*x16*x30))+(((-0.1158)*x2*x45))+(((-1.0)*x24*x33))+((x8*(((((0.0718)*x69))+(((-1.0)*x20*x71))))))+((x12*(((((-0.051425)*x53*x8))+(((-1.0)*x26*x63))))))+((x8*((((x17*x57))+(((-5.0e-6)*x70))))))+((x9*(((((-0.0718)*x70))+((x18*x57))))))+(((-0.001)*x1))+(((-0.1255)*x2*x3)));
eerot[6]=(((x11*((x49+x58))))+((x10*x66)));
eerot[7]=(((x11*x66))+((x10*(((((-1.0)*x15*x46))+(((-1.0)*x22*x54)))))));
eerot[8]=(((x12*x64))+((x13*(((((-1.0)*x25*x33))+(((-1.0)*x2*x23)))))));
IkReal x72=(x38*x4);
eetrans[2]=((0.1775)+(((0.0001)*x2))+((x12*(((((-0.051425)*x72))+(((-1.0)*x26*x56))))))+(((-0.0718)*x72))+((x8*(((((-5.0e-6)*x41))+((x17*x34))))))+(((0.0009)*x46))+((x13*(((((-0.051425)*x35))+(((-0.051425)*x0*x33))))))+(((0.1158)*x34))+((x9*((((x18*x34))+(((-0.0718)*x41))))))+(((0.09746)*x34*x7))+(((-0.09746)*x41))+(((0.1255)*x6))+(((5.0e-6)*x49)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.051425)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.051425)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1775)+(((-0.051425)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x73=((1.0)*px);
IkReal x74=((1.0)*pz);
IkReal x75=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x75))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x74)));
rxp0_2=((((-1.0)*r10*x73))+((py*r00)));
rxp1_0=((((-1.0)*r21*x75))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x74)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x75))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x74)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x73)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x76=sj2*sj2;
IkReal x77=((0.02626)*cj2);
IkReal x78=((0.1255)*sj2);
IkReal x79=(cj2*sj2);
IkReal x80=((-0.0718)*cj2);
IkReal x81=((3590.0)*x76);
IkReal x82=((-1.0)*sj2);
IkReal x83=((0.0001)*x76);
IkReal x84=((-0.09746)*sj2);
IkReal x85=((-1.0)*cj2);
IkReal x86=((-0.02626)*sj2);
IkReal x87=((0.0001)*x79);
IkReal x88=((-0.0718)*sj2);
IkReal x89=((-3590.0)*sj2);
IkReal x90=((-1313.0)*sj2);
IkReal x91=((0.0009)+x78+(((-0.0215)*cj2)));
IkReal x92=((-1313.0)*x76);
IkReal x93=((-0.09746)*x76);
IkReal x94=((-4873.0)*x79);
IkReal x95=((-1313.0)*x79);
IkReal x96=((-3590.0)*x79);
IkReal x97=((0.1158)+(((0.1255)*cj2))+(((0.0215)*sj2)));
IkReal x98=((((0.0009)*x76))+x78+(((0.1158)*x79)));
matrixinvcoeffs[0]=0;
matrixinvcoeffs[1]=0;
matrixinvcoeffs[2]=cj2;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=x80;
matrixinvcoeffs[9]=0.09746;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=x81;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=cj2;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x80;
matrixinvcoeffs[27]=0.09746;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=x81;
matrixinvcoeffs[32]=0;
matrixinvcoeffs[33]=0;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=cj2;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=x82;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=x77;
matrixinvcoeffs[41]=x91;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x83;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=x92;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=cj2;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=x82;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x77;
matrixinvcoeffs[59]=x91;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=x83;
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=x92;
matrixinvcoeffs[64]=x82;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=0;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=0;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=x82;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=0;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=0;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=-1.0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=-0.0001;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x98;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=0;
matrixinvcoeffs[111]=x90;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=1.0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=-0.0001;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x98;
matrixinvcoeffs[126]=((1313.0)*sj2);
matrixinvcoeffs[127]=0;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x93;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=0;
matrixinvcoeffs[143]=x89;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x93;
matrixinvcoeffs[158]=((3590.0)*sj2);
matrixinvcoeffs[159]=0;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=x84;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=0;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x94;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=x84;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=0;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x94;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=x82;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=x85;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x86;
matrixinvcoeffs[201]=x97;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x87;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x95;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=x82;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=x85;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=x86;
matrixinvcoeffs[219]=x97;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x87;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x95;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=sj2;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x88;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=0;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x96;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=sj2;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=x88;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=0;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x96;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal op[72], zeror[48];
int numroots;;
IkReal x99=((10964166.04375)*sj2);
IkReal x100=((205.0)*sj2);
IkReal x101=((10000.0)*sj2);
IkReal x102=((102.5)*sj2);
IkReal x103=((9746.0)*cj5);
IkReal x104=((5000.0)*sj2);
IkReal x105=((718.0)*cj2);
IkReal x106=(r12*sj5);
IkReal x107=(r02*sj5);
IkReal x108=((538227.5)*sj2);
IkReal x109=(cj5*r10);
IkReal x110=((359.0)*cj2);
IkReal x111=(cj5*r01);
IkReal x112=(r10*x102);
IkReal x113=(rxp0_2*x104);
IkReal x114=(rxp0_1*x104);
IkReal x115=(r20*x102);
IkReal x116=(rxp1_2*x101);
IkReal x117=(r11*x100);
IkReal x118=((13127500.0)*npx*sj2);
IkReal x119=((10250000.0)*px*sj2);
IkReal x120=((1301325.0)*(sj2*sj2));
IkReal x121=((7256775.0)*cj2*sj2);
IkReal x122=((269113.75)*r00*sj2);
IkReal x123=((4873.0)*x107);
IkReal x124=((250000000.0)*pp*sj2);
IkReal x125=((4873.0)*x111);
IkReal x126=(r00*x100);
IkReal x127=(rxp0_0*x101);
IkReal x128=((410.0)*r01*sj2);
IkReal x129=((20500000.0)*py*sj2);
IkReal x130=(r10*x108);
IkReal x131=(r11*x103);
IkReal x132=((9746.0)*x106);
IkReal x133=(r21*x100);
IkReal x134=(rxp1_1*x101);
IkReal x135=(r01*x108);
IkReal x136=((26255000.0)*npy*sj2);
IkReal x137=(r00*x103);
IkReal x138=(x110*x111);
IkReal x139=(x107*x110);
IkReal x140=(cj5*r00*x105);
IkReal x141=(cj5*r11*x105);
IkReal x142=(x105*x106);
IkReal x143=((-20000.0)*rxp1_0*sj2);
IkReal x144=((1436.0)*cj2*x109);
IkReal x145=((-10000.0)*rxp0_0*sj2);
IkReal x146=((((-1.0)*x114))+x115);
IkReal x147=(x134+(((-1.0)*x133)));
IkReal x148=((((-1.0)*x115))+x114);
IkReal x149=((((-1076455.0)*r11*sj2))+(((19492.0)*x109)));
IkReal x150=(x115+x114);
IkReal x151=((((-1.0)*x134))+(((-1.0)*x133)));
IkReal x152=((-1.0)*x150);
IkReal x153=(x117+x116);
IkReal x154=(x124+x119);
IkReal x155=(x113+x112);
IkReal x156=(x131+x130);
IkReal x157=(x123+x118);
IkReal x158=(x125+x122);
IkReal x159=(x142+x126);
IkReal x160=(x138+x112);
IkReal x161=(x138+x113);
IkReal x162=(x139+x113);
IkReal x163=(x137+x136+(((-1.0)*x135)));
IkReal x164=(x135+x136+(((-1.0)*x137)));
IkReal x165=(x120+x121+x99);
IkReal x166=(x156+x129+(((-1.0)*x132)));
IkReal x167=((((-1.0)*x156))+x129+(((-1.0)*x132)));
IkReal x168=(x165+x158);
IkReal x169=((((-1.0)*x157))+(((-1.0)*x124))+x168+x119);
IkReal x170=((((-1.0)*x158))+(((-1.0)*x123))+(((-1.0)*x124))+x165+x119+x118);
IkReal x171=((((-1.0)*x154))+(((-1.0)*x158))+(((-1.0)*x118))+x165+x123);
IkReal x172=((((-1.0)*x154))+x168+x157);
op[0]=(x155+x139+(((-1.0)*x138)));
op[1]=x146;
op[2]=((((-1.0)*x140))+(((-1.0)*x153)));
op[3]=x147;
op[4]=((((-1.0)*x155))+x139+x138);
op[5]=x148;
op[6]=x146;
op[7]=((((-1.0)*x155))+x139+(((-1.0)*x138)));
op[8]=x147;
op[9]=((((-1.0)*x140))+x153);
op[10]=x148;
op[11]=(x155+x139+x138);
op[12]=x169;
op[13]=0;
op[14]=x163;
op[15]=0;
op[16]=x170;
op[17]=0;
op[18]=0;
op[19]=x169;
op[20]=0;
op[21]=x163;
op[22]=0;
op[23]=x170;
op[24]=((((-1.0)*x141))+(((-1.0)*x126))+x142);
op[25]=x127;
op[26]=((((-1.0)*x144))+x128);
op[27]=x143;
op[28]=(x159+x141);
op[29]=x145;
op[30]=x127;
op[31]=((((-1.0)*x141))+x159);
op[32]=x143;
op[33]=((((-1.0)*x144))+(((-1.0)*x128)));
op[34]=x145;
op[35]=((((-1.0)*x126))+x141+x142);
op[36]=x166;
op[37]=0;
op[38]=x149;
op[39]=0;
op[40]=x167;
op[41]=0;
op[42]=0;
op[43]=x166;
op[44]=0;
op[45]=x149;
op[46]=0;
op[47]=x167;
op[48]=((((-1.0)*x112))+x161+(((-1.0)*x139)));
op[49]=x150;
op[50]=((((-1.0)*x116))+x140+x117);
op[51]=x151;
op[52]=((((-1.0)*x161))+x112+(((-1.0)*x139)));
op[53]=x152;
op[54]=x150;
op[55]=((((-1.0)*x162))+x160);
op[56]=x151;
op[57]=((((-1.0)*x117))+x140+x116);
op[58]=x152;
op[59]=((((-1.0)*x160))+x113+(((-1.0)*x139)));
op[60]=x171;
op[61]=0;
op[62]=x164;
op[63]=0;
op[64]=x172;
op[65]=0;
op[66]=0;
op[67]=x171;
op[68]=0;
op[69]=x164;
op[70]=0;
op[71]=x172;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j6array[16], cj6array[16], sj6array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj6 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj6)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x173=htj0*htj0;
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((1.0)+x173),-1);
if(!x174.valid){
continue;
}
cj0array[numsolutions]=((x174.value)*(((1.0)+(((-1.0)*x173)))));
CheckValue<IkReal> x175=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x175.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x175.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x176=htj6*htj6;
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((1.0)+x176),-1);
if(!x177.valid){
continue;
}
cj6array[numsolutions]=((x177.value)*(((1.0)+(((-1.0)*x176)))));
CheckValue<IkReal> x178=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x178.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x178.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x179=htj1*htj1;
CheckValue<IkReal> x180=IKPowWithIntegerCheck(((1.0)+x179),-1);
if(!x180.valid){
continue;
}
cj1array[numsolutions]=((x180.value)*(((1.0)+(((-1.0)*x179)))));
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x181.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x181.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj6 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij0]-cj6array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij0]-sj6array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij6[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j6 = j6array[ij0]; cj6 = cj6array[ij0]; sj6 = sj6array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[1];
IkReal x182=sj1*sj1;
IkReal x183=cj1*cj1;
IkReal x184=((4.0)*cj2);
IkReal x185=(r00*sj6);
IkReal x186=((16.0)*r02);
IkReal x187=((8.0)*r12);
IkReal x188=(cj6*r01);
IkReal x189=(cj1*sj2);
IkReal x190=((8.0)*r02);
IkReal x191=((16.0)*r12);
IkReal x192=((4.0)*cj6);
IkReal x193=(r10*sj6);
IkReal x194=(cj0*x183);
IkReal x195=(cj6*r11*sj0);
IkReal x196=(sj0*sj1*sj2);
IkReal x197=(cj0*sj1*sj2);
IkReal x198=(cj0*x182);
IkReal x199=(sj0*x183);
IkReal x200=(cj2*sj0*x182);
IkReal x201=(((r11*x192*x197))+(((4.0)*x193*x197)));
IkReal x202=(((x183*x184*x195))+(((4.0)*x185*x196))+((x182*x184*x195))+((r21*x189*x192))+((x184*x188*x194))+((x184*x188*x198))+((sj0*x182*x184*x193))+(((4.0)*x188*x196))+((x184*x193*x199))+((x184*x185*x194))+((x184*x185*x198))+(((4.0)*r20*sj6*x189)));
j5eval[0]=((IKabs(((((-1.0)*x202))+x201)))+(((0.5)*(IKabs(((((-1.0)*x191*x200))+(((-1.0)*x186*x196))+(((-1.0)*cj2*x186*x194))+(((-1.0)*cj2*x186*x198))+((x191*x197))+(((-16.0)*r22*x189))+(((-1.0)*cj2*x191*x199)))))))+(((0.5)*(IKabs(((((-1.0)*x201))+x202)))))+(IKabs(((((-1.0)*x187*x200))+((x187*x197))+(((-1.0)*x190*x196))+(((-1.0)*cj2*x187*x199))+(((-8.0)*r22*x189))+(((-1.0)*cj2*x190*x198))+(((-1.0)*cj2*x190*x194))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x203=cj1*cj1;
IkReal x204=sj1*sj1;
IkReal x205=((4.0)*cj2);
IkReal x206=(r00*sj6);
IkReal x207=((16.0)*r02);
IkReal x208=(r10*sj6);
IkReal x209=(cj6*r01);
IkReal x210=(r12*sj0);
IkReal x211=((16.0)*sj2);
IkReal x212=(cj1*r22);
IkReal x213=((8.0)*r02);
IkReal x214=(cj0*sj1);
IkReal x215=((4.0)*sj2);
IkReal x216=((16.0)*cj2);
IkReal x217=((8.0)*r12);
IkReal x218=(cj0*x203);
IkReal x219=(cj6*r11*sj0);
IkReal x220=(sj0*sj1*sj2);
IkReal x221=(sj0*x203);
IkReal x222=(cj0*x204);
IkReal x223=((8.0)*cj2*x204);
IkReal x224=(((x208*x214*x215))+((cj6*r11*x214*x215)));
IkReal x225=((((-8.0)*sj2*x212))+(((-8.0)*cj2*x203*x210))+(((-1.0)*x213*x220))+((sj2*x214*x217))+(((-1.0)*cj2*x213*x218))+(((-1.0)*cj2*x213*x222))+(((-1.0)*x210*x223)));
IkReal x226=(((x205*x206*x218))+((sj0*sj1*x206*x215))+((x205*x208*x221))+((x204*x205*x219))+((x205*x209*x222))+((sj0*x204*x205*x208))+((sj0*sj1*x209*x215))+((x205*x209*x218))+((x203*x205*x219))+((cj1*cj6*r21*x215))+((cj1*r20*sj6*x215))+((x205*x206*x222)));
IkReal x227=(x224+(((-1.0)*x226)));
IkReal x228=(x226+(((-1.0)*x224)));
op[0]=x227;
op[1]=x225;
op[2]=x227;
op[3]=((((-1.0)*x203*x210*x216))+(((-1.0)*x207*x220))+(((-1.0)*x204*x210*x216))+(((-1.0)*x211*x212))+(((-1.0)*cj2*x207*x218))+(((-1.0)*cj2*x207*x222))+((r12*x211*x214)));
op[4]=x228;
op[5]=x225;
op[6]=x228;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x229=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*sj6*x229))+(((-1.0)*r10*sj0*sj6*x229))+((r12*sj0*sj5))+(((-1.0)*cj0*cj6*r01*x229))+((cj0*r02*sj5))+(((-1.0)*cj6*r11*sj0*x229)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x230=((6.96378830083565e-5)*cj0);
IkReal x231=(r01*sj6);
IkReal x232=((6.96378830083565e-5)*sj0);
IkReal x233=(cj6*r10);
IkReal x234=(cj6*r00);
IkReal x235=(r11*sj6);
if( IKabs(((-0.00139275766016713)+(((-13.9275766016713)*cj0*px))+(((-1.0)*x230*x231))+((x232*x233))+((x230*x234))+(((-13.9275766016713)*py*sj0))+(((-1.0)*x232*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x233))+(((-1.0)*sj0*x235))+((cj0*x234))+(((-1.0)*cj0*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00139275766016713)+(((-13.9275766016713)*cj0*px))+(((-1.0)*x230*x231))+((x232*x233))+((x230*x234))+(((-13.9275766016713)*py*sj0))+(((-1.0)*x232*x235))))+IKsqr((((sj0*x233))+(((-1.0)*sj0*x235))+((cj0*x234))+(((-1.0)*cj0*x231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.00139275766016713)+(((-13.9275766016713)*cj0*px))+(((-1.0)*x230*x231))+((x232*x233))+((x230*x234))+(((-13.9275766016713)*py*sj0))+(((-1.0)*x232*x235))), (((sj0*x233))+(((-1.0)*sj0*x235))+((cj0*x234))+(((-1.0)*cj0*x231))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x236=IKcos(j4);
IkReal x237=IKsin(j4);
IkReal x238=(r11*sj0);
IkReal x239=(r10*sj0);
IkReal x240=((1.0)*cj6);
IkReal x241=((0.026255)*cj0);
IkReal x242=(r01*sj6);
IkReal x243=(cj6*sj5);
IkReal x244=(sj5*sj6);
IkReal x245=(cj0*r00);
evalcond[0]=(((cj0*x242))+x236+(((-1.0)*x240*x245))+(((-1.0)*x239*x240))+((sj6*x238)));
evalcond[1]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x238*x243))+((x244*x245))+((cj0*r01*x243))+((x239*x244))+x237);
evalcond[2]=((-0.0001)+(((-0.026255)*cj6*x239))+(((0.02626)*x236))+(((-1.0)*cj6*r00*x241))+((x241*x242))+(((-0.0718)*x237))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x238))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x246=(cj1*cj6);
IkReal x247=((1.0)*cj1);
IkReal x248=(r21*sj6);
IkReal x249=(cj6*sj1);
IkReal x250=(cj5*r21*sj4);
IkReal x251=(r22*sj4*sj5);
IkReal x252=(cj5*r20*sj4*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((x249*x250))+(((-1.0)*sj1*x251))+((sj1*x252))+(((-1.0)*x247*x248))+((r20*x246)))))+(IKabs((((x246*x250))+((cj1*x252))+(((-1.0)*r20*x249))+(((-1.0)*x247*x251))+((sj1*x248))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x253=(r11*sj0);
IkReal x254=(cj0*sj6);
IkReal x255=(cj6*sj5);
IkReal x256=(r10*sj0);
IkReal x257=(sj5*sj6);
IkReal x258=((1.0)*cj5);
IkReal x259=(cj5*r12);
IkReal x260=(cj0*r02);
IkReal x261=((1.0)*sj0);
IkReal x262=((1.0)*cj6);
IkReal x263=(cj0*cj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((sj6*x253))+((r01*x254))+(((-1.0)*x256*x262))+(((-1.0)*cj0*r00*x262)));
evalcond[2]=((((-1.0)*r22*x258))+(((-1.0)*r21*x255))+(((-1.0)*r20*x257)));
evalcond[3]=((((-1.0)*r01*x258*x263))+((sj5*x260))+(((-1.0)*r00*x254*x258))+((r12*sj0*sj5))+(((-1.0)*sj6*x256*x258))+(((-1.0)*cj6*x253*x258)));
evalcond[4]=((1.0)+((cj0*r01*x255))+((r00*sj5*x254))+((cj5*x260))+((x256*x257))+((sj0*x259))+((x253*x255)));
evalcond[5]=((((-1.0)*r00*x257*x261))+((cj0*r11*x255))+((r10*sj5*x254))+(((-1.0)*r02*sj0*x258))+((cj0*x259))+(((-1.0)*r01*x255*x261)));
evalcond[6]=((-0.0719)+(((0.026255)*r01*x254))+(((-0.026255)*cj6*x256))+(((0.026255)*sj6*x253))+(((-1.0)*cj0*px))+(((-0.026255)*r00*x263))+(((-1.0)*py*x261)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x264=(cj1*r20);
IkReal x265=(cj5*sj6);
IkReal x266=((1.0)*cj1);
IkReal x267=(r22*sj5);
IkReal x268=(r21*sj6);
IkReal x269=(r20*sj1);
IkReal x270=(cj5*cj6*r21);
if( IKabs(((((-1.0)*cj6*x269))+((x264*x265))+((cj1*x270))+(((-1.0)*x266*x267))+((sj1*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x264))+(((-1.0)*sj1*x267))+(((-1.0)*x266*x268))+((x265*x269))+((sj1*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x269))+((x264*x265))+((cj1*x270))+(((-1.0)*x266*x267))+((sj1*x268))))+IKsqr((((cj6*x264))+(((-1.0)*sj1*x267))+(((-1.0)*x266*x268))+((x265*x269))+((sj1*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj6*x269))+((x264*x265))+((cj1*x270))+(((-1.0)*x266*x267))+((sj1*x268))), (((cj6*x264))+(((-1.0)*sj1*x267))+(((-1.0)*x266*x268))+((x265*x269))+((sj1*x270))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x271=IKsin(j3);
IkReal x272=IKcos(j3);
IkReal x273=(cj5*cj6);
IkReal x274=(r01*sj0);
IkReal x275=(cj0*sj6);
IkReal x276=((1.0)*r10);
IkReal x277=((0.026255)*sj6);
IkReal x278=((1.0)*sj5);
IkReal x279=((1.0)*sj6);
IkReal x280=(cj5*sj6);
IkReal x281=(cj0*cj6);
IkReal x282=((1.0)*cj0);
IkReal x283=(cj6*r20);
IkReal x284=((0.12372)*x271);
IkReal x285=(cj1*x272);
IkReal x286=(cj6*r00*sj0);
IkReal x287=(sj1*x272);
IkReal x288=((1.0)*x271);
IkReal x289=(cj1*x288);
IkReal x290=((1.0)*x287);
IkReal x291=(x290+x289);
evalcond[0]=(x283+(((-1.0)*x285))+(((-1.0)*r21*x279))+((sj1*x271)));
evalcond[1]=((((-1.0)*x291))+((r21*x273))+(((-1.0)*r22*x278))+((r20*x280)));
evalcond[2]=((((-0.0001)*sj1))+(((0.026255)*x283))+(((-0.12372)*x285))+(((-0.2413)*cj1))+pz+(((-1.0)*r21*x277))+((sj1*x284)));
evalcond[3]=((((-1.0)*x274*x279))+(((-1.0)*x276*x281))+(((-1.0)*x291))+x286+((r11*x275)));
evalcond[4]=(((x273*x274))+(((-1.0)*sj1*x288))+((r00*sj0*x280))+(((-1.0)*cj5*x275*x276))+((cj0*r12*sj5))+x285+(((-1.0)*r11*x273*x282))+(((-1.0)*r02*sj0*x278)));
evalcond[5]=((((0.026255)*r11*x275))+(((-1.0)*x274*x277))+(((0.026255)*x286))+(((-0.026255)*r10*x281))+(((-0.12372)*x287))+(((-1.0)*cj1*x284))+(((-1.0)*py*x282))+(((0.0001)*cj1))+((px*sj0))+(((-0.2413)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x292=(r11*sj0);
IkReal x293=(cj0*sj6);
IkReal x294=(cj6*sj5);
IkReal x295=(r10*sj0);
IkReal x296=(sj5*sj6);
IkReal x297=((1.0)*cj5);
IkReal x298=(cj5*r12);
IkReal x299=(cj0*r02);
IkReal x300=((1.0)*sj0);
IkReal x301=((1.0)*cj6);
IkReal x302=(cj0*cj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x295*x301))+(((-1.0)*cj0*r00*x301))+((r01*x293))+((sj6*x292)));
evalcond[2]=((((-1.0)*r21*x294))+(((-1.0)*r20*x296))+(((-1.0)*r22*x297)));
evalcond[3]=(((sj5*x299))+(((-1.0)*r00*x293*x297))+((r12*sj0*sj5))+(((-1.0)*r01*x297*x302))+(((-1.0)*sj6*x295*x297))+(((-1.0)*cj6*x292*x297)));
evalcond[4]=((-1.0)+((cj0*r01*x294))+((sj0*x298))+((cj5*x299))+((x295*x296))+((x292*x294))+((r00*sj5*x293)));
evalcond[5]=(((cj0*r11*x294))+(((-1.0)*r01*x294*x300))+(((-1.0)*r02*sj0*x297))+(((-1.0)*r00*x296*x300))+((r10*sj5*x293))+((cj0*x298)));
evalcond[6]=((0.0717)+(((-0.026255)*cj6*x295))+(((0.026255)*r01*x293))+(((-1.0)*py*x300))+(((0.026255)*sj6*x292))+(((-0.026255)*r00*x302))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x303=(cj1*r20);
IkReal x304=(cj5*sj6);
IkReal x305=(cj6*sj1);
IkReal x306=(cj5*r21);
IkReal x307=(r21*sj6);
IkReal x308=((1.0)*r22*sj5);
if( IKabs(((((-1.0)*sj1*x307))+((x303*x304))+((r20*x305))+(((-1.0)*cj1*x308))+((cj1*cj6*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x303))+(((-1.0)*sj1*x308))+((cj1*x307))+((r20*sj1*x304))+((x305*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x307))+((x303*x304))+((r20*x305))+(((-1.0)*cj1*x308))+((cj1*cj6*x306))))+IKsqr(((((-1.0)*cj6*x303))+(((-1.0)*sj1*x308))+((cj1*x307))+((r20*sj1*x304))+((x305*x306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj1*x307))+((x303*x304))+((r20*x305))+(((-1.0)*cj1*x308))+((cj1*cj6*x306))), ((((-1.0)*cj6*x303))+(((-1.0)*sj1*x308))+((cj1*x307))+((r20*sj1*x304))+((x305*x306))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x309=IKsin(j3);
IkReal x310=IKcos(j3);
IkReal x311=(cj5*cj6);
IkReal x312=(r01*sj0);
IkReal x313=((0.0712)*sj1);
IkReal x314=(cj0*sj6);
IkReal x315=((1.0)*r10);
IkReal x316=((0.026255)*sj6);
IkReal x317=((1.0)*sj5);
IkReal x318=((1.0)*sj6);
IkReal x319=(cj5*sj6);
IkReal x320=(cj0*cj6);
IkReal x321=((1.0)*cj0);
IkReal x322=(cj6*r20);
IkReal x323=(cj1*x310);
IkReal x324=(cj1*x309);
IkReal x325=(cj6*r00*sj0);
IkReal x326=(sj1*x310);
IkReal x327=((1.0)*sj1*x309);
evalcond[0]=((((-1.0)*r21*x318))+(((-1.0)*x327))+x322+x323);
evalcond[1]=(((r20*x319))+(((-1.0)*x326))+(((-1.0)*x324))+(((-1.0)*r22*x317))+((r21*x311)));
evalcond[2]=((((-1.0)*r21*x316))+(((-0.0001)*sj1))+(((-0.0712)*x323))+((x309*x313))+(((-0.2413)*cj1))+pz+(((0.026255)*x322)));
evalcond[3]=(((r11*x314))+(((-1.0)*x312*x318))+(((-1.0)*x315*x320))+x324+x325+x326);
evalcond[4]=((((-1.0)*r02*sj0*x317))+((r00*sj0*x319))+(((-1.0)*x327))+x323+((cj0*r12*sj5))+((x311*x312))+(((-1.0)*cj5*x314*x315))+(((-1.0)*r11*x311*x321)));
evalcond[5]=((((-0.026255)*r10*x320))+(((-1.0)*x310*x313))+(((-1.0)*x312*x316))+(((0.026255)*r11*x314))+(((-0.0712)*x324))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*x325))+(((-0.2413)*sj1))+(((-1.0)*py*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=(r11*sj0);
IkReal x329=(cj0*sj6);
IkReal x330=(cj6*sj5);
IkReal x331=(r10*sj0);
IkReal x332=((1.0)*cj5);
IkReal x333=(cj0*r02);
IkReal x334=((1.0)*cj6);
IkReal x335=((1.0)*sj0);
IkReal x336=(cj6*r00);
IkReal x337=(r12*sj0);
IkReal x338=(cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
evalcond[2]=((1.0)+(((-1.0)*cj0*r00*x334))+((r01*x329))+(((-1.0)*x331*x334))+((sj6*x328)));
evalcond[3]=((((-1.0)*r01*sj6*x335))+((r11*x329))+(((-1.0)*cj0*r10*x334))+((sj0*x336)));
evalcond[4]=((((-1.0)*sj6*x331*x332))+((sj5*x333))+((sj5*x337))+(((-1.0)*r00*x329*x332))+(((-1.0)*cj6*x328*x332))+(((-1.0)*cj6*x332*x338)));
evalcond[5]=(((x330*x338))+((r00*sj5*x329))+((sj5*sj6*x331))+((x328*x330))+((cj5*x337))+((cj5*x333)));
evalcond[6]=((0.02616)+(((-0.026255)*cj0*x336))+(((-1.0)*py*x335))+(((-0.026255)*cj6*x331))+(((0.026255)*r01*x329))+(((0.026255)*sj6*x328))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x339=cj1*cj1;
IkReal x340=(cj1*sj1);
IkReal x341=((5.90807042419946)*pz);
IkReal x342=(cj5*r20*sj6);
IkReal x343=((1.0)*r22*sj5);
IkReal x344=(cj5*cj6*r21);
if( IKabs(((0.000590807042419946)+(((-1.0)*cj1*x343))+(((1.42561739335933)*x340))+(((-0.000590807042419946)*x339))+((cj1*x342))+((cj1*x344))+(((-1.0)*sj1*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.42561739335933)*x339))+(((-0.000590807042419946)*x340))+((cj1*x341))+((sj1*x344))+((sj1*x342))+(((-1.0)*sj1*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000590807042419946)+(((-1.0)*cj1*x343))+(((1.42561739335933)*x340))+(((-0.000590807042419946)*x339))+((cj1*x342))+((cj1*x344))+(((-1.0)*sj1*x341))))+IKsqr(((((-1.42561739335933)*x339))+(((-0.000590807042419946)*x340))+((cj1*x341))+((sj1*x344))+((sj1*x342))+(((-1.0)*sj1*x343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.000590807042419946)+(((-1.0)*cj1*x343))+(((1.42561739335933)*x340))+(((-0.000590807042419946)*x339))+((cj1*x342))+((cj1*x344))+(((-1.0)*sj1*x341))), ((((-1.42561739335933)*x339))+(((-0.000590807042419946)*x340))+((cj1*x341))+((sj1*x344))+((sj1*x342))+(((-1.0)*sj1*x343))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x345=IKsin(j3);
IkReal x346=IKcos(j3);
IkReal x347=(cj5*cj6);
IkReal x348=(r01*sj0);
IkReal x349=(cj0*cj5);
IkReal x350=((1.0)*sj6);
IkReal x351=((0.026255)*cj6);
IkReal x352=(r00*sj0);
IkReal x353=((1.0)*cj5);
IkReal x354=((0.026255)*sj6);
IkReal x355=(r02*sj0);
IkReal x356=(cj0*r11);
IkReal x357=((1.0)*sj5);
IkReal x358=(cj5*sj6);
IkReal x359=(cj0*sj5);
IkReal x360=(cj1*x346);
IkReal x361=(cj1*x345);
IkReal x362=(sj1*x346);
IkReal x363=(sj1*x345);
IkReal x364=((1.0)*x363);
evalcond[0]=((((-0.0001)*sj1))+(((-0.2413)*cj1))+pz+(((0.16926)*x363))+(((-0.16926)*x360)));
evalcond[1]=(((r21*x347))+(((-1.0)*x361))+(((-1.0)*x362))+(((-1.0)*r22*x357))+((r20*x358)));
evalcond[2]=((((-1.0)*cj6*r21*x357))+(((-1.0)*r22*x353))+(((-1.0)*x364))+x360+(((-1.0)*r20*sj5*x350)));
evalcond[3]=(((cj6*sj5*x356))+(((-1.0)*sj5*x350*x352))+((r10*sj6*x359))+(((-1.0)*cj6*x348*x357))+x361+x362+(((-1.0)*x353*x355))+((r12*x349)));
evalcond[4]=((((-1.0)*x347*x356))+(((-1.0)*r10*x349*x350))+((r12*x359))+(((-1.0)*x364))+((x352*x358))+x360+((x347*x348))+(((-1.0)*x355*x357)));
evalcond[5]=((((-1.0)*x348*x354))+(((-1.0)*cj0*r10*x351))+((x351*x352))+((x354*x356))+(((0.0001)*cj1))+((px*sj0))+(((-0.16926)*x361))+(((-0.16926)*x362))+(((-0.2413)*sj1))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x365=(r11*sj0);
IkReal x366=(cj0*sj6);
IkReal x367=(cj6*sj5);
IkReal x368=(r10*sj0);
IkReal x369=((1.0)*cj5);
IkReal x370=(cj0*r02);
IkReal x371=((1.0)*cj6);
IkReal x372=((1.0)*sj0);
IkReal x373=(cj6*r00);
IkReal x374=(r12*sj0);
IkReal x375=(cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
evalcond[2]=((-1.0)+(((-1.0)*x368*x371))+((r01*x366))+(((-1.0)*cj0*r00*x371))+((sj6*x365)));
evalcond[3]=((((-1.0)*r01*sj6*x372))+((sj0*x373))+(((-1.0)*cj0*r10*x371))+((r11*x366)));
evalcond[4]=((((-1.0)*sj6*x368*x369))+((sj5*x370))+((sj5*x374))+(((-1.0)*cj6*x365*x369))+(((-1.0)*cj6*x369*x375))+(((-1.0)*r00*x366*x369)));
evalcond[5]=(((x367*x375))+((r00*sj5*x366))+((x365*x367))+((cj5*x370))+((cj5*x374))+((sj5*sj6*x368)));
evalcond[6]=((-0.02636)+(((0.026255)*r01*x366))+(((-0.026255)*cj0*x373))+(((0.026255)*sj6*x365))+(((-0.026255)*cj6*x368))+(((-1.0)*py*x372))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x376=cj1*cj1;
IkReal x377=(cj1*sj1);
IkReal x378=((38.9711613406079)*pz);
IkReal x379=(cj5*r20*sj6);
IkReal x380=((1.0)*r22*sj5);
IkReal x381=(cj5*cj6*r21);
if( IKabs(((0.00389711613406079)+(((-1.0)*cj1*x380))+((cj1*x381))+(((-0.00389711613406079)*x376))+(((9.4037412314887)*x377))+(((-1.0)*sj1*x378))+((cj1*x379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x379))+(((-9.4037412314887)*x376))+(((-0.00389711613406079)*x377))+((cj1*x378))+((sj1*x381))+(((-1.0)*sj1*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00389711613406079)+(((-1.0)*cj1*x380))+((cj1*x381))+(((-0.00389711613406079)*x376))+(((9.4037412314887)*x377))+(((-1.0)*sj1*x378))+((cj1*x379))))+IKsqr((((sj1*x379))+(((-9.4037412314887)*x376))+(((-0.00389711613406079)*x377))+((cj1*x378))+((sj1*x381))+(((-1.0)*sj1*x380))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00389711613406079)+(((-1.0)*cj1*x380))+((cj1*x381))+(((-0.00389711613406079)*x376))+(((9.4037412314887)*x377))+(((-1.0)*sj1*x378))+((cj1*x379))), (((sj1*x379))+(((-9.4037412314887)*x376))+(((-0.00389711613406079)*x377))+((cj1*x378))+((sj1*x381))+(((-1.0)*sj1*x380))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x382=IKsin(j3);
IkReal x383=IKcos(j3);
IkReal x384=(cj5*cj6);
IkReal x385=(r01*sj0);
IkReal x386=((1.0)*cj5);
IkReal x387=(cj0*sj6);
IkReal x388=((0.026255)*cj6);
IkReal x389=(r00*sj0);
IkReal x390=(r02*sj0);
IkReal x391=((1.0)*sj5);
IkReal x392=(r20*sj6);
IkReal x393=((1.0)*cj0);
IkReal x394=(cj0*r12);
IkReal x395=(cj1*x383);
IkReal x396=((1.0)*x382);
IkReal x397=(sj1*x383);
IkReal x398=(sj1*x382);
IkReal x399=(cj1*x396);
IkReal x400=((1.0)*x397);
IkReal x401=(x399+x400);
evalcond[0]=((((0.02566)*x398))+(((-0.0001)*sj1))+(((-0.2413)*cj1))+pz+(((-0.02566)*x395)));
evalcond[1]=(((cj5*x392))+((r21*x384))+(((-1.0)*r22*x391))+(((-1.0)*x401)));
evalcond[2]=((((-1.0)*x395))+(((-1.0)*cj6*r21*x391))+(((-1.0)*r22*x386))+x398+(((-1.0)*x391*x392)));
evalcond[3]=(((x384*x385))+(((-1.0)*sj1*x396))+(((-1.0)*r11*x384*x393))+x395+((sj5*x394))+(((-1.0)*x390*x391))+((cj5*sj6*x389))+(((-1.0)*r10*x386*x387)));
evalcond[4]=(((r10*sj5*x387))+(((-1.0)*x386*x390))+((cj5*x394))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x385*x391))+(((-1.0)*sj6*x389*x391))+(((-1.0)*x401)));
evalcond[5]=((((-0.026255)*sj6*x385))+(((-0.02566)*cj1*x382))+((x388*x389))+(((-1.0)*py*x393))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x387))+(((-0.02566)*x397))+(((-0.2413)*sj1))+(((-1.0)*cj0*r10*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x402=(cj6*r21);
IkReal x403=(cj4*r22);
IkReal x404=(cj1*sj5);
IkReal x405=(r20*sj6);
IkReal x406=(cj5*sj1);
IkReal x407=(cj1*cj5);
IkReal x408=((1.0)*sj1*sj5);
CheckValue<IkReal> x409 = IKatan2WithCheck(IkReal((((cj4*x405*x407))+(((-1.0)*x403*x404))+(((-1.0)*x402*x408))+(((-1.0)*r22*x406))+(((-1.0)*x405*x408))+((cj4*x402*x407)))),(((cj4*x405*x406))+((x404*x405))+((r22*x407))+(((-1.0)*x403*x408))+((cj4*x402*x406))+((x402*x404))),IKFAST_ATAN2_MAGTHRESH);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x410.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x409.value)+(((1.5707963267949)*(x410.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x411=IKsin(j3);
IkReal x412=IKcos(j3);
IkReal x413=(cj0*r10);
IkReal x414=((0.026255)*cj6);
IkReal x415=(cj5*cj6);
IkReal x416=(r01*sj0);
IkReal x417=((1.0)*cj5);
IkReal x418=(r00*sj0);
IkReal x419=((0.0718)*cj4);
IkReal x420=(r02*sj0);
IkReal x421=((1.0)*sj5);
IkReal x422=((1.0)*sj6);
IkReal x423=((0.02626)*sj4);
IkReal x424=(r20*sj6);
IkReal x425=((1.0)*cj0);
IkReal x426=(cj0*r12);
IkReal x427=((0.026255)*sj6);
IkReal x428=(sj1*x411);
IkReal x429=(cj0*r11*sj6);
IkReal x430=(cj1*x412);
IkReal x431=(sj1*x412);
IkReal x432=(cj1*x411);
IkReal x433=(sj4*x430);
IkReal x434=((1.0)*x432);
evalcond[0]=(((sj4*x428))+(((-1.0)*x433))+(((-1.0)*r21*x422))+((cj6*r20)));
evalcond[1]=((((-1.0)*x434))+(((-1.0)*x431))+((cj5*x424))+((r21*x415))+(((-1.0)*r22*x421)));
evalcond[2]=((((-1.0)*x421*x424))+((cj4*x430))+(((-1.0)*cj4*x428))+(((-1.0)*cj6*r21*x421))+(((-1.0)*r22*x417)));
evalcond[3]=(((cj6*x418))+(((-1.0)*sj4*x431))+(((-1.0)*x416*x422))+(((-1.0)*cj6*x413))+x429+(((-1.0)*sj4*x434)));
evalcond[4]=((((-1.0)*x428))+(((-1.0)*x420*x421))+((x415*x416))+((cj5*sj6*x418))+x430+((sj5*x426))+(((-1.0)*r11*x415*x425))+(((-1.0)*sj6*x413*x417)));
evalcond[5]=(((sj5*sj6*x413))+((cj4*x432))+((cj4*x431))+((cj5*x426))+((cj0*cj6*r11*sj5))+(((-1.0)*sj6*x418*x421))+(((-1.0)*x417*x420))+(((-1.0)*cj6*x416*x421)));
evalcond[6]=((((-0.09746)*x430))+(((-0.0001)*sj1))+(((0.09746)*x428))+((x419*x428))+(((-1.0)*r21*x427))+(((-0.2413)*cj1))+pz+((r20*x414))+((x423*x428))+(((-1.0)*x419*x430))+(((-1.0)*x423*x430)));
evalcond[7]=((((-1.0)*x416*x427))+(((-0.09746)*x432))+(((-0.09746)*x431))+((x414*x418))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x413*x414))+(((-0.2413)*sj1))+(((-1.0)*x419*x431))+(((-1.0)*x419*x432))+(((-1.0)*py*x425))+((cj0*r11*x427))+(((-1.0)*x423*x431))+(((-1.0)*x423*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x435=(cj1*cj6);
IkReal x436=(cj6*sj1);
IkReal x437=((1.0)*sj6);
IkReal x438=(r01*sj0);
IkReal x439=(r00*sj0);
IkReal x440=((1.0)*cj0*r10);
IkReal x441=(cj0*r11*sj6);
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x442.valid){
continue;
}
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x436))+((cj1*x441))+(((-1.0)*x435*x440))+(((-1.0)*cj1*x437*x438))+((r21*sj1*sj6))+((x435*x439)))),(((x436*x439))+((sj1*x441))+(((-1.0)*cj1*r21*x437))+(((-1.0)*sj1*x437*x438))+(((-1.0)*x436*x440))+((r20*x435))),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x442.value)))+(x443.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x444=IKsin(j3);
IkReal x445=IKcos(j3);
IkReal x446=(cj0*r10);
IkReal x447=((0.026255)*cj6);
IkReal x448=(cj5*cj6);
IkReal x449=(r01*sj0);
IkReal x450=((1.0)*cj5);
IkReal x451=(r00*sj0);
IkReal x452=((0.0718)*cj4);
IkReal x453=(r02*sj0);
IkReal x454=((1.0)*sj5);
IkReal x455=((1.0)*sj6);
IkReal x456=((0.02626)*sj4);
IkReal x457=(r20*sj6);
IkReal x458=((1.0)*cj0);
IkReal x459=(cj0*r12);
IkReal x460=((0.026255)*sj6);
IkReal x461=(sj1*x444);
IkReal x462=(cj0*r11*sj6);
IkReal x463=(cj1*x445);
IkReal x464=(sj1*x445);
IkReal x465=(cj1*x444);
IkReal x466=(sj4*x463);
IkReal x467=((1.0)*x465);
evalcond[0]=((((-1.0)*x466))+((sj4*x461))+((cj6*r20))+(((-1.0)*r21*x455)));
evalcond[1]=(((cj5*x457))+((r21*x448))+(((-1.0)*x464))+(((-1.0)*x467))+(((-1.0)*r22*x454)));
evalcond[2]=(((cj4*x463))+(((-1.0)*cj4*x461))+(((-1.0)*x454*x457))+(((-1.0)*cj6*r21*x454))+(((-1.0)*r22*x450)));
evalcond[3]=((((-1.0)*sj4*x464))+(((-1.0)*sj4*x467))+((cj6*x451))+(((-1.0)*cj6*x446))+x462+(((-1.0)*x449*x455)));
evalcond[4]=(((cj5*sj6*x451))+(((-1.0)*x461))+(((-1.0)*r11*x448*x458))+(((-1.0)*sj6*x446*x450))+x463+(((-1.0)*x453*x454))+((x448*x449))+((sj5*x459)));
evalcond[5]=(((cj5*x459))+((cj4*x464))+((cj4*x465))+((sj5*sj6*x446))+((cj0*cj6*r11*sj5))+(((-1.0)*x450*x453))+(((-1.0)*sj6*x451*x454))+(((-1.0)*cj6*x449*x454)));
evalcond[6]=(((x456*x461))+((x452*x461))+(((-0.0001)*sj1))+(((-1.0)*x456*x463))+(((-0.09746)*x463))+(((0.09746)*x461))+(((-0.2413)*cj1))+pz+(((-1.0)*x452*x463))+(((-1.0)*r21*x460))+((r20*x447)));
evalcond[7]=((((-1.0)*x456*x465))+(((-1.0)*x456*x464))+(((-0.09746)*x464))+(((-0.09746)*x465))+((x447*x451))+(((-1.0)*py*x458))+((cj0*r11*x460))+(((-1.0)*x452*x464))+(((-1.0)*x452*x465))+(((0.0001)*cj1))+((px*sj0))+(((-0.2413)*sj1))+(((-1.0)*x449*x460))+(((-1.0)*x446*x447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x468=(cj1*cj6);
IkReal x469=((1.0)*cj1);
IkReal x470=(r21*sj6);
IkReal x471=(cj6*sj1);
IkReal x472=(cj5*r21*sj4);
IkReal x473=(r22*sj4*sj5);
IkReal x474=(cj5*r20*sj4*sj6);
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(((((-1.0)*x469*x473))+((cj1*x474))+((sj1*x470))+(((-1.0)*r20*x471))+((x468*x472)))),(((x471*x472))+((r20*x468))+(((-1.0)*x469*x470))+(((-1.0)*sj1*x473))+((sj1*x474))),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x476.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x475.value)+(((1.5707963267949)*(x476.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x477=IKsin(j3);
IkReal x478=IKcos(j3);
IkReal x479=(cj0*r10);
IkReal x480=((0.026255)*cj6);
IkReal x481=(cj5*cj6);
IkReal x482=(r01*sj0);
IkReal x483=((1.0)*cj5);
IkReal x484=(r00*sj0);
IkReal x485=((0.0718)*cj4);
IkReal x486=(r02*sj0);
IkReal x487=((1.0)*sj5);
IkReal x488=((1.0)*sj6);
IkReal x489=((0.02626)*sj4);
IkReal x490=(r20*sj6);
IkReal x491=((1.0)*cj0);
IkReal x492=(cj0*r12);
IkReal x493=((0.026255)*sj6);
IkReal x494=(sj1*x477);
IkReal x495=(cj0*r11*sj6);
IkReal x496=(cj1*x478);
IkReal x497=(sj1*x478);
IkReal x498=(cj1*x477);
IkReal x499=(sj4*x496);
IkReal x500=((1.0)*x498);
evalcond[0]=(((sj4*x494))+(((-1.0)*x499))+((cj6*r20))+(((-1.0)*r21*x488)));
evalcond[1]=((((-1.0)*x500))+((cj5*x490))+(((-1.0)*x497))+((r21*x481))+(((-1.0)*r22*x487)));
evalcond[2]=((((-1.0)*cj4*x494))+((cj4*x496))+(((-1.0)*x487*x490))+(((-1.0)*r22*x483))+(((-1.0)*cj6*r21*x487)));
evalcond[3]=((((-1.0)*sj4*x500))+x495+(((-1.0)*cj6*x479))+(((-1.0)*sj4*x497))+(((-1.0)*x482*x488))+((cj6*x484)));
evalcond[4]=((((-1.0)*x486*x487))+(((-1.0)*sj6*x479*x483))+((x481*x482))+(((-1.0)*x494))+((cj5*sj6*x484))+(((-1.0)*r11*x481*x491))+x496+((sj5*x492)));
evalcond[5]=((((-1.0)*x483*x486))+((cj5*x492))+(((-1.0)*cj6*x482*x487))+((cj4*x497))+((cj4*x498))+(((-1.0)*sj6*x484*x487))+((cj0*cj6*r11*sj5))+((sj5*sj6*x479)));
evalcond[6]=((((-1.0)*r21*x493))+((r20*x480))+(((0.09746)*x494))+(((-1.0)*x489*x496))+((x489*x494))+(((-0.0001)*sj1))+(((-0.2413)*cj1))+pz+(((-1.0)*x485*x496))+((x485*x494))+(((-0.09746)*x496)));
evalcond[7]=((((-1.0)*x482*x493))+(((-1.0)*x489*x498))+(((-1.0)*x489*x497))+((cj0*r11*x493))+((x480*x484))+(((-1.0)*x479*x480))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x485*x498))+(((-1.0)*x485*x497))+(((-0.2413)*sj1))+(((-1.0)*py*x491))+(((-0.09746)*x497))+(((-0.09746)*x498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x501=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((r12*sj0*sj5))+(((-1.0)*cj0*cj6*r01*x501))+(((-1.0)*cj0*r00*sj6*x501))+(((-1.0)*cj6*r11*sj0*x501))+(((-1.0)*r10*sj0*sj6*x501))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x502=(r11*sj0);
IkReal x503=(r10*sj0);
IkReal x504=((1.0)*cj6);
IkReal x505=(cj6*sj5);
IkReal x506=(sj5*sj6);
IkReal x507=(cj0*r00);
IkReal x508=(cj0*r01);
if( IKabs((((cj5*r12*sj0))+((cj0*cj5*r02))+((x506*x507))+((x505*x508))+((x503*x506))+((x502*x505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x508))+((sj6*x502))+(((-1.0)*x503*x504))+(((-1.0)*x504*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12*sj0))+((cj0*cj5*r02))+((x506*x507))+((x505*x508))+((x503*x506))+((x502*x505))))+IKsqr((((sj6*x508))+((sj6*x502))+(((-1.0)*x503*x504))+(((-1.0)*x504*x507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r12*sj0))+((cj0*cj5*r02))+((x506*x507))+((x505*x508))+((x503*x506))+((x502*x505))), (((sj6*x508))+((sj6*x502))+(((-1.0)*x503*x504))+(((-1.0)*x504*x507))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x509=IKsin(j4);
IkReal x510=IKcos(j4);
IkReal x511=(r11*sj0);
IkReal x512=(r10*sj0);
IkReal x513=((1.0)*cj6);
IkReal x514=((0.026255)*cj0);
IkReal x515=(r01*sj6);
IkReal x516=(cj6*sj5);
IkReal x517=(sj5*sj6);
IkReal x518=(cj0*r00);
evalcond[0]=(((cj0*x515))+(((-1.0)*x510))+(((-1.0)*x513*x518))+(((-1.0)*x512*x513))+((sj6*x511)));
evalcond[1]=(((cj5*r12*sj0))+((x511*x516))+((cj0*cj5*r02))+((x512*x517))+((x517*x518))+(((-1.0)*x509))+((cj0*r01*x516)));
evalcond[2]=((-0.0019)+(((-0.026255)*cj6*x512))+((x514*x515))+(((0.0718)*x509))+(((-1.0)*py*sj0))+(((-1.0)*cj6*r00*x514))+(((-0.02626)*x510))+(((-1.0)*cj0*px))+(((0.026255)*sj6*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x519=(cj6*r21);
IkReal x520=(r20*sj6);
IkReal x521=(sj1*sj4);
IkReal x522=(r22*sj5);
IkReal x523=(r21*sj6);
IkReal x524=((1.0)*cj6*r20);
IkReal x525=((1.0)*cj1*cj5*sj4);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((cj5*x520*x521))+((cj5*x519*x521))+(((-1.0)*cj1*x524))+((cj1*x523))+(((-1.0)*x521*x522)))))+(IKabs(((((-1.0)*sj1*x524))+(((-1.0)*x520*x525))+((sj1*x523))+((cj1*sj4*x522))+(((-1.0)*x519*x525))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x526=(r11*sj0);
IkReal x527=(cj0*sj6);
IkReal x528=(cj6*sj5);
IkReal x529=(r10*sj0);
IkReal x530=(sj5*sj6);
IkReal x531=((1.0)*cj5);
IkReal x532=(cj5*r12);
IkReal x533=(cj0*r02);
IkReal x534=((1.0)*sj0);
IkReal x535=((1.0)*cj6);
IkReal x536=(cj0*cj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x529*x535))+(((-1.0)*cj0*r00*x535))+((sj6*x526))+((r01*x527)));
evalcond[2]=((((-1.0)*r22*x531))+(((-1.0)*r20*x530))+(((-1.0)*r21*x528)));
evalcond[3]=((((-1.0)*r01*x531*x536))+(((-1.0)*sj6*x529*x531))+(((-1.0)*cj6*x526*x531))+((r12*sj0*sj5))+((sj5*x533))+(((-1.0)*r00*x527*x531)));
evalcond[4]=((-1.0)+((r00*sj5*x527))+((sj0*x532))+((cj5*x533))+((x526*x528))+((cj0*r01*x528))+((x529*x530)));
evalcond[5]=(((cj0*r11*x528))+((cj0*x532))+(((-1.0)*r00*x530*x534))+((r10*sj5*x527))+(((-1.0)*r02*sj0*x531))+(((-1.0)*r01*x528*x534)));
evalcond[6]=((0.0699)+(((-0.026255)*cj6*x529))+(((0.026255)*r01*x527))+(((-1.0)*py*x534))+(((-0.026255)*r00*x536))+(((0.026255)*sj6*x526))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x537=(r20*sj6);
IkReal x538=(cj6*r21);
IkReal x539=(cj5*sj1);
IkReal x540=(r21*sj6);
IkReal x541=(r22*sj5);
IkReal x542=((1.0)*cj1*cj5);
IkReal x543=((1.0)*cj6*r20);
if( IKabs(((((-1.0)*x537*x542))+((sj1*x540))+(((-1.0)*sj1*x543))+(((-1.0)*x538*x542))+((cj1*x541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x543))+(((-1.0)*sj1*x541))+((cj1*x540))+((x537*x539))+((x538*x539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x537*x542))+((sj1*x540))+(((-1.0)*sj1*x543))+(((-1.0)*x538*x542))+((cj1*x541))))+IKsqr(((((-1.0)*cj1*x543))+(((-1.0)*sj1*x541))+((cj1*x540))+((x537*x539))+((x538*x539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x537*x542))+((sj1*x540))+(((-1.0)*sj1*x543))+(((-1.0)*x538*x542))+((cj1*x541))), ((((-1.0)*cj1*x543))+(((-1.0)*sj1*x541))+((cj1*x540))+((x537*x539))+((x538*x539))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x544=IKsin(j3);
IkReal x545=IKcos(j3);
IkReal x546=(cj5*cj6);
IkReal x547=(r01*sj0);
IkReal x548=(cj0*sj6);
IkReal x549=((1.0)*r10);
IkReal x550=((0.12372)*sj1);
IkReal x551=((0.026255)*sj6);
IkReal x552=((1.0)*sj5);
IkReal x553=((1.0)*sj6);
IkReal x554=(cj5*sj6);
IkReal x555=(cj0*cj6);
IkReal x556=((1.0)*cj0);
IkReal x557=(cj6*r20);
IkReal x558=(cj1*x545);
IkReal x559=(sj1*x544);
IkReal x560=(cj1*x544);
IkReal x561=(cj6*r00*sj0);
IkReal x562=(sj1*x545);
IkReal x563=(x559+x558);
evalcond[0]=((((-1.0)*r21*x553))+x557+x563);
evalcond[1]=(((r21*x546))+(((-1.0)*r22*x552))+((r20*x554))+x560+(((-1.0)*x562)));
evalcond[2]=((((-1.0)*r21*x551))+(((-0.0001)*sj1))+((x544*x550))+(((0.12372)*x558))+(((0.026255)*x557))+(((-0.0097)*cj1))+pz);
evalcond[3]=(((r11*x548))+(((-1.0)*x547*x553))+x562+x561+(((-1.0)*x549*x555))+(((-1.0)*x560)));
evalcond[4]=(((r00*sj0*x554))+(((-1.0)*r11*x546*x556))+((cj0*r12*sj5))+x563+(((-1.0)*r02*sj0*x552))+(((-1.0)*cj5*x548*x549))+((x546*x547)));
evalcond[5]=((((-0.12372)*x560))+(((0.026255)*x561))+(((0.026255)*r11*x548))+(((-1.0)*x547*x551))+(((-0.0097)*sj1))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*py*x556))+(((-0.026255)*r10*x555))+((x545*x550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x564=(r11*sj0);
IkReal x565=(cj0*sj6);
IkReal x566=(cj6*sj5);
IkReal x567=(r10*sj0);
IkReal x568=(sj5*sj6);
IkReal x569=((1.0)*cj5);
IkReal x570=(cj5*r12);
IkReal x571=(cj0*r02);
IkReal x572=((1.0)*sj0);
IkReal x573=((1.0)*cj6);
IkReal x574=(cj0*cj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((r01*x565))+((sj6*x564))+(((-1.0)*cj0*r00*x573))+(((-1.0)*x567*x573)));
evalcond[2]=((((-1.0)*r21*x566))+(((-1.0)*r22*x569))+(((-1.0)*r20*x568)));
evalcond[3]=((((-1.0)*cj6*x564*x569))+((r12*sj0*sj5))+(((-1.0)*sj6*x567*x569))+(((-1.0)*r00*x565*x569))+((sj5*x571))+(((-1.0)*r01*x569*x574)));
evalcond[4]=((1.0)+((cj5*x571))+((x564*x566))+((cj0*r01*x566))+((r00*sj5*x565))+((x567*x568))+((sj0*x570)));
evalcond[5]=(((r10*sj5*x565))+((cj0*x570))+(((-1.0)*r01*x566*x572))+(((-1.0)*r00*x568*x572))+((cj0*r11*x566))+(((-1.0)*r02*sj0*x569)));
evalcond[6]=((-0.0737)+(((-0.026255)*cj6*x567))+(((0.026255)*r01*x565))+(((-1.0)*py*x572))+(((0.026255)*sj6*x564))+(((-0.026255)*r00*x574))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x575=(r20*sj6);
IkReal x576=(cj6*r21);
IkReal x577=(cj6*r20);
IkReal x578=(cj5*sj1);
IkReal x579=(r22*sj5);
IkReal x580=((1.0)*cj1*cj5);
IkReal x581=((1.0)*r21*sj6);
if( IKabs((((sj1*x577))+(((-1.0)*x576*x580))+(((-1.0)*x575*x580))+((cj1*x579))+(((-1.0)*sj1*x581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x576*x578))+((x575*x578))+(((-1.0)*sj1*x579))+(((-1.0)*cj1*x581))+((cj1*x577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x577))+(((-1.0)*x576*x580))+(((-1.0)*x575*x580))+((cj1*x579))+(((-1.0)*sj1*x581))))+IKsqr((((x576*x578))+((x575*x578))+(((-1.0)*sj1*x579))+(((-1.0)*cj1*x581))+((cj1*x577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj1*x577))+(((-1.0)*x576*x580))+(((-1.0)*x575*x580))+((cj1*x579))+(((-1.0)*sj1*x581))), (((x576*x578))+((x575*x578))+(((-1.0)*sj1*x579))+(((-1.0)*cj1*x581))+((cj1*x577))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x582=IKsin(j3);
IkReal x583=IKcos(j3);
IkReal x584=(cj5*cj6);
IkReal x585=(r01*sj0);
IkReal x586=((0.0712)*sj1);
IkReal x587=((1.0)*sj6);
IkReal x588=(cj0*r10);
IkReal x589=((0.026255)*sj6);
IkReal x590=(cj0*r11);
IkReal x591=((1.0)*sj5);
IkReal x592=(cj5*sj6);
IkReal x593=((0.026255)*cj6);
IkReal x594=(cj1*x582);
IkReal x595=(cj1*x583);
IkReal x596=(cj6*r00*sj0);
IkReal x597=(sj1*x582);
IkReal x598=((1.0)*sj1*x583);
evalcond[0]=((((-1.0)*x595))+(((-1.0)*x597))+(((-1.0)*r21*x587))+((cj6*r20)));
evalcond[1]=((((-1.0)*x598))+x594+(((-1.0)*r22*x591))+((r20*x592))+((r21*x584)));
evalcond[2]=(((x582*x586))+(((-0.0001)*sj1))+(((-1.0)*r21*x589))+(((-0.0097)*cj1))+pz+(((0.0712)*x595))+((r20*x593)));
evalcond[3]=(((sj6*x590))+(((-1.0)*cj6*x588))+(((-1.0)*x598))+(((-1.0)*x585*x587))+x596+x594);
evalcond[4]=(((x584*x585))+(((-1.0)*x584*x590))+((r00*sj0*x592))+(((-1.0)*cj5*x587*x588))+((cj0*r12*sj5))+x597+x595+(((-1.0)*r02*sj0*x591)));
evalcond[5]=(((r00*sj0*x593))+((x583*x586))+(((-1.0)*x588*x593))+(((-0.0097)*sj1))+(((-0.0712)*x594))+(((-1.0)*x585*x589))+(((0.0001)*cj1))+((px*sj0))+((x589*x590))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x599=(r11*sj0);
IkReal x600=(cj0*sj6);
IkReal x601=(cj6*sj5);
IkReal x602=(r10*sj0);
IkReal x603=((1.0)*cj5);
IkReal x604=(cj0*r02);
IkReal x605=((1.0)*cj6);
IkReal x606=((1.0)*sj0);
IkReal x607=(cj6*r00);
IkReal x608=(r12*sj0);
IkReal x609=(cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
evalcond[2]=((-1.0)+(((-1.0)*x602*x605))+(((-1.0)*cj0*r00*x605))+((sj6*x599))+((r01*x600)));
evalcond[3]=((((-1.0)*cj0*r10*x605))+((sj0*x607))+((r11*x600))+(((-1.0)*r01*sj6*x606)));
evalcond[4]=((((-1.0)*r00*x600*x603))+(((-1.0)*cj6*x603*x609))+((sj5*x604))+((sj5*x608))+(((-1.0)*cj6*x599*x603))+(((-1.0)*sj6*x602*x603)));
evalcond[5]=(((cj5*x604))+((cj5*x608))+((x601*x609))+((r00*sj5*x600))+((sj5*sj6*x602))+((x599*x601)));
evalcond[6]=((-0.02816)+(((0.026255)*sj6*x599))+(((-0.026255)*cj0*x607))+(((-0.026255)*cj6*x602))+(((-1.0)*py*x606))+(((0.026255)*r01*x600))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x610=cj1*cj1;
IkReal x611=((5.90807042419946)*pz);
IkReal x612=(r20*sj6);
IkReal x613=(cj6*r21);
IkReal x614=(cj1*sj1);
IkReal x615=(cj5*sj1);
IkReal x616=(r22*sj5);
IkReal x617=((1.0)*cj1*cj5);
if( IKabs(((0.000590807042419946)+(((-1.0)*x612*x617))+(((-0.000590807042419946)*x610))+(((-1.0)*sj1*x611))+((cj1*x616))+(((-1.0)*x613*x617))+(((0.0573082831147347)*x614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x611))+((x612*x615))+((x613*x615))+(((0.0573082831147347)*x610))+(((0.000590807042419946)*x614))+(((-1.0)*sj1*x616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000590807042419946)+(((-1.0)*x612*x617))+(((-0.000590807042419946)*x610))+(((-1.0)*sj1*x611))+((cj1*x616))+(((-1.0)*x613*x617))+(((0.0573082831147347)*x614))))+IKsqr(((((-1.0)*cj1*x611))+((x612*x615))+((x613*x615))+(((0.0573082831147347)*x610))+(((0.000590807042419946)*x614))+(((-1.0)*sj1*x616))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.000590807042419946)+(((-1.0)*x612*x617))+(((-0.000590807042419946)*x610))+(((-1.0)*sj1*x611))+((cj1*x616))+(((-1.0)*x613*x617))+(((0.0573082831147347)*x614))), ((((-1.0)*cj1*x611))+((x612*x615))+((x613*x615))+(((0.0573082831147347)*x610))+(((0.000590807042419946)*x614))+(((-1.0)*sj1*x616))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x618=IKsin(j3);
IkReal x619=IKcos(j3);
IkReal x620=(cj5*cj6);
IkReal x621=(r01*sj0);
IkReal x622=((1.0)*cj5);
IkReal x623=(cj0*sj6);
IkReal x624=((0.026255)*cj6);
IkReal x625=(r00*sj0);
IkReal x626=(r02*sj0);
IkReal x627=((1.0)*sj5);
IkReal x628=(r20*sj6);
IkReal x629=((1.0)*cj0);
IkReal x630=(cj0*r12);
IkReal x631=(cj1*x618);
IkReal x632=(cj1*x619);
IkReal x633=(sj1*x618);
IkReal x634=(sj1*x619);
IkReal x635=((1.0)*x634);
evalcond[0]=((((-0.0001)*sj1))+(((-0.0097)*cj1))+pz+(((0.16926)*x632))+(((0.16926)*x633)));
evalcond[1]=(((r21*x620))+((cj5*x628))+(((-1.0)*x635))+x631+(((-1.0)*r22*x627)));
evalcond[2]=((((-1.0)*cj6*r21*x627))+(((-1.0)*x627*x628))+(((-1.0)*x632))+(((-1.0)*x633))+(((-1.0)*r22*x622)));
evalcond[3]=((((-1.0)*r10*x622*x623))+((cj5*sj6*x625))+((sj5*x630))+(((-1.0)*r11*x620*x629))+x632+x633+(((-1.0)*x626*x627))+((x620*x621)));
evalcond[4]=(((r10*sj5*x623))+(((-1.0)*cj6*x621*x627))+(((-1.0)*sj6*x625*x627))+(((-1.0)*x622*x626))+(((-1.0)*x635))+((cj5*x630))+((cj0*cj6*r11*sj5))+x631);
evalcond[5]=((((-0.026255)*sj6*x621))+(((-0.16926)*x631))+(((-1.0)*cj0*r10*x624))+(((0.026255)*r11*x623))+(((-0.0097)*sj1))+((x624*x625))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*py*x629))+(((0.16926)*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x636=(r11*sj0);
IkReal x637=(cj0*sj6);
IkReal x638=(cj6*sj5);
IkReal x639=(r10*sj0);
IkReal x640=((1.0)*cj5);
IkReal x641=(cj0*r02);
IkReal x642=((1.0)*cj6);
IkReal x643=((1.0)*sj0);
IkReal x644=(cj6*r00);
IkReal x645=(r12*sj0);
IkReal x646=(cj0*r01);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
evalcond[2]=((1.0)+(((-1.0)*cj0*r00*x642))+(((-1.0)*x639*x642))+((sj6*x636))+((r01*x637)));
evalcond[3]=(((sj0*x644))+(((-1.0)*cj0*r10*x642))+(((-1.0)*r01*sj6*x643))+((r11*x637)));
evalcond[4]=((((-1.0)*cj6*x636*x640))+(((-1.0)*cj6*x640*x646))+((sj5*x645))+((sj5*x641))+(((-1.0)*r00*x637*x640))+(((-1.0)*sj6*x639*x640)));
evalcond[5]=(((x638*x646))+((cj5*x641))+((cj5*x645))+((x636*x638))+((sj5*sj6*x639))+((r00*sj5*x637)));
evalcond[6]=((0.02436)+(((0.026255)*sj6*x636))+(((0.026255)*r01*x637))+(((-0.026255)*cj6*x639))+(((-1.0)*py*x643))+(((-1.0)*cj0*px))+(((-0.026255)*cj0*x644)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x647=cj1*cj1;
IkReal x648=(r20*sj6);
IkReal x649=(cj6*r21);
IkReal x650=((38.9711613406079)*pz);
IkReal x651=(cj5*sj1);
IkReal x652=(cj1*sj1);
IkReal x653=(r22*sj5);
IkReal x654=((1.0)*cj1*cj5);
if( IKabs(((0.00389711613406079)+(((-1.0)*sj1*x650))+(((0.378020265003897)*x652))+((cj1*x653))+(((-0.00389711613406079)*x647))+(((-1.0)*x649*x654))+(((-1.0)*x648*x654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.378020265003897)*x647))+(((-1.0)*cj1*x650))+((x649*x651))+((x648*x651))+(((-1.0)*sj1*x653))+(((0.00389711613406079)*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00389711613406079)+(((-1.0)*sj1*x650))+(((0.378020265003897)*x652))+((cj1*x653))+(((-0.00389711613406079)*x647))+(((-1.0)*x649*x654))+(((-1.0)*x648*x654))))+IKsqr(((((0.378020265003897)*x647))+(((-1.0)*cj1*x650))+((x649*x651))+((x648*x651))+(((-1.0)*sj1*x653))+(((0.00389711613406079)*x652))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00389711613406079)+(((-1.0)*sj1*x650))+(((0.378020265003897)*x652))+((cj1*x653))+(((-0.00389711613406079)*x647))+(((-1.0)*x649*x654))+(((-1.0)*x648*x654))), ((((0.378020265003897)*x647))+(((-1.0)*cj1*x650))+((x649*x651))+((x648*x651))+(((-1.0)*sj1*x653))+(((0.00389711613406079)*x652))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x655=IKsin(j3);
IkReal x656=IKcos(j3);
IkReal x657=(cj5*cj6);
IkReal x658=(r01*sj0);
IkReal x659=((1.0)*cj5);
IkReal x660=(cj0*sj6);
IkReal x661=((0.026255)*cj6);
IkReal x662=(r00*sj0);
IkReal x663=(r02*sj0);
IkReal x664=((1.0)*sj5);
IkReal x665=(r20*sj6);
IkReal x666=((1.0)*cj0);
IkReal x667=(cj0*r12);
IkReal x668=(cj1*x656);
IkReal x669=(sj1*x655);
IkReal x670=(cj1*x655);
IkReal x671=(sj1*x656);
IkReal x672=(x669+x668);
evalcond[0]=((((0.02566)*x668))+(((0.02566)*x669))+(((-0.0001)*sj1))+(((-0.0097)*cj1))+pz);
evalcond[1]=((((-1.0)*r22*x664))+x670+(((-1.0)*x671))+((r21*x657))+((cj5*x665)));
evalcond[2]=((((-1.0)*r22*x659))+x672+(((-1.0)*cj6*r21*x664))+(((-1.0)*x664*x665)));
evalcond[3]=((((-1.0)*r11*x657*x666))+(((-1.0)*r10*x659*x660))+(((-1.0)*x663*x664))+((cj5*sj6*x662))+((x657*x658))+x672+((sj5*x667)));
evalcond[4]=((((-1.0)*x659*x663))+((cj0*cj6*r11*sj5))+x671+(((-1.0)*x670))+((r10*sj5*x660))+(((-1.0)*cj6*x658*x664))+(((-1.0)*sj6*x662*x664))+((cj5*x667)));
evalcond[5]=((((-1.0)*cj0*r10*x661))+(((-0.0097)*sj1))+(((-1.0)*py*x666))+((x661*x662))+(((-0.02566)*x670))+(((0.0001)*cj1))+((px*sj0))+(((0.02566)*x671))+(((-0.026255)*sj6*x658))+(((0.026255)*r11*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x673=(cj6*r21);
IkReal x674=(cj4*r22);
IkReal x675=(r20*sj6);
IkReal x676=(cj5*sj1);
IkReal x677=((1.0)*r22);
IkReal x678=(cj1*cj5);
IkReal x679=((1.0)*cj4);
IkReal x680=((1.0)*sj1*sj5);
IkReal x681=((1.0)*cj1*sj5);
CheckValue<IkReal> x682=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal(((((-1.0)*x673*x678*x679))+(((-1.0)*x675*x680))+(((-1.0)*x675*x678*x679))+(((-1.0)*x673*x680))+(((-1.0)*x676*x677))+((cj1*sj5*x674)))),(((cj4*x675*x676))+(((-1.0)*x675*x681))+(((-1.0)*x673*x681))+(((-1.0)*x674*x680))+((cj4*x673*x676))+(((-1.0)*x677*x678))),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x682.value)))+(x683.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x684=IKsin(j3);
IkReal x685=IKcos(j3);
IkReal x686=(cj0*r10);
IkReal x687=((0.026255)*cj6);
IkReal x688=(cj5*cj6);
IkReal x689=(r01*sj0);
IkReal x690=((1.0)*cj5);
IkReal x691=(r00*sj0);
IkReal x692=((0.0718)*cj4);
IkReal x693=(r02*sj0);
IkReal x694=((1.0)*sj5);
IkReal x695=((0.026255)*sj6);
IkReal x696=((0.02626)*sj4);
IkReal x697=((1.0)*sj6);
IkReal x698=(r20*sj6);
IkReal x699=((1.0)*cj0);
IkReal x700=(cj0*r12);
IkReal x701=((1.0)*cj4*sj1);
IkReal x702=(cj1*x684);
IkReal x703=(cj1*x685);
IkReal x704=(sj1*x684);
IkReal x705=(cj0*r11*sj6);
IkReal x706=(sj1*x685);
evalcond[0]=(((cj6*r20))+(((-1.0)*r21*x697))+((sj4*x703))+((sj4*x704)));
evalcond[1]=(((r21*x688))+(((-1.0)*x706))+(((-1.0)*r22*x694))+x702+((cj5*x698)));
evalcond[2]=((((-1.0)*cj4*x703))+(((-1.0)*cj6*r21*x694))+(((-1.0)*x694*x698))+(((-1.0)*x684*x701))+(((-1.0)*r22*x690)));
evalcond[3]=(((cj6*x691))+(((-1.0)*cj6*x686))+x705+(((-1.0)*x689*x697))+(((-1.0)*sj4*x702))+((sj4*x706)));
evalcond[4]=(((cj5*sj6*x691))+(((-1.0)*sj6*x686*x690))+((x688*x689))+(((-1.0)*x693*x694))+((sj5*x700))+(((-1.0)*r11*x688*x699))+x703+x704);
evalcond[5]=(((cj4*x702))+((cj5*x700))+(((-1.0)*cj6*x689*x694))+(((-1.0)*x685*x701))+((cj0*cj6*r11*sj5))+((sj5*sj6*x686))+(((-1.0)*sj6*x691*x694))+(((-1.0)*x690*x693)));
evalcond[6]=((((-0.0001)*sj1))+((x692*x703))+((x692*x704))+(((-0.0097)*cj1))+pz+(((0.09746)*x704))+(((0.09746)*x703))+((x696*x704))+((x696*x703))+((r20*x687))+(((-1.0)*r21*x695)));
evalcond[7]=(((x687*x691))+((cj0*r11*x695))+(((-0.09746)*x702))+(((-0.0097)*sj1))+((x692*x706))+(((-1.0)*x692*x702))+(((-1.0)*x686*x687))+(((-1.0)*x696*x702))+(((0.09746)*x706))+((x696*x706))+(((-1.0)*py*x699))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x689*x695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x707=((1.0)*cj0);
IkReal x708=(cj1*cj6);
IkReal x709=(sj1*sj6);
IkReal x710=(r01*sj0);
IkReal x711=(r00*sj0);
IkReal x712=(cj6*sj1);
IkReal x713=((1.0)*r20);
IkReal x714=(cj1*sj6);
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(((((-1.0)*x710*x714))+((cj0*r11*x714))+(((-1.0)*r10*x707*x708))+((r21*x709))+(((-1.0)*x712*x713))+((x708*x711)))),((((-1.0)*x711*x712))+((x709*x710))+((r21*x714))+(((-1.0)*x708*x713))+((cj0*r10*x712))+(((-1.0)*r11*x707*x709))),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x716.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x715.value)+(((1.5707963267949)*(x716.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x717=IKsin(j3);
IkReal x718=IKcos(j3);
IkReal x719=(cj0*r10);
IkReal x720=((0.026255)*cj6);
IkReal x721=(cj5*cj6);
IkReal x722=(r01*sj0);
IkReal x723=((1.0)*cj5);
IkReal x724=(r00*sj0);
IkReal x725=((0.0718)*cj4);
IkReal x726=(r02*sj0);
IkReal x727=((1.0)*sj5);
IkReal x728=((0.026255)*sj6);
IkReal x729=((0.02626)*sj4);
IkReal x730=((1.0)*sj6);
IkReal x731=(r20*sj6);
IkReal x732=((1.0)*cj0);
IkReal x733=(cj0*r12);
IkReal x734=((1.0)*cj4*sj1);
IkReal x735=(cj1*x717);
IkReal x736=(cj1*x718);
IkReal x737=(sj1*x717);
IkReal x738=(cj0*r11*sj6);
IkReal x739=(sj1*x718);
evalcond[0]=(((cj6*r20))+(((-1.0)*r21*x730))+((sj4*x737))+((sj4*x736)));
evalcond[1]=(((cj5*x731))+(((-1.0)*x739))+x735+(((-1.0)*r22*x727))+((r21*x721)));
evalcond[2]=((((-1.0)*x727*x731))+(((-1.0)*cj6*r21*x727))+(((-1.0)*x717*x734))+(((-1.0)*r22*x723))+(((-1.0)*cj4*x736)));
evalcond[3]=((((-1.0)*x722*x730))+(((-1.0)*cj6*x719))+(((-1.0)*sj4*x735))+x738+((sj4*x739))+((cj6*x724)));
evalcond[4]=(((x721*x722))+(((-1.0)*r11*x721*x732))+((sj5*x733))+(((-1.0)*sj6*x719*x723))+(((-1.0)*x726*x727))+x737+x736+((cj5*sj6*x724)));
evalcond[5]=(((cj5*x733))+((cj4*x735))+(((-1.0)*x723*x726))+((cj0*cj6*r11*sj5))+(((-1.0)*sj6*x724*x727))+((sj5*sj6*x719))+(((-1.0)*x718*x734))+(((-1.0)*cj6*x722*x727)));
evalcond[6]=((((-0.0001)*sj1))+((r20*x720))+((x729*x737))+((x729*x736))+(((-0.0097)*cj1))+pz+(((-1.0)*r21*x728))+(((0.09746)*x736))+(((0.09746)*x737))+((x725*x737))+((x725*x736)));
evalcond[7]=(((x720*x724))+((cj0*r11*x728))+(((-0.09746)*x735))+(((-1.0)*x722*x728))+((x729*x739))+(((-0.0097)*sj1))+(((-1.0)*x725*x735))+(((0.0001)*cj1))+((px*sj0))+(((0.09746)*x739))+((x725*x739))+(((-1.0)*x719*x720))+(((-1.0)*py*x732))+(((-1.0)*x729*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x740=(cj6*r21);
IkReal x741=(r20*sj6);
IkReal x742=(sj1*sj4);
IkReal x743=(r22*sj5);
IkReal x744=(r21*sj6);
IkReal x745=((1.0)*cj6*r20);
IkReal x746=((1.0)*cj1*cj5*sj4);
CheckValue<IkReal> x747=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x747.valid){
continue;
}
CheckValue<IkReal> x748 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x745))+((cj1*sj4*x743))+((sj1*x744))+(((-1.0)*x740*x746))+(((-1.0)*x741*x746)))),(((cj5*x740*x742))+((cj1*x744))+((cj5*x741*x742))+(((-1.0)*x742*x743))+(((-1.0)*cj1*x745))),IKFAST_ATAN2_MAGTHRESH);
if(!x748.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x747.value)))+(x748.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x749=IKsin(j3);
IkReal x750=IKcos(j3);
IkReal x751=(cj0*r10);
IkReal x752=((0.026255)*cj6);
IkReal x753=(cj5*cj6);
IkReal x754=(r01*sj0);
IkReal x755=((1.0)*cj5);
IkReal x756=(r00*sj0);
IkReal x757=((0.0718)*cj4);
IkReal x758=(r02*sj0);
IkReal x759=((1.0)*sj5);
IkReal x760=((0.026255)*sj6);
IkReal x761=((0.02626)*sj4);
IkReal x762=((1.0)*sj6);
IkReal x763=(r20*sj6);
IkReal x764=((1.0)*cj0);
IkReal x765=(cj0*r12);
IkReal x766=((1.0)*cj4*sj1);
IkReal x767=(cj1*x749);
IkReal x768=(cj1*x750);
IkReal x769=(sj1*x749);
IkReal x770=(cj0*r11*sj6);
IkReal x771=(sj1*x750);
evalcond[0]=((((-1.0)*r21*x762))+((sj4*x768))+((sj4*x769))+((cj6*r20)));
evalcond[1]=(((r21*x753))+((cj5*x763))+(((-1.0)*r22*x759))+x767+(((-1.0)*x771)));
evalcond[2]=((((-1.0)*r22*x755))+(((-1.0)*cj4*x768))+(((-1.0)*cj6*r21*x759))+(((-1.0)*x759*x763))+(((-1.0)*x749*x766)));
evalcond[3]=(((sj4*x771))+((cj6*x756))+(((-1.0)*x754*x762))+x770+(((-1.0)*cj6*x751))+(((-1.0)*sj4*x767)));
evalcond[4]=((((-1.0)*sj6*x751*x755))+((cj5*sj6*x756))+x768+x769+(((-1.0)*x758*x759))+((x753*x754))+(((-1.0)*r11*x753*x764))+((sj5*x765)));
evalcond[5]=(((sj5*sj6*x751))+(((-1.0)*x750*x766))+(((-1.0)*cj6*x754*x759))+(((-1.0)*x755*x758))+((cj0*cj6*r11*sj5))+((cj5*x765))+((cj4*x767))+(((-1.0)*sj6*x756*x759)));
evalcond[6]=(((x757*x768))+((x757*x769))+(((-0.0001)*sj1))+((x761*x769))+((x761*x768))+(((-1.0)*r21*x760))+(((-0.0097)*cj1))+pz+(((0.09746)*x769))+(((0.09746)*x768))+((r20*x752)));
evalcond[7]=((((-1.0)*py*x764))+(((0.09746)*x771))+((x752*x756))+((cj0*r11*x760))+(((-0.0097)*sj1))+(((-1.0)*x754*x760))+(((-1.0)*x757*x767))+(((-1.0)*x751*x752))+(((0.0001)*cj1))+((px*sj0))+((x757*x771))+((x761*x771))+(((-1.0)*x761*x767))+(((-0.09746)*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x772=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj6*r11*sj0*x772))+((r12*sj0*sj5))+(((-1.0)*cj0*r00*sj6*x772))+(((-1.0)*r10*sj0*sj6*x772))+(((-1.0)*cj0*cj6*r01*x772))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x773=(cj5*cj6);
IkReal x774=((1.0)*cj0);
IkReal x775=((1.0)*sj5);
IkReal x776=(cj5*sj6);
if( IKabs(((((-1.0)*r10*x774*x776))+(((-1.0)*r11*x773*x774))+(((-1.0)*r02*sj0*x775))+((r01*sj0*x773))+((cj0*r12*sj5))+((r00*sj0*x776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x775))+((r21*x773))+((r20*x776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x774*x776))+(((-1.0)*r11*x773*x774))+(((-1.0)*r02*sj0*x775))+((r01*sj0*x773))+((cj0*r12*sj5))+((r00*sj0*x776))))+IKsqr(((((-1.0)*r22*x775))+((r21*x773))+((r20*x776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x774*x776))+(((-1.0)*r11*x773*x774))+(((-1.0)*r02*sj0*x775))+((r01*sj0*x773))+((cj0*r12*sj5))+((r00*sj0*x776))), ((((-1.0)*r22*x775))+((r21*x773))+((r20*x776))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x777=(cj5*cj6);
IkReal x778=((1.0)*cj0);
IkReal x779=((1.0)*sj5);
IkReal x780=(cj5*sj6);
evalcond[0]=(((r20*x780))+(((-1.0)*r22*x779))+((r21*x777))+(((-1.0)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r10*x778*x780))+(((-1.0)*r02*sj0*x779))+((r01*sj0*x777))+(((-1.0)*(IKsin(j3))))+((cj0*r12*sj5))+((r00*sj0*x780))+(((-1.0)*r11*x777*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x781=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x781))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x781))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x782=(cj5*cj6);
IkReal x783=((1.0)*sj0);
IkReal x784=((1.0)*r22);
IkReal x785=(cj0*sj5);
IkReal x786=(cj5*sj6);
IkReal x787=((1.0)*cj0);
IkReal x788=(cj6*r20);
IkReal x789=((1.0)*sj5);
IkReal x790=(r21*sj6);
IkReal x791=(x786*x787);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x786))+(((-1.0)*sj5*x784))+((r21*x782)));
evalcond[2]=(x788+(((-1.0)*x790)));
evalcond[3]=((((-1.0)*cj6*r21*x789))+(((-1.0)*cj5*x784))+(((-1.0)*r20*sj6*x789)));
evalcond[4]=((((-1.0)*r00*x791))+((r12*sj0*sj5))+((r02*x785))+(((-1.0)*r10*x783*x786))+(((-1.0)*r11*x782*x783))+(((-1.0)*r01*x782*x787)));
evalcond[5]=(((r01*sj0*x782))+(((-1.0)*r11*x782*x787))+(((-1.0)*r10*x791))+(((-1.0)*r02*sj5*x783))+((r12*x785))+((r00*sj0*x786)));
evalcond[6]=((-0.0001)+pz+(((0.026255)*x788))+(((-0.026255)*x790)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x792=(cj0*cj6);
IkReal x793=(cj6*sj0);
IkReal x794=(cj0*sj6);
IkReal x795=((1.0)*sj0*sj6);
if( IKabs((((r00*x793))+(((-1.0)*r01*x795))+(((-1.0)*r10*x792))+((r11*x794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x792))+(((-1.0)*r01*x794))+((r10*x793))+(((-1.0)*r11*x795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x793))+(((-1.0)*r01*x795))+(((-1.0)*r10*x792))+((r11*x794))))+IKsqr((((r00*x792))+(((-1.0)*r01*x794))+((r10*x793))+(((-1.0)*r11*x795))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x793))+(((-1.0)*r01*x795))+(((-1.0)*r10*x792))+((r11*x794))), (((r00*x792))+(((-1.0)*r01*x794))+((r10*x793))+(((-1.0)*r11*x795))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x796=IKsin(j4);
IkReal x797=IKcos(j4);
IkReal x798=(r11*sj6);
IkReal x799=((0.026255)*cj0);
IkReal x800=(r01*sj6);
IkReal x801=(sj0*sj5);
IkReal x802=(cj6*r11);
IkReal x803=(r10*sj6);
IkReal x804=(cj5*r12);
IkReal x805=(cj6*sj0);
IkReal x806=((1.0)*sj0);
IkReal x807=(cj5*r02);
IkReal x808=((1.0)*r10);
IkReal x809=(cj0*sj5);
IkReal x810=(r00*sj6);
IkReal x811=((0.026255)*sj0);
IkReal x812=(cj0*cj6);
IkReal x813=((1.0)*cj0);
IkReal x814=(cj6*r01);
evalcond[0]=((((-1.0)*x805*x808))+(((-1.0)*r00*x812))+((sj0*x798))+((cj0*x800))+x797);
evalcond[1]=((((-1.0)*x808*x812))+(((-1.0)*x800*x806))+((r00*x805))+(((-1.0)*x796))+((cj0*x798)));
evalcond[2]=(((x809*x810))+((x809*x814))+((sj0*x804))+((cj0*x807))+((x801*x803))+((x801*x802))+x796);
evalcond[3]=((((-1.0)*x806*x807))+((x803*x809))+((cj0*x804))+(((-1.0)*x801*x814))+(((-1.0)*x801*x810))+x797+((x802*x809)));
evalcond[4]=((-0.33876)+(((-1.0)*cj6*r10*x799))+(((0.026255)*r00*x805))+(((-1.0)*py*x813))+(((-0.02626)*x796))+(((-0.0718)*x797))+((x798*x799))+((px*sj0))+(((-1.0)*x800*x811)));
evalcond[5]=((-0.0001)+(((-0.026255)*r10*x805))+(((0.02626)*x797))+(((-1.0)*cj6*r00*x799))+((x799*x800))+(((-0.0718)*x796))+(((-1.0)*px*x813))+(((-1.0)*py*x806))+((x798*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x815=(cj5*cj6);
IkReal x816=((1.0)*sj0);
IkReal x817=((1.0)*r22);
IkReal x818=(cj0*sj5);
IkReal x819=(cj5*sj6);
IkReal x820=((1.0)*cj0);
IkReal x821=(cj6*r20);
IkReal x822=((1.0)*sj5);
IkReal x823=(r21*sj6);
IkReal x824=(x819*x820);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x819))+(((-1.0)*sj5*x817))+((r21*x815)));
evalcond[2]=((((-1.0)*x823))+x821);
evalcond[3]=((((-1.0)*cj5*x817))+(((-1.0)*cj6*r21*x822))+(((-1.0)*r20*sj6*x822)));
evalcond[4]=((((-1.0)*r11*x815*x816))+((r12*sj0*sj5))+(((-1.0)*r10*x816*x819))+(((-1.0)*r01*x815*x820))+(((-1.0)*r00*x824))+((r02*x818)));
evalcond[5]=(((r01*sj0*x815))+(((-1.0)*r11*x815*x820))+(((-1.0)*r02*sj5*x816))+(((-1.0)*r10*x824))+((r12*x818))+((r00*sj0*x819)));
evalcond[6]=((-0.0001)+pz+(((0.026255)*x821))+(((-0.026255)*x823)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x825=(cj0*cj6);
IkReal x826=(sj0*sj6);
IkReal x827=((1.0)*r11);
IkReal x828=(cj6*sj0);
IkReal x829=(cj0*sj6);
if( IKabs(((((-1.0)*x827*x829))+((r10*x825))+((r01*x826))+(((-1.0)*r00*x828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x829))+((r10*x828))+((r00*x825))+(((-1.0)*x826*x827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x827*x829))+((r10*x825))+((r01*x826))+(((-1.0)*r00*x828))))+IKsqr(((((-1.0)*r01*x829))+((r10*x828))+((r00*x825))+(((-1.0)*x826*x827))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x827*x829))+((r10*x825))+((r01*x826))+(((-1.0)*r00*x828))), ((((-1.0)*r01*x829))+((r10*x828))+((r00*x825))+(((-1.0)*x826*x827))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x830=IKsin(j4);
IkReal x831=IKcos(j4);
IkReal x832=(r11*sj6);
IkReal x833=((0.026255)*cj0);
IkReal x834=(r01*sj6);
IkReal x835=(sj0*sj5);
IkReal x836=(cj6*r11);
IkReal x837=(r10*sj6);
IkReal x838=(cj5*r12);
IkReal x839=(cj6*sj0);
IkReal x840=((1.0)*sj0);
IkReal x841=(cj5*r02);
IkReal x842=((1.0)*r10);
IkReal x843=(cj0*sj5);
IkReal x844=(r00*sj6);
IkReal x845=((0.026255)*sj0);
IkReal x846=(cj0*cj6);
IkReal x847=((1.0)*cj0);
IkReal x848=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x846))+((cj0*x834))+(((-1.0)*x839*x842))+x831+((sj0*x832)));
evalcond[1]=(((cj0*x832))+((r00*x839))+(((-1.0)*x842*x846))+(((-1.0)*x834*x840))+x830);
evalcond[2]=(((cj0*x841))+((x835*x836))+((x835*x837))+((x843*x848))+((x843*x844))+x830+((sj0*x838)));
evalcond[3]=((((-1.0)*x840*x841))+((cj0*x838))+((x837*x843))+((x836*x843))+(((-1.0)*x831))+(((-1.0)*x835*x848))+(((-1.0)*x835*x844)));
evalcond[4]=((-0.14384)+(((-1.0)*py*x847))+((x832*x833))+(((-1.0)*x834*x845))+(((0.0718)*x831))+((px*sj0))+(((0.02626)*x830))+(((0.026255)*r00*x839))+(((-1.0)*cj6*r10*x833)));
evalcond[5]=((-0.0001)+(((-1.0)*py*x840))+((x833*x834))+((x832*x845))+(((-1.0)*px*x847))+(((-1.0)*cj6*r00*x833))+(((-0.026255)*r10*x839))+(((0.02626)*x831))+(((-0.0718)*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x849=((1.0)*sj6);
CheckValue<IkReal> x850=IKPowWithIntegerCheck(sj3,-1);
if(!x850.valid){
continue;
}
if( IKabs(((x850.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x849))+(((-1.0)*cj0*r01*x849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x850.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))+IKsqr((((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x849))+(((-1.0)*cj0*r01*x849))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x850.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))), (((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x849))+(((-1.0)*cj0*r01*x849))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x851=IKcos(j4);
IkReal x852=IKsin(j4);
IkReal x853=(r11*sj0);
IkReal x854=((0.026255)*sj6);
IkReal x855=(cj0*r01);
IkReal x856=(cj6*sj5);
IkReal x857=(r10*sj0);
IkReal x858=(sj5*sj6);
IkReal x859=(cj0*r11);
IkReal x860=((1.0)*cj5);
IkReal x861=((1.0)*cj6);
IkReal x862=(cj0*r10);
IkReal x863=((1.0)*sj0);
IkReal x864=(cj0*r00);
IkReal x865=(cj5*r12);
IkReal x866=((0.026255)*cj6);
IkReal x867=((1.0)*r21);
IkReal x868=((1.0)*cj0);
IkReal x869=(cj3*x852);
IkReal x870=(sj3*x852);
IkReal x871=(r00*x866);
IkReal x872=(sj3*x851);
IkReal x873=(cj3*x851);
evalcond[0]=((((-1.0)*sj6*x867))+((cj6*r20))+x870);
evalcond[1]=((((-1.0)*x872))+(((-1.0)*r20*x858))+(((-1.0)*x856*x867))+(((-1.0)*r22*x860)));
evalcond[2]=((((-1.0)*x861*x864))+x851+((sj6*x855))+((sj6*x853))+(((-1.0)*x857*x861)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*x869))+(((-1.0)*x861*x862))+(((-1.0)*r01*sj6*x863))+((sj6*x859)));
evalcond[4]=((-0.0001)+(((0.02626)*x870))+pz+(((-1.0)*r21*x854))+(((0.09746)*sj3))+((r20*x866))+(((0.0718)*x872)));
evalcond[5]=(((cj0*cj5*r02))+((x855*x856))+((x858*x864))+((sj0*x865))+((x857*x858))+x852+((x853*x856)));
evalcond[6]=(((cj0*x865))+(((-1.0)*r02*sj0*x860))+(((-1.0)*r00*x858*x863))+((x858*x862))+((x856*x859))+x873+(((-1.0)*r01*x856*x863)));
evalcond[7]=((-0.0001)+(((0.02626)*x851))+(((-1.0)*x864*x866))+(((-0.0718)*x852))+(((-1.0)*py*x863))+((x854*x855))+((x853*x854))+(((-1.0)*px*x868))+(((-1.0)*x857*x866)));
evalcond[8]=((-0.2413)+(((-0.02626)*x869))+(((-0.0718)*x873))+(((-1.0)*x862*x866))+((sj0*x871))+(((-1.0)*py*x868))+(((-0.09746)*cj3))+((x854*x859))+((px*sj0))+(((-1.0)*r01*sj0*x854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x874=((1.0)*sj5);
CheckValue<IkReal> x875=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x875.valid){
continue;
}
CheckValue<IkReal> x876 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x874))+(((-1.0)*r20*sj6*x874))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x875.value)))+(x876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x877=IKcos(j4);
IkReal x878=IKsin(j4);
IkReal x879=(r11*sj0);
IkReal x880=((0.026255)*sj6);
IkReal x881=(cj0*r01);
IkReal x882=(cj6*sj5);
IkReal x883=(r10*sj0);
IkReal x884=(sj5*sj6);
IkReal x885=(cj0*r11);
IkReal x886=((1.0)*cj5);
IkReal x887=((1.0)*cj6);
IkReal x888=(cj0*r10);
IkReal x889=((1.0)*sj0);
IkReal x890=(cj0*r00);
IkReal x891=(cj5*r12);
IkReal x892=((0.026255)*cj6);
IkReal x893=((1.0)*r21);
IkReal x894=((1.0)*cj0);
IkReal x895=(cj3*x878);
IkReal x896=(sj3*x878);
IkReal x897=(r00*x892);
IkReal x898=(sj3*x877);
IkReal x899=(cj3*x877);
evalcond[0]=((((-1.0)*sj6*x893))+((cj6*r20))+x896);
evalcond[1]=((((-1.0)*x882*x893))+(((-1.0)*r20*x884))+(((-1.0)*x898))+(((-1.0)*r22*x886)));
evalcond[2]=((((-1.0)*x883*x887))+((sj6*x881))+((sj6*x879))+x877+(((-1.0)*x887*x890)));
evalcond[3]=((((-1.0)*x887*x888))+(((-1.0)*r01*sj6*x889))+((cj6*r00*sj0))+(((-1.0)*x895))+((sj6*x885)));
evalcond[4]=((-0.0001)+((r20*x892))+(((0.02626)*x896))+pz+(((0.09746)*sj3))+(((0.0718)*x898))+(((-1.0)*r21*x880)));
evalcond[5]=(((x884*x890))+((sj0*x891))+((x879*x882))+((x881*x882))+((cj0*cj5*r02))+((x883*x884))+x878);
evalcond[6]=(((cj0*x891))+((x882*x885))+(((-1.0)*r00*x884*x889))+(((-1.0)*r01*x882*x889))+x899+(((-1.0)*r02*sj0*x886))+((x884*x888)));
evalcond[7]=((-0.0001)+((x879*x880))+(((-1.0)*x883*x892))+(((0.02626)*x877))+((x880*x881))+(((-1.0)*py*x889))+(((-0.0718)*x878))+(((-1.0)*px*x894))+(((-1.0)*x890*x892)));
evalcond[8]=((-0.2413)+(((-0.02626)*x895))+((sj0*x897))+((x880*x885))+(((-1.0)*r01*sj0*x880))+(((-0.0718)*x899))+(((-1.0)*py*x894))+(((-0.09746)*cj3))+(((-1.0)*x888*x892))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x900=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj6*r11*sj0*x900))+((r12*sj0*sj5))+(((-1.0)*cj0*cj6*r01*x900))+(((-1.0)*r10*sj0*sj6*x900))+(((-1.0)*cj0*r00*sj6*x900))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x901=(cj5*cj6);
IkReal x902=((1.0)*sj5);
IkReal x903=((1.0)*sj0);
IkReal x904=(cj5*sj6);
if( IKabs((((r02*sj0*sj5))+((cj0*r11*x901))+(((-1.0)*r01*x901*x903))+(((-1.0)*cj0*r12*x902))+(((-1.0)*r00*x903*x904))+((cj0*r10*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x901))+(((-1.0)*r22*x902))+((r20*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj0*sj5))+((cj0*r11*x901))+(((-1.0)*r01*x901*x903))+(((-1.0)*cj0*r12*x902))+(((-1.0)*r00*x903*x904))+((cj0*r10*x904))))+IKsqr((((r21*x901))+(((-1.0)*r22*x902))+((r20*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*sj0*sj5))+((cj0*r11*x901))+(((-1.0)*r01*x901*x903))+(((-1.0)*cj0*r12*x902))+(((-1.0)*r00*x903*x904))+((cj0*r10*x904))), (((r21*x901))+(((-1.0)*r22*x902))+((r20*x904))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x905=(cj5*cj6);
IkReal x906=((1.0)*cj0);
IkReal x907=((1.0)*sj5);
IkReal x908=(cj5*sj6);
evalcond[0]=(((r21*x905))+(((-1.0)*r22*x907))+((r20*x908))+(((-1.0)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*r10*x906*x908))+((r00*sj0*x908))+(((-1.0)*r11*x905*x906))+(IKsin(j3))+((cj0*r12*sj5))+((r01*sj0*x905))+(((-1.0)*r02*sj0*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x909=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x909))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x909))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x910=(cj5*cj6);
IkReal x911=(cj0*sj6);
IkReal x912=(r01*sj0);
IkReal x913=((1.0)*sj0);
IkReal x914=((1.0)*cj5);
IkReal x915=(cj0*r12);
IkReal x916=(r02*sj5);
IkReal x917=((1.0)*sj5);
IkReal x918=(cj5*sj6);
IkReal x919=((1.0)*cj0);
IkReal x920=(cj6*r10);
IkReal x921=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x917))+((r20*x918))+((r21*x910)));
evalcond[2]=(((r11*x911))+(((-1.0)*sj6*x912))+(((-1.0)*x919*x920))+x921);
evalcond[3]=((((-1.0)*r01*x910*x919))+(((-1.0)*r00*x911*x914))+((r12*sj0*sj5))+((cj0*x916))+(((-1.0)*r10*x913*x918))+(((-1.0)*r11*x910*x913)));
evalcond[4]=((1.0)+((r00*sj0*x918))+(((-1.0)*x913*x916))+((x910*x912))+((sj5*x915))+(((-1.0)*r11*x910*x919))+(((-1.0)*r10*x911*x914)));
evalcond[5]=(((r10*sj5*x911))+(((-1.0)*cj5*r02*x913))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x912*x917))+(((-1.0)*r00*sj5*sj6*x913))+((cj5*x915)));
evalcond[6]=((-0.0097)+(((0.026255)*r11*x911))+(((-1.0)*py*x919))+(((-0.026255)*cj0*x920))+(((-0.026255)*sj6*x912))+((px*sj0))+(((0.026255)*x921)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x922=(cj6*r20);
IkReal x923=(r21*sj6);
if( IKabs(((((-1.0)*x922))+x923)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x923))+(((6.96378830083565e-5)*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x922))+x923))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x923))+(((6.96378830083565e-5)*x922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x922))+x923), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x923))+(((6.96378830083565e-5)*x922))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x924=IKcos(j4);
IkReal x925=IKsin(j4);
IkReal x926=(r11*sj0);
IkReal x927=(cj0*sj6);
IkReal x928=(cj6*sj5);
IkReal x929=(r10*sj0);
IkReal x930=(sj5*sj6);
IkReal x931=((1.0)*cj6);
IkReal x932=((0.026255)*sj6);
IkReal x933=((0.026255)*cj6);
IkReal x934=(cj0*r00);
IkReal x935=((1.0)*r21);
IkReal x936=((1.0)*x924);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x935))+x925);
evalcond[1]=((((-1.0)*x928*x935))+(((-1.0)*r20*x930))+(((-1.0)*cj5*r22))+(((-1.0)*x936)));
evalcond[2]=((0.09736)+(((0.02626)*x925))+(((0.0718)*x924))+(((-1.0)*r21*x932))+pz+((r20*x933)));
evalcond[3]=((((-1.0)*x931*x934))+(((-1.0)*x929*x931))+((r01*x927))+((sj6*x926))+(((-1.0)*x936)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x927))+((cj0*cj5*r02))+(((-1.0)*x925))+((cj0*r01*x928))+((x926*x928))+((x929*x930)));
evalcond[5]=((-0.0019)+(((-0.02626)*x924))+(((0.0718)*x925))+(((-1.0)*x929*x933))+(((-1.0)*py*sj0))+(((-1.0)*x933*x934))+((x926*x932))+(((-1.0)*cj0*px))+(((0.026255)*r01*x927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x937=(cj5*cj6);
IkReal x938=(cj0*sj6);
IkReal x939=(r01*sj0);
IkReal x940=((1.0)*sj0);
IkReal x941=((1.0)*cj5);
IkReal x942=(cj0*r12);
IkReal x943=(r02*sj5);
IkReal x944=((1.0)*sj5);
IkReal x945=(cj5*sj6);
IkReal x946=((1.0)*cj0);
IkReal x947=(cj6*r10);
IkReal x948=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x937))+(((-1.0)*r22*x944))+((r20*x945)));
evalcond[2]=((((-1.0)*sj6*x939))+(((-1.0)*x946*x947))+((r11*x938))+x948);
evalcond[3]=(((cj0*x943))+(((-1.0)*r01*x937*x946))+(((-1.0)*r00*x938*x941))+((r12*sj0*sj5))+(((-1.0)*r11*x937*x940))+(((-1.0)*r10*x940*x945)));
evalcond[4]=((-1.0)+((r00*sj0*x945))+((x937*x939))+(((-1.0)*r10*x938*x941))+(((-1.0)*r11*x937*x946))+(((-1.0)*x940*x943))+((sj5*x942)));
evalcond[5]=((((-1.0)*cj6*x939*x944))+((r10*sj5*x938))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x940))+(((-1.0)*r00*sj5*sj6*x940))+((cj5*x942)));
evalcond[6]=((-0.0097)+(((-1.0)*py*x946))+(((-0.026255)*sj6*x939))+(((0.026255)*r11*x938))+((px*sj0))+(((0.026255)*x948))+(((-0.026255)*cj0*x947)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x949=IKcos(j4);
IkReal x950=IKsin(j4);
IkReal x951=(r11*sj0);
IkReal x952=(cj0*sj6);
IkReal x953=(cj6*sj5);
IkReal x954=(r10*sj0);
IkReal x955=(sj5*sj6);
IkReal x956=((1.0)*cj6);
IkReal x957=((0.026255)*sj6);
IkReal x958=((0.026255)*cj6);
IkReal x959=(cj0*r00);
IkReal x960=((1.0)*r21);
IkReal x961=((1.0)*x950);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x960))+(((-1.0)*x961)));
evalcond[1]=((((-1.0)*r20*x955))+(((-1.0)*x953*x960))+(((-1.0)*cj5*r22))+x949);
evalcond[2]=((-0.09756)+(((-1.0)*r21*x957))+pz+((r20*x958))+(((-0.02626)*x950))+(((-0.0718)*x949)));
evalcond[3]=(((sj6*x951))+((r01*x952))+(((-1.0)*x949))+(((-1.0)*x956*x959))+(((-1.0)*x954*x956)));
evalcond[4]=(((cj5*r12*sj0))+((x951*x953))+((cj0*cj5*r02))+((r00*sj5*x952))+((cj0*r01*x953))+(((-1.0)*x961))+((x954*x955)));
evalcond[5]=((-0.0019)+((x951*x957))+(((0.0718)*x950))+(((0.026255)*r01*x952))+(((-1.0)*x958*x959))+(((-1.0)*py*sj0))+(((-0.02626)*x949))+(((-1.0)*x954*x958))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x962=(cj5*cj6);
IkReal x963=((1.0)*sj0);
IkReal x964=((1.0)*r22);
IkReal x965=(cj0*sj5);
IkReal x966=(cj5*sj6);
IkReal x967=((1.0)*cj0);
IkReal x968=(cj6*r20);
IkReal x969=((1.0)*sj5);
IkReal x970=(r21*sj6);
IkReal x971=(x966*x967);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x962))+((r20*x966))+(((-1.0)*sj5*x964)));
evalcond[2]=((((-1.0)*x970))+x968);
evalcond[3]=((((-1.0)*r20*sj6*x969))+(((-1.0)*cj6*r21*x969))+(((-1.0)*cj5*x964)));
evalcond[4]=((((-1.0)*r00*x971))+((r12*sj0*sj5))+(((-1.0)*r01*x962*x967))+(((-1.0)*r11*x962*x963))+((r02*x965))+(((-1.0)*r10*x963*x966)));
evalcond[5]=((((-1.0)*r02*sj5*x963))+(((-1.0)*r11*x962*x967))+((r01*sj0*x962))+((r12*x965))+((r00*sj0*x966))+(((-1.0)*r10*x971)));
evalcond[6]=((-0.0001)+(((-0.026255)*x970))+pz+(((0.026255)*x968)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x972=(sj0*sj6);
IkReal x973=(cj6*r10);
IkReal x974=((1.0)*sj0);
IkReal x975=(cj6*r00);
IkReal x976=(cj0*sj6);
if( IKabs((((r01*x972))+(((-1.0)*x974*x975))+(((-1.0)*r11*x976))+((cj0*x973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x976))+(((-1.0)*cj0*x975))+((r11*x972))+(((-1.0)*x973*x974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x972))+(((-1.0)*x974*x975))+(((-1.0)*r11*x976))+((cj0*x973))))+IKsqr((((r01*x976))+(((-1.0)*cj0*x975))+((r11*x972))+(((-1.0)*x973*x974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x972))+(((-1.0)*x974*x975))+(((-1.0)*r11*x976))+((cj0*x973))), (((r01*x976))+(((-1.0)*cj0*x975))+((r11*x972))+(((-1.0)*x973*x974))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x977=IKsin(j4);
IkReal x978=IKcos(j4);
IkReal x979=(r11*sj6);
IkReal x980=((0.026255)*cj0);
IkReal x981=(r01*sj6);
IkReal x982=(sj0*sj5);
IkReal x983=(cj6*r11);
IkReal x984=(r10*sj6);
IkReal x985=(cj5*r12);
IkReal x986=(cj6*sj0);
IkReal x987=((1.0)*sj0);
IkReal x988=(cj5*r02);
IkReal x989=((1.0)*r10);
IkReal x990=(cj0*sj5);
IkReal x991=(r00*sj6);
IkReal x992=((0.026255)*sj0);
IkReal x993=(cj0*cj6);
IkReal x994=((1.0)*cj0);
IkReal x995=(cj6*r01);
IkReal x996=((1.0)*x978);
evalcond[0]=(((r00*x986))+(((-1.0)*x981*x987))+(((-1.0)*x989*x993))+x977+((cj0*x979)));
evalcond[1]=((((-1.0)*x986*x989))+((sj0*x979))+(((-1.0)*r00*x993))+(((-1.0)*x996))+((cj0*x981)));
evalcond[2]=((((-1.0)*x977))+((x990*x995))+((x990*x991))+((sj0*x985))+((x982*x984))+((x982*x983))+((cj0*x988)));
evalcond[3]=(((x983*x990))+(((-1.0)*x996))+(((-1.0)*x982*x995))+(((-1.0)*x982*x991))+(((-1.0)*x987*x988))+((cj0*x985))+((x984*x990)));
evalcond[4]=((0.08776)+(((-1.0)*cj6*r10*x980))+(((-1.0)*py*x994))+(((0.0718)*x978))+((x979*x980))+(((0.026255)*r00*x986))+((px*sj0))+(((0.02626)*x977))+(((-1.0)*x981*x992)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x994))+(((-1.0)*py*x987))+(((-0.026255)*r10*x986))+(((0.0718)*x977))+(((-0.02626)*x978))+(((-1.0)*cj6*r00*x980))+((x980*x981))+((x979*x992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x997=(cj5*cj6);
IkReal x998=((1.0)*sj0);
IkReal x999=((1.0)*r22);
IkReal x1000=(cj0*sj5);
IkReal x1001=(cj5*sj6);
IkReal x1002=((1.0)*cj0);
IkReal x1003=(cj6*r20);
IkReal x1004=((1.0)*sj5);
IkReal x1005=(r21*sj6);
IkReal x1006=(x1001*x1002);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x999))+((r20*x1001))+((r21*x997)));
evalcond[2]=((((-1.0)*x1005))+x1003);
evalcond[3]=((((-1.0)*cj5*x999))+(((-1.0)*r20*sj6*x1004))+(((-1.0)*cj6*r21*x1004)));
evalcond[4]=((((-1.0)*r10*x1001*x998))+((r02*x1000))+(((-1.0)*r01*x1002*x997))+((r12*sj0*sj5))+(((-1.0)*r00*x1006))+(((-1.0)*r11*x997*x998)));
evalcond[5]=((((-1.0)*r10*x1006))+((r01*sj0*x997))+(((-1.0)*r02*sj5*x998))+((r00*sj0*x1001))+((r12*x1000))+(((-1.0)*r11*x1002*x997)));
evalcond[6]=((-0.0001)+pz+(((0.026255)*x1003))+(((-0.026255)*x1005)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1007=(sj0*sj6);
IkReal x1008=(cj0*sj6);
IkReal x1009=(cj6*r00);
IkReal x1010=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*r01*x1007))+((sj0*x1009))+((r11*x1008))+(((-1.0)*cj0*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1008))+(((-1.0)*sj0*x1010))+(((-1.0)*cj0*x1009))+((r11*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1007))+((sj0*x1009))+((r11*x1008))+(((-1.0)*cj0*x1010))))+IKsqr((((r01*x1008))+(((-1.0)*sj0*x1010))+(((-1.0)*cj0*x1009))+((r11*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x1007))+((sj0*x1009))+((r11*x1008))+(((-1.0)*cj0*x1010))), (((r01*x1008))+(((-1.0)*sj0*x1010))+(((-1.0)*cj0*x1009))+((r11*x1007))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1011=IKcos(j4);
IkReal x1012=IKsin(j4);
IkReal x1013=(r11*sj6);
IkReal x1014=((0.026255)*cj0);
IkReal x1015=(r01*sj6);
IkReal x1016=(sj0*sj5);
IkReal x1017=(cj6*r11);
IkReal x1018=(r10*sj6);
IkReal x1019=(cj5*r12);
IkReal x1020=(cj6*sj0);
IkReal x1021=((1.0)*sj0);
IkReal x1022=(cj5*r02);
IkReal x1023=((1.0)*r10);
IkReal x1024=(cj0*sj5);
IkReal x1025=(r00*sj6);
IkReal x1026=((0.026255)*sj0);
IkReal x1027=(cj0*cj6);
IkReal x1028=((1.0)*cj0);
IkReal x1029=(cj6*r01);
IkReal x1030=((1.0)*x1012);
evalcond[0]=(((sj0*x1013))+((cj0*x1015))+(((-1.0)*r00*x1027))+(((-1.0)*x1020*x1023))+(((-1.0)*x1011)));
evalcond[1]=((((-1.0)*x1030))+(((-1.0)*x1023*x1027))+((cj0*x1013))+(((-1.0)*x1015*x1021))+((r00*x1020)));
evalcond[2]=(((x1016*x1017))+((x1016*x1018))+(((-1.0)*x1030))+((sj0*x1019))+((cj0*x1022))+((x1024*x1025))+((x1024*x1029)));
evalcond[3]=(((x1017*x1024))+x1011+((cj0*x1019))+(((-1.0)*x1021*x1022))+((x1018*x1024))+(((-1.0)*x1016*x1025))+(((-1.0)*x1016*x1029)));
evalcond[4]=((-0.10716)+(((-1.0)*py*x1028))+(((-0.02626)*x1012))+(((-1.0)*cj6*r10*x1014))+((x1013*x1014))+(((-0.0718)*x1011))+(((-1.0)*x1015*x1026))+((px*sj0))+(((0.026255)*r00*x1020)));
evalcond[5]=((-0.0019)+((x1014*x1015))+(((0.0718)*x1012))+(((-1.0)*py*x1021))+(((-0.026255)*r10*x1020))+(((-0.02626)*x1011))+(((-1.0)*cj6*r00*x1014))+((x1013*x1026))+(((-1.0)*px*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1031=((1.0)*sj5);
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(cj3,-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(sj3,-1);
if(!x1033.valid){
continue;
}
if( IKabs(((x1032.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1033.value)*(((((-1.0)*r20*sj6*x1031))+(((-1.0)*cj6*r21*x1031))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1032.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x1033.value)*(((((-1.0)*r20*sj6*x1031))+(((-1.0)*cj6*r21*x1031))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1032.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x1033.value)*(((((-1.0)*r20*sj6*x1031))+(((-1.0)*cj6*r21*x1031))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1034=IKcos(j4);
IkReal x1035=IKsin(j4);
IkReal x1036=(r11*sj0);
IkReal x1037=((0.026255)*sj6);
IkReal x1038=(cj0*r01);
IkReal x1039=(cj5*r12);
IkReal x1040=(cj6*sj5);
IkReal x1041=(r10*sj0);
IkReal x1042=(sj5*sj6);
IkReal x1043=(cj0*r11);
IkReal x1044=((1.0)*cj5);
IkReal x1045=((1.0)*cj6);
IkReal x1046=(cj0*r10);
IkReal x1047=((1.0)*sj0);
IkReal x1048=(cj0*r00);
IkReal x1049=((0.026255)*cj6);
IkReal x1050=((1.0)*r21);
IkReal x1051=((1.0)*cj0);
IkReal x1052=(sj3*x1035);
IkReal x1053=(r00*x1049);
IkReal x1054=((1.0)*x1034);
IkReal x1055=(cj3*x1035);
IkReal x1056=((0.0718)*x1034);
evalcond[0]=(x1052+(((-1.0)*sj6*x1050))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x1044))+(((-1.0)*sj3*x1054))+(((-1.0)*x1040*x1050))+(((-1.0)*r20*x1042)));
evalcond[2]=(((sj6*x1036))+((sj6*x1038))+(((-1.0)*x1054))+(((-1.0)*x1045*x1048))+(((-1.0)*x1041*x1045)));
evalcond[3]=(x1055+(((-1.0)*x1045*x1046))+((cj6*r00*sj0))+((sj6*x1043))+(((-1.0)*r01*sj6*x1047)));
evalcond[4]=((-0.0001)+((sj3*x1056))+(((-1.0)*r21*x1037))+((r20*x1049))+(((0.02626)*x1052))+pz+(((0.09746)*sj3)));
evalcond[5]=(((x1038*x1040))+((cj0*cj5*r02))+((x1042*x1048))+(((-1.0)*x1035))+((x1041*x1042))+((sj0*x1039))+((x1036*x1040)));
evalcond[6]=(((x1042*x1046))+(((-1.0)*r01*x1040*x1047))+((x1040*x1043))+((cj0*x1039))+(((-1.0)*r00*x1042*x1047))+(((-1.0)*r02*sj0*x1044))+(((-1.0)*cj3*x1054)));
evalcond[7]=((-0.0019)+(((0.0718)*x1035))+((x1036*x1037))+(((-1.0)*x1041*x1049))+(((-0.02626)*x1034))+(((-1.0)*px*x1051))+(((-1.0)*py*x1047))+(((-1.0)*x1048*x1049))+((x1037*x1038)));
evalcond[8]=((-0.0097)+(((-1.0)*x1046*x1049))+((x1037*x1043))+((cj3*x1056))+((sj0*x1053))+(((0.02626)*x1055))+(((-1.0)*py*x1051))+((px*sj0))+(((0.09746)*cj3))+(((-1.0)*r01*sj0*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1057=((1.0)*cj6);
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(sj3,-1);
if(!x1058.valid){
continue;
}
if( IKabs(((x1058.value)*((((r21*sj6))+(((-1.0)*r20*x1057)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x1057))+(((-1.0)*cj0*r00*x1057))+((cj0*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1058.value)*((((r21*sj6))+(((-1.0)*r20*x1057))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x1057))+(((-1.0)*cj0*r00*x1057))+((cj0*r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1058.value)*((((r21*sj6))+(((-1.0)*r20*x1057))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x1057))+(((-1.0)*cj0*r00*x1057))+((cj0*r01*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1059=IKcos(j4);
IkReal x1060=IKsin(j4);
IkReal x1061=(r11*sj0);
IkReal x1062=((0.026255)*sj6);
IkReal x1063=(cj0*r01);
IkReal x1064=(cj5*r12);
IkReal x1065=(cj6*sj5);
IkReal x1066=(r10*sj0);
IkReal x1067=(sj5*sj6);
IkReal x1068=(cj0*r11);
IkReal x1069=((1.0)*cj5);
IkReal x1070=((1.0)*cj6);
IkReal x1071=(cj0*r10);
IkReal x1072=((1.0)*sj0);
IkReal x1073=(cj0*r00);
IkReal x1074=((0.026255)*cj6);
IkReal x1075=((1.0)*r21);
IkReal x1076=((1.0)*cj0);
IkReal x1077=(sj3*x1060);
IkReal x1078=(r00*x1074);
IkReal x1079=((1.0)*x1059);
IkReal x1080=(cj3*x1060);
IkReal x1081=((0.0718)*x1059);
evalcond[0]=((((-1.0)*sj6*x1075))+x1077+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x1069))+(((-1.0)*sj3*x1079))+(((-1.0)*x1065*x1075))+(((-1.0)*r20*x1067)));
evalcond[2]=((((-1.0)*x1070*x1073))+((sj6*x1063))+((sj6*x1061))+(((-1.0)*x1066*x1070))+(((-1.0)*x1079)));
evalcond[3]=(x1080+(((-1.0)*x1070*x1071))+((sj6*x1068))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x1072)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1062))+((sj3*x1081))+(((0.02626)*x1077))+((r20*x1074))+pz+(((0.09746)*sj3)));
evalcond[5]=(((x1061*x1065))+((cj0*cj5*r02))+((x1067*x1073))+((x1066*x1067))+((sj0*x1064))+((x1063*x1065))+(((-1.0)*x1060)));
evalcond[6]=(((cj0*x1064))+((x1067*x1071))+(((-1.0)*r00*x1067*x1072))+(((-1.0)*r02*sj0*x1069))+(((-1.0)*r01*x1065*x1072))+(((-1.0)*cj3*x1079))+((x1065*x1068)));
evalcond[7]=((-0.0019)+(((-0.02626)*x1059))+((x1061*x1062))+(((-1.0)*x1073*x1074))+(((-1.0)*px*x1076))+(((0.0718)*x1060))+(((-1.0)*py*x1072))+((x1062*x1063))+(((-1.0)*x1066*x1074)));
evalcond[8]=((-0.0097)+(((-1.0)*x1071*x1074))+(((0.02626)*x1080))+(((-1.0)*py*x1076))+((x1062*x1068))+(((-1.0)*r01*sj0*x1062))+((sj0*x1078))+((cj3*x1081))+((px*sj0))+(((0.09746)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1082=((1.0)*sj5);
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1083.valid){
continue;
}
CheckValue<IkReal> x1084 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x1082))+(((-1.0)*r20*sj6*x1082))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x1084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1083.value)))+(x1084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1085=IKcos(j4);
IkReal x1086=IKsin(j4);
IkReal x1087=(r11*sj0);
IkReal x1088=((0.026255)*sj6);
IkReal x1089=(cj0*r01);
IkReal x1090=(cj5*r12);
IkReal x1091=(cj6*sj5);
IkReal x1092=(r10*sj0);
IkReal x1093=(sj5*sj6);
IkReal x1094=(cj0*r11);
IkReal x1095=((1.0)*cj5);
IkReal x1096=((1.0)*cj6);
IkReal x1097=(cj0*r10);
IkReal x1098=((1.0)*sj0);
IkReal x1099=(cj0*r00);
IkReal x1100=((0.026255)*cj6);
IkReal x1101=((1.0)*r21);
IkReal x1102=((1.0)*cj0);
IkReal x1103=(sj3*x1086);
IkReal x1104=(r00*x1100);
IkReal x1105=((1.0)*x1085);
IkReal x1106=(cj3*x1086);
IkReal x1107=((0.0718)*x1085);
evalcond[0]=(x1103+((cj6*r20))+(((-1.0)*sj6*x1101)));
evalcond[1]=((((-1.0)*x1091*x1101))+(((-1.0)*r20*x1093))+(((-1.0)*sj3*x1105))+(((-1.0)*r22*x1095)));
evalcond[2]=((((-1.0)*x1096*x1099))+((sj6*x1087))+((sj6*x1089))+(((-1.0)*x1092*x1096))+(((-1.0)*x1105)));
evalcond[3]=(x1106+((cj6*r00*sj0))+(((-1.0)*x1096*x1097))+((sj6*x1094))+(((-1.0)*r01*sj6*x1098)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1088))+((sj3*x1107))+((r20*x1100))+(((0.02626)*x1103))+pz+(((0.09746)*sj3)));
evalcond[5]=(((x1087*x1091))+((cj0*cj5*r02))+((sj0*x1090))+((x1089*x1091))+(((-1.0)*x1086))+((x1092*x1093))+((x1093*x1099)));
evalcond[6]=((((-1.0)*r01*x1091*x1098))+((x1093*x1097))+(((-1.0)*r02*sj0*x1095))+(((-1.0)*r00*x1093*x1098))+((cj0*x1090))+((x1091*x1094))+(((-1.0)*cj3*x1105)));
evalcond[7]=((-0.0019)+(((-1.0)*px*x1102))+(((-1.0)*py*x1098))+(((-1.0)*x1092*x1100))+((x1087*x1088))+(((-1.0)*x1099*x1100))+(((0.0718)*x1086))+(((-0.02626)*x1085))+((x1088*x1089)));
evalcond[8]=((-0.0097)+(((-1.0)*r01*sj0*x1088))+((x1088*x1094))+(((-1.0)*py*x1102))+(((0.02626)*x1106))+((sj0*x1104))+((px*sj0))+(((0.09746)*cj3))+((cj3*x1107))+(((-1.0)*x1097*x1100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1108=(cj5*cj6);
IkReal x1109=((1.0)*cj0);
IkReal x1110=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r11*x1108*x1109))+(((-1.0)*r10*x1109*x1110))+((r01*sj0*x1108))+((r00*sj0*x1110))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1111=(cj5*cj6);
IkReal x1112=((1.0)*cj0);
IkReal x1113=((1.0)*sj0);
IkReal x1114=(cj5*sj6);
if( IKabs(((((-1.0)*r11*x1111*x1113))+(((-1.0)*r00*x1112*x1114))+((r12*sj0*sj5))+(((-1.0)*r10*x1113*x1114))+(((-1.0)*r01*x1111*x1112))+((cj0*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1114))+(((-1.0)*r22*sj5))+((r21*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1111*x1113))+(((-1.0)*r00*x1112*x1114))+((r12*sj0*sj5))+(((-1.0)*r10*x1113*x1114))+(((-1.0)*r01*x1111*x1112))+((cj0*r02*sj5))))+IKsqr((((r20*x1114))+(((-1.0)*r22*sj5))+((r21*x1111))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x1111*x1113))+(((-1.0)*r00*x1112*x1114))+((r12*sj0*sj5))+(((-1.0)*r10*x1113*x1114))+(((-1.0)*r01*x1111*x1112))+((cj0*r02*sj5))), (((r20*x1114))+(((-1.0)*r22*sj5))+((r21*x1111))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1115=(cj5*cj6);
IkReal x1116=((1.0)*cj0);
IkReal x1117=((1.0)*sj0);
IkReal x1118=(cj5*sj6);
evalcond[0]=(((r20*x1118))+(((-1.0)*(IKcos(j3))))+(((-1.0)*r22*sj5))+((r21*x1115)));
evalcond[1]=((((-1.0)*r11*x1115*x1117))+(((-1.0)*r00*x1116*x1118))+((r12*sj0*sj5))+(((-1.0)*(IKsin(j3))))+(((-1.0)*r01*x1115*x1116))+(((-1.0)*r10*x1117*x1118))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1119=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1119))+(((-1.0)*r20*sj6*x1119))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1120=(cj5*cj6);
IkReal x1121=((1.0)*sj0);
IkReal x1122=((1.0)*r22);
IkReal x1123=(cj0*sj5);
IkReal x1124=(cj5*sj6);
IkReal x1125=((1.0)*cj0);
IkReal x1126=(cj6*r20);
IkReal x1127=((1.0)*sj5);
IkReal x1128=(r21*sj6);
IkReal x1129=(x1124*x1125);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x1120))+(((-1.0)*sj5*x1122))+((r20*x1124)));
evalcond[2]=(x1126+(((-1.0)*x1128)));
evalcond[3]=((((-1.0)*cj6*r21*x1127))+(((-1.0)*cj5*x1122))+(((-1.0)*r20*sj6*x1127)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r11*x1120*x1121))+(((-1.0)*r01*x1120*x1125))+(((-1.0)*r00*x1129))+((r02*x1123))+(((-1.0)*r10*x1121*x1124)));
evalcond[5]=(((r01*sj0*x1120))+((r00*sj0*x1124))+(((-1.0)*r10*x1129))+(((-1.0)*r02*sj5*x1121))+(((-1.0)*r11*x1120*x1125))+((r12*x1123)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1128))+pz+(((0.026255)*x1126)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1130=(sj0*sj6);
IkReal x1131=(cj0*sj6);
IkReal x1132=(cj6*r00);
IkReal x1133=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x1132))+((r01*x1131))+(((-1.0)*sj0*x1133))+((r11*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x1132))+(((-1.0)*r01*x1130))+(((-1.0)*cj0*x1133))+((r11*x1131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1132))+((r01*x1131))+(((-1.0)*sj0*x1133))+((r11*x1130))))+IKsqr((((sj0*x1132))+(((-1.0)*r01*x1130))+(((-1.0)*cj0*x1133))+((r11*x1131))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x1132))+((r01*x1131))+(((-1.0)*sj0*x1133))+((r11*x1130))), (((sj0*x1132))+(((-1.0)*r01*x1130))+(((-1.0)*cj0*x1133))+((r11*x1131))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1134=IKcos(j4);
IkReal x1135=IKsin(j4);
IkReal x1136=(r11*sj6);
IkReal x1137=((0.026255)*cj0);
IkReal x1138=(r01*sj6);
IkReal x1139=(sj0*sj5);
IkReal x1140=(cj6*r11);
IkReal x1141=(r10*sj6);
IkReal x1142=(cj5*r12);
IkReal x1143=(cj6*sj0);
IkReal x1144=((1.0)*sj0);
IkReal x1145=(cj5*r02);
IkReal x1146=((1.0)*r10);
IkReal x1147=(cj0*sj5);
IkReal x1148=(r00*sj6);
IkReal x1149=((0.026255)*sj0);
IkReal x1150=(cj0*cj6);
IkReal x1151=((1.0)*cj0);
IkReal x1152=(cj6*r01);
IkReal x1153=((1.0)*x1135);
evalcond[0]=((((-1.0)*x1143*x1146))+(((-1.0)*r00*x1150))+((cj0*x1138))+(((-1.0)*x1153))+((sj0*x1136)));
evalcond[1]=(((cj0*x1136))+(((-1.0)*x1146*x1150))+(((-1.0)*x1134))+((r00*x1143))+(((-1.0)*x1138*x1144)));
evalcond[2]=(x1134+((x1147*x1152))+((sj0*x1142))+((x1147*x1148))+((x1139*x1141))+((x1139*x1140))+((cj0*x1145)));
evalcond[3]=(((x1140*x1147))+(((-1.0)*x1153))+((x1141*x1147))+(((-1.0)*x1139*x1148))+(((-1.0)*x1139*x1152))+(((-1.0)*x1144*x1145))+((cj0*x1142)));
evalcond[4]=((-0.1264)+(((0.0718)*x1135))+((x1136*x1137))+(((-0.02626)*x1134))+(((-1.0)*cj6*r10*x1137))+(((-1.0)*py*x1151))+((px*sj0))+(((0.026255)*r00*x1143))+(((-1.0)*x1138*x1149)));
evalcond[5]=((-0.21426)+(((-1.0)*px*x1151))+(((-0.026255)*r10*x1143))+((x1137*x1138))+(((-1.0)*cj6*r00*x1137))+(((-0.02626)*x1135))+(((-0.0718)*x1134))+(((-1.0)*py*x1144))+((x1136*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1154=(cj5*cj6);
IkReal x1155=((1.0)*sj0);
IkReal x1156=((1.0)*r22);
IkReal x1157=(cj0*sj5);
IkReal x1158=(cj5*sj6);
IkReal x1159=((1.0)*cj0);
IkReal x1160=(cj6*r20);
IkReal x1161=((1.0)*sj5);
IkReal x1162=(r21*sj6);
IkReal x1163=(x1158*x1159);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x1158))+(((-1.0)*sj5*x1156))+((r21*x1154)));
evalcond[2]=(x1160+(((-1.0)*x1162)));
evalcond[3]=((((-1.0)*r20*sj6*x1161))+(((-1.0)*cj5*x1156))+(((-1.0)*cj6*r21*x1161)));
evalcond[4]=(((r02*x1157))+((r12*sj0*sj5))+(((-1.0)*r01*x1154*x1159))+(((-1.0)*r10*x1155*x1158))+(((-1.0)*r00*x1163))+(((-1.0)*r11*x1154*x1155)));
evalcond[5]=((((-1.0)*r10*x1163))+((r01*sj0*x1154))+((r12*x1157))+(((-1.0)*r02*sj5*x1155))+((r00*sj0*x1158))+(((-1.0)*r11*x1154*x1159)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1162))+(((0.026255)*x1160))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1164=(cj0*cj6);
IkReal x1165=(cj6*sj0);
IkReal x1166=(cj0*sj6);
IkReal x1167=((1.0)*sj0*sj6);
if( IKabs((((r00*x1164))+((r10*x1165))+(((-1.0)*r11*x1167))+(((-1.0)*r01*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1165))+(((-1.0)*r10*x1164))+((r11*x1166))+(((-1.0)*r01*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1164))+((r10*x1165))+(((-1.0)*r11*x1167))+(((-1.0)*r01*x1166))))+IKsqr((((r00*x1165))+(((-1.0)*r10*x1164))+((r11*x1166))+(((-1.0)*r01*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x1164))+((r10*x1165))+(((-1.0)*r11*x1167))+(((-1.0)*r01*x1166))), (((r00*x1165))+(((-1.0)*r10*x1164))+((r11*x1166))+(((-1.0)*r01*x1167))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1168=IKsin(j4);
IkReal x1169=IKcos(j4);
IkReal x1170=(r11*sj6);
IkReal x1171=((0.026255)*cj0);
IkReal x1172=(r01*sj6);
IkReal x1173=(sj0*sj5);
IkReal x1174=(cj6*r11);
IkReal x1175=(r10*sj6);
IkReal x1176=(cj5*r12);
IkReal x1177=(cj6*sj0);
IkReal x1178=((1.0)*sj0);
IkReal x1179=(cj5*r02);
IkReal x1180=((1.0)*r10);
IkReal x1181=(cj0*sj5);
IkReal x1182=(r00*sj6);
IkReal x1183=((0.026255)*sj0);
IkReal x1184=(cj0*cj6);
IkReal x1185=((1.0)*cj0);
IkReal x1186=(cj6*r01);
IkReal x1187=((1.0)*x1169);
evalcond[0]=(x1168+((sj0*x1170))+((cj0*x1172))+(((-1.0)*r00*x1184))+(((-1.0)*x1177*x1180)));
evalcond[1]=(((r00*x1177))+(((-1.0)*x1172*x1178))+((cj0*x1170))+(((-1.0)*x1187))+(((-1.0)*x1180*x1184)));
evalcond[2]=(((sj0*x1176))+((x1173*x1175))+((x1173*x1174))+((cj0*x1179))+(((-1.0)*x1187))+((x1181*x1186))+((x1181*x1182)));
evalcond[3]=(((x1174*x1181))+((cj0*x1176))+((x1175*x1181))+(((-1.0)*x1173*x1182))+(((-1.0)*x1173*x1186))+(((-1.0)*x1178*x1179))+(((-1.0)*x1168)));
evalcond[4]=((-0.1264)+(((-1.0)*cj6*r10*x1171))+(((-1.0)*py*x1185))+(((0.026255)*r00*x1177))+(((-1.0)*x1172*x1183))+((px*sj0))+(((-0.02626)*x1169))+((x1170*x1171))+(((0.0718)*x1168)));
evalcond[5]=((-0.01934)+(((0.02626)*x1168))+(((-1.0)*cj6*r00*x1171))+(((-1.0)*py*x1178))+((x1170*x1183))+(((-0.026255)*r10*x1177))+(((-1.0)*px*x1185))+(((0.0718)*x1169))+((x1171*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1188=((1.0)*cj6);
CheckValue<IkReal> x1189=IKPowWithIntegerCheck(sj3,-1);
if(!x1189.valid){
continue;
}
if( IKabs(((x1189.value)*((((r21*sj6))+(((-1.0)*r20*x1188)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x1188))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1189.value)*((((r21*sj6))+(((-1.0)*r20*x1188))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x1188))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1189.value)*((((r21*sj6))+(((-1.0)*r20*x1188))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x1188))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1190=IKcos(j4);
IkReal x1191=IKsin(j4);
IkReal x1192=(r11*sj0);
IkReal x1193=((0.026255)*sj6);
IkReal x1194=(cj0*r01);
IkReal x1195=(cj6*sj5);
IkReal x1196=(r10*sj0);
IkReal x1197=(sj5*sj6);
IkReal x1198=(cj0*r11);
IkReal x1199=((1.0)*cj5);
IkReal x1200=((1.0)*cj6);
IkReal x1201=(cj0*r10);
IkReal x1202=((1.0)*sj0);
IkReal x1203=(cj0*r00);
IkReal x1204=(cj5*r12);
IkReal x1205=((0.026255)*cj6);
IkReal x1206=((1.0)*r21);
IkReal x1207=((1.0)*cj0);
IkReal x1208=((1.0)*x1191);
IkReal x1209=(sj3*x1191);
IkReal x1210=(cj6*r00*sj0);
IkReal x1211=((1.0)*x1190);
IkReal x1212=(cj3*x1190);
evalcond[0]=(x1209+(((-1.0)*sj6*x1206))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x1197))+(((-1.0)*r22*x1199))+(((-1.0)*sj3*x1211))+(((-1.0)*x1195*x1206)));
evalcond[2]=(x1210+(((-1.0)*x1200*x1201))+((sj6*x1198))+(((-1.0)*x1211))+(((-1.0)*r01*sj6*x1202)));
evalcond[3]=((((-1.0)*x1196*x1200))+(((-1.0)*cj3*x1208))+(((-1.0)*x1200*x1203))+((sj6*x1192))+((sj6*x1194)));
evalcond[4]=((-0.0001)+(((0.02626)*x1209))+(((0.0718)*sj3*x1190))+((r20*x1205))+pz+(((0.09746)*sj3))+(((-1.0)*r21*x1193)));
evalcond[5]=(x1212+((cj0*cj5*r02))+((x1194*x1195))+((sj0*x1204))+((x1197*x1203))+((x1196*x1197))+((x1192*x1195)));
evalcond[6]=(((cj0*x1204))+((x1195*x1198))+(((-1.0)*r01*x1195*x1202))+(((-1.0)*r02*sj0*x1199))+((x1197*x1201))+(((-1.0)*x1208))+(((-1.0)*r00*x1197*x1202)));
evalcond[7]=((-0.1264)+((x1193*x1198))+(((-0.02626)*x1190))+((px*sj0))+(((-1.0)*x1201*x1205))+(((-1.0)*r01*sj0*x1193))+((r00*sj0*x1205))+(((-1.0)*py*x1207))+(((0.0718)*x1191)));
evalcond[8]=((-0.1168)+(((-0.0718)*x1212))+(((-1.0)*x1196*x1205))+(((-0.02626)*cj3*x1191))+(((-1.0)*x1203*x1205))+((x1192*x1193))+(((-0.09746)*cj3))+((x1193*x1194))+(((-1.0)*px*x1207))+(((-1.0)*py*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1213=((1.0)*sj5);
CheckValue<IkReal> x1214 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x1213))+(((-1.0)*r20*sj6*x1213))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x1214.valid){
continue;
}
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1214.value)+(((1.5707963267949)*(x1215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1216=IKcos(j4);
IkReal x1217=IKsin(j4);
IkReal x1218=(r11*sj0);
IkReal x1219=((0.026255)*sj6);
IkReal x1220=(cj0*r01);
IkReal x1221=(cj6*sj5);
IkReal x1222=(r10*sj0);
IkReal x1223=(sj5*sj6);
IkReal x1224=(cj0*r11);
IkReal x1225=((1.0)*cj5);
IkReal x1226=((1.0)*cj6);
IkReal x1227=(cj0*r10);
IkReal x1228=((1.0)*sj0);
IkReal x1229=(cj0*r00);
IkReal x1230=(cj5*r12);
IkReal x1231=((0.026255)*cj6);
IkReal x1232=((1.0)*r21);
IkReal x1233=((1.0)*cj0);
IkReal x1234=((1.0)*x1217);
IkReal x1235=(sj3*x1217);
IkReal x1236=(cj6*r00*sj0);
IkReal x1237=((1.0)*x1216);
IkReal x1238=(cj3*x1216);
evalcond[0]=((((-1.0)*sj6*x1232))+x1235+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x1223))+(((-1.0)*x1221*x1232))+(((-1.0)*sj3*x1237))+(((-1.0)*r22*x1225)));
evalcond[2]=(x1236+(((-1.0)*x1237))+(((-1.0)*x1226*x1227))+(((-1.0)*r01*sj6*x1228))+((sj6*x1224)));
evalcond[3]=((((-1.0)*x1226*x1229))+(((-1.0)*x1222*x1226))+((sj6*x1218))+(((-1.0)*cj3*x1234))+((sj6*x1220)));
evalcond[4]=((-0.0001)+((r20*x1231))+pz+(((0.02626)*x1235))+(((0.09746)*sj3))+(((-1.0)*r21*x1219))+(((0.0718)*sj3*x1216)));
evalcond[5]=(x1238+((sj0*x1230))+((cj0*cj5*r02))+((x1223*x1229))+((x1220*x1221))+((x1222*x1223))+((x1218*x1221)));
evalcond[6]=((((-1.0)*r01*x1221*x1228))+((x1223*x1227))+(((-1.0)*r00*x1223*x1228))+(((-1.0)*x1234))+((cj0*x1230))+((x1221*x1224))+(((-1.0)*r02*sj0*x1225)));
evalcond[7]=((-0.1264)+(((-0.02626)*x1216))+((x1219*x1224))+(((-1.0)*x1227*x1231))+(((0.0718)*x1217))+((r00*sj0*x1231))+(((-1.0)*py*x1233))+((px*sj0))+(((-1.0)*r01*sj0*x1219)));
evalcond[8]=((-0.1168)+((x1218*x1219))+(((-1.0)*px*x1233))+((x1219*x1220))+(((-1.0)*x1222*x1231))+(((-0.02626)*cj3*x1217))+(((-1.0)*py*x1228))+(((-0.09746)*cj3))+(((-1.0)*x1229*x1231))+(((-0.0718)*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1239=(cj5*cj6);
IkReal x1240=((1.0)*cj0);
IkReal x1241=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r11*x1239*x1240))+(((-1.0)*r10*x1240*x1241))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r01*sj0*x1239))+((r00*sj0*x1241)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1242=(cj0*cj5);
IkReal x1243=((1.0)*sj5);
IkReal x1244=(cj5*cj6);
IkReal x1245=(cj5*sj6);
if( IKabs(((((-1.0)*r12*sj0*x1243))+((cj6*r01*x1242))+(((-1.0)*cj0*r02*x1243))+((r11*sj0*x1244))+((r00*sj6*x1242))+((r10*sj0*x1245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1245))+(((-1.0)*r22*x1243))+((r21*x1244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj0*x1243))+((cj6*r01*x1242))+(((-1.0)*cj0*r02*x1243))+((r11*sj0*x1244))+((r00*sj6*x1242))+((r10*sj0*x1245))))+IKsqr((((r20*x1245))+(((-1.0)*r22*x1243))+((r21*x1244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*sj0*x1243))+((cj6*r01*x1242))+(((-1.0)*cj0*r02*x1243))+((r11*sj0*x1244))+((r00*sj6*x1242))+((r10*sj0*x1245))), (((r20*x1245))+(((-1.0)*r22*x1243))+((r21*x1244))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1246=(cj5*cj6);
IkReal x1247=((1.0)*cj0);
IkReal x1248=((1.0)*sj0);
IkReal x1249=(cj5*sj6);
evalcond[0]=(((r20*x1249))+(((-1.0)*(IKcos(j3))))+(((-1.0)*r22*sj5))+((r21*x1246)));
evalcond[1]=(((r12*sj0*sj5))+(IKsin(j3))+(((-1.0)*r00*x1247*x1249))+(((-1.0)*r01*x1246*x1247))+(((-1.0)*r10*x1248*x1249))+(((-1.0)*r11*x1246*x1248))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1250=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x1250))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1250))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1251=(cj5*cj6);
IkReal x1252=(r11*sj0);
IkReal x1253=(cj0*sj6);
IkReal x1254=(cj6*sj5);
IkReal x1255=((1.0)*cj0);
IkReal x1256=(r10*sj0);
IkReal x1257=((1.0)*cj5);
IkReal x1258=(cj0*r02);
IkReal x1259=((1.0)*sj5);
IkReal x1260=(cj5*sj6);
IkReal x1261=(cj6*r00);
IkReal x1262=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x1259))+((r21*x1251))+((r20*x1260)));
evalcond[2]=((((-1.0)*cj6*x1256))+((sj6*x1252))+(((-1.0)*x1255*x1261))+((r01*x1253)));
evalcond[3]=((1.0)+(((-1.0)*r00*x1253*x1257))+(((-1.0)*r01*x1251*x1255))+((sj5*x1258))+((sj5*x1262))+(((-1.0)*sj6*x1256*x1257))+(((-1.0)*x1251*x1252)));
evalcond[4]=(((sj5*sj6*x1256))+((cj0*r01*x1254))+((r00*sj5*x1253))+((x1252*x1254))+((cj5*x1262))+((cj5*x1258)));
evalcond[5]=((((-1.0)*r11*x1251*x1255))+((r00*sj0*x1260))+((r01*sj0*x1251))+((cj0*r12*sj5))+(((-1.0)*r10*x1253*x1257))+(((-1.0)*r02*sj0*x1259)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x1256))+(((-0.026255)*cj0*x1261))+(((-1.0)*px*x1255))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x1252))+(((0.026255)*r01*x1253)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1263=(cj6*r20);
IkReal x1264=(r21*sj6);
if( IKabs((x1264+(((-1.0)*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x1264))+(((6.96378830083565e-5)*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1264+(((-1.0)*x1263))))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x1264))+(((6.96378830083565e-5)*x1263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1264+(((-1.0)*x1263))), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x1264))+(((6.96378830083565e-5)*x1263))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1265=IKcos(j4);
IkReal x1266=IKsin(j4);
IkReal x1267=((1.0)*cj5);
IkReal x1268=(cj0*r10);
IkReal x1269=(sj5*sj6);
IkReal x1270=((1.0)*cj6);
IkReal x1271=((0.026255)*cj6);
IkReal x1272=(r21*sj6);
IkReal x1273=(cj0*r11*sj6);
IkReal x1274=(cj6*r00*sj0);
IkReal x1275=(r01*sj0*sj6);
evalcond[0]=(x1266+((cj6*r20))+(((-1.0)*x1272)));
evalcond[1]=((((-1.0)*r22*x1267))+(((-1.0)*r21*sj5*x1270))+(((-1.0)*r20*x1269))+(((-1.0)*x1265)));
evalcond[2]=((0.09736)+(((0.02626)*x1266))+(((0.0718)*x1265))+pz+((r20*x1271))+(((-0.026255)*x1272)));
evalcond[3]=((((-1.0)*x1268*x1270))+x1273+x1274+x1265+(((-1.0)*x1275)));
evalcond[4]=((((-1.0)*r01*sj0*sj5*x1270))+(((-1.0)*r00*sj0*x1269))+x1266+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+((x1268*x1269))+(((-1.0)*r02*sj0*x1267)));
evalcond[5]=((-0.1246)+(((-1.0)*x1268*x1271))+(((-0.0718)*x1266))+((r00*sj0*x1271))+(((0.026255)*x1273))+(((0.02626)*x1265))+((px*sj0))+(((-1.0)*cj0*py))+(((-0.026255)*x1275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1276=(cj5*cj6);
IkReal x1277=(r11*sj0);
IkReal x1278=(cj0*sj6);
IkReal x1279=(cj6*sj5);
IkReal x1280=((1.0)*cj0);
IkReal x1281=(r10*sj0);
IkReal x1282=((1.0)*cj5);
IkReal x1283=(cj0*r02);
IkReal x1284=((1.0)*sj5);
IkReal x1285=(cj5*sj6);
IkReal x1286=(cj6*r00);
IkReal x1287=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x1276))+(((-1.0)*r22*x1284))+((r20*x1285)));
evalcond[2]=(((sj6*x1277))+(((-1.0)*cj6*x1281))+((r01*x1278))+(((-1.0)*x1280*x1286)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x1276*x1280))+((sj5*x1283))+((sj5*x1287))+(((-1.0)*x1276*x1277))+(((-1.0)*r00*x1278*x1282))+(((-1.0)*sj6*x1281*x1282)));
evalcond[4]=(((x1277*x1279))+((cj5*x1283))+((cj5*x1287))+((r00*sj5*x1278))+((cj0*r01*x1279))+((sj5*sj6*x1281)));
evalcond[5]=((((-1.0)*r02*sj0*x1284))+((r01*sj0*x1276))+(((-1.0)*r10*x1278*x1282))+((cj0*r12*sj5))+((r00*sj0*x1285))+(((-1.0)*r11*x1276*x1280)));
evalcond[6]=((0.1148)+(((-1.0)*px*x1280))+(((-0.026255)*cj6*x1281))+(((-0.026255)*cj0*x1286))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x1277))+(((0.026255)*r01*x1278)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1288=IKcos(j4);
IkReal x1289=IKsin(j4);
IkReal x1290=((1.0)*cj5);
IkReal x1291=(cj0*r10);
IkReal x1292=(sj5*sj6);
IkReal x1293=((1.0)*cj6);
IkReal x1294=((0.026255)*cj6);
IkReal x1295=(r21*sj6);
IkReal x1296=(cj0*r11*sj6);
IkReal x1297=(cj6*r00*sj0);
IkReal x1298=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x1289))+(((-1.0)*x1295))+((cj6*r20)));
evalcond[1]=(x1288+(((-1.0)*r21*sj5*x1293))+(((-1.0)*r20*x1292))+(((-1.0)*r22*x1290)));
evalcond[2]=((-0.09756)+(((-0.02626)*x1289))+((r20*x1294))+(((-0.026255)*x1295))+(((-0.0718)*x1288))+pz);
evalcond[3]=(x1288+x1296+x1297+(((-1.0)*x1298))+(((-1.0)*x1291*x1293)));
evalcond[4]=(x1289+(((-1.0)*r00*sj0*x1292))+((cj0*cj5*r12))+((x1291*x1292))+(((-1.0)*r02*sj0*x1290))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x1293)));
evalcond[5]=((-0.1246)+(((-0.026255)*x1298))+(((-0.0718)*x1289))+((r00*sj0*x1294))+(((0.02626)*x1288))+((px*sj0))+(((-1.0)*x1291*x1294))+(((0.026255)*x1296))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1299=(cj5*cj6);
IkReal x1300=((1.0)*sj0);
IkReal x1301=((1.0)*r22);
IkReal x1302=(cj0*sj5);
IkReal x1303=(cj5*sj6);
IkReal x1304=((1.0)*cj0);
IkReal x1305=(cj6*r20);
IkReal x1306=((1.0)*sj5);
IkReal x1307=(r21*sj6);
IkReal x1308=(x1303*x1304);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x1299))+(((-1.0)*sj5*x1301))+((r20*x1303)));
evalcond[2]=(x1305+(((-1.0)*x1307)));
evalcond[3]=((((-1.0)*cj5*x1301))+(((-1.0)*cj6*r21*x1306))+(((-1.0)*r20*sj6*x1306)));
evalcond[4]=((((-1.0)*r11*x1299*x1300))+(((-1.0)*r01*x1299*x1304))+(((-1.0)*r00*x1308))+(((-1.0)*r10*x1300*x1303))+((r12*sj0*sj5))+((r02*x1302)));
evalcond[5]=(((r01*sj0*x1299))+(((-1.0)*r11*x1299*x1304))+((r12*x1302))+(((-1.0)*r10*x1308))+((r00*sj0*x1303))+(((-1.0)*r02*sj5*x1300)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1307))+pz+(((0.026255)*x1305)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1309=(cj0*cj6);
IkReal x1310=(sj0*sj6);
IkReal x1311=((1.0)*r11);
IkReal x1312=(cj6*sj0);
IkReal x1313=(cj0*sj6);
if( IKabs(((((-1.0)*r01*x1313))+((r10*x1312))+(((-1.0)*x1310*x1311))+((r00*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1311*x1313))+((r01*x1310))+((r10*x1309))+(((-1.0)*r00*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1313))+((r10*x1312))+(((-1.0)*x1310*x1311))+((r00*x1309))))+IKsqr(((((-1.0)*x1311*x1313))+((r01*x1310))+((r10*x1309))+(((-1.0)*r00*x1312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x1313))+((r10*x1312))+(((-1.0)*x1310*x1311))+((r00*x1309))), ((((-1.0)*x1311*x1313))+((r01*x1310))+((r10*x1309))+(((-1.0)*r00*x1312))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1314=IKcos(j4);
IkReal x1315=IKsin(j4);
IkReal x1316=(r11*sj6);
IkReal x1317=((0.026255)*cj0);
IkReal x1318=(r01*sj6);
IkReal x1319=(sj0*sj5);
IkReal x1320=(cj6*r11);
IkReal x1321=(r10*sj6);
IkReal x1322=(cj5*r12);
IkReal x1323=(cj6*sj0);
IkReal x1324=((1.0)*sj0);
IkReal x1325=(cj5*r02);
IkReal x1326=((1.0)*r10);
IkReal x1327=(cj0*sj5);
IkReal x1328=(r00*sj6);
IkReal x1329=((0.026255)*sj0);
IkReal x1330=(cj0*cj6);
IkReal x1331=((1.0)*cj0);
IkReal x1332=(cj6*r01);
evalcond[0]=(x1315+(((-1.0)*x1323*x1326))+(((-1.0)*r00*x1330))+((sj0*x1316))+((cj0*x1318)));
evalcond[1]=((((-1.0)*x1326*x1330))+x1314+((r00*x1323))+(((-1.0)*x1318*x1324))+((cj0*x1316)));
evalcond[2]=((((-1.0)*x1314))+((x1319*x1321))+((x1319*x1320))+((x1327*x1328))+((x1327*x1332))+((sj0*x1322))+((cj0*x1325)));
evalcond[3]=(x1315+((x1320*x1327))+(((-1.0)*x1324*x1325))+(((-1.0)*x1319*x1328))+(((-1.0)*x1319*x1332))+((x1321*x1327))+((cj0*x1322)));
evalcond[4]=((-0.1246)+((x1316*x1317))+(((-1.0)*cj6*r10*x1317))+(((0.02626)*x1314))+(((-1.0)*py*x1331))+(((-0.0718)*x1315))+((px*sj0))+(((0.026255)*r00*x1323))+(((-1.0)*x1318*x1329)));
evalcond[5]=((0.21226)+((x1317*x1318))+((x1316*x1329))+(((-1.0)*px*x1331))+(((0.02626)*x1315))+(((0.0718)*x1314))+(((-1.0)*py*x1324))+(((-1.0)*cj6*r00*x1317))+(((-0.026255)*r10*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1333=(cj5*cj6);
IkReal x1334=((1.0)*sj0);
IkReal x1335=((1.0)*r22);
IkReal x1336=(cj0*sj5);
IkReal x1337=(cj5*sj6);
IkReal x1338=((1.0)*cj0);
IkReal x1339=(cj6*r20);
IkReal x1340=((1.0)*sj5);
IkReal x1341=(r21*sj6);
IkReal x1342=(x1337*x1338);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x1337))+((r21*x1333))+(((-1.0)*sj5*x1335)));
evalcond[2]=(x1339+(((-1.0)*x1341)));
evalcond[3]=((((-1.0)*r20*sj6*x1340))+(((-1.0)*cj5*x1335))+(((-1.0)*cj6*r21*x1340)));
evalcond[4]=((((-1.0)*r01*x1333*x1338))+(((-1.0)*r00*x1342))+((r12*sj0*sj5))+(((-1.0)*r11*x1333*x1334))+(((-1.0)*r10*x1334*x1337))+((r02*x1336)));
evalcond[5]=(((r00*sj0*x1337))+((r12*x1336))+((r01*sj0*x1333))+(((-1.0)*r11*x1333*x1338))+(((-1.0)*r02*sj5*x1334))+(((-1.0)*r10*x1342)));
evalcond[6]=((-0.0001)+pz+(((-0.026255)*x1341))+(((0.026255)*x1339)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1343=(sj0*sj6);
IkReal x1344=(cj6*r10);
IkReal x1345=((1.0)*sj0);
IkReal x1346=(cj6*r00);
IkReal x1347=(cj0*sj6);
if( IKabs((((r01*x1347))+((r11*x1343))+(((-1.0)*x1344*x1345))+(((-1.0)*cj0*x1346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x1344))+(((-1.0)*r11*x1347))+((r01*x1343))+(((-1.0)*x1345*x1346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1347))+((r11*x1343))+(((-1.0)*x1344*x1345))+(((-1.0)*cj0*x1346))))+IKsqr((((cj0*x1344))+(((-1.0)*r11*x1347))+((r01*x1343))+(((-1.0)*x1345*x1346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1347))+((r11*x1343))+(((-1.0)*x1344*x1345))+(((-1.0)*cj0*x1346))), (((cj0*x1344))+(((-1.0)*r11*x1347))+((r01*x1343))+(((-1.0)*x1345*x1346))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1348=IKcos(j4);
IkReal x1349=IKsin(j4);
IkReal x1350=(r11*sj6);
IkReal x1351=((0.026255)*cj0);
IkReal x1352=(r01*sj6);
IkReal x1353=(sj0*sj5);
IkReal x1354=(cj6*r11);
IkReal x1355=(r10*sj6);
IkReal x1356=(cj5*r12);
IkReal x1357=(cj6*sj0);
IkReal x1358=((1.0)*sj0);
IkReal x1359=(cj5*r02);
IkReal x1360=((1.0)*r10);
IkReal x1361=(cj0*sj5);
IkReal x1362=(r00*sj6);
IkReal x1363=((0.026255)*sj0);
IkReal x1364=(cj0*cj6);
IkReal x1365=((1.0)*cj0);
IkReal x1366=(cj6*r01);
evalcond[0]=(x1348+(((-1.0)*x1352*x1358))+((cj0*x1350))+((r00*x1357))+(((-1.0)*x1360*x1364)));
evalcond[1]=(((sj0*x1350))+((cj0*x1352))+(((-1.0)*x1357*x1360))+(((-1.0)*r00*x1364))+(((-1.0)*x1349)));
evalcond[2]=(x1348+((x1361*x1362))+((x1361*x1366))+((sj0*x1356))+((cj0*x1359))+((x1353*x1355))+((x1353*x1354)));
evalcond[3]=(((x1355*x1361))+x1349+((x1354*x1361))+(((-1.0)*x1353*x1366))+(((-1.0)*x1353*x1362))+((cj0*x1356))+(((-1.0)*x1358*x1359)));
evalcond[4]=((-0.1246)+(((-1.0)*x1352*x1363))+(((0.02626)*x1348))+(((-1.0)*cj6*r10*x1351))+((x1350*x1351))+((px*sj0))+(((0.026255)*r00*x1357))+(((-1.0)*py*x1365))+(((-0.0718)*x1349)));
evalcond[5]=((0.01734)+(((-1.0)*px*x1365))+((x1350*x1363))+(((-0.026255)*r10*x1357))+(((-0.02626)*x1349))+((x1351*x1352))+(((-1.0)*cj6*r00*x1351))+(((-0.0718)*x1348))+(((-1.0)*py*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1367=((1.0)*sj5);
IkReal x1368=((1.0)*sj6);
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(cj3,-1);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(sj3,-1);
if(!x1370.valid){
continue;
}
if( IKabs(((x1369.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1368))+(((-1.0)*cj0*r01*x1368))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1370.value)*(((((-1.0)*cj6*r21*x1367))+(((-1.0)*r20*sj6*x1367))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1369.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1368))+(((-1.0)*cj0*r01*x1368))+((cj0*cj6*r00))))))+IKsqr(((x1370.value)*(((((-1.0)*cj6*r21*x1367))+(((-1.0)*r20*sj6*x1367))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1369.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1368))+(((-1.0)*cj0*r01*x1368))+((cj0*cj6*r00))))), ((x1370.value)*(((((-1.0)*cj6*r21*x1367))+(((-1.0)*r20*sj6*x1367))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1371=IKcos(j4);
IkReal x1372=IKsin(j4);
IkReal x1373=(r11*sj0);
IkReal x1374=((0.026255)*sj6);
IkReal x1375=(cj0*r01);
IkReal x1376=(cj5*r12);
IkReal x1377=(cj6*sj5);
IkReal x1378=(r10*sj0);
IkReal x1379=(sj5*sj6);
IkReal x1380=(cj0*r11);
IkReal x1381=((1.0)*cj5);
IkReal x1382=((1.0)*cj6);
IkReal x1383=(cj0*r10);
IkReal x1384=((1.0)*sj0);
IkReal x1385=(cj0*r00);
IkReal x1386=((0.026255)*cj6);
IkReal x1387=((1.0)*r21);
IkReal x1388=((1.0)*cj0);
IkReal x1389=(sj3*x1372);
IkReal x1390=(r00*x1386);
IkReal x1391=((1.0)*x1371);
IkReal x1392=(cj3*x1372);
IkReal x1393=((0.0718)*x1371);
evalcond[0]=(x1389+((cj6*r20))+(((-1.0)*sj6*x1387)));
evalcond[1]=((((-1.0)*r20*x1379))+(((-1.0)*x1377*x1387))+(((-1.0)*r22*x1381))+(((-1.0)*sj3*x1391)));
evalcond[2]=((((-1.0)*r01*sj6*x1384))+x1371+((sj6*x1380))+((cj6*r00*sj0))+(((-1.0)*x1382*x1383)));
evalcond[3]=(x1392+(((-1.0)*x1382*x1385))+(((-1.0)*x1378*x1382))+((sj6*x1375))+((sj6*x1373)));
evalcond[4]=((-0.0001)+((r20*x1386))+(((-1.0)*r21*x1374))+pz+((sj3*x1393))+(((0.09746)*sj3))+(((0.02626)*x1389)));
evalcond[5]=(((cj0*cj5*r02))+((x1375*x1377))+(((-1.0)*cj3*x1391))+((x1379*x1385))+((x1378*x1379))+((sj0*x1376))+((x1373*x1377)));
evalcond[6]=(x1372+(((-1.0)*r01*x1377*x1384))+(((-1.0)*r02*sj0*x1381))+(((-1.0)*r00*x1379*x1384))+((x1377*x1380))+((x1379*x1383))+((cj0*x1376)));
evalcond[7]=((-0.1246)+(((-1.0)*r01*sj0*x1374))+(((-1.0)*x1383*x1386))+(((0.02626)*x1371))+((sj0*x1390))+(((-0.0718)*x1372))+((px*sj0))+((x1374*x1380))+(((-1.0)*py*x1388)));
evalcond[8]=((0.1148)+((cj3*x1393))+((x1374*x1375))+(((-1.0)*px*x1388))+(((0.09746)*cj3))+(((-1.0)*x1378*x1386))+(((0.02626)*x1392))+(((-1.0)*py*x1384))+(((-1.0)*x1385*x1386))+((x1373*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1394=((1.0)*cj6);
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(sj3,-1);
if(!x1395.valid){
continue;
}
if( IKabs(((x1395.value)*((((r21*sj6))+(((-1.0)*r20*x1394)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*x1394))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1395.value)*((((r21*sj6))+(((-1.0)*r20*x1394))))))+IKsqr(((((-1.0)*r00*sj0*x1394))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1395.value)*((((r21*sj6))+(((-1.0)*r20*x1394))))), ((((-1.0)*r00*sj0*x1394))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1396=IKcos(j4);
IkReal x1397=IKsin(j4);
IkReal x1398=(r11*sj0);
IkReal x1399=((0.026255)*sj6);
IkReal x1400=(cj0*r01);
IkReal x1401=(cj5*r12);
IkReal x1402=(cj6*sj5);
IkReal x1403=(r10*sj0);
IkReal x1404=(sj5*sj6);
IkReal x1405=(cj0*r11);
IkReal x1406=((1.0)*cj5);
IkReal x1407=((1.0)*cj6);
IkReal x1408=(cj0*r10);
IkReal x1409=((1.0)*sj0);
IkReal x1410=(cj0*r00);
IkReal x1411=((0.026255)*cj6);
IkReal x1412=((1.0)*r21);
IkReal x1413=((1.0)*cj0);
IkReal x1414=(sj3*x1397);
IkReal x1415=(r00*x1411);
IkReal x1416=((1.0)*x1396);
IkReal x1417=(cj3*x1397);
IkReal x1418=((0.0718)*x1396);
evalcond[0]=(x1414+((cj6*r20))+(((-1.0)*sj6*x1412)));
evalcond[1]=((((-1.0)*r22*x1406))+(((-1.0)*r20*x1404))+(((-1.0)*sj3*x1416))+(((-1.0)*x1402*x1412)));
evalcond[2]=(x1396+(((-1.0)*r01*sj6*x1409))+((cj6*r00*sj0))+((sj6*x1405))+(((-1.0)*x1407*x1408)));
evalcond[3]=(((sj6*x1398))+((sj6*x1400))+(((-1.0)*x1407*x1410))+x1417+(((-1.0)*x1403*x1407)));
evalcond[4]=((-0.0001)+((r20*x1411))+(((-1.0)*r21*x1399))+pz+(((0.02626)*x1414))+(((0.09746)*sj3))+((sj3*x1418)));
evalcond[5]=(((cj0*cj5*r02))+(((-1.0)*cj3*x1416))+((x1404*x1410))+((sj0*x1401))+((x1403*x1404))+((x1398*x1402))+((x1400*x1402)));
evalcond[6]=(x1397+(((-1.0)*r01*x1402*x1409))+(((-1.0)*r00*x1404*x1409))+((cj0*x1401))+(((-1.0)*r02*sj0*x1406))+((x1404*x1408))+((x1402*x1405)));
evalcond[7]=((-0.1246)+(((-0.0718)*x1397))+(((-1.0)*x1408*x1411))+((x1399*x1405))+((px*sj0))+(((-1.0)*r01*sj0*x1399))+((sj0*x1415))+(((0.02626)*x1396))+(((-1.0)*py*x1413)));
evalcond[8]=((0.1148)+((x1398*x1399))+(((-1.0)*x1410*x1411))+((x1399*x1400))+(((-1.0)*x1403*x1411))+(((-1.0)*px*x1413))+(((0.02626)*x1417))+(((0.09746)*cj3))+(((-1.0)*py*x1409))+((cj3*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1419=((1.0)*sj5);
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x1419))+(((-1.0)*r20*sj6*x1419))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1420.value)))+(x1421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1422=IKcos(j4);
IkReal x1423=IKsin(j4);
IkReal x1424=(r11*sj0);
IkReal x1425=((0.026255)*sj6);
IkReal x1426=(cj0*r01);
IkReal x1427=(cj5*r12);
IkReal x1428=(cj6*sj5);
IkReal x1429=(r10*sj0);
IkReal x1430=(sj5*sj6);
IkReal x1431=(cj0*r11);
IkReal x1432=((1.0)*cj5);
IkReal x1433=((1.0)*cj6);
IkReal x1434=(cj0*r10);
IkReal x1435=((1.0)*sj0);
IkReal x1436=(cj0*r00);
IkReal x1437=((0.026255)*cj6);
IkReal x1438=((1.0)*r21);
IkReal x1439=((1.0)*cj0);
IkReal x1440=(sj3*x1423);
IkReal x1441=(r00*x1437);
IkReal x1442=((1.0)*x1422);
IkReal x1443=(cj3*x1423);
IkReal x1444=((0.0718)*x1422);
evalcond[0]=(x1440+((cj6*r20))+(((-1.0)*sj6*x1438)));
evalcond[1]=((((-1.0)*sj3*x1442))+(((-1.0)*r22*x1432))+(((-1.0)*x1428*x1438))+(((-1.0)*r20*x1430)));
evalcond[2]=((((-1.0)*r01*sj6*x1435))+((cj6*r00*sj0))+((sj6*x1431))+x1422+(((-1.0)*x1433*x1434)));
evalcond[3]=((((-1.0)*x1429*x1433))+x1443+((sj6*x1426))+((sj6*x1424))+(((-1.0)*x1433*x1436)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1425))+(((0.02626)*x1440))+((r20*x1437))+pz+((sj3*x1444))+(((0.09746)*sj3)));
evalcond[5]=(((x1429*x1430))+((x1424*x1428))+((cj0*cj5*r02))+((x1430*x1436))+((x1426*x1428))+((sj0*x1427))+(((-1.0)*cj3*x1442)));
evalcond[6]=(((x1428*x1431))+((x1430*x1434))+(((-1.0)*r01*x1428*x1435))+(((-1.0)*r02*sj0*x1432))+x1423+(((-1.0)*r00*x1430*x1435))+((cj0*x1427)));
evalcond[7]=((-0.1246)+(((-1.0)*x1434*x1437))+((sj0*x1441))+((x1425*x1431))+(((0.02626)*x1422))+((px*sj0))+(((-0.0718)*x1423))+(((-1.0)*py*x1439))+(((-1.0)*r01*sj0*x1425)));
evalcond[8]=((0.1148)+((x1425*x1426))+((x1424*x1425))+(((-1.0)*x1436*x1437))+(((-1.0)*x1429*x1437))+(((0.02626)*x1443))+(((-1.0)*px*x1439))+((cj3*x1444))+(((0.09746)*cj3))+(((-1.0)*py*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1445=(cj5*cj6);
IkReal x1446=((1.0)*cj0);
IkReal x1447=((1.0)*sj0);
IkReal x1448=(cj5*sj6);
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(sj2,-1);
if(!x1449.valid){
continue;
}
if( IKabs(((x1449.value)*(((((-1.0)*r01*x1445*x1446))+((r12*sj0*sj5))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r00*x1446*x1448))+(((-1.0)*r11*x1445*x1447))+((cj0*r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1445))+(((-1.0)*r22*sj5))+((r20*x1448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1449.value)*(((((-1.0)*r01*x1445*x1446))+((r12*sj0*sj5))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r00*x1446*x1448))+(((-1.0)*r11*x1445*x1447))+((cj0*r02*sj5))))))+IKsqr((((r21*x1445))+(((-1.0)*r22*sj5))+((r20*x1448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1449.value)*(((((-1.0)*r01*x1445*x1446))+((r12*sj0*sj5))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*r00*x1446*x1448))+(((-1.0)*r11*x1445*x1447))+((cj0*r02*sj5))))), (((r21*x1445))+(((-1.0)*r22*sj5))+((r20*x1448))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1450=IKsin(j3);
IkReal x1451=(cj5*cj6);
IkReal x1452=((1.0)*cj0);
IkReal x1453=((1.0)*sj5);
IkReal x1454=((1.0)*sj0);
IkReal x1455=(cj0*sj5);
IkReal x1456=(cj5*sj6);
IkReal x1457=((1.0)*x1450);
IkReal x1458=(r10*x1456);
evalcond[0]=((((-1.0)*r22*x1453))+((r20*x1456))+((r21*x1451))+(((-1.0)*(IKcos(j3)))));
evalcond[1]=((((-1.0)*cj2*x1457))+((r00*sj0*x1456))+(((-1.0)*r02*sj0*x1453))+((r12*x1455))+(((-1.0)*r11*x1451*x1452))+(((-1.0)*x1452*x1458))+((r01*sj0*x1451)));
evalcond[2]=((((-1.0)*r00*x1452*x1456))+(((-1.0)*r01*x1451*x1452))+(((-1.0)*x1454*x1458))+((r12*sj0*sj5))+(((-1.0)*r11*x1451*x1454))+(((-1.0)*sj2*x1457))+((r02*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1459=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x1459))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1459))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1460=(cj5*cj6);
IkReal x1461=((1.0)*sj0);
IkReal x1462=((1.0)*r22);
IkReal x1463=(cj0*sj5);
IkReal x1464=(cj5*sj6);
IkReal x1465=((1.0)*cj0);
IkReal x1466=(cj6*r20);
IkReal x1467=((1.0)*sj5);
IkReal x1468=(r21*sj6);
IkReal x1469=(x1464*x1465);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x1464))+(((-1.0)*sj5*x1462))+((r21*x1460)));
evalcond[2]=(x1466+(((-1.0)*x1468)));
evalcond[3]=((((-1.0)*cj5*x1462))+(((-1.0)*r20*sj6*x1467))+(((-1.0)*cj6*r21*x1467)));
evalcond[4]=((((-1.0)*r01*x1460*x1465))+(((-1.0)*r11*x1460*x1461))+((r12*sj0*sj5))+(((-1.0)*r00*x1469))+(((-1.0)*r10*x1461*x1464))+((r02*x1463)));
evalcond[5]=((((-1.0)*r02*sj5*x1461))+(((-1.0)*r11*x1460*x1465))+((r01*sj0*x1460))+((r12*x1463))+((r00*sj0*x1464))+(((-1.0)*r10*x1469)));
evalcond[6]=((-0.0001)+(((0.026255)*x1466))+pz+(((-0.026255)*x1468)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1470=((1.0)*r10);
IkReal x1471=((1.0)*cj2);
IkReal x1472=(r11*sj6);
IkReal x1473=(sj0*sj2);
IkReal x1474=(cj0*cj2);
IkReal x1475=(r01*sj6);
IkReal x1476=(cj0*x1475);
IkReal x1477=(cj6*x1473);
IkReal x1478=(cj0*cj6*sj2);
IkReal x1479=(cj2*cj6*sj0);
if( IKabs(((((-1.0)*cj6*x1470*x1474))+(((-1.0)*x1470*x1477))+((x1472*x1473))+((x1472*x1474))+((sj2*x1476))+(((-1.0)*sj0*x1471*x1475))+(((-1.0)*r00*x1478))+((r00*x1479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1471*x1476))+((cj0*sj2*x1472))+(((-1.0)*x1470*x1478))+((r10*x1479))+(((-1.0)*sj0*x1471*x1472))+((r00*x1477))+(((-1.0)*x1473*x1475))+((cj6*r00*x1474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x1470*x1474))+(((-1.0)*x1470*x1477))+((x1472*x1473))+((x1472*x1474))+((sj2*x1476))+(((-1.0)*sj0*x1471*x1475))+(((-1.0)*r00*x1478))+((r00*x1479))))+IKsqr(((((-1.0)*x1471*x1476))+((cj0*sj2*x1472))+(((-1.0)*x1470*x1478))+((r10*x1479))+(((-1.0)*sj0*x1471*x1472))+((r00*x1477))+(((-1.0)*x1473*x1475))+((cj6*r00*x1474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*x1470*x1474))+(((-1.0)*x1470*x1477))+((x1472*x1473))+((x1472*x1474))+((sj2*x1476))+(((-1.0)*sj0*x1471*x1475))+(((-1.0)*r00*x1478))+((r00*x1479))), ((((-1.0)*x1471*x1476))+((cj0*sj2*x1472))+(((-1.0)*x1470*x1478))+((r10*x1479))+(((-1.0)*sj0*x1471*x1472))+((r00*x1477))+(((-1.0)*x1473*x1475))+((cj6*r00*x1474))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j4);
IkReal x1481=IKcos(j4);
IkReal x1482=(r11*sj6);
IkReal x1483=((0.026255)*cj0);
IkReal x1484=(r01*sj6);
IkReal x1485=(sj0*sj5);
IkReal x1486=(cj6*r11);
IkReal x1487=(r10*sj6);
IkReal x1488=((0.026255)*sj0);
IkReal x1489=(cj0*cj5);
IkReal x1490=(cj6*r00);
IkReal x1491=((1.0)*sj0);
IkReal x1492=(cj0*sj5);
IkReal x1493=(r00*sj6);
IkReal x1494=((1.0)*cj0);
IkReal x1495=(cj6*r10);
IkReal x1496=(cj6*r01);
IkReal x1497=(cj2*x1481);
IkReal x1498=((1.0)*x1495);
IkReal x1499=((0.02626)*x1480);
IkReal x1500=(cj2*x1480);
IkReal x1501=((0.0718)*x1481);
IkReal x1502=(sj2*x1481);
IkReal x1503=(sj2*x1480);
IkReal x1504=((1.0)*x1503);
evalcond[0]=((((-1.0)*x1504))+((sj0*x1482))+(((-1.0)*x1491*x1495))+((cj0*x1484))+x1497+(((-1.0)*x1490*x1494)));
evalcond[1]=((((-1.0)*x1494*x1495))+(((-1.0)*x1502))+(((-1.0)*x1500))+((sj0*x1490))+(((-1.0)*x1484*x1491))+((cj0*x1482)));
evalcond[2]=(((cj5*r12*sj0))+x1502+x1500+((x1492*x1493))+((x1492*x1496))+((x1485*x1487))+((x1485*x1486))+((r02*x1489)));
evalcond[3]=((((-1.0)*x1504))+(((-1.0)*x1485*x1496))+(((-1.0)*x1485*x1493))+((r12*x1489))+((x1487*x1492))+((x1486*x1492))+(((-1.0)*cj5*r02*x1491))+x1497);
evalcond[4]=((-0.1255)+(((-0.0718)*x1497))+(((-1.0)*cj2*x1499))+(((-0.02626)*x1502))+((x1482*x1483))+(((-1.0)*x1484*x1488))+(((-0.21326)*cj2))+(((0.0718)*x1503))+(((-0.0009)*sj2))+(((-1.0)*x1483*x1495))+((px*sj0))+(((-1.0)*py*x1494))+((x1488*x1490)));
evalcond[5]=((-0.001)+(((-1.0)*sj2*x1501))+((x1482*x1488))+(((0.02626)*x1497))+(((-0.0718)*x1500))+(((-1.0)*px*x1494))+(((0.0009)*cj2))+((x1483*x1484))+(((-1.0)*sj2*x1499))+(((-0.21326)*sj2))+(((-1.0)*x1483*x1490))+(((-1.0)*x1488*x1495))+(((-1.0)*py*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1505=(cj5*cj6);
IkReal x1506=((1.0)*sj0);
IkReal x1507=((1.0)*r22);
IkReal x1508=(cj0*sj5);
IkReal x1509=(cj5*sj6);
IkReal x1510=((1.0)*cj0);
IkReal x1511=(cj6*r20);
IkReal x1512=((1.0)*sj5);
IkReal x1513=(r21*sj6);
IkReal x1514=(x1509*x1510);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x1507))+((r20*x1509))+((r21*x1505)));
evalcond[2]=((((-1.0)*x1513))+x1511);
evalcond[3]=((((-1.0)*r20*sj6*x1512))+(((-1.0)*cj5*x1507))+(((-1.0)*cj6*r21*x1512)));
evalcond[4]=((((-1.0)*r00*x1514))+((r12*sj0*sj5))+(((-1.0)*r01*x1505*x1510))+((r02*x1508))+(((-1.0)*r11*x1505*x1506))+(((-1.0)*r10*x1506*x1509)));
evalcond[5]=(((r01*sj0*x1505))+((r12*x1508))+(((-1.0)*r02*sj5*x1506))+((r00*sj0*x1509))+(((-1.0)*r11*x1505*x1510))+(((-1.0)*r10*x1514)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1513))+pz+(((0.026255)*x1511)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=(sj0*sj2);
IkReal x1516=(cj0*cj2);
IkReal x1517=(r01*sj6);
IkReal x1518=(cj6*r10);
IkReal x1519=(cj2*sj0);
IkReal x1520=(cj0*sj2);
IkReal x1521=(cj6*r00);
IkReal x1522=((1.0)*r11*sj6);
IkReal x1523=((1.0)*x1520);
if( IKabs(((((-1.0)*x1515*x1522))+(((-1.0)*x1519*x1521))+((x1516*x1518))+((x1520*x1521))+((x1515*x1518))+((x1517*x1519))+(((-1.0)*x1517*x1523))+(((-1.0)*x1516*x1522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1516*x1517))+(((-1.0)*x1519*x1522))+((x1518*x1519))+(((-1.0)*x1518*x1523))+((r11*sj6*x1520))+((x1516*x1521))+((x1515*x1521))+(((-1.0)*x1515*x1517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1515*x1522))+(((-1.0)*x1519*x1521))+((x1516*x1518))+((x1520*x1521))+((x1515*x1518))+((x1517*x1519))+(((-1.0)*x1517*x1523))+(((-1.0)*x1516*x1522))))+IKsqr(((((-1.0)*x1516*x1517))+(((-1.0)*x1519*x1522))+((x1518*x1519))+(((-1.0)*x1518*x1523))+((r11*sj6*x1520))+((x1516*x1521))+((x1515*x1521))+(((-1.0)*x1515*x1517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1515*x1522))+(((-1.0)*x1519*x1521))+((x1516*x1518))+((x1520*x1521))+((x1515*x1518))+((x1517*x1519))+(((-1.0)*x1517*x1523))+(((-1.0)*x1516*x1522))), ((((-1.0)*x1516*x1517))+(((-1.0)*x1519*x1522))+((x1518*x1519))+(((-1.0)*x1518*x1523))+((r11*sj6*x1520))+((x1516*x1521))+((x1515*x1521))+(((-1.0)*x1515*x1517))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j4);
IkReal x1525=IKcos(j4);
IkReal x1526=(r11*sj6);
IkReal x1527=((0.026255)*cj0);
IkReal x1528=(r01*sj6);
IkReal x1529=(sj0*sj5);
IkReal x1530=(cj6*r11);
IkReal x1531=(r10*sj6);
IkReal x1532=(cj5*r12);
IkReal x1533=(cj6*sj0);
IkReal x1534=((1.0)*sj0);
IkReal x1535=(cj5*r02);
IkReal x1536=((1.0)*r10);
IkReal x1537=(cj0*sj5);
IkReal x1538=(r00*sj6);
IkReal x1539=((0.026255)*sj0);
IkReal x1540=(cj0*cj6);
IkReal x1541=((1.0)*cj0);
IkReal x1542=(cj6*r01);
IkReal x1543=(cj2*x1524);
IkReal x1544=(sj2*x1524);
IkReal x1545=((0.0718)*x1525);
IkReal x1546=(cj2*x1525);
IkReal x1547=(sj2*x1525);
IkReal x1548=((1.0)*x1547);
evalcond[0]=(((cj0*x1528))+((sj0*x1526))+x1546+x1544+(((-1.0)*x1533*x1536))+(((-1.0)*r00*x1540)));
evalcond[1]=(((cj0*x1526))+((r00*x1533))+x1543+(((-1.0)*x1536*x1540))+(((-1.0)*x1528*x1534))+(((-1.0)*x1548)));
evalcond[2]=(((x1537*x1542))+((sj0*x1532))+((x1537*x1538))+x1543+((x1529*x1531))+((x1529*x1530))+(((-1.0)*x1548))+((cj0*x1535)));
evalcond[3]=((((-1.0)*x1544))+(((-1.0)*x1546))+(((-1.0)*x1529*x1538))+(((-1.0)*x1529*x1542))+((x1531*x1537))+((x1530*x1537))+(((-1.0)*x1534*x1535))+((cj0*x1532)));
evalcond[4]=((-0.1255)+(((-0.02626)*x1547))+(((-1.0)*cj6*r10*x1527))+(((-1.0)*py*x1541))+((cj2*x1545))+(((-0.0009)*sj2))+((x1526*x1527))+(((-1.0)*x1528*x1539))+((px*sj0))+(((-0.01834)*cj2))+(((0.026255)*r00*x1533))+(((0.0718)*x1544))+(((0.02626)*x1543)));
evalcond[5]=((-0.001)+(((-0.01834)*sj2))+(((0.0009)*cj2))+(((-1.0)*px*x1541))+((x1526*x1539))+((x1527*x1528))+(((-1.0)*cj6*r00*x1527))+(((-0.026255)*r10*x1533))+(((-0.0718)*x1543))+(((-1.0)*py*x1534))+((sj2*x1545))+(((0.02626)*x1544))+(((0.02626)*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1549=(cj0*sj5);
IkReal x1550=(cj5*cj6);
IkReal x1551=((1.0)*sj5);
IkReal x1552=((1.0)*cj0);
IkReal x1553=((1.0)*sj0);
IkReal x1554=(cj5*sj6);
IkReal x1555=(r10*x1554);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x1551))+((r21*x1550))+((r20*x1554))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r00*x1552*x1554))+(((-1.0)*r01*x1550*x1552))+((r12*sj0*sj5))+(((-1.0)*x1553*x1555))+((r02*x1549))+(((-1.0)*r11*x1550*x1553)));
evalcond[3]=(((r01*sj0*x1550))+(((-1.0)*r02*sj0*x1551))+((r00*sj0*x1554))+(((-1.0)*x1552*x1555))+((r12*x1549))+(((-1.0)*r11*x1550*x1552)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1556=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x1556))+(((-1.0)*r20*sj6*x1556))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1557=(cj5*cj6);
IkReal x1558=((1.0)*sj0);
IkReal x1559=((1.0)*r22);
IkReal x1560=(cj0*sj5);
IkReal x1561=(cj5*sj6);
IkReal x1562=((1.0)*cj0);
IkReal x1563=(cj6*r20);
IkReal x1564=((1.0)*sj5);
IkReal x1565=(r21*sj6);
IkReal x1566=(x1561*x1562);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x1559))+((r20*x1561))+((r21*x1557)));
evalcond[2]=(x1563+(((-1.0)*x1565)));
evalcond[3]=((((-1.0)*cj5*x1559))+(((-1.0)*cj6*r21*x1564))+(((-1.0)*r20*sj6*x1564)));
evalcond[4]=((((-1.0)*r11*x1557*x1558))+((r12*sj0*sj5))+(((-1.0)*r00*x1566))+((r02*x1560))+(((-1.0)*r10*x1558*x1561))+(((-1.0)*r01*x1557*x1562)));
evalcond[5]=(((r01*sj0*x1557))+((r00*sj0*x1561))+(((-1.0)*r11*x1557*x1562))+((r12*x1560))+(((-1.0)*r10*x1566))+(((-1.0)*r02*sj5*x1558)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1565))+(((0.026255)*x1563))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1567=(sj0*sj6);
IkReal x1568=(cj0*sj6);
IkReal x1569=(cj6*r00);
IkReal x1570=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x1569))+((r11*x1567))+(((-1.0)*sj0*x1570))+((r01*x1568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1567))+((r11*x1568))+((sj0*x1569))+(((-1.0)*cj0*x1570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1569))+((r11*x1567))+(((-1.0)*sj0*x1570))+((r01*x1568))))+IKsqr(((((-1.0)*r01*x1567))+((r11*x1568))+((sj0*x1569))+(((-1.0)*cj0*x1570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x1569))+((r11*x1567))+(((-1.0)*sj0*x1570))+((r01*x1568))), ((((-1.0)*r01*x1567))+((r11*x1568))+((sj0*x1569))+(((-1.0)*cj0*x1570))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1571=IKcos(j4);
IkReal x1572=IKsin(j4);
IkReal x1573=(r11*sj6);
IkReal x1574=((0.026255)*cj0);
IkReal x1575=(r01*sj6);
IkReal x1576=(sj0*sj5);
IkReal x1577=(cj6*r11);
IkReal x1578=(r10*sj6);
IkReal x1579=(cj5*r12);
IkReal x1580=(cj6*sj0);
IkReal x1581=((1.0)*sj0);
IkReal x1582=(cj5*r02);
IkReal x1583=((1.0)*r10);
IkReal x1584=(cj0*sj5);
IkReal x1585=(r00*sj6);
IkReal x1586=((0.026255)*sj0);
IkReal x1587=(cj0*cj6);
IkReal x1588=((1.0)*cj0);
IkReal x1589=(cj6*r01);
IkReal x1590=((1.0)*x1572);
evalcond[0]=((((-1.0)*x1590))+(((-1.0)*r00*x1587))+(((-1.0)*x1580*x1583))+((sj0*x1573))+((cj0*x1575)));
evalcond[1]=(((cj0*x1573))+(((-1.0)*x1575*x1581))+(((-1.0)*x1571))+((r00*x1580))+(((-1.0)*x1583*x1587)));
evalcond[2]=(((x1576*x1577))+((x1576*x1578))+((x1584*x1585))+((x1584*x1589))+((sj0*x1579))+x1571+((cj0*x1582)));
evalcond[3]=((((-1.0)*x1590))+(((-1.0)*x1576*x1585))+(((-1.0)*x1576*x1589))+((cj0*x1579))+((x1577*x1584))+(((-1.0)*x1581*x1582))+((x1578*x1584)));
evalcond[4]=((-0.1264)+(((-1.0)*py*x1588))+((x1573*x1574))+((px*sj0))+(((0.026255)*r00*x1580))+(((-1.0)*cj6*r10*x1574))+(((0.0718)*x1572))+(((-1.0)*x1575*x1586))+(((-0.02626)*x1571)));
evalcond[5]=((-0.21426)+(((-1.0)*py*x1581))+((x1573*x1586))+(((-0.026255)*r10*x1580))+(((-0.0718)*x1571))+(((-1.0)*px*x1588))+(((-1.0)*cj6*r00*x1574))+((x1574*x1575))+(((-0.02626)*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1591=(cj5*cj6);
IkReal x1592=((1.0)*sj0);
IkReal x1593=((1.0)*r22);
IkReal x1594=(cj0*sj5);
IkReal x1595=(cj5*sj6);
IkReal x1596=((1.0)*cj0);
IkReal x1597=(cj6*r20);
IkReal x1598=((1.0)*sj5);
IkReal x1599=(r21*sj6);
IkReal x1600=(x1595*x1596);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x1595))+(((-1.0)*sj5*x1593))+((r21*x1591)));
evalcond[2]=(x1597+(((-1.0)*x1599)));
evalcond[3]=((((-1.0)*r20*sj6*x1598))+(((-1.0)*cj5*x1593))+(((-1.0)*cj6*r21*x1598)));
evalcond[4]=((((-1.0)*r11*x1591*x1592))+(((-1.0)*r10*x1592*x1595))+((r12*sj0*sj5))+(((-1.0)*r00*x1600))+((r02*x1594))+(((-1.0)*r01*x1591*x1596)));
evalcond[5]=((((-1.0)*r11*x1591*x1596))+((r12*x1594))+((r00*sj0*x1595))+((r01*sj0*x1591))+(((-1.0)*r02*sj5*x1592))+(((-1.0)*r10*x1600)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1599))+pz+(((0.026255)*x1597)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1601=(cj0*cj6);
IkReal x1602=(cj6*sj0);
IkReal x1603=(cj0*sj6);
IkReal x1604=((1.0)*sj0*sj6);
if( IKabs((((r00*x1601))+((r10*x1602))+(((-1.0)*r01*x1603))+(((-1.0)*r11*x1604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1602))+((r11*x1603))+(((-1.0)*r01*x1604))+(((-1.0)*r10*x1601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1601))+((r10*x1602))+(((-1.0)*r01*x1603))+(((-1.0)*r11*x1604))))+IKsqr((((r00*x1602))+((r11*x1603))+(((-1.0)*r01*x1604))+(((-1.0)*r10*x1601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x1601))+((r10*x1602))+(((-1.0)*r01*x1603))+(((-1.0)*r11*x1604))), (((r00*x1602))+((r11*x1603))+(((-1.0)*r01*x1604))+(((-1.0)*r10*x1601))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1605=IKsin(j4);
IkReal x1606=IKcos(j4);
IkReal x1607=(r11*sj6);
IkReal x1608=((0.026255)*cj0);
IkReal x1609=(r01*sj6);
IkReal x1610=(sj0*sj5);
IkReal x1611=(cj6*r11);
IkReal x1612=(r10*sj6);
IkReal x1613=(cj5*r12);
IkReal x1614=(cj6*sj0);
IkReal x1615=((1.0)*sj0);
IkReal x1616=(cj5*r02);
IkReal x1617=((1.0)*r10);
IkReal x1618=(cj0*sj5);
IkReal x1619=(r00*sj6);
IkReal x1620=((0.026255)*sj0);
IkReal x1621=(cj0*cj6);
IkReal x1622=((1.0)*cj0);
IkReal x1623=(cj6*r01);
IkReal x1624=((1.0)*x1606);
evalcond[0]=((((-1.0)*r00*x1621))+x1605+((cj0*x1609))+((sj0*x1607))+(((-1.0)*x1614*x1617)));
evalcond[1]=(((r00*x1614))+(((-1.0)*x1624))+(((-1.0)*x1617*x1621))+((cj0*x1607))+(((-1.0)*x1609*x1615)));
evalcond[2]=(((cj0*x1616))+((sj0*x1613))+(((-1.0)*x1624))+((x1618*x1623))+((x1618*x1619))+((x1610*x1611))+((x1610*x1612)));
evalcond[3]=((((-1.0)*x1605))+(((-1.0)*x1610*x1623))+((cj0*x1613))+(((-1.0)*x1610*x1619))+((x1612*x1618))+((x1611*x1618))+(((-1.0)*x1615*x1616)));
evalcond[4]=((-0.1264)+(((0.026255)*r00*x1614))+(((-0.02626)*x1606))+(((-1.0)*cj6*r10*x1608))+(((0.0718)*x1605))+(((-1.0)*py*x1622))+((x1607*x1608))+(((-1.0)*x1609*x1620))+((px*sj0)));
evalcond[5]=((-0.01934)+(((-0.026255)*r10*x1614))+(((-1.0)*py*x1615))+(((0.0718)*x1606))+((x1608*x1609))+((x1607*x1620))+(((-1.0)*px*x1622))+(((-1.0)*cj6*r00*x1608))+(((0.02626)*x1605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1625=((1.0)*cj6);
CheckValue<IkReal> x1626=IKPowWithIntegerCheck(sj3,-1);
if(!x1626.valid){
continue;
}
if( IKabs(((x1626.value)*(((((-1.0)*r20*x1625))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r10*x1625))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1626.value)*(((((-1.0)*r20*x1625))+((r21*sj6))))))+IKsqr(((((-1.0)*cj0*r10*x1625))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1626.value)*(((((-1.0)*r20*x1625))+((r21*sj6))))), ((((-1.0)*cj0*r10*x1625))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1627=IKcos(j4);
IkReal x1628=IKsin(j4);
IkReal x1629=(r11*sj0);
IkReal x1630=((0.026255)*sj6);
IkReal x1631=(cj0*r01);
IkReal x1632=(cj6*sj5);
IkReal x1633=(r10*sj0);
IkReal x1634=(sj5*sj6);
IkReal x1635=(cj0*r11);
IkReal x1636=((1.0)*cj5);
IkReal x1637=((1.0)*cj6);
IkReal x1638=(cj0*r10);
IkReal x1639=((1.0)*sj0);
IkReal x1640=(cj0*r00);
IkReal x1641=(cj5*r12);
IkReal x1642=((0.026255)*cj6);
IkReal x1643=((1.0)*r21);
IkReal x1644=((1.0)*cj0);
IkReal x1645=((1.0)*x1628);
IkReal x1646=(sj3*x1628);
IkReal x1647=(cj6*r00*sj0);
IkReal x1648=((1.0)*x1627);
IkReal x1649=(cj3*x1627);
evalcond[0]=(x1646+(((-1.0)*sj6*x1643))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x1648))+(((-1.0)*r22*x1636))+(((-1.0)*r20*x1634))+(((-1.0)*x1632*x1643)));
evalcond[2]=(x1647+(((-1.0)*r01*sj6*x1639))+(((-1.0)*x1637*x1638))+(((-1.0)*x1648))+((sj6*x1635)));
evalcond[3]=(((sj6*x1629))+(((-1.0)*x1633*x1637))+(((-1.0)*cj3*x1645))+(((-1.0)*x1637*x1640))+((sj6*x1631)));
evalcond[4]=((-0.0001)+(((0.0718)*sj3*x1627))+(((0.02626)*x1646))+((r20*x1642))+(((-1.0)*r21*x1630))+pz+(((0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x1641))+x1649+((x1629*x1632))+((x1633*x1634))+((x1631*x1632))+((x1634*x1640)));
evalcond[6]=((((-1.0)*r01*x1632*x1639))+(((-1.0)*x1645))+(((-1.0)*r02*sj0*x1636))+((x1632*x1635))+((cj0*x1641))+(((-1.0)*r00*x1634*x1639))+((x1634*x1638)));
evalcond[7]=((-0.1264)+(((-1.0)*py*x1644))+(((-0.02626)*x1627))+(((-1.0)*x1638*x1642))+(((0.0718)*x1628))+((r00*sj0*x1642))+((px*sj0))+((x1630*x1635))+(((-1.0)*r01*sj0*x1630)));
evalcond[8]=((-0.1168)+(((-0.0718)*x1649))+(((-0.02626)*cj3*x1628))+(((-1.0)*px*x1644))+((x1629*x1630))+(((-1.0)*x1633*x1642))+(((-1.0)*x1640*x1642))+(((-0.09746)*cj3))+((x1630*x1631))+(((-1.0)*py*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1650=((1.0)*sj5);
CheckValue<IkReal> x1651=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1651.valid){
continue;
}
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x1650))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x1650))),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1651.value)))+(x1652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1653=IKcos(j4);
IkReal x1654=IKsin(j4);
IkReal x1655=(r11*sj0);
IkReal x1656=((0.026255)*sj6);
IkReal x1657=(cj0*r01);
IkReal x1658=(cj6*sj5);
IkReal x1659=(r10*sj0);
IkReal x1660=(sj5*sj6);
IkReal x1661=(cj0*r11);
IkReal x1662=((1.0)*cj5);
IkReal x1663=((1.0)*cj6);
IkReal x1664=(cj0*r10);
IkReal x1665=((1.0)*sj0);
IkReal x1666=(cj0*r00);
IkReal x1667=(cj5*r12);
IkReal x1668=((0.026255)*cj6);
IkReal x1669=((1.0)*r21);
IkReal x1670=((1.0)*cj0);
IkReal x1671=((1.0)*x1654);
IkReal x1672=(sj3*x1654);
IkReal x1673=(cj6*r00*sj0);
IkReal x1674=((1.0)*x1653);
IkReal x1675=(cj3*x1653);
evalcond[0]=(x1672+(((-1.0)*sj6*x1669))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x1674))+(((-1.0)*r22*x1662))+(((-1.0)*r20*x1660))+(((-1.0)*x1658*x1669)));
evalcond[2]=((((-1.0)*r01*sj6*x1665))+x1673+(((-1.0)*x1663*x1664))+(((-1.0)*x1674))+((sj6*x1661)));
evalcond[3]=((((-1.0)*cj3*x1671))+(((-1.0)*x1663*x1666))+((sj6*x1657))+((sj6*x1655))+(((-1.0)*x1659*x1663)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1656))+((r20*x1668))+(((0.02626)*x1672))+pz+(((0.09746)*sj3))+(((0.0718)*sj3*x1653)));
evalcond[5]=(((x1660*x1666))+((sj0*x1667))+((cj0*cj5*r02))+x1675+((x1655*x1658))+((x1659*x1660))+((x1657*x1658)));
evalcond[6]=(((x1660*x1664))+(((-1.0)*r00*x1660*x1665))+((cj0*x1667))+((x1658*x1661))+(((-1.0)*r02*sj0*x1662))+(((-1.0)*r01*x1658*x1665))+(((-1.0)*x1671)));
evalcond[7]=((-0.1264)+(((-1.0)*r01*sj0*x1656))+(((0.0718)*x1654))+(((-0.02626)*x1653))+(((-1.0)*py*x1670))+((r00*sj0*x1668))+((px*sj0))+(((-1.0)*x1664*x1668))+((x1656*x1661)));
evalcond[8]=((-0.1168)+((x1656*x1657))+(((-1.0)*py*x1665))+(((-1.0)*px*x1670))+((x1655*x1656))+(((-0.09746)*cj3))+(((-0.02626)*cj3*x1654))+(((-0.0718)*x1675))+(((-1.0)*x1666*x1668))+(((-1.0)*x1659*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1676=(cj0*sj5);
IkReal x1677=(cj5*cj6);
IkReal x1678=((1.0)*sj5);
IkReal x1679=((1.0)*cj0);
IkReal x1680=((1.0)*sj0);
IkReal x1681=(cj5*sj6);
IkReal x1682=(r10*x1681);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x1677))+(((-1.0)*cj3))+(((-1.0)*r22*x1678))+((r20*x1681)));
evalcond[2]=(((r02*x1676))+sj3+(((-1.0)*r00*x1679*x1681))+((r12*sj0*sj5))+(((-1.0)*r01*x1677*x1679))+(((-1.0)*x1680*x1682))+(((-1.0)*r11*x1677*x1680)));
evalcond[3]=(((r01*sj0*x1677))+(((-1.0)*x1679*x1682))+(((-1.0)*r11*x1677*x1679))+(((-1.0)*r02*sj0*x1678))+((r00*sj0*x1681))+((r12*x1676)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1683=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x1683))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1683))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1684=(cj5*cj6);
IkReal x1685=(r11*sj0);
IkReal x1686=(cj0*sj6);
IkReal x1687=(cj6*sj5);
IkReal x1688=((1.0)*cj0);
IkReal x1689=(r10*sj0);
IkReal x1690=((1.0)*cj5);
IkReal x1691=(cj0*r02);
IkReal x1692=((1.0)*sj5);
IkReal x1693=(cj5*sj6);
IkReal x1694=(cj6*r00);
IkReal x1695=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x1693))+((r21*x1684))+(((-1.0)*r22*x1692)));
evalcond[2]=((((-1.0)*x1688*x1694))+((r01*x1686))+(((-1.0)*cj6*x1689))+((sj6*x1685)));
evalcond[3]=((1.0)+(((-1.0)*r00*x1686*x1690))+(((-1.0)*x1684*x1685))+(((-1.0)*r01*x1684*x1688))+(((-1.0)*sj6*x1689*x1690))+((sj5*x1691))+((sj5*x1695)));
evalcond[4]=(((r00*sj5*x1686))+((cj0*r01*x1687))+((cj5*x1691))+((cj5*x1695))+((sj5*sj6*x1689))+((x1685*x1687)));
evalcond[5]=(((r01*sj0*x1684))+((r00*sj0*x1693))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x1692))+(((-1.0)*r10*x1686*x1690))+(((-1.0)*r11*x1684*x1688)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x1694))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x1689))+(((-1.0)*px*x1688))+(((0.026255)*sj6*x1685))+(((0.026255)*r01*x1686)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1696=(cj6*r20);
IkReal x1697=(r21*sj6);
if( IKabs((x1697+(((-1.0)*x1696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-6.96378830083565e-5)*x1697))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x1696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1697+(((-1.0)*x1696))))+IKsqr(((-1.35598885793872)+(((-6.96378830083565e-5)*x1697))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x1696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1697+(((-1.0)*x1696))), ((-1.35598885793872)+(((-6.96378830083565e-5)*x1697))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x1696))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1698=IKcos(j4);
IkReal x1699=IKsin(j4);
IkReal x1700=((1.0)*cj5);
IkReal x1701=(cj0*r10);
IkReal x1702=(sj5*sj6);
IkReal x1703=((1.0)*cj6);
IkReal x1704=((0.026255)*cj6);
IkReal x1705=(r21*sj6);
IkReal x1706=(cj0*r11*sj6);
IkReal x1707=(cj6*r00*sj0);
IkReal x1708=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x1705))+x1699+((cj6*r20)));
evalcond[1]=((((-1.0)*x1698))+(((-1.0)*r22*x1700))+(((-1.0)*r21*sj5*x1703))+(((-1.0)*r20*x1702)));
evalcond[2]=((0.09736)+(((0.0718)*x1698))+(((0.02626)*x1699))+(((-0.026255)*x1705))+((r20*x1704))+pz);
evalcond[3]=(x1706+x1707+(((-1.0)*x1708))+x1698+(((-1.0)*x1701*x1703)));
evalcond[4]=(((cj0*cj5*r12))+x1699+(((-1.0)*r02*sj0*x1700))+((cj0*cj6*r11*sj5))+((x1701*x1702))+(((-1.0)*r00*sj0*x1702))+(((-1.0)*r01*sj0*sj5*x1703)));
evalcond[5]=((-0.1246)+(((0.026255)*x1706))+(((0.02626)*x1698))+(((-0.0718)*x1699))+(((-0.026255)*x1708))+((r00*sj0*x1704))+((px*sj0))+(((-1.0)*x1701*x1704))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1709=(cj5*cj6);
IkReal x1710=(r11*sj0);
IkReal x1711=(cj0*sj6);
IkReal x1712=(cj6*sj5);
IkReal x1713=((1.0)*cj0);
IkReal x1714=(r10*sj0);
IkReal x1715=((1.0)*cj5);
IkReal x1716=(cj0*r02);
IkReal x1717=((1.0)*sj5);
IkReal x1718=(cj5*sj6);
IkReal x1719=(cj6*r00);
IkReal x1720=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x1718))+((r21*x1709))+(((-1.0)*r22*x1717)));
evalcond[2]=((((-1.0)*x1713*x1719))+(((-1.0)*cj6*x1714))+((r01*x1711))+((sj6*x1710)));
evalcond[3]=((-1.0)+((sj5*x1720))+(((-1.0)*x1709*x1710))+(((-1.0)*sj6*x1714*x1715))+(((-1.0)*r00*x1711*x1715))+((sj5*x1716))+(((-1.0)*r01*x1709*x1713)));
evalcond[4]=(((x1710*x1712))+((sj5*sj6*x1714))+((cj5*x1716))+((cj0*r01*x1712))+((cj5*x1720))+((r00*sj5*x1711)));
evalcond[5]=(((r01*sj0*x1709))+(((-1.0)*r10*x1711*x1715))+(((-1.0)*r02*sj0*x1717))+(((-1.0)*r11*x1709*x1713))+((cj0*r12*sj5))+((r00*sj0*x1718)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x1714))+(((-1.0)*px*x1713))+(((-0.026255)*cj0*x1719))+(((-1.0)*py*sj0))+(((0.026255)*r01*x1711))+(((0.026255)*sj6*x1710)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKcos(j4);
IkReal x1722=IKsin(j4);
IkReal x1723=((1.0)*cj5);
IkReal x1724=(cj0*r10);
IkReal x1725=(sj5*sj6);
IkReal x1726=((1.0)*cj6);
IkReal x1727=((0.026255)*cj6);
IkReal x1728=(r21*sj6);
IkReal x1729=(cj0*r11*sj6);
IkReal x1730=(cj6*r00*sj0);
IkReal x1731=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+(((-1.0)*x1722))+(((-1.0)*x1728)));
evalcond[1]=((((-1.0)*r21*sj5*x1726))+(((-1.0)*r22*x1723))+(((-1.0)*r20*x1725))+x1721);
evalcond[2]=((-0.09756)+(((-0.02626)*x1722))+pz+(((-0.0718)*x1721))+((r20*x1727))+(((-0.026255)*x1728)));
evalcond[3]=(x1729+x1721+x1730+(((-1.0)*x1724*x1726))+(((-1.0)*x1731)));
evalcond[4]=((((-1.0)*r01*sj0*sj5*x1726))+((x1724*x1725))+x1722+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x1725))+(((-1.0)*r02*sj0*x1723)));
evalcond[5]=((-0.1246)+(((0.02626)*x1721))+(((-1.0)*x1724*x1727))+((px*sj0))+(((0.026255)*x1729))+(((-0.0718)*x1722))+(((-0.026255)*x1731))+(((-1.0)*cj0*py))+((r00*sj0*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1732=(cj5*cj6);
IkReal x1733=((1.0)*sj0);
IkReal x1734=((1.0)*r22);
IkReal x1735=(cj0*sj5);
IkReal x1736=(cj5*sj6);
IkReal x1737=((1.0)*cj0);
IkReal x1738=(cj6*r20);
IkReal x1739=((1.0)*sj5);
IkReal x1740=(r21*sj6);
IkReal x1741=(x1736*x1737);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x1732))+((r20*x1736))+(((-1.0)*sj5*x1734)));
evalcond[2]=(x1738+(((-1.0)*x1740)));
evalcond[3]=((((-1.0)*cj5*x1734))+(((-1.0)*r20*sj6*x1739))+(((-1.0)*cj6*r21*x1739)));
evalcond[4]=((((-1.0)*r01*x1732*x1737))+(((-1.0)*r10*x1733*x1736))+((r12*sj0*sj5))+((r02*x1735))+(((-1.0)*r11*x1732*x1733))+(((-1.0)*r00*x1741)));
evalcond[5]=((((-1.0)*r02*sj5*x1733))+(((-1.0)*r10*x1741))+(((-1.0)*r11*x1732*x1737))+((r01*sj0*x1732))+((r12*x1735))+((r00*sj0*x1736)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1740))+pz+(((0.026255)*x1738)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1742=(cj0*cj6);
IkReal x1743=(sj0*sj6);
IkReal x1744=((1.0)*r11);
IkReal x1745=(cj6*sj0);
IkReal x1746=(cj0*sj6);
if( IKabs(((((-1.0)*r01*x1746))+((r00*x1742))+((r10*x1745))+(((-1.0)*x1743*x1744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1745))+(((-1.0)*x1744*x1746))+((r01*x1743))+((r10*x1742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1746))+((r00*x1742))+((r10*x1745))+(((-1.0)*x1743*x1744))))+IKsqr(((((-1.0)*r00*x1745))+(((-1.0)*x1744*x1746))+((r01*x1743))+((r10*x1742))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x1746))+((r00*x1742))+((r10*x1745))+(((-1.0)*x1743*x1744))), ((((-1.0)*r00*x1745))+(((-1.0)*x1744*x1746))+((r01*x1743))+((r10*x1742))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1747=IKcos(j4);
IkReal x1748=IKsin(j4);
IkReal x1749=(r11*sj6);
IkReal x1750=((0.026255)*cj0);
IkReal x1751=(r01*sj6);
IkReal x1752=(sj0*sj5);
IkReal x1753=(cj6*r11);
IkReal x1754=(r10*sj6);
IkReal x1755=(cj5*r12);
IkReal x1756=(cj6*sj0);
IkReal x1757=((1.0)*sj0);
IkReal x1758=(cj5*r02);
IkReal x1759=((1.0)*r10);
IkReal x1760=(cj0*sj5);
IkReal x1761=(r00*sj6);
IkReal x1762=((0.026255)*sj0);
IkReal x1763=(cj0*cj6);
IkReal x1764=((1.0)*cj0);
IkReal x1765=(cj6*r01);
evalcond[0]=((((-1.0)*x1756*x1759))+x1748+((sj0*x1749))+((cj0*x1751))+(((-1.0)*r00*x1763)));
evalcond[1]=(x1747+(((-1.0)*x1759*x1763))+(((-1.0)*x1751*x1757))+((cj0*x1749))+((r00*x1756)));
evalcond[2]=(((x1752*x1754))+((x1752*x1753))+(((-1.0)*x1747))+((sj0*x1755))+((cj0*x1758))+((x1760*x1761))+((x1760*x1765)));
evalcond[3]=((((-1.0)*x1757*x1758))+x1748+(((-1.0)*x1752*x1761))+(((-1.0)*x1752*x1765))+((x1754*x1760))+((x1753*x1760))+((cj0*x1755)));
evalcond[4]=((-0.1246)+(((0.02626)*x1747))+(((0.026255)*r00*x1756))+((x1749*x1750))+(((-1.0)*cj6*r10*x1750))+((px*sj0))+(((-0.0718)*x1748))+(((-1.0)*x1751*x1762))+(((-1.0)*py*x1764)));
evalcond[5]=((0.21226)+(((0.02626)*x1748))+(((0.0718)*x1747))+(((-0.026255)*r10*x1756))+(((-1.0)*cj6*r00*x1750))+(((-1.0)*px*x1764))+((x1750*x1751))+(((-1.0)*py*x1757))+((x1749*x1762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1766=(cj5*cj6);
IkReal x1767=((1.0)*sj0);
IkReal x1768=((1.0)*r22);
IkReal x1769=(cj0*sj5);
IkReal x1770=(cj5*sj6);
IkReal x1771=((1.0)*cj0);
IkReal x1772=(cj6*r20);
IkReal x1773=((1.0)*sj5);
IkReal x1774=(r21*sj6);
IkReal x1775=(x1770*x1771);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x1766))+(((-1.0)*sj5*x1768))+((r20*x1770)));
evalcond[2]=((((-1.0)*x1774))+x1772);
evalcond[3]=((((-1.0)*cj6*r21*x1773))+(((-1.0)*cj5*x1768))+(((-1.0)*r20*sj6*x1773)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r11*x1766*x1767))+(((-1.0)*r10*x1767*x1770))+((r02*x1769))+(((-1.0)*r00*x1775))+(((-1.0)*r01*x1766*x1771)));
evalcond[5]=(((r00*sj0*x1770))+(((-1.0)*r10*x1775))+((r12*x1769))+(((-1.0)*r11*x1766*x1771))+(((-1.0)*r02*sj5*x1767))+((r01*sj0*x1766)));
evalcond[6]=((-0.0001)+(((0.026255)*x1772))+(((-0.026255)*x1774))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=(sj0*sj6);
IkReal x1777=(cj6*r10);
IkReal x1778=((1.0)*sj0);
IkReal x1779=(cj6*r00);
IkReal x1780=(cj0*sj6);
if( IKabs((((r11*x1776))+(((-1.0)*cj0*x1779))+(((-1.0)*x1777*x1778))+((r01*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1778*x1779))+(((-1.0)*r11*x1780))+((cj0*x1777))+((r01*x1776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1776))+(((-1.0)*cj0*x1779))+(((-1.0)*x1777*x1778))+((r01*x1780))))+IKsqr(((((-1.0)*x1778*x1779))+(((-1.0)*r11*x1780))+((cj0*x1777))+((r01*x1776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x1776))+(((-1.0)*cj0*x1779))+(((-1.0)*x1777*x1778))+((r01*x1780))), ((((-1.0)*x1778*x1779))+(((-1.0)*r11*x1780))+((cj0*x1777))+((r01*x1776))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1781=IKcos(j4);
IkReal x1782=IKsin(j4);
IkReal x1783=(r11*sj6);
IkReal x1784=((0.026255)*cj0);
IkReal x1785=(r01*sj6);
IkReal x1786=(sj0*sj5);
IkReal x1787=(cj6*r11);
IkReal x1788=(r10*sj6);
IkReal x1789=(cj5*r12);
IkReal x1790=(cj6*sj0);
IkReal x1791=((1.0)*sj0);
IkReal x1792=(cj5*r02);
IkReal x1793=((1.0)*r10);
IkReal x1794=(cj0*sj5);
IkReal x1795=(r00*sj6);
IkReal x1796=((0.026255)*sj0);
IkReal x1797=(cj0*cj6);
IkReal x1798=((1.0)*cj0);
IkReal x1799=(cj6*r01);
evalcond[0]=(((r00*x1790))+x1781+(((-1.0)*x1793*x1797))+(((-1.0)*x1785*x1791))+((cj0*x1783)));
evalcond[1]=((((-1.0)*x1790*x1793))+((sj0*x1783))+(((-1.0)*r00*x1797))+(((-1.0)*x1782))+((cj0*x1785)));
evalcond[2]=(x1781+((sj0*x1789))+((x1794*x1795))+((x1794*x1799))+((x1786*x1788))+((x1786*x1787))+((cj0*x1792)));
evalcond[3]=(x1782+((x1787*x1794))+((x1788*x1794))+((cj0*x1789))+(((-1.0)*x1786*x1795))+(((-1.0)*x1786*x1799))+(((-1.0)*x1791*x1792)));
evalcond[4]=((-0.1246)+((x1783*x1784))+(((0.026255)*r00*x1790))+(((-1.0)*py*x1798))+(((0.02626)*x1781))+(((-1.0)*x1785*x1796))+((px*sj0))+(((-0.0718)*x1782))+(((-1.0)*cj6*r10*x1784)));
evalcond[5]=((0.01734)+((x1783*x1796))+(((-0.026255)*r10*x1790))+(((-1.0)*py*x1791))+(((-1.0)*cj6*r00*x1784))+(((-0.02626)*x1782))+((x1784*x1785))+(((-1.0)*px*x1798))+(((-0.0718)*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1800=((1.0)*sj5);
IkReal x1801=((1.0)*sj6);
CheckValue<IkReal> x1802=IKPowWithIntegerCheck(cj3,-1);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(sj3,-1);
if(!x1803.valid){
continue;
}
if( IKabs(((x1802.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1801))+(((-1.0)*cj0*r01*x1801))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1803.value)*(((((-1.0)*r20*sj6*x1800))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1802.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1801))+(((-1.0)*cj0*r01*x1801))+((cj0*cj6*r00))))))+IKsqr(((x1803.value)*(((((-1.0)*r20*sj6*x1800))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1802.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x1801))+(((-1.0)*cj0*r01*x1801))+((cj0*cj6*r00))))), ((x1803.value)*(((((-1.0)*r20*sj6*x1800))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x1800))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1804=IKcos(j4);
IkReal x1805=IKsin(j4);
IkReal x1806=(r11*sj0);
IkReal x1807=((0.026255)*sj6);
IkReal x1808=(cj0*r01);
IkReal x1809=(cj5*r12);
IkReal x1810=(cj6*sj5);
IkReal x1811=(r10*sj0);
IkReal x1812=(sj5*sj6);
IkReal x1813=(cj0*r11);
IkReal x1814=((1.0)*cj5);
IkReal x1815=((1.0)*cj6);
IkReal x1816=(cj0*r10);
IkReal x1817=((1.0)*sj0);
IkReal x1818=(cj0*r00);
IkReal x1819=((0.026255)*cj6);
IkReal x1820=((1.0)*r21);
IkReal x1821=((1.0)*cj0);
IkReal x1822=(sj3*x1805);
IkReal x1823=(r00*x1819);
IkReal x1824=((1.0)*x1804);
IkReal x1825=(cj3*x1805);
IkReal x1826=((0.0718)*x1804);
evalcond[0]=((((-1.0)*sj6*x1820))+x1822+((cj6*r20)));
evalcond[1]=((((-1.0)*x1810*x1820))+(((-1.0)*sj3*x1824))+(((-1.0)*r22*x1814))+(((-1.0)*r20*x1812)));
evalcond[2]=(((cj6*r00*sj0))+x1804+(((-1.0)*x1815*x1816))+((sj6*x1813))+(((-1.0)*r01*sj6*x1817)));
evalcond[3]=((((-1.0)*x1811*x1815))+x1825+(((-1.0)*x1815*x1818))+((sj6*x1806))+((sj6*x1808)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1807))+(((0.02626)*x1822))+((r20*x1819))+pz+((sj3*x1826))+(((0.09746)*sj3)));
evalcond[5]=((((-1.0)*cj3*x1824))+((cj0*cj5*r02))+((sj0*x1809))+((x1812*x1818))+((x1808*x1810))+((x1811*x1812))+((x1806*x1810)));
evalcond[6]=((((-1.0)*r00*x1812*x1817))+(((-1.0)*r02*sj0*x1814))+((cj0*x1809))+((x1812*x1816))+(((-1.0)*r01*x1810*x1817))+x1805+((x1810*x1813)));
evalcond[7]=((-0.1246)+(((-0.0718)*x1805))+(((-1.0)*py*x1821))+((x1807*x1813))+(((-1.0)*x1816*x1819))+(((-1.0)*r01*sj0*x1807))+((sj0*x1823))+((px*sj0))+(((0.02626)*x1804)));
evalcond[8]=((0.1148)+((x1806*x1807))+(((0.02626)*x1825))+(((-1.0)*x1811*x1819))+((cj3*x1826))+(((-1.0)*py*x1817))+(((0.09746)*cj3))+(((-1.0)*x1818*x1819))+((x1807*x1808))+(((-1.0)*px*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1827=((1.0)*cj6);
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(sj3,-1);
if(!x1828.valid){
continue;
}
if( IKabs(((x1828.value)*((((r21*sj6))+(((-1.0)*r20*x1827)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*x1827))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1828.value)*((((r21*sj6))+(((-1.0)*r20*x1827))))))+IKsqr(((((-1.0)*r00*sj0*x1827))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1828.value)*((((r21*sj6))+(((-1.0)*r20*x1827))))), ((((-1.0)*r00*sj0*x1827))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1829=IKcos(j4);
IkReal x1830=IKsin(j4);
IkReal x1831=(r11*sj0);
IkReal x1832=((0.026255)*sj6);
IkReal x1833=(cj0*r01);
IkReal x1834=(cj5*r12);
IkReal x1835=(cj6*sj5);
IkReal x1836=(r10*sj0);
IkReal x1837=(sj5*sj6);
IkReal x1838=(cj0*r11);
IkReal x1839=((1.0)*cj5);
IkReal x1840=((1.0)*cj6);
IkReal x1841=(cj0*r10);
IkReal x1842=((1.0)*sj0);
IkReal x1843=(cj0*r00);
IkReal x1844=((0.026255)*cj6);
IkReal x1845=((1.0)*r21);
IkReal x1846=((1.0)*cj0);
IkReal x1847=(sj3*x1830);
IkReal x1848=(r00*x1844);
IkReal x1849=((1.0)*x1829);
IkReal x1850=(cj3*x1830);
IkReal x1851=((0.0718)*x1829);
evalcond[0]=((((-1.0)*sj6*x1845))+x1847+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x1849))+(((-1.0)*r20*x1837))+(((-1.0)*x1835*x1845))+(((-1.0)*r22*x1839)));
evalcond[2]=(((cj6*r00*sj0))+((sj6*x1838))+x1829+(((-1.0)*r01*sj6*x1842))+(((-1.0)*x1840*x1841)));
evalcond[3]=(((sj6*x1831))+((sj6*x1833))+x1850+(((-1.0)*x1836*x1840))+(((-1.0)*x1840*x1843)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x1832))+(((0.02626)*x1847))+pz+((r20*x1844))+(((0.09746)*sj3))+((sj3*x1851)));
evalcond[5]=(((cj0*cj5*r02))+((x1837*x1843))+((sj0*x1834))+(((-1.0)*cj3*x1849))+((x1831*x1835))+((x1833*x1835))+((x1836*x1837)));
evalcond[6]=(((x1837*x1841))+(((-1.0)*r00*x1837*x1842))+((x1835*x1838))+(((-1.0)*r01*x1835*x1842))+((cj0*x1834))+x1830+(((-1.0)*r02*sj0*x1839)));
evalcond[7]=((-0.1246)+(((-0.0718)*x1830))+(((-1.0)*x1841*x1844))+(((0.02626)*x1829))+(((-1.0)*r01*sj0*x1832))+((sj0*x1848))+((x1832*x1838))+((px*sj0))+(((-1.0)*py*x1846)));
evalcond[8]=((0.1148)+(((-1.0)*x1843*x1844))+(((-1.0)*px*x1846))+(((0.02626)*x1850))+((x1831*x1832))+((cj3*x1851))+(((-1.0)*x1836*x1844))+((x1832*x1833))+(((0.09746)*cj3))+(((-1.0)*py*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1852=((1.0)*sj5);
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x1852))+(((-1.0)*r20*sj6*x1852))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1853.value)))+(x1854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1855=IKcos(j4);
IkReal x1856=IKsin(j4);
IkReal x1857=(r11*sj0);
IkReal x1858=((0.026255)*sj6);
IkReal x1859=(cj0*r01);
IkReal x1860=(cj5*r12);
IkReal x1861=(cj6*sj5);
IkReal x1862=(r10*sj0);
IkReal x1863=(sj5*sj6);
IkReal x1864=(cj0*r11);
IkReal x1865=((1.0)*cj5);
IkReal x1866=((1.0)*cj6);
IkReal x1867=(cj0*r10);
IkReal x1868=((1.0)*sj0);
IkReal x1869=(cj0*r00);
IkReal x1870=((0.026255)*cj6);
IkReal x1871=((1.0)*r21);
IkReal x1872=((1.0)*cj0);
IkReal x1873=(sj3*x1856);
IkReal x1874=(r00*x1870);
IkReal x1875=((1.0)*x1855);
IkReal x1876=(cj3*x1856);
IkReal x1877=((0.0718)*x1855);
evalcond[0]=((((-1.0)*sj6*x1871))+x1873+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x1875))+(((-1.0)*x1861*x1871))+(((-1.0)*r22*x1865))+(((-1.0)*r20*x1863)));
evalcond[2]=((((-1.0)*x1866*x1867))+((cj6*r00*sj0))+((sj6*x1864))+x1855+(((-1.0)*r01*sj6*x1868)));
evalcond[3]=(((sj6*x1859))+((sj6*x1857))+(((-1.0)*x1866*x1869))+(((-1.0)*x1862*x1866))+x1876);
evalcond[4]=((-0.0001)+((sj3*x1877))+((r20*x1870))+(((0.02626)*x1873))+pz+(((0.09746)*sj3))+(((-1.0)*r21*x1858)));
evalcond[5]=(((cj0*cj5*r02))+((x1862*x1863))+((x1859*x1861))+(((-1.0)*cj3*x1875))+((x1863*x1869))+((x1857*x1861))+((sj0*x1860)));
evalcond[6]=((((-1.0)*r01*x1861*x1868))+(((-1.0)*r00*x1863*x1868))+((x1863*x1867))+((cj0*x1860))+x1856+(((-1.0)*r02*sj0*x1865))+((x1861*x1864)));
evalcond[7]=((-0.1246)+(((-1.0)*r01*sj0*x1858))+(((0.02626)*x1855))+((sj0*x1874))+(((-0.0718)*x1856))+((x1858*x1864))+(((-1.0)*x1867*x1870))+(((-1.0)*py*x1872))+((px*sj0)));
evalcond[8]=((0.1148)+(((-1.0)*px*x1872))+(((-1.0)*x1869*x1870))+((x1857*x1858))+((cj3*x1877))+(((0.02626)*x1876))+(((-1.0)*py*x1868))+(((0.09746)*cj3))+(((-1.0)*x1862*x1870))+((x1858*x1859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(sj3,-1);
if(!x1884.valid){
continue;
}
IkReal x1878=x1884.value;
IkReal x1879=(r21*sj6);
IkReal x1880=(cj6*sj3);
IkReal x1881=(cj3*sj2);
IkReal x1882=((1.0)*sj3*sj6);
IkReal x1883=((1.0)*cj6*r20);
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(cj2,-1);
if(!x1885.valid){
continue;
}
if( IKabs((x1878*((x1879+(((-1.0)*x1883)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1878*(x1885.value)*((((x1879*x1881))+((cj0*r00*x1880))+(((-1.0)*cj0*r01*x1882))+((r10*sj0*x1880))+(((-1.0)*r11*sj0*x1882))+(((-1.0)*x1881*x1883)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1878*((x1879+(((-1.0)*x1883))))))+IKsqr((x1878*(x1885.value)*((((x1879*x1881))+((cj0*r00*x1880))+(((-1.0)*cj0*r01*x1882))+((r10*sj0*x1880))+(((-1.0)*r11*sj0*x1882))+(((-1.0)*x1881*x1883))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1878*((x1879+(((-1.0)*x1883))))), (x1878*(x1885.value)*((((x1879*x1881))+((cj0*r00*x1880))+(((-1.0)*cj0*r01*x1882))+((r10*sj0*x1880))+(((-1.0)*r11*sj0*x1882))+(((-1.0)*x1881*x1883))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1886=IKsin(j4);
IkReal x1887=IKcos(j4);
IkReal x1888=(r11*sj0);
IkReal x1889=((0.026255)*sj6);
IkReal x1890=(cj0*r01);
IkReal x1891=(cj5*r12);
IkReal x1892=(cj6*sj5);
IkReal x1893=(r10*sj0);
IkReal x1894=(sj5*sj6);
IkReal x1895=(cj0*r11);
IkReal x1896=((1.0)*cj5);
IkReal x1897=(cj2*cj3);
IkReal x1898=((1.0)*cj6);
IkReal x1899=(cj0*r10);
IkReal x1900=((1.0)*sj0);
IkReal x1901=(cj0*r00);
IkReal x1902=(cj3*sj2);
IkReal x1903=((0.026255)*cj6);
IkReal x1904=((1.0)*r21);
IkReal x1905=((1.0)*cj0);
IkReal x1906=((0.02626)*x1886);
IkReal x1907=(cj2*x1886);
IkReal x1908=(cj6*r00*sj0);
IkReal x1909=(cj2*x1887);
IkReal x1910=(sj3*x1887);
IkReal x1911=(sj2*x1887);
IkReal x1912=((1.0)*sj2*x1886);
evalcond[0]=((((-1.0)*sj6*x1904))+((cj6*r20))+((sj3*x1886)));
evalcond[1]=((((-1.0)*r20*x1894))+(((-1.0)*x1892*x1904))+(((-1.0)*r22*x1896))+(((-1.0)*x1910)));
evalcond[2]=((-0.0001)+pz+(((0.09746)*sj3))+(((0.0718)*x1910))+((r20*x1903))+(((-1.0)*r21*x1889))+((sj3*x1906)));
evalcond[3]=((((-1.0)*x1893*x1898))+((sj6*x1888))+((sj6*x1890))+(((-1.0)*x1886*x1902))+(((-1.0)*x1898*x1901))+x1909);
evalcond[4]=(((sj6*x1895))+(((-1.0)*x1886*x1897))+(((-1.0)*x1898*x1899))+(((-1.0)*x1911))+x1908+(((-1.0)*r01*sj6*x1900)));
evalcond[5]=(((cj0*cj5*r02))+((x1893*x1894))+((x1888*x1892))+((x1887*x1902))+x1907+((x1894*x1901))+((sj0*x1891))+((x1890*x1892)));
evalcond[6]=((((-1.0)*r00*x1894*x1900))+(((-1.0)*r02*sj0*x1896))+((x1892*x1895))+(((-1.0)*r01*x1892*x1900))+((cj0*x1891))+((x1894*x1899))+((x1887*x1897))+(((-1.0)*x1912)));
evalcond[7]=((-0.1255)+(((-1.0)*x1899*x1903))+(((-1.0)*py*x1905))+(((-0.1158)*cj2))+(((-0.0718)*x1887*x1897))+(((-0.02626)*x1911))+(((-0.0009)*sj2))+(((0.0718)*sj2*x1886))+((x1889*x1895))+((px*sj0))+(((-1.0)*r01*sj0*x1889))+(((-0.09746)*x1897))+(((-1.0)*x1897*x1906))+((r00*sj0*x1903)));
evalcond[8]=((-0.001)+(((-1.0)*x1902*x1906))+(((0.02626)*x1909))+(((-1.0)*py*x1900))+(((-0.1158)*sj2))+(((-0.09746)*x1902))+(((-1.0)*x1901*x1903))+(((-1.0)*x1893*x1903))+(((-1.0)*px*x1905))+(((-0.0718)*x1907))+((x1888*x1889))+(((0.0009)*cj2))+((x1889*x1890))+(((-0.0718)*x1887*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(sj3,-1);
if(!x1916.valid){
continue;
}
IkReal x1913=x1916.value;
IkReal x1914=(r21*sj6);
IkReal x1915=(cj6*r20);
if( IKabs((x1913*(((((-1.0)*x1915))+x1914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000278551532033426)*x1913*(((5.0)+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((-0.25)*x1914))+(((0.25)*x1915)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1913*(((((-1.0)*x1915))+x1914))))+IKsqr(((0.000278551532033426)*x1913*(((5.0)+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((-0.25)*x1914))+(((0.25)*x1915))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1913*(((((-1.0)*x1915))+x1914))), ((0.000278551532033426)*x1913*(((5.0)+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((-0.25)*x1914))+(((0.25)*x1915))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1917=IKsin(j4);
IkReal x1918=IKcos(j4);
IkReal x1919=(r11*sj0);
IkReal x1920=((0.026255)*sj6);
IkReal x1921=(cj0*r01);
IkReal x1922=(cj5*r12);
IkReal x1923=(cj6*sj5);
IkReal x1924=(r10*sj0);
IkReal x1925=(sj5*sj6);
IkReal x1926=(cj0*r11);
IkReal x1927=((1.0)*cj5);
IkReal x1928=(cj2*cj3);
IkReal x1929=((1.0)*cj6);
IkReal x1930=(cj0*r10);
IkReal x1931=((1.0)*sj0);
IkReal x1932=(cj0*r00);
IkReal x1933=(cj3*sj2);
IkReal x1934=((0.026255)*cj6);
IkReal x1935=((1.0)*r21);
IkReal x1936=((1.0)*cj0);
IkReal x1937=((0.02626)*x1917);
IkReal x1938=(cj2*x1917);
IkReal x1939=(cj6*r00*sj0);
IkReal x1940=(cj2*x1918);
IkReal x1941=(sj3*x1918);
IkReal x1942=(sj2*x1918);
IkReal x1943=((1.0)*sj2*x1917);
evalcond[0]=((((-1.0)*sj6*x1935))+((cj6*r20))+((sj3*x1917)));
evalcond[1]=((((-1.0)*x1923*x1935))+(((-1.0)*r22*x1927))+(((-1.0)*x1941))+(((-1.0)*r20*x1925)));
evalcond[2]=((-0.0001)+(((-1.0)*r21*x1920))+(((0.0718)*x1941))+pz+(((0.09746)*sj3))+((r20*x1934))+((sj3*x1937)));
evalcond[3]=(((sj6*x1921))+x1940+(((-1.0)*x1929*x1932))+(((-1.0)*x1924*x1929))+((sj6*x1919))+(((-1.0)*x1917*x1933)));
evalcond[4]=(((sj6*x1926))+(((-1.0)*x1917*x1928))+x1939+(((-1.0)*x1942))+(((-1.0)*x1929*x1930))+(((-1.0)*r01*sj6*x1931)));
evalcond[5]=(((x1921*x1923))+((cj0*cj5*r02))+((x1925*x1932))+x1938+((x1918*x1933))+((x1919*x1923))+((x1924*x1925))+((sj0*x1922)));
evalcond[6]=((((-1.0)*x1943))+((x1918*x1928))+((cj0*x1922))+((x1925*x1930))+((x1923*x1926))+(((-1.0)*r01*x1923*x1931))+(((-1.0)*r02*sj0*x1927))+(((-1.0)*r00*x1925*x1931)));
evalcond[7]=((-0.1255)+(((-1.0)*x1928*x1937))+((r00*sj0*x1934))+(((-1.0)*x1930*x1934))+(((-1.0)*r01*sj0*x1920))+(((-0.0718)*x1918*x1928))+(((-1.0)*py*x1936))+(((-0.09746)*x1928))+(((-0.1158)*cj2))+(((-0.02626)*x1942))+(((0.0718)*sj2*x1917))+(((-0.0009)*sj2))+((px*sj0))+((x1920*x1926)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*py*x1931))+(((-1.0)*x1933*x1937))+(((-0.09746)*x1933))+(((-0.0718)*x1938))+(((0.02626)*x1940))+(((-1.0)*x1924*x1934))+(((-1.0)*px*x1936))+(((0.0009)*cj2))+(((-1.0)*x1932*x1934))+(((-0.0718)*x1918*x1933))+((x1919*x1920))+((x1920*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1944=((1.0)*sj5);
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1945.valid){
continue;
}
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x1944))+(((-1.0)*cj6*r21*x1944))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1945.value)))+(x1946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1947=IKsin(j4);
IkReal x1948=IKcos(j4);
IkReal x1949=(r11*sj0);
IkReal x1950=((0.026255)*sj6);
IkReal x1951=(cj0*r01);
IkReal x1952=(cj5*r12);
IkReal x1953=(cj6*sj5);
IkReal x1954=(r10*sj0);
IkReal x1955=(sj5*sj6);
IkReal x1956=(cj0*r11);
IkReal x1957=((1.0)*cj5);
IkReal x1958=(cj2*cj3);
IkReal x1959=((1.0)*cj6);
IkReal x1960=(cj0*r10);
IkReal x1961=((1.0)*sj0);
IkReal x1962=(cj0*r00);
IkReal x1963=(cj3*sj2);
IkReal x1964=((0.026255)*cj6);
IkReal x1965=((1.0)*r21);
IkReal x1966=((1.0)*cj0);
IkReal x1967=((0.02626)*x1947);
IkReal x1968=(cj2*x1947);
IkReal x1969=(cj6*r00*sj0);
IkReal x1970=(cj2*x1948);
IkReal x1971=(sj3*x1948);
IkReal x1972=(sj2*x1948);
IkReal x1973=((1.0)*sj2*x1947);
evalcond[0]=(((sj3*x1947))+((cj6*r20))+(((-1.0)*sj6*x1965)));
evalcond[1]=((((-1.0)*r22*x1957))+(((-1.0)*r20*x1955))+(((-1.0)*x1971))+(((-1.0)*x1953*x1965)));
evalcond[2]=((-0.0001)+((sj3*x1967))+((r20*x1964))+pz+(((0.0718)*x1971))+(((0.09746)*sj3))+(((-1.0)*r21*x1950)));
evalcond[3]=((((-1.0)*x1959*x1962))+(((-1.0)*x1954*x1959))+(((-1.0)*x1947*x1963))+((sj6*x1951))+((sj6*x1949))+x1970);
evalcond[4]=((((-1.0)*x1959*x1960))+(((-1.0)*x1972))+((sj6*x1956))+(((-1.0)*x1947*x1958))+x1969+(((-1.0)*r01*sj6*x1961)));
evalcond[5]=(((cj0*cj5*r02))+((x1951*x1953))+((sj0*x1952))+((x1954*x1955))+((x1955*x1962))+x1968+((x1948*x1963))+((x1949*x1953)));
evalcond[6]=(((cj0*x1952))+(((-1.0)*r02*sj0*x1957))+(((-1.0)*r01*x1953*x1961))+(((-1.0)*x1973))+((x1955*x1960))+(((-1.0)*r00*x1955*x1961))+((x1948*x1958))+((x1953*x1956)));
evalcond[7]=((-0.1255)+(((-1.0)*r01*sj0*x1950))+(((0.0718)*sj2*x1947))+(((-1.0)*x1958*x1967))+(((-0.02626)*x1972))+(((-0.1158)*cj2))+((r00*sj0*x1964))+((x1950*x1956))+(((-0.0009)*sj2))+(((-0.09746)*x1958))+(((-1.0)*x1960*x1964))+(((-1.0)*py*x1966))+((px*sj0))+(((-0.0718)*x1948*x1958)));
evalcond[8]=((-0.001)+(((-0.0718)*x1968))+(((-0.0718)*x1948*x1963))+(((-0.1158)*sj2))+(((-0.09746)*x1963))+((x1950*x1951))+(((0.0009)*cj2))+(((-1.0)*px*x1966))+(((0.02626)*x1970))+(((-1.0)*py*x1961))+(((-1.0)*x1962*x1964))+(((-1.0)*x1963*x1967))+((x1949*x1950))+(((-1.0)*x1954*x1964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1974=(cj5*cj6);
IkReal x1975=((1.0)*cj0);
IkReal x1976=((1.0)*sj5);
IkReal x1977=(cj5*sj6);
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(cj2,-1);
if(!x1978.valid){
continue;
}
if( IKabs(((x1978.value)*(((((-1.0)*r10*x1975*x1977))+((r00*sj0*x1977))+((r01*sj0*x1974))+(((-1.0)*r11*x1974*x1975))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x1976)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1977))+(((-1.0)*r22*x1976))+((r21*x1974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1978.value)*(((((-1.0)*r10*x1975*x1977))+((r00*sj0*x1977))+((r01*sj0*x1974))+(((-1.0)*r11*x1974*x1975))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x1976))))))+IKsqr((((r20*x1977))+(((-1.0)*r22*x1976))+((r21*x1974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1978.value)*(((((-1.0)*r10*x1975*x1977))+((r00*sj0*x1977))+((r01*sj0*x1974))+(((-1.0)*r11*x1974*x1975))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x1976))))), (((r20*x1977))+(((-1.0)*r22*x1976))+((r21*x1974))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1979=IKsin(j3);
IkReal x1980=(cj5*cj6);
IkReal x1981=((1.0)*cj0);
IkReal x1982=((1.0)*sj5);
IkReal x1983=((1.0)*sj0);
IkReal x1984=(cj0*sj5);
IkReal x1985=(cj5*sj6);
IkReal x1986=((1.0)*x1979);
IkReal x1987=(r10*x1985);
evalcond[0]=(((r21*x1980))+(((-1.0)*(IKcos(j3))))+(((-1.0)*r22*x1982))+((r20*x1985)));
evalcond[1]=((((-1.0)*x1981*x1987))+((r00*sj0*x1985))+(((-1.0)*cj2*x1986))+((r12*x1984))+(((-1.0)*r02*sj0*x1982))+(((-1.0)*r11*x1980*x1981))+((r01*sj0*x1980)));
evalcond[2]=((((-1.0)*x1983*x1987))+(((-1.0)*sj2*x1986))+((r12*sj0*sj5))+(((-1.0)*r00*x1981*x1985))+(((-1.0)*r11*x1980*x1983))+(((-1.0)*r01*x1980*x1981))+((r02*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1988=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x1988))+(((-1.0)*cj6*r21*x1988))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1989=(cj5*cj6);
IkReal x1990=((1.0)*sj0);
IkReal x1991=((1.0)*r22);
IkReal x1992=(cj0*sj5);
IkReal x1993=(cj5*sj6);
IkReal x1994=((1.0)*cj0);
IkReal x1995=(cj6*r20);
IkReal x1996=((1.0)*sj5);
IkReal x1997=(r21*sj6);
IkReal x1998=(x1993*x1994);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x1989))+((r20*x1993))+(((-1.0)*sj5*x1991)));
evalcond[2]=(x1995+(((-1.0)*x1997)));
evalcond[3]=((((-1.0)*cj5*x1991))+(((-1.0)*r20*sj6*x1996))+(((-1.0)*cj6*r21*x1996)));
evalcond[4]=((((-1.0)*r01*x1989*x1994))+(((-1.0)*r00*x1998))+((r12*sj0*sj5))+((r02*x1992))+(((-1.0)*r11*x1989*x1990))+(((-1.0)*r10*x1990*x1993)));
evalcond[5]=(((r12*x1992))+(((-1.0)*r10*x1998))+((r00*sj0*x1993))+(((-1.0)*r11*x1989*x1994))+(((-1.0)*r02*sj5*x1990))+((r01*sj0*x1989)));
evalcond[6]=((-0.0001)+(((-0.026255)*x1997))+pz+(((0.026255)*x1995)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1999=((1.0)*r10);
IkReal x2000=((1.0)*cj2);
IkReal x2001=(r11*sj6);
IkReal x2002=(sj0*sj2);
IkReal x2003=(cj0*cj2);
IkReal x2004=(r01*sj6);
IkReal x2005=(cj0*x2004);
IkReal x2006=(cj6*x2002);
IkReal x2007=(cj0*cj6*sj2);
IkReal x2008=(cj2*cj6*sj0);
if( IKabs((((sj2*x2005))+((r00*x2008))+(((-1.0)*cj6*x1999*x2003))+((x2001*x2002))+((x2001*x2003))+(((-1.0)*r00*x2007))+(((-1.0)*x1999*x2006))+(((-1.0)*sj0*x2000*x2004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*sj2*x2001))+(((-1.0)*x2002*x2004))+((r00*x2006))+((r10*x2008))+(((-1.0)*x2000*x2005))+((cj6*r00*x2003))+(((-1.0)*x1999*x2007))+(((-1.0)*sj0*x2000*x2001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x2005))+((r00*x2008))+(((-1.0)*cj6*x1999*x2003))+((x2001*x2002))+((x2001*x2003))+(((-1.0)*r00*x2007))+(((-1.0)*x1999*x2006))+(((-1.0)*sj0*x2000*x2004))))+IKsqr((((cj0*sj2*x2001))+(((-1.0)*x2002*x2004))+((r00*x2006))+((r10*x2008))+(((-1.0)*x2000*x2005))+((cj6*r00*x2003))+(((-1.0)*x1999*x2007))+(((-1.0)*sj0*x2000*x2001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x2005))+((r00*x2008))+(((-1.0)*cj6*x1999*x2003))+((x2001*x2002))+((x2001*x2003))+(((-1.0)*r00*x2007))+(((-1.0)*x1999*x2006))+(((-1.0)*sj0*x2000*x2004))), (((cj0*sj2*x2001))+(((-1.0)*x2002*x2004))+((r00*x2006))+((r10*x2008))+(((-1.0)*x2000*x2005))+((cj6*r00*x2003))+(((-1.0)*x1999*x2007))+(((-1.0)*sj0*x2000*x2001))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2009=IKsin(j4);
IkReal x2010=IKcos(j4);
IkReal x2011=(r11*sj6);
IkReal x2012=((0.026255)*cj0);
IkReal x2013=(r01*sj6);
IkReal x2014=(sj0*sj5);
IkReal x2015=(cj6*r11);
IkReal x2016=(r10*sj6);
IkReal x2017=((0.026255)*sj0);
IkReal x2018=(cj0*cj5);
IkReal x2019=(cj6*r00);
IkReal x2020=((1.0)*sj0);
IkReal x2021=(cj0*sj5);
IkReal x2022=(r00*sj6);
IkReal x2023=((1.0)*cj0);
IkReal x2024=(cj6*r10);
IkReal x2025=(cj6*r01);
IkReal x2026=(cj2*x2010);
IkReal x2027=((1.0)*x2024);
IkReal x2028=((0.02626)*x2009);
IkReal x2029=(cj2*x2009);
IkReal x2030=((0.0718)*x2010);
IkReal x2031=(sj2*x2010);
IkReal x2032=(sj2*x2009);
IkReal x2033=((1.0)*x2032);
evalcond[0]=(((sj0*x2011))+x2026+(((-1.0)*x2019*x2023))+(((-1.0)*x2033))+((cj0*x2013))+(((-1.0)*x2020*x2024)));
evalcond[1]=((((-1.0)*x2023*x2024))+((sj0*x2019))+(((-1.0)*x2013*x2020))+(((-1.0)*x2029))+(((-1.0)*x2031))+((cj0*x2011)));
evalcond[2]=(((cj5*r12*sj0))+((x2014*x2015))+((x2014*x2016))+x2029+x2031+((r02*x2018))+((x2021*x2025))+((x2021*x2022)));
evalcond[3]=(x2026+(((-1.0)*x2014*x2025))+(((-1.0)*x2014*x2022))+((x2016*x2021))+(((-1.0)*x2033))+((r12*x2018))+((x2015*x2021))+(((-1.0)*cj5*r02*x2020)));
evalcond[4]=((-0.1255)+(((-1.0)*cj2*x2028))+(((-1.0)*x2013*x2017))+(((-0.21326)*cj2))+(((-1.0)*py*x2023))+(((-0.0718)*x2026))+((x2011*x2012))+(((-0.0009)*sj2))+((px*sj0))+((x2017*x2019))+(((0.0718)*x2032))+(((-1.0)*x2012*x2024))+(((-0.02626)*x2031)));
evalcond[5]=((-0.001)+(((-1.0)*px*x2023))+(((-1.0)*py*x2020))+(((0.02626)*x2026))+(((-1.0)*sj2*x2030))+(((-0.0718)*x2029))+(((-1.0)*x2017*x2024))+((x2011*x2017))+(((0.0009)*cj2))+(((-1.0)*sj2*x2028))+(((-0.21326)*sj2))+(((-1.0)*x2012*x2019))+((x2012*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2034=(cj5*cj6);
IkReal x2035=((1.0)*sj0);
IkReal x2036=((1.0)*r22);
IkReal x2037=(cj0*sj5);
IkReal x2038=(cj5*sj6);
IkReal x2039=((1.0)*cj0);
IkReal x2040=(cj6*r20);
IkReal x2041=((1.0)*sj5);
IkReal x2042=(r21*sj6);
IkReal x2043=(x2038*x2039);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x2034))+(((-1.0)*sj5*x2036))+((r20*x2038)));
evalcond[2]=(x2040+(((-1.0)*x2042)));
evalcond[3]=((((-1.0)*r20*sj6*x2041))+(((-1.0)*cj5*x2036))+(((-1.0)*cj6*r21*x2041)));
evalcond[4]=((((-1.0)*r10*x2035*x2038))+(((-1.0)*r01*x2034*x2039))+((r12*sj0*sj5))+((r02*x2037))+(((-1.0)*r11*x2034*x2035))+(((-1.0)*r00*x2043)));
evalcond[5]=(((r12*x2037))+(((-1.0)*r10*x2043))+((r00*sj0*x2038))+(((-1.0)*r02*sj5*x2035))+((r01*sj0*x2034))+(((-1.0)*r11*x2034*x2039)));
evalcond[6]=((-0.0001)+(((0.026255)*x2040))+pz+(((-0.026255)*x2042)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2044=(sj0*sj2);
IkReal x2045=(cj0*cj2);
IkReal x2046=(r01*sj6);
IkReal x2047=(cj6*r10);
IkReal x2048=(cj2*sj0);
IkReal x2049=(cj0*sj2);
IkReal x2050=(cj6*r00);
IkReal x2051=((1.0)*r11*sj6);
IkReal x2052=((1.0)*x2049);
if( IKabs(((((-1.0)*x2044*x2051))+(((-1.0)*x2045*x2051))+((x2049*x2050))+(((-1.0)*x2048*x2050))+(((-1.0)*x2046*x2052))+((x2046*x2048))+((x2045*x2047))+((x2044*x2047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj6*x2049))+((x2044*x2050))+(((-1.0)*x2045*x2046))+(((-1.0)*x2048*x2051))+((x2045*x2050))+(((-1.0)*x2044*x2046))+((x2047*x2048))+(((-1.0)*x2047*x2052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2044*x2051))+(((-1.0)*x2045*x2051))+((x2049*x2050))+(((-1.0)*x2048*x2050))+(((-1.0)*x2046*x2052))+((x2046*x2048))+((x2045*x2047))+((x2044*x2047))))+IKsqr((((r11*sj6*x2049))+((x2044*x2050))+(((-1.0)*x2045*x2046))+(((-1.0)*x2048*x2051))+((x2045*x2050))+(((-1.0)*x2044*x2046))+((x2047*x2048))+(((-1.0)*x2047*x2052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2044*x2051))+(((-1.0)*x2045*x2051))+((x2049*x2050))+(((-1.0)*x2048*x2050))+(((-1.0)*x2046*x2052))+((x2046*x2048))+((x2045*x2047))+((x2044*x2047))), (((r11*sj6*x2049))+((x2044*x2050))+(((-1.0)*x2045*x2046))+(((-1.0)*x2048*x2051))+((x2045*x2050))+(((-1.0)*x2044*x2046))+((x2047*x2048))+(((-1.0)*x2047*x2052))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2053=IKsin(j4);
IkReal x2054=IKcos(j4);
IkReal x2055=(r11*sj6);
IkReal x2056=((0.026255)*cj0);
IkReal x2057=(r01*sj6);
IkReal x2058=(sj0*sj5);
IkReal x2059=(cj6*r11);
IkReal x2060=(r10*sj6);
IkReal x2061=(cj5*r12);
IkReal x2062=(cj6*sj0);
IkReal x2063=((1.0)*sj0);
IkReal x2064=(cj5*r02);
IkReal x2065=((1.0)*r10);
IkReal x2066=(cj0*sj5);
IkReal x2067=(r00*sj6);
IkReal x2068=((0.026255)*sj0);
IkReal x2069=(cj0*cj6);
IkReal x2070=((1.0)*cj0);
IkReal x2071=(cj6*r01);
IkReal x2072=(cj2*x2053);
IkReal x2073=(sj2*x2053);
IkReal x2074=((0.0718)*x2054);
IkReal x2075=(cj2*x2054);
IkReal x2076=(sj2*x2054);
IkReal x2077=((1.0)*x2076);
evalcond[0]=(x2073+x2075+(((-1.0)*r00*x2069))+((sj0*x2055))+((cj0*x2057))+(((-1.0)*x2062*x2065)));
evalcond[1]=((((-1.0)*x2057*x2063))+x2072+(((-1.0)*x2077))+((cj0*x2055))+(((-1.0)*x2065*x2069))+((r00*x2062)));
evalcond[2]=(((x2066*x2067))+((cj0*x2064))+((x2066*x2071))+x2072+(((-1.0)*x2077))+((x2058*x2060))+((sj0*x2061))+((x2058*x2059)));
evalcond[3]=(((cj0*x2061))+(((-1.0)*x2063*x2064))+((x2059*x2066))+(((-1.0)*x2073))+(((-1.0)*x2075))+(((-1.0)*x2058*x2067))+((x2060*x2066))+(((-1.0)*x2058*x2071)));
evalcond[4]=((-0.1255)+(((0.026255)*r00*x2062))+(((-1.0)*x2057*x2068))+((x2055*x2056))+(((0.0718)*x2073))+(((-0.0009)*sj2))+(((-0.02626)*x2076))+((px*sj0))+(((-0.01834)*cj2))+((cj2*x2074))+(((-1.0)*cj6*r10*x2056))+(((-1.0)*py*x2070))+(((0.02626)*x2072)));
evalcond[5]=((-0.001)+((x2055*x2068))+((sj2*x2074))+(((-1.0)*px*x2070))+(((-1.0)*cj6*r00*x2056))+(((-0.01834)*sj2))+(((-0.026255)*r10*x2062))+(((0.0009)*cj2))+(((-0.0718)*x2072))+((x2056*x2057))+(((0.02626)*x2073))+(((0.02626)*x2075))+(((-1.0)*py*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2078=(cj0*sj5);
IkReal x2079=(cj5*cj6);
IkReal x2080=((1.0)*sj5);
IkReal x2081=((1.0)*cj0);
IkReal x2082=((1.0)*sj0);
IkReal x2083=(cj5*sj6);
IkReal x2084=(r10*x2083);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x2080))+((r20*x2083))+(((-1.0)*cj3))+((r21*x2079)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r11*x2079*x2082))+((r12*sj0*sj5))+((r02*x2078))+(((-1.0)*r00*x2081*x2083))+(((-1.0)*x2082*x2084))+(((-1.0)*r01*x2079*x2081)));
evalcond[3]=(((r00*sj0*x2083))+((r12*x2078))+(((-1.0)*r11*x2079*x2081))+(((-1.0)*x2081*x2084))+((r01*sj0*x2079))+(((-1.0)*r02*sj0*x2080)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2085=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x2085))+(((-1.0)*r20*sj6*x2085))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2086=(cj5*cj6);
IkReal x2087=((1.0)*sj0);
IkReal x2088=((1.0)*r22);
IkReal x2089=(cj0*sj5);
IkReal x2090=(cj5*sj6);
IkReal x2091=((1.0)*cj0);
IkReal x2092=(cj6*r20);
IkReal x2093=((1.0)*sj5);
IkReal x2094=(r21*sj6);
IkReal x2095=(x2090*x2091);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x2090))+(((-1.0)*sj5*x2088))+((r21*x2086)));
evalcond[2]=(x2092+(((-1.0)*x2094)));
evalcond[3]=((((-1.0)*cj6*r21*x2093))+(((-1.0)*cj5*x2088))+(((-1.0)*r20*sj6*x2093)));
evalcond[4]=(((r02*x2089))+(((-1.0)*r01*x2086*x2091))+((r12*sj0*sj5))+(((-1.0)*r11*x2086*x2087))+(((-1.0)*r10*x2087*x2090))+(((-1.0)*r00*x2095)));
evalcond[5]=((((-1.0)*r11*x2086*x2091))+((r01*sj0*x2086))+(((-1.0)*r02*sj5*x2087))+((r00*sj0*x2090))+(((-1.0)*r10*x2095))+((r12*x2089)));
evalcond[6]=((-0.0001)+(((-0.026255)*x2094))+pz+(((0.026255)*x2092)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2096=(sj0*sj6);
IkReal x2097=(cj0*sj6);
IkReal x2098=(cj6*r00);
IkReal x2099=((1.0)*cj6*r10);
if( IKabs((((r01*x2097))+(((-1.0)*sj0*x2099))+(((-1.0)*cj0*x2098))+((r11*x2096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x2098))+(((-1.0)*r01*x2096))+(((-1.0)*cj0*x2099))+((r11*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2097))+(((-1.0)*sj0*x2099))+(((-1.0)*cj0*x2098))+((r11*x2096))))+IKsqr((((sj0*x2098))+(((-1.0)*r01*x2096))+(((-1.0)*cj0*x2099))+((r11*x2097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x2097))+(((-1.0)*sj0*x2099))+(((-1.0)*cj0*x2098))+((r11*x2096))), (((sj0*x2098))+(((-1.0)*r01*x2096))+(((-1.0)*cj0*x2099))+((r11*x2097))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2100=IKcos(j4);
IkReal x2101=IKsin(j4);
IkReal x2102=(r11*sj6);
IkReal x2103=((0.026255)*cj0);
IkReal x2104=(r01*sj6);
IkReal x2105=(sj0*sj5);
IkReal x2106=(cj6*r11);
IkReal x2107=(r10*sj6);
IkReal x2108=(cj5*r12);
IkReal x2109=(cj6*sj0);
IkReal x2110=((1.0)*sj0);
IkReal x2111=(cj5*r02);
IkReal x2112=((1.0)*r10);
IkReal x2113=(cj0*sj5);
IkReal x2114=(r00*sj6);
IkReal x2115=((0.026255)*sj0);
IkReal x2116=(cj0*cj6);
IkReal x2117=((1.0)*cj0);
IkReal x2118=(cj6*r01);
IkReal x2119=((1.0)*x2101);
evalcond[0]=((((-1.0)*r00*x2116))+((cj0*x2104))+(((-1.0)*x2109*x2112))+(((-1.0)*x2119))+((sj0*x2102)));
evalcond[1]=((((-1.0)*x2112*x2116))+((cj0*x2102))+(((-1.0)*x2104*x2110))+((r00*x2109))+(((-1.0)*x2100)));
evalcond[2]=(((cj0*x2111))+x2100+((x2105*x2106))+((x2105*x2107))+((sj0*x2108))+((x2113*x2118))+((x2113*x2114)));
evalcond[3]=(((cj0*x2108))+(((-1.0)*x2105*x2118))+(((-1.0)*x2105*x2114))+((x2106*x2113))+((x2107*x2113))+(((-1.0)*x2110*x2111))+(((-1.0)*x2119)));
evalcond[4]=((-0.1264)+(((0.0718)*x2101))+(((-1.0)*py*x2117))+(((-1.0)*x2104*x2115))+((x2102*x2103))+((px*sj0))+(((-1.0)*cj6*r10*x2103))+(((0.026255)*r00*x2109))+(((-0.02626)*x2100)));
evalcond[5]=((-0.21426)+(((-0.026255)*r10*x2109))+((x2103*x2104))+(((-1.0)*py*x2110))+(((-1.0)*cj6*r00*x2103))+((x2102*x2115))+(((-0.0718)*x2100))+(((-0.02626)*x2101))+(((-1.0)*px*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2120=(cj5*cj6);
IkReal x2121=((1.0)*sj0);
IkReal x2122=((1.0)*r22);
IkReal x2123=(cj0*sj5);
IkReal x2124=(cj5*sj6);
IkReal x2125=((1.0)*cj0);
IkReal x2126=(cj6*r20);
IkReal x2127=((1.0)*sj5);
IkReal x2128=(r21*sj6);
IkReal x2129=(x2124*x2125);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x2124))+((r21*x2120))+(((-1.0)*sj5*x2122)));
evalcond[2]=(x2126+(((-1.0)*x2128)));
evalcond[3]=((((-1.0)*cj6*r21*x2127))+(((-1.0)*r20*sj6*x2127))+(((-1.0)*cj5*x2122)));
evalcond[4]=((((-1.0)*r01*x2120*x2125))+(((-1.0)*r00*x2129))+((r02*x2123))+((r12*sj0*sj5))+(((-1.0)*r11*x2120*x2121))+(((-1.0)*r10*x2121*x2124)));
evalcond[5]=(((r00*sj0*x2124))+(((-1.0)*r10*x2129))+((r12*x2123))+(((-1.0)*r02*sj5*x2121))+(((-1.0)*r11*x2120*x2125))+((r01*sj0*x2120)));
evalcond[6]=((-0.0001)+(((-0.026255)*x2128))+(((0.026255)*x2126))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2130=(cj0*cj6);
IkReal x2131=(cj6*sj0);
IkReal x2132=(cj0*sj6);
IkReal x2133=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r11*x2133))+((r00*x2130))+((r10*x2131))+(((-1.0)*r01*x2132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2132))+(((-1.0)*r01*x2133))+((r00*x2131))+(((-1.0)*r10*x2130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2133))+((r00*x2130))+((r10*x2131))+(((-1.0)*r01*x2132))))+IKsqr((((r11*x2132))+(((-1.0)*r01*x2133))+((r00*x2131))+(((-1.0)*r10*x2130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x2133))+((r00*x2130))+((r10*x2131))+(((-1.0)*r01*x2132))), (((r11*x2132))+(((-1.0)*r01*x2133))+((r00*x2131))+(((-1.0)*r10*x2130))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2134=IKsin(j4);
IkReal x2135=IKcos(j4);
IkReal x2136=(r11*sj6);
IkReal x2137=((0.026255)*cj0);
IkReal x2138=(r01*sj6);
IkReal x2139=(sj0*sj5);
IkReal x2140=(cj6*r11);
IkReal x2141=(r10*sj6);
IkReal x2142=(cj5*r12);
IkReal x2143=(cj6*sj0);
IkReal x2144=((1.0)*sj0);
IkReal x2145=(cj5*r02);
IkReal x2146=((1.0)*r10);
IkReal x2147=(cj0*sj5);
IkReal x2148=(r00*sj6);
IkReal x2149=((0.026255)*sj0);
IkReal x2150=(cj0*cj6);
IkReal x2151=((1.0)*cj0);
IkReal x2152=(cj6*r01);
IkReal x2153=((1.0)*x2135);
evalcond[0]=(((cj0*x2138))+(((-1.0)*x2143*x2146))+x2134+((sj0*x2136))+(((-1.0)*r00*x2150)));
evalcond[1]=((((-1.0)*x2138*x2144))+((cj0*x2136))+(((-1.0)*x2153))+((r00*x2143))+(((-1.0)*x2146*x2150)));
evalcond[2]=(((x2147*x2152))+((cj0*x2145))+((sj0*x2142))+(((-1.0)*x2153))+((x2139*x2140))+((x2139*x2141))+((x2147*x2148)));
evalcond[3]=((((-1.0)*x2144*x2145))+((cj0*x2142))+((x2140*x2147))+((x2141*x2147))+(((-1.0)*x2139*x2152))+(((-1.0)*x2134))+(((-1.0)*x2139*x2148)));
evalcond[4]=((-0.1264)+(((-1.0)*x2138*x2149))+((x2136*x2137))+(((0.026255)*r00*x2143))+(((0.0718)*x2134))+(((-1.0)*py*x2151))+(((-1.0)*cj6*r10*x2137))+((px*sj0))+(((-0.02626)*x2135)));
evalcond[5]=((-0.01934)+(((-1.0)*px*x2151))+(((0.0718)*x2135))+(((-1.0)*cj6*r00*x2137))+(((-0.026255)*r10*x2143))+(((-1.0)*py*x2144))+(((0.02626)*x2134))+((x2136*x2149))+((x2137*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2154=((1.0)*cj6);
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(sj3,-1);
if(!x2155.valid){
continue;
}
if( IKabs(((x2155.value)*((((r21*sj6))+(((-1.0)*r20*x2154)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x2154))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2155.value)*((((r21*sj6))+(((-1.0)*r20*x2154))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x2154))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2155.value)*((((r21*sj6))+(((-1.0)*r20*x2154))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x2154))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2156=IKcos(j4);
IkReal x2157=IKsin(j4);
IkReal x2158=(r11*sj0);
IkReal x2159=((0.026255)*sj6);
IkReal x2160=(cj0*r01);
IkReal x2161=(cj6*sj5);
IkReal x2162=(r10*sj0);
IkReal x2163=(sj5*sj6);
IkReal x2164=(cj0*r11);
IkReal x2165=((1.0)*cj5);
IkReal x2166=((1.0)*cj6);
IkReal x2167=(cj0*r10);
IkReal x2168=((1.0)*sj0);
IkReal x2169=(cj0*r00);
IkReal x2170=(cj5*r12);
IkReal x2171=((0.026255)*cj6);
IkReal x2172=((1.0)*r21);
IkReal x2173=((1.0)*cj0);
IkReal x2174=((1.0)*x2157);
IkReal x2175=(sj3*x2157);
IkReal x2176=(cj6*r00*sj0);
IkReal x2177=((1.0)*x2156);
IkReal x2178=(cj3*x2156);
evalcond[0]=(x2175+(((-1.0)*sj6*x2172))+((cj6*r20)));
evalcond[1]=((((-1.0)*x2161*x2172))+(((-1.0)*sj3*x2177))+(((-1.0)*r22*x2165))+(((-1.0)*r20*x2163)));
evalcond[2]=(((sj6*x2164))+x2176+(((-1.0)*x2166*x2167))+(((-1.0)*x2177))+(((-1.0)*r01*sj6*x2168)));
evalcond[3]=((((-1.0)*cj3*x2174))+((sj6*x2160))+(((-1.0)*x2166*x2169))+((sj6*x2158))+(((-1.0)*x2162*x2166)));
evalcond[4]=((-0.0001)+(((0.0718)*sj3*x2156))+((r20*x2171))+pz+(((0.02626)*x2175))+(((0.09746)*sj3))+(((-1.0)*r21*x2159)));
evalcond[5]=(((cj0*cj5*r02))+x2178+((x2162*x2163))+((x2160*x2161))+((x2158*x2161))+((x2163*x2169))+((sj0*x2170)));
evalcond[6]=(((cj0*x2170))+(((-1.0)*r02*sj0*x2165))+((x2161*x2164))+(((-1.0)*x2174))+(((-1.0)*r01*x2161*x2168))+((x2163*x2167))+(((-1.0)*r00*x2163*x2168)));
evalcond[7]=((-0.1264)+(((-0.02626)*x2156))+((r00*sj0*x2171))+(((-1.0)*py*x2173))+(((-1.0)*r01*sj0*x2159))+((px*sj0))+(((0.0718)*x2157))+((x2159*x2164))+(((-1.0)*x2167*x2171)));
evalcond[8]=((-0.1168)+(((-1.0)*px*x2173))+(((-1.0)*x2169*x2171))+((x2158*x2159))+(((-1.0)*py*x2168))+(((-0.02626)*cj3*x2157))+(((-0.0718)*x2178))+(((-0.09746)*cj3))+(((-1.0)*x2162*x2171))+((x2159*x2160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2179=((1.0)*sj5);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x2179))+(((-1.0)*cj6*r21*x2179))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2182=IKcos(j4);
IkReal x2183=IKsin(j4);
IkReal x2184=(r11*sj0);
IkReal x2185=((0.026255)*sj6);
IkReal x2186=(cj0*r01);
IkReal x2187=(cj6*sj5);
IkReal x2188=(r10*sj0);
IkReal x2189=(sj5*sj6);
IkReal x2190=(cj0*r11);
IkReal x2191=((1.0)*cj5);
IkReal x2192=((1.0)*cj6);
IkReal x2193=(cj0*r10);
IkReal x2194=((1.0)*sj0);
IkReal x2195=(cj0*r00);
IkReal x2196=(cj5*r12);
IkReal x2197=((0.026255)*cj6);
IkReal x2198=((1.0)*r21);
IkReal x2199=((1.0)*cj0);
IkReal x2200=((1.0)*x2183);
IkReal x2201=(sj3*x2183);
IkReal x2202=(cj6*r00*sj0);
IkReal x2203=((1.0)*x2182);
IkReal x2204=(cj3*x2182);
evalcond[0]=(x2201+(((-1.0)*sj6*x2198))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x2203))+(((-1.0)*x2187*x2198))+(((-1.0)*r20*x2189))+(((-1.0)*r22*x2191)));
evalcond[2]=(x2202+(((-1.0)*x2203))+(((-1.0)*x2192*x2193))+(((-1.0)*r01*sj6*x2194))+((sj6*x2190)));
evalcond[3]=((((-1.0)*x2192*x2195))+(((-1.0)*x2188*x2192))+((sj6*x2184))+((sj6*x2186))+(((-1.0)*cj3*x2200)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x2185))+(((0.02626)*x2201))+(((0.0718)*sj3*x2182))+((r20*x2197))+pz+(((0.09746)*sj3)));
evalcond[5]=(x2204+((cj0*cj5*r02))+((x2186*x2187))+((sj0*x2196))+((x2189*x2195))+((x2188*x2189))+((x2184*x2187)));
evalcond[6]=((((-1.0)*r02*sj0*x2191))+(((-1.0)*x2200))+((x2187*x2190))+((x2189*x2193))+((cj0*x2196))+(((-1.0)*r00*x2189*x2194))+(((-1.0)*r01*x2187*x2194)));
evalcond[7]=((-0.1264)+(((-1.0)*x2193*x2197))+((r00*sj0*x2197))+(((-1.0)*py*x2199))+(((-0.02626)*x2182))+(((-1.0)*r01*sj0*x2185))+(((0.0718)*x2183))+((px*sj0))+((x2185*x2190)));
evalcond[8]=((-0.1168)+(((-1.0)*x2195*x2197))+(((-0.02626)*cj3*x2183))+(((-1.0)*x2188*x2197))+(((-1.0)*py*x2194))+(((-0.09746)*cj3))+(((-1.0)*px*x2199))+((x2184*x2185))+((x2185*x2186))+(((-0.0718)*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2205=(cj0*sj5);
IkReal x2206=(cj5*cj6);
IkReal x2207=((1.0)*sj5);
IkReal x2208=((1.0)*cj0);
IkReal x2209=((1.0)*sj0);
IkReal x2210=(cj5*sj6);
IkReal x2211=(r10*x2210);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x2210))+(((-1.0)*r22*x2207))+((r21*x2206))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*r11*x2206*x2209))+((r02*x2205))+sj3+((r12*sj0*sj5))+(((-1.0)*r01*x2206*x2208))+(((-1.0)*x2209*x2211))+(((-1.0)*r00*x2208*x2210)));
evalcond[3]=((((-1.0)*r11*x2206*x2208))+(((-1.0)*x2208*x2211))+(((-1.0)*r02*sj0*x2207))+((r12*x2205))+((r00*sj0*x2210))+((r01*sj0*x2206)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2212=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x2212))+(((-1.0)*cj6*r21*x2212))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2213=(cj5*cj6);
IkReal x2214=(r11*sj0);
IkReal x2215=(cj0*sj6);
IkReal x2216=(cj6*sj5);
IkReal x2217=((1.0)*cj0);
IkReal x2218=(r10*sj0);
IkReal x2219=((1.0)*cj5);
IkReal x2220=(cj0*r02);
IkReal x2221=((1.0)*sj5);
IkReal x2222=(cj5*sj6);
IkReal x2223=(cj6*r00);
IkReal x2224=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x2222))+(((-1.0)*r22*x2221))+((r21*x2213)));
evalcond[2]=(((sj6*x2214))+((r01*x2215))+(((-1.0)*x2217*x2223))+(((-1.0)*cj6*x2218)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2213*x2217))+(((-1.0)*x2213*x2214))+(((-1.0)*sj6*x2218*x2219))+((sj5*x2224))+((sj5*x2220))+(((-1.0)*r00*x2215*x2219)));
evalcond[4]=(((r00*sj5*x2215))+((cj5*x2224))+((cj5*x2220))+((x2214*x2216))+((sj5*sj6*x2218))+((cj0*r01*x2216)));
evalcond[5]=((((-1.0)*r11*x2213*x2217))+((r00*sj0*x2222))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x2221))+(((-1.0)*r10*x2215*x2219))+((r01*sj0*x2213)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x2223))+(((-1.0)*px*x2217))+(((0.026255)*sj6*x2214))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x2218))+(((0.026255)*r01*x2215)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2225=(cj6*r20);
IkReal x2226=(r21*sj6);
if( IKabs((x2226+(((-1.0)*x2225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2225))+(((-6.96378830083565e-5)*x2226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2226+(((-1.0)*x2225))))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2225))+(((-6.96378830083565e-5)*x2226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2226+(((-1.0)*x2225))), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2225))+(((-6.96378830083565e-5)*x2226))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2227=IKcos(j4);
IkReal x2228=IKsin(j4);
IkReal x2229=((1.0)*cj5);
IkReal x2230=(cj0*r10);
IkReal x2231=(sj5*sj6);
IkReal x2232=((1.0)*cj6);
IkReal x2233=((0.026255)*cj6);
IkReal x2234=(r21*sj6);
IkReal x2235=(cj0*r11*sj6);
IkReal x2236=(cj6*r00*sj0);
IkReal x2237=(r01*sj0*sj6);
evalcond[0]=(x2228+(((-1.0)*x2234))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x2231))+(((-1.0)*x2227))+(((-1.0)*r21*sj5*x2232))+(((-1.0)*r22*x2229)));
evalcond[2]=((0.09736)+(((0.0718)*x2227))+(((-0.026255)*x2234))+((r20*x2233))+pz+(((0.02626)*x2228)));
evalcond[3]=(x2227+x2235+x2236+(((-1.0)*x2237))+(((-1.0)*x2230*x2232)));
evalcond[4]=(x2228+((cj0*cj5*r12))+(((-1.0)*r00*sj0*x2231))+((cj0*cj6*r11*sj5))+((x2230*x2231))+(((-1.0)*r02*sj0*x2229))+(((-1.0)*r01*sj0*sj5*x2232)));
evalcond[5]=((-0.1246)+((r00*sj0*x2233))+(((-0.0718)*x2228))+(((-0.026255)*x2237))+(((0.026255)*x2235))+(((0.02626)*x2227))+((px*sj0))+(((-1.0)*x2230*x2233))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2238=(cj5*cj6);
IkReal x2239=(r11*sj0);
IkReal x2240=(cj0*sj6);
IkReal x2241=(cj6*sj5);
IkReal x2242=((1.0)*cj0);
IkReal x2243=(r10*sj0);
IkReal x2244=((1.0)*cj5);
IkReal x2245=(cj0*r02);
IkReal x2246=((1.0)*sj5);
IkReal x2247=(cj5*sj6);
IkReal x2248=(cj6*r00);
IkReal x2249=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x2246))+((r21*x2238))+((r20*x2247)));
evalcond[2]=((((-1.0)*cj6*x2243))+((sj6*x2239))+((r01*x2240))+(((-1.0)*x2242*x2248)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x2240*x2244))+((sj5*x2249))+((sj5*x2245))+(((-1.0)*sj6*x2243*x2244))+(((-1.0)*x2238*x2239))+(((-1.0)*r01*x2238*x2242)));
evalcond[4]=(((r00*sj5*x2240))+((sj5*sj6*x2243))+((cj5*x2249))+((cj5*x2245))+((x2239*x2241))+((cj0*r01*x2241)));
evalcond[5]=((((-1.0)*r02*sj0*x2246))+((r01*sj0*x2238))+((cj0*r12*sj5))+(((-1.0)*r10*x2240*x2244))+(((-1.0)*r11*x2238*x2242))+((r00*sj0*x2247)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x2243))+(((-1.0)*px*x2242))+(((-0.026255)*cj0*x2248))+(((-1.0)*py*sj0))+(((0.026255)*r01*x2240))+(((0.026255)*sj6*x2239)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2250=IKcos(j4);
IkReal x2251=IKsin(j4);
IkReal x2252=((1.0)*cj5);
IkReal x2253=(cj0*r10);
IkReal x2254=(sj5*sj6);
IkReal x2255=((1.0)*cj6);
IkReal x2256=((0.026255)*cj6);
IkReal x2257=(r21*sj6);
IkReal x2258=(cj0*r11*sj6);
IkReal x2259=(cj6*r00*sj0);
IkReal x2260=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x2251))+(((-1.0)*x2257))+((cj6*r20)));
evalcond[1]=(x2250+(((-1.0)*r22*x2252))+(((-1.0)*r20*x2254))+(((-1.0)*r21*sj5*x2255)));
evalcond[2]=((-0.09756)+(((-0.02626)*x2251))+((r20*x2256))+(((-0.0718)*x2250))+pz+(((-0.026255)*x2257)));
evalcond[3]=(x2259+x2258+x2250+(((-1.0)*x2253*x2255))+(((-1.0)*x2260)));
evalcond[4]=((((-1.0)*r02*sj0*x2252))+x2251+((cj0*cj5*r12))+((x2253*x2254))+(((-1.0)*r00*sj0*x2254))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x2255)));
evalcond[5]=((-0.1246)+((r00*sj0*x2256))+(((-0.026255)*x2260))+(((0.026255)*x2258))+(((-1.0)*x2253*x2256))+(((0.02626)*x2250))+(((-0.0718)*x2251))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2261=(cj5*cj6);
IkReal x2262=((1.0)*sj0);
IkReal x2263=((1.0)*r22);
IkReal x2264=(cj0*sj5);
IkReal x2265=(cj5*sj6);
IkReal x2266=((1.0)*cj0);
IkReal x2267=(cj6*r20);
IkReal x2268=((1.0)*sj5);
IkReal x2269=(r21*sj6);
IkReal x2270=(x2265*x2266);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x2261))+((r20*x2265))+(((-1.0)*sj5*x2263)));
evalcond[2]=(x2267+(((-1.0)*x2269)));
evalcond[3]=((((-1.0)*cj5*x2263))+(((-1.0)*r20*sj6*x2268))+(((-1.0)*cj6*r21*x2268)));
evalcond[4]=((((-1.0)*r01*x2261*x2266))+(((-1.0)*r00*x2270))+((r12*sj0*sj5))+(((-1.0)*r10*x2262*x2265))+((r02*x2264))+(((-1.0)*r11*x2261*x2262)));
evalcond[5]=(((r00*sj0*x2265))+((r12*x2264))+(((-1.0)*r10*x2270))+((r01*sj0*x2261))+(((-1.0)*r11*x2261*x2266))+(((-1.0)*r02*sj5*x2262)));
evalcond[6]=((-0.0001)+(((-0.026255)*x2269))+pz+(((0.026255)*x2267)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2271=(cj0*cj6);
IkReal x2272=(sj0*sj6);
IkReal x2273=((1.0)*r11);
IkReal x2274=(cj6*sj0);
IkReal x2275=(cj0*sj6);
if( IKabs((((r00*x2271))+((r10*x2274))+(((-1.0)*x2272*x2273))+(((-1.0)*r01*x2275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x2272))+(((-1.0)*x2273*x2275))+((r10*x2271))+(((-1.0)*r00*x2274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2271))+((r10*x2274))+(((-1.0)*x2272*x2273))+(((-1.0)*r01*x2275))))+IKsqr((((r01*x2272))+(((-1.0)*x2273*x2275))+((r10*x2271))+(((-1.0)*r00*x2274))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x2271))+((r10*x2274))+(((-1.0)*x2272*x2273))+(((-1.0)*r01*x2275))), (((r01*x2272))+(((-1.0)*x2273*x2275))+((r10*x2271))+(((-1.0)*r00*x2274))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2276=IKcos(j4);
IkReal x2277=IKsin(j4);
IkReal x2278=(r11*sj6);
IkReal x2279=((0.026255)*cj0);
IkReal x2280=(r01*sj6);
IkReal x2281=(sj0*sj5);
IkReal x2282=(cj6*r11);
IkReal x2283=(r10*sj6);
IkReal x2284=(cj5*r12);
IkReal x2285=(cj6*sj0);
IkReal x2286=((1.0)*sj0);
IkReal x2287=(cj5*r02);
IkReal x2288=((1.0)*r10);
IkReal x2289=(cj0*sj5);
IkReal x2290=(r00*sj6);
IkReal x2291=((0.026255)*sj0);
IkReal x2292=(cj0*cj6);
IkReal x2293=((1.0)*cj0);
IkReal x2294=(cj6*r01);
evalcond[0]=(((cj0*x2280))+((sj0*x2278))+x2277+(((-1.0)*x2285*x2288))+(((-1.0)*r00*x2292)));
evalcond[1]=((((-1.0)*x2280*x2286))+x2276+((cj0*x2278))+(((-1.0)*x2288*x2292))+((r00*x2285)));
evalcond[2]=(((cj0*x2287))+((x2281*x2282))+((x2281*x2283))+((sj0*x2284))+((x2289*x2290))+((x2289*x2294))+(((-1.0)*x2276)));
evalcond[3]=(((cj0*x2284))+x2277+((x2282*x2289))+(((-1.0)*x2281*x2294))+(((-1.0)*x2281*x2290))+((x2283*x2289))+(((-1.0)*x2286*x2287)));
evalcond[4]=((-0.1246)+(((-0.0718)*x2277))+(((-1.0)*py*x2293))+((px*sj0))+(((-1.0)*x2280*x2291))+(((0.02626)*x2276))+(((-1.0)*cj6*r10*x2279))+((x2278*x2279))+(((0.026255)*r00*x2285)));
evalcond[5]=((0.21226)+(((-0.026255)*r10*x2285))+((x2278*x2291))+((x2279*x2280))+(((-1.0)*py*x2286))+(((-1.0)*cj6*r00*x2279))+(((0.02626)*x2277))+(((0.0718)*x2276))+(((-1.0)*px*x2293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2295=(cj5*cj6);
IkReal x2296=((1.0)*sj0);
IkReal x2297=((1.0)*r22);
IkReal x2298=(cj0*sj5);
IkReal x2299=(cj5*sj6);
IkReal x2300=((1.0)*cj0);
IkReal x2301=(cj6*r20);
IkReal x2302=((1.0)*sj5);
IkReal x2303=(r21*sj6);
IkReal x2304=(x2299*x2300);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x2295))+(((-1.0)*sj5*x2297))+((r20*x2299)));
evalcond[2]=((((-1.0)*x2303))+x2301);
evalcond[3]=((((-1.0)*r20*sj6*x2302))+(((-1.0)*cj5*x2297))+(((-1.0)*cj6*r21*x2302)));
evalcond[4]=((((-1.0)*r00*x2304))+((r12*sj0*sj5))+((r02*x2298))+(((-1.0)*r10*x2296*x2299))+(((-1.0)*r11*x2295*x2296))+(((-1.0)*r01*x2295*x2300)));
evalcond[5]=((((-1.0)*r10*x2304))+((r00*sj0*x2299))+((r01*sj0*x2295))+(((-1.0)*r02*sj5*x2296))+(((-1.0)*r11*x2295*x2300))+((r12*x2298)));
evalcond[6]=((-0.0001)+(((-0.026255)*x2303))+pz+(((0.026255)*x2301)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2305=(sj0*sj6);
IkReal x2306=(cj6*r10);
IkReal x2307=((1.0)*sj0);
IkReal x2308=(cj6*r00);
IkReal x2309=(cj0*sj6);
if( IKabs(((((-1.0)*x2306*x2307))+((r11*x2305))+(((-1.0)*cj0*x2308))+((r01*x2309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2309))+((cj0*x2306))+((r01*x2305))+(((-1.0)*x2307*x2308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2306*x2307))+((r11*x2305))+(((-1.0)*cj0*x2308))+((r01*x2309))))+IKsqr(((((-1.0)*r11*x2309))+((cj0*x2306))+((r01*x2305))+(((-1.0)*x2307*x2308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2306*x2307))+((r11*x2305))+(((-1.0)*cj0*x2308))+((r01*x2309))), ((((-1.0)*r11*x2309))+((cj0*x2306))+((r01*x2305))+(((-1.0)*x2307*x2308))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2310=IKcos(j4);
IkReal x2311=IKsin(j4);
IkReal x2312=(r11*sj6);
IkReal x2313=((0.026255)*cj0);
IkReal x2314=(r01*sj6);
IkReal x2315=(sj0*sj5);
IkReal x2316=(cj6*r11);
IkReal x2317=(r10*sj6);
IkReal x2318=(cj5*r12);
IkReal x2319=(cj6*sj0);
IkReal x2320=((1.0)*sj0);
IkReal x2321=(cj5*r02);
IkReal x2322=((1.0)*r10);
IkReal x2323=(cj0*sj5);
IkReal x2324=(r00*sj6);
IkReal x2325=((0.026255)*sj0);
IkReal x2326=(cj0*cj6);
IkReal x2327=((1.0)*cj0);
IkReal x2328=(cj6*r01);
evalcond[0]=(x2310+(((-1.0)*x2322*x2326))+((r00*x2319))+(((-1.0)*x2314*x2320))+((cj0*x2312)));
evalcond[1]=((((-1.0)*x2311))+((sj0*x2312))+(((-1.0)*x2319*x2322))+(((-1.0)*r00*x2326))+((cj0*x2314)));
evalcond[2]=(((cj0*x2321))+((x2315*x2316))+((x2315*x2317))+x2310+((sj0*x2318))+((x2323*x2324))+((x2323*x2328)));
evalcond[3]=(((x2316*x2323))+((x2317*x2323))+x2311+(((-1.0)*x2320*x2321))+(((-1.0)*x2315*x2328))+(((-1.0)*x2315*x2324))+((cj0*x2318)));
evalcond[4]=((-0.1246)+((x2312*x2313))+(((0.026255)*r00*x2319))+(((-1.0)*py*x2327))+(((-0.0718)*x2311))+(((0.02626)*x2310))+((px*sj0))+(((-1.0)*x2314*x2325))+(((-1.0)*cj6*r10*x2313)));
evalcond[5]=((0.01734)+((x2312*x2325))+(((-1.0)*py*x2320))+(((-1.0)*cj6*r00*x2313))+(((-0.0718)*x2310))+(((-0.02626)*x2311))+(((-1.0)*px*x2327))+((x2313*x2314))+(((-0.026255)*r10*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2329=((1.0)*sj5);
IkReal x2330=((1.0)*sj6);
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(cj3,-1);
if(!x2331.valid){
continue;
}
CheckValue<IkReal> x2332=IKPowWithIntegerCheck(sj3,-1);
if(!x2332.valid){
continue;
}
if( IKabs(((x2331.value)*(((((-1.0)*cj0*r01*x2330))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x2330))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2332.value)*(((((-1.0)*cj6*r21*x2329))+(((-1.0)*r20*sj6*x2329))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2331.value)*(((((-1.0)*cj0*r01*x2330))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x2330))+((cj0*cj6*r00))))))+IKsqr(((x2332.value)*(((((-1.0)*cj6*r21*x2329))+(((-1.0)*r20*sj6*x2329))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2331.value)*(((((-1.0)*cj0*r01*x2330))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x2330))+((cj0*cj6*r00))))), ((x2332.value)*(((((-1.0)*cj6*r21*x2329))+(((-1.0)*r20*sj6*x2329))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2333=IKcos(j4);
IkReal x2334=IKsin(j4);
IkReal x2335=(r11*sj0);
IkReal x2336=((0.026255)*sj6);
IkReal x2337=(cj0*r01);
IkReal x2338=(cj5*r12);
IkReal x2339=(cj6*sj5);
IkReal x2340=(r10*sj0);
IkReal x2341=(sj5*sj6);
IkReal x2342=(cj0*r11);
IkReal x2343=((1.0)*cj5);
IkReal x2344=((1.0)*cj6);
IkReal x2345=(cj0*r10);
IkReal x2346=((1.0)*sj0);
IkReal x2347=(cj0*r00);
IkReal x2348=((0.026255)*cj6);
IkReal x2349=((1.0)*r21);
IkReal x2350=((1.0)*cj0);
IkReal x2351=(sj3*x2334);
IkReal x2352=(r00*x2348);
IkReal x2353=((1.0)*x2333);
IkReal x2354=(cj3*x2334);
IkReal x2355=((0.0718)*x2333);
evalcond[0]=((((-1.0)*sj6*x2349))+x2351+((cj6*r20)));
evalcond[1]=((((-1.0)*x2339*x2349))+(((-1.0)*sj3*x2353))+(((-1.0)*r22*x2343))+(((-1.0)*r20*x2341)));
evalcond[2]=((((-1.0)*x2344*x2345))+x2333+((cj6*r00*sj0))+((sj6*x2342))+(((-1.0)*r01*sj6*x2346)));
evalcond[3]=(((sj6*x2335))+((sj6*x2337))+(((-1.0)*x2344*x2347))+(((-1.0)*x2340*x2344))+x2354);
evalcond[4]=((-0.0001)+pz+((r20*x2348))+(((0.09746)*sj3))+(((0.02626)*x2351))+(((-1.0)*r21*x2336))+((sj3*x2355)));
evalcond[5]=(((x2337*x2339))+((cj0*cj5*r02))+((x2340*x2341))+((x2341*x2347))+((sj0*x2338))+(((-1.0)*cj3*x2353))+((x2335*x2339)));
evalcond[6]=(x2334+((x2341*x2345))+(((-1.0)*r01*x2339*x2346))+(((-1.0)*r00*x2341*x2346))+((x2339*x2342))+((cj0*x2338))+(((-1.0)*r02*sj0*x2343)));
evalcond[7]=((-0.1246)+((sj0*x2352))+(((-1.0)*x2345*x2348))+(((-1.0)*py*x2350))+(((-1.0)*r01*sj0*x2336))+(((-0.0718)*x2334))+(((0.02626)*x2333))+((px*sj0))+((x2336*x2342)));
evalcond[8]=((0.1148)+(((-1.0)*py*x2346))+(((-1.0)*x2340*x2348))+((x2336*x2337))+((cj3*x2355))+((x2335*x2336))+(((-1.0)*px*x2350))+(((0.09746)*cj3))+(((0.02626)*x2354))+(((-1.0)*x2347*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2356=((1.0)*cj6);
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(sj3,-1);
if(!x2357.valid){
continue;
}
if( IKabs(((x2357.value)*(((((-1.0)*r20*x2356))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x2356))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2357.value)*(((((-1.0)*r20*x2356))+((r21*sj6))))))+IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x2356))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2357.value)*(((((-1.0)*r20*x2356))+((r21*sj6))))), (((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x2356))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2358=IKcos(j4);
IkReal x2359=IKsin(j4);
IkReal x2360=(r11*sj0);
IkReal x2361=((0.026255)*sj6);
IkReal x2362=(cj0*r01);
IkReal x2363=(cj5*r12);
IkReal x2364=(cj6*sj5);
IkReal x2365=(r10*sj0);
IkReal x2366=(sj5*sj6);
IkReal x2367=(cj0*r11);
IkReal x2368=((1.0)*cj5);
IkReal x2369=((1.0)*cj6);
IkReal x2370=(cj0*r10);
IkReal x2371=((1.0)*sj0);
IkReal x2372=(cj0*r00);
IkReal x2373=((0.026255)*cj6);
IkReal x2374=((1.0)*r21);
IkReal x2375=((1.0)*cj0);
IkReal x2376=(sj3*x2359);
IkReal x2377=(r00*x2373);
IkReal x2378=((1.0)*x2358);
IkReal x2379=(cj3*x2359);
IkReal x2380=((0.0718)*x2358);
evalcond[0]=((((-1.0)*sj6*x2374))+x2376+((cj6*r20)));
evalcond[1]=((((-1.0)*x2364*x2374))+(((-1.0)*r22*x2368))+(((-1.0)*sj3*x2378))+(((-1.0)*r20*x2366)));
evalcond[2]=((((-1.0)*r01*sj6*x2371))+x2358+((cj6*r00*sj0))+(((-1.0)*x2369*x2370))+((sj6*x2367)));
evalcond[3]=(x2379+(((-1.0)*x2369*x2372))+(((-1.0)*x2365*x2369))+((sj6*x2360))+((sj6*x2362)));
evalcond[4]=((-0.0001)+((r20*x2373))+(((-1.0)*r21*x2361))+((sj3*x2380))+pz+(((0.02626)*x2376))+(((0.09746)*sj3)));
evalcond[5]=((((-1.0)*cj3*x2378))+((cj0*cj5*r02))+((sj0*x2363))+((x2365*x2366))+((x2366*x2372))+((x2360*x2364))+((x2362*x2364)));
evalcond[6]=(((x2364*x2367))+((cj0*x2363))+x2359+((x2366*x2370))+(((-1.0)*r00*x2366*x2371))+(((-1.0)*r02*sj0*x2368))+(((-1.0)*r01*x2364*x2371)));
evalcond[7]=((-0.1246)+(((-0.0718)*x2359))+((sj0*x2377))+(((-1.0)*r01*sj0*x2361))+((x2361*x2367))+((px*sj0))+(((-1.0)*x2370*x2373))+(((0.02626)*x2358))+(((-1.0)*py*x2375)));
evalcond[8]=((0.1148)+(((-1.0)*px*x2375))+((x2360*x2361))+(((-1.0)*x2365*x2373))+((x2361*x2362))+((cj3*x2380))+(((-1.0)*x2372*x2373))+(((0.02626)*x2379))+(((0.09746)*cj3))+(((-1.0)*py*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2381=((1.0)*sj5);
CheckValue<IkReal> x2382=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x2381))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x2381))),IKFAST_ATAN2_MAGTHRESH);
if(!x2383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2382.value)))+(x2383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2384=IKcos(j4);
IkReal x2385=IKsin(j4);
IkReal x2386=(r11*sj0);
IkReal x2387=((0.026255)*sj6);
IkReal x2388=(cj0*r01);
IkReal x2389=(cj5*r12);
IkReal x2390=(cj6*sj5);
IkReal x2391=(r10*sj0);
IkReal x2392=(sj5*sj6);
IkReal x2393=(cj0*r11);
IkReal x2394=((1.0)*cj5);
IkReal x2395=((1.0)*cj6);
IkReal x2396=(cj0*r10);
IkReal x2397=((1.0)*sj0);
IkReal x2398=(cj0*r00);
IkReal x2399=((0.026255)*cj6);
IkReal x2400=((1.0)*r21);
IkReal x2401=((1.0)*cj0);
IkReal x2402=(sj3*x2385);
IkReal x2403=(r00*x2399);
IkReal x2404=((1.0)*x2384);
IkReal x2405=(cj3*x2385);
IkReal x2406=((0.0718)*x2384);
evalcond[0]=(x2402+(((-1.0)*sj6*x2400))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x2404))+(((-1.0)*r22*x2394))+(((-1.0)*r20*x2392))+(((-1.0)*x2390*x2400)));
evalcond[2]=(x2384+((cj6*r00*sj0))+((sj6*x2393))+(((-1.0)*r01*sj6*x2397))+(((-1.0)*x2395*x2396)));
evalcond[3]=(x2405+((sj6*x2388))+((sj6*x2386))+(((-1.0)*x2391*x2395))+(((-1.0)*x2395*x2398)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x2387))+((r20*x2399))+((sj3*x2406))+pz+(((0.09746)*sj3))+(((0.02626)*x2402)));
evalcond[5]=(((x2392*x2398))+(((-1.0)*cj3*x2404))+((cj0*cj5*r02))+((x2391*x2392))+((x2388*x2390))+((sj0*x2389))+((x2386*x2390)));
evalcond[6]=((((-1.0)*r00*x2392*x2397))+((x2392*x2396))+x2385+((x2390*x2393))+((cj0*x2389))+(((-1.0)*r01*x2390*x2397))+(((-1.0)*r02*sj0*x2394)));
evalcond[7]=((-0.1246)+((x2387*x2393))+(((-1.0)*x2396*x2399))+(((-1.0)*py*x2401))+((px*sj0))+((sj0*x2403))+(((-0.0718)*x2385))+(((-1.0)*r01*sj0*x2387))+(((0.02626)*x2384)));
evalcond[8]=((0.1148)+(((-1.0)*px*x2401))+((x2387*x2388))+((cj3*x2406))+(((-1.0)*x2398*x2399))+(((-1.0)*py*x2397))+(((0.09746)*cj3))+(((-1.0)*x2391*x2399))+(((0.02626)*x2405))+((x2386*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(sj3,-1);
if(!x2413.valid){
continue;
}
IkReal x2407=x2413.value;
IkReal x2408=(r21*sj6);
IkReal x2409=(cj6*sj3);
IkReal x2410=(cj3*sj2);
IkReal x2411=((1.0)*sj3*sj6);
IkReal x2412=((1.0)*cj6*r20);
CheckValue<IkReal> x2414=IKPowWithIntegerCheck(cj2,-1);
if(!x2414.valid){
continue;
}
if( IKabs((x2407*((x2408+(((-1.0)*x2412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2407*(x2414.value)*(((((-1.0)*r11*sj0*x2411))+((x2408*x2410))+(((-1.0)*cj0*r01*x2411))+((cj0*r00*x2409))+((r10*sj0*x2409))+(((-1.0)*x2410*x2412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2407*((x2408+(((-1.0)*x2412))))))+IKsqr((x2407*(x2414.value)*(((((-1.0)*r11*sj0*x2411))+((x2408*x2410))+(((-1.0)*cj0*r01*x2411))+((cj0*r00*x2409))+((r10*sj0*x2409))+(((-1.0)*x2410*x2412))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2407*((x2408+(((-1.0)*x2412))))), (x2407*(x2414.value)*(((((-1.0)*r11*sj0*x2411))+((x2408*x2410))+(((-1.0)*cj0*r01*x2411))+((cj0*r00*x2409))+((r10*sj0*x2409))+(((-1.0)*x2410*x2412))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2415=IKsin(j4);
IkReal x2416=IKcos(j4);
IkReal x2417=(r11*sj0);
IkReal x2418=((0.026255)*sj6);
IkReal x2419=(cj0*r01);
IkReal x2420=(cj5*r12);
IkReal x2421=(cj6*sj5);
IkReal x2422=(r10*sj0);
IkReal x2423=(sj5*sj6);
IkReal x2424=(cj0*r11);
IkReal x2425=((1.0)*cj5);
IkReal x2426=(cj2*cj3);
IkReal x2427=((1.0)*cj6);
IkReal x2428=(cj0*r10);
IkReal x2429=((1.0)*sj0);
IkReal x2430=(cj0*r00);
IkReal x2431=(cj3*sj2);
IkReal x2432=((0.026255)*cj6);
IkReal x2433=((1.0)*r21);
IkReal x2434=((1.0)*cj0);
IkReal x2435=((0.02626)*x2415);
IkReal x2436=(cj2*x2415);
IkReal x2437=(cj6*r00*sj0);
IkReal x2438=(cj2*x2416);
IkReal x2439=(sj3*x2416);
IkReal x2440=(sj2*x2416);
IkReal x2441=((1.0)*sj2*x2415);
evalcond[0]=((((-1.0)*sj6*x2433))+((cj6*r20))+((sj3*x2415)));
evalcond[1]=((((-1.0)*x2439))+(((-1.0)*x2421*x2433))+(((-1.0)*r20*x2423))+(((-1.0)*r22*x2425)));
evalcond[2]=((-0.0001)+((r20*x2432))+(((0.0718)*x2439))+((sj3*x2435))+pz+(((0.09746)*sj3))+(((-1.0)*r21*x2418)));
evalcond[3]=(x2438+((sj6*x2417))+((sj6*x2419))+(((-1.0)*x2415*x2431))+(((-1.0)*x2422*x2427))+(((-1.0)*x2427*x2430)));
evalcond[4]=(x2437+(((-1.0)*r01*sj6*x2429))+(((-1.0)*x2440))+(((-1.0)*x2415*x2426))+(((-1.0)*x2427*x2428))+((sj6*x2424)));
evalcond[5]=(x2436+((cj0*cj5*r02))+((x2417*x2421))+((x2422*x2423))+((sj0*x2420))+((x2416*x2431))+((x2423*x2430))+((x2419*x2421)));
evalcond[6]=(((x2416*x2426))+((x2423*x2428))+((cj0*x2420))+(((-1.0)*r00*x2423*x2429))+(((-1.0)*x2441))+((x2421*x2424))+(((-1.0)*r02*sj0*x2425))+(((-1.0)*r01*x2421*x2429)));
evalcond[7]=((-0.1255)+((x2418*x2424))+(((-0.02626)*x2440))+(((-0.1158)*cj2))+(((-1.0)*x2426*x2435))+(((-1.0)*py*x2434))+(((-1.0)*r01*sj0*x2418))+(((-0.0009)*sj2))+(((-1.0)*x2428*x2432))+((r00*sj0*x2432))+((px*sj0))+(((-0.0718)*x2416*x2426))+(((-0.09746)*x2426))+(((0.0718)*sj2*x2415)));
evalcond[8]=((-0.001)+(((-1.0)*px*x2434))+(((-0.1158)*sj2))+(((-0.0718)*x2416*x2431))+(((-1.0)*x2431*x2435))+(((-1.0)*x2430*x2432))+(((-0.09746)*x2431))+((x2417*x2418))+(((0.0009)*cj2))+((x2418*x2419))+(((-1.0)*x2422*x2432))+(((-1.0)*py*x2429))+(((-0.0718)*x2436))+(((0.02626)*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(sj3,-1);
if(!x2445.valid){
continue;
}
IkReal x2442=x2445.value;
IkReal x2443=(r21*sj6);
IkReal x2444=(cj6*r20);
if( IKabs((x2442*((x2443+(((-1.0)*x2444)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000278551532033426)*x2442*(((5.0)+(((-0.25)*x2443))+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((0.25)*x2444)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2442*((x2443+(((-1.0)*x2444))))))+IKsqr(((0.000278551532033426)*x2442*(((5.0)+(((-0.25)*x2443))+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((0.25)*x2444))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2442*((x2443+(((-1.0)*x2444))))), ((0.000278551532033426)*x2442*(((5.0)+(((-0.25)*x2443))+(((-4873.0)*sj3))+(((-50000.0)*pz))+(((0.25)*x2444))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(r11*sj0);
IkReal x2449=((0.026255)*sj6);
IkReal x2450=(cj0*r01);
IkReal x2451=(cj5*r12);
IkReal x2452=(cj6*sj5);
IkReal x2453=(r10*sj0);
IkReal x2454=(sj5*sj6);
IkReal x2455=(cj0*r11);
IkReal x2456=((1.0)*cj5);
IkReal x2457=(cj2*cj3);
IkReal x2458=((1.0)*cj6);
IkReal x2459=(cj0*r10);
IkReal x2460=((1.0)*sj0);
IkReal x2461=(cj0*r00);
IkReal x2462=(cj3*sj2);
IkReal x2463=((0.026255)*cj6);
IkReal x2464=((1.0)*r21);
IkReal x2465=((1.0)*cj0);
IkReal x2466=((0.02626)*x2446);
IkReal x2467=(cj2*x2446);
IkReal x2468=(cj6*r00*sj0);
IkReal x2469=(cj2*x2447);
IkReal x2470=(sj3*x2447);
IkReal x2471=(sj2*x2447);
IkReal x2472=((1.0)*sj2*x2446);
evalcond[0]=(((sj3*x2446))+(((-1.0)*sj6*x2464))+((cj6*r20)));
evalcond[1]=((((-1.0)*x2470))+(((-1.0)*r20*x2454))+(((-1.0)*r22*x2456))+(((-1.0)*x2452*x2464)));
evalcond[2]=((-0.0001)+((r20*x2463))+(((-1.0)*r21*x2449))+((sj3*x2466))+pz+(((0.09746)*sj3))+(((0.0718)*x2470)));
evalcond[3]=((((-1.0)*x2453*x2458))+((sj6*x2450))+((sj6*x2448))+x2469+(((-1.0)*x2458*x2461))+(((-1.0)*x2446*x2462)));
evalcond[4]=(((sj6*x2455))+x2468+(((-1.0)*x2471))+(((-1.0)*x2458*x2459))+(((-1.0)*x2446*x2457))+(((-1.0)*r01*sj6*x2460)));
evalcond[5]=(x2467+((cj0*cj5*r02))+((sj0*x2451))+((x2453*x2454))+((x2450*x2452))+((x2454*x2461))+((x2448*x2452))+((x2447*x2462)));
evalcond[6]=(((x2447*x2457))+((x2452*x2455))+((x2454*x2459))+(((-1.0)*r01*x2452*x2460))+(((-1.0)*x2472))+((cj0*x2451))+(((-1.0)*r00*x2454*x2460))+(((-1.0)*r02*sj0*x2456)));
evalcond[7]=((-0.1255)+(((-1.0)*x2457*x2466))+(((-0.1158)*cj2))+(((-1.0)*py*x2465))+((r00*sj0*x2463))+((x2449*x2455))+(((-0.0009)*sj2))+(((-0.0718)*x2447*x2457))+(((-1.0)*r01*sj0*x2449))+((px*sj0))+(((-0.09746)*x2457))+(((-1.0)*x2459*x2463))+(((0.0718)*sj2*x2446))+(((-0.02626)*x2471)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-0.0718)*x2467))+(((-1.0)*py*x2460))+((x2448*x2449))+((x2449*x2450))+(((0.0009)*cj2))+(((-0.09746)*x2462))+(((-0.0718)*x2447*x2462))+(((0.02626)*x2469))+(((-1.0)*x2453*x2463))+(((-1.0)*x2461*x2463))+(((-1.0)*px*x2465))+(((-1.0)*x2462*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2473=((1.0)*sj5);
CheckValue<IkReal> x2474=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2474.valid){
continue;
}
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x2473))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x2473))),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2474.value)))+(x2475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2476=IKsin(j4);
IkReal x2477=IKcos(j4);
IkReal x2478=(r11*sj0);
IkReal x2479=((0.026255)*sj6);
IkReal x2480=(cj0*r01);
IkReal x2481=(cj5*r12);
IkReal x2482=(cj6*sj5);
IkReal x2483=(r10*sj0);
IkReal x2484=(sj5*sj6);
IkReal x2485=(cj0*r11);
IkReal x2486=((1.0)*cj5);
IkReal x2487=(cj2*cj3);
IkReal x2488=((1.0)*cj6);
IkReal x2489=(cj0*r10);
IkReal x2490=((1.0)*sj0);
IkReal x2491=(cj0*r00);
IkReal x2492=(cj3*sj2);
IkReal x2493=((0.026255)*cj6);
IkReal x2494=((1.0)*r21);
IkReal x2495=((1.0)*cj0);
IkReal x2496=((0.02626)*x2476);
IkReal x2497=(cj2*x2476);
IkReal x2498=(cj6*r00*sj0);
IkReal x2499=(cj2*x2477);
IkReal x2500=(sj3*x2477);
IkReal x2501=(sj2*x2477);
IkReal x2502=((1.0)*sj2*x2476);
evalcond[0]=((((-1.0)*sj6*x2494))+((cj6*r20))+((sj3*x2476)));
evalcond[1]=((((-1.0)*r22*x2486))+(((-1.0)*r20*x2484))+(((-1.0)*x2482*x2494))+(((-1.0)*x2500)));
evalcond[2]=((-0.0001)+(((-1.0)*r21*x2479))+(((0.0718)*x2500))+((sj3*x2496))+pz+(((0.09746)*sj3))+((r20*x2493)));
evalcond[3]=(x2499+((sj6*x2478))+((sj6*x2480))+(((-1.0)*x2488*x2491))+(((-1.0)*x2476*x2492))+(((-1.0)*x2483*x2488)));
evalcond[4]=(x2498+(((-1.0)*r01*sj6*x2490))+(((-1.0)*x2488*x2489))+((sj6*x2485))+(((-1.0)*x2476*x2487))+(((-1.0)*x2501)));
evalcond[5]=(((sj0*x2481))+x2497+((cj0*cj5*r02))+((x2484*x2491))+((x2477*x2492))+((x2483*x2484))+((x2480*x2482))+((x2478*x2482)));
evalcond[6]=(((x2482*x2485))+(((-1.0)*x2502))+(((-1.0)*r01*x2482*x2490))+(((-1.0)*r00*x2484*x2490))+((x2477*x2487))+((x2484*x2489))+(((-1.0)*r02*sj0*x2486))+((cj0*x2481)));
evalcond[7]=((-0.1255)+((r00*sj0*x2493))+(((-1.0)*py*x2495))+(((-0.1158)*cj2))+(((-1.0)*r01*sj0*x2479))+(((-0.02626)*x2501))+(((-0.0718)*x2477*x2487))+(((-0.09746)*x2487))+(((-0.0009)*sj2))+(((-1.0)*x2489*x2493))+((px*sj0))+(((-1.0)*x2487*x2496))+(((0.0718)*sj2*x2476))+((x2479*x2485)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+((x2478*x2479))+(((-1.0)*py*x2490))+(((0.02626)*x2499))+(((0.0009)*cj2))+(((-1.0)*x2491*x2493))+(((-0.0718)*x2497))+(((-0.09746)*x2492))+(((-0.0718)*x2477*x2492))+(((-1.0)*x2483*x2493))+((x2479*x2480))+(((-1.0)*px*x2495))+(((-1.0)*x2492*x2496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x2503=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*cj6*r01*x2503))+(((-1.0)*cj6*r11*sj0*x2503))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x2503))+(((-1.0)*cj0*r00*sj6*x2503))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2504=((1.0)*cj5);
IkReal x2505=(cj0*cj5);
if( IKabs((((r02*sj0*sj5))+((cj6*r11*x2505))+(((-1.0)*r00*sj0*sj6*x2504))+((r10*sj6*x2505))+(((-1.0)*cj6*r01*sj0*x2504))+(((-1.0)*cj0*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj5))+(((-1.0)*r20*sj6*x2504))+(((-1.0)*cj6*r21*x2504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj0*sj5))+((cj6*r11*x2505))+(((-1.0)*r00*sj0*sj6*x2504))+((r10*sj6*x2505))+(((-1.0)*cj6*r01*sj0*x2504))+(((-1.0)*cj0*r12*sj5))))+IKsqr((((r22*sj5))+(((-1.0)*r20*sj6*x2504))+(((-1.0)*cj6*r21*x2504))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*sj0*sj5))+((cj6*r11*x2505))+(((-1.0)*r00*sj0*sj6*x2504))+((r10*sj6*x2505))+(((-1.0)*cj6*r01*sj0*x2504))+(((-1.0)*cj0*r12*sj5))), (((r22*sj5))+(((-1.0)*r20*sj6*x2504))+(((-1.0)*cj6*r21*x2504))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2506=(cj5*cj6);
IkReal x2507=((1.0)*cj0);
IkReal x2508=((1.0)*sj5);
IkReal x2509=(cj5*sj6);
evalcond[0]=((IKcos(j3))+(((-1.0)*r22*x2508))+((r21*x2506))+((r20*x2509)));
evalcond[1]=((((-1.0)*r10*x2507*x2509))+((r01*sj0*x2506))+(IKsin(j3))+((cj0*r12*sj5))+((r00*sj0*x2509))+(((-1.0)*r11*x2506*x2507))+(((-1.0)*r02*sj0*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2510=(cj5*cj6);
IkReal x2511=(cj0*sj6);
IkReal x2512=(r01*sj0);
IkReal x2513=((1.0)*sj0);
IkReal x2514=((1.0)*cj5);
IkReal x2515=(cj0*r12);
IkReal x2516=(r02*sj5);
IkReal x2517=((1.0)*sj5);
IkReal x2518=(cj5*sj6);
IkReal x2519=((1.0)*cj0);
IkReal x2520=(cj6*r10);
IkReal x2521=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x2517))+((r21*x2510))+((r20*x2518)));
evalcond[2]=(x2521+((r11*x2511))+(((-1.0)*x2519*x2520))+(((-1.0)*sj6*x2512)));
evalcond[3]=(((cj0*x2516))+(((-1.0)*r00*x2511*x2514))+(((-1.0)*r01*x2510*x2519))+((r12*sj0*sj5))+(((-1.0)*r11*x2510*x2513))+(((-1.0)*r10*x2513*x2518)));
evalcond[4]=((1.0)+(((-1.0)*r10*x2511*x2514))+((r00*sj0*x2518))+((x2510*x2512))+(((-1.0)*r11*x2510*x2519))+(((-1.0)*x2513*x2516))+((sj5*x2515)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x2513))+((cj5*x2515))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x2512*x2517))+(((-1.0)*cj5*r02*x2513))+((r10*sj5*x2511)));
evalcond[6]=((0.2413)+(((0.026255)*x2521))+(((0.026255)*r11*x2511))+(((-0.026255)*sj6*x2512))+(((-0.026255)*cj0*x2520))+((px*sj0))+(((-1.0)*py*x2519)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2522=IKcos(j4);
IkReal x2523=IKsin(j4);
IkReal x2524=(r11*sj0);
IkReal x2525=(cj0*sj6);
IkReal x2526=(cj6*sj5);
IkReal x2527=(r10*sj0);
IkReal x2528=(sj5*sj6);
IkReal x2529=((1.0)*cj6);
IkReal x2530=((0.026255)*sj6);
IkReal x2531=((0.026255)*cj6);
IkReal x2532=(cj0*r00);
IkReal x2533=((1.0)*r21);
evalcond[0]=((((-1.0)*sj6*x2533))+(((-1.0)*x2523))+((cj6*r20)));
evalcond[1]=(x2522+(((-1.0)*r20*x2528))+(((-1.0)*x2526*x2533))+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.09736)+(((-0.02626)*x2523))+(((-1.0)*r21*x2530))+((r20*x2531))+pz+(((-0.0718)*x2522)));
evalcond[3]=(x2522+(((-1.0)*x2527*x2529))+((r01*x2525))+((sj6*x2524))+(((-1.0)*x2529*x2532)));
evalcond[4]=(((x2527*x2528))+((cj5*r12*sj0))+x2523+((cj0*cj5*r02))+((r00*sj5*x2525))+((cj0*r01*x2526))+((x2524*x2526)));
evalcond[5]=((-0.0001)+(((-1.0)*x2527*x2531))+((x2524*x2530))+(((-1.0)*x2531*x2532))+(((-0.0718)*x2523))+(((0.02626)*x2522))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((0.026255)*r01*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2534=(cj5*cj6);
IkReal x2535=(cj0*sj6);
IkReal x2536=(r01*sj0);
IkReal x2537=((1.0)*sj0);
IkReal x2538=((1.0)*cj5);
IkReal x2539=(cj0*r12);
IkReal x2540=(r02*sj5);
IkReal x2541=((1.0)*sj5);
IkReal x2542=(cj5*sj6);
IkReal x2543=((1.0)*cj0);
IkReal x2544=(cj6*r10);
IkReal x2545=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x2534))+((r20*x2542))+(((-1.0)*r22*x2541)));
evalcond[2]=(x2545+(((-1.0)*x2543*x2544))+((r11*x2535))+(((-1.0)*sj6*x2536)));
evalcond[3]=((((-1.0)*r11*x2534*x2537))+((r12*sj0*sj5))+(((-1.0)*r01*x2534*x2543))+(((-1.0)*r10*x2537*x2542))+(((-1.0)*r00*x2535*x2538))+((cj0*x2540)));
evalcond[4]=((-1.0)+((r00*sj0*x2542))+(((-1.0)*r10*x2535*x2538))+(((-1.0)*r11*x2534*x2543))+(((-1.0)*x2537*x2540))+((x2534*x2536))+((sj5*x2539)));
evalcond[5]=(((cj5*x2539))+(((-1.0)*cj5*r02*x2537))+(((-1.0)*r00*sj5*sj6*x2537))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x2536*x2541))+((r10*sj5*x2535)));
evalcond[6]=((0.2413)+(((-1.0)*py*x2543))+(((0.026255)*r11*x2535))+(((0.026255)*x2545))+(((-0.026255)*sj6*x2536))+((px*sj0))+(((-0.026255)*cj0*x2544)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2546=(cj6*r20);
IkReal x2547=(r21*sj6);
if( IKabs((x2547+(((-1.0)*x2546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2546))+(((-6.96378830083565e-5)*x2547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2547+(((-1.0)*x2546))))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2546))+(((-6.96378830083565e-5)*x2547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2547+(((-1.0)*x2546))), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x2546))+(((-6.96378830083565e-5)*x2547))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2548=IKcos(j4);
IkReal x2549=IKsin(j4);
IkReal x2550=(r11*sj0);
IkReal x2551=(cj0*sj6);
IkReal x2552=(cj6*sj5);
IkReal x2553=(r10*sj0);
IkReal x2554=(sj5*sj6);
IkReal x2555=((1.0)*cj6);
IkReal x2556=((0.026255)*sj6);
IkReal x2557=((0.026255)*cj6);
IkReal x2558=(cj0*r00);
IkReal x2559=((1.0)*r21);
evalcond[0]=(x2549+(((-1.0)*sj6*x2559))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x2554))+(((-1.0)*x2548))+(((-1.0)*x2552*x2559))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09756)+(((0.0718)*x2548))+(((-1.0)*r21*x2556))+(((0.02626)*x2549))+pz+((r20*x2557)));
evalcond[3]=(x2548+(((-1.0)*x2555*x2558))+((r01*x2551))+((sj6*x2550))+(((-1.0)*x2553*x2555)));
evalcond[4]=(((cj5*r12*sj0))+x2549+((cj0*cj5*r02))+((r00*sj5*x2551))+((x2550*x2552))+((cj0*r01*x2552))+((x2553*x2554)));
evalcond[5]=((-0.0001)+(((0.026255)*r01*x2551))+((x2550*x2556))+(((-1.0)*x2557*x2558))+(((-0.0718)*x2549))+(((0.02626)*x2548))+(((-1.0)*py*sj0))+(((-1.0)*x2553*x2557))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2560=(cj5*cj6);
IkReal x2561=((1.0)*sj0);
IkReal x2562=((1.0)*r22);
IkReal x2563=(cj0*sj5);
IkReal x2564=(cj5*sj6);
IkReal x2565=((1.0)*cj0);
IkReal x2566=(cj6*r20);
IkReal x2567=((1.0)*sj5);
IkReal x2568=(r21*sj6);
IkReal x2569=(x2564*x2565);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x2564))+(((-1.0)*sj5*x2562))+((r21*x2560)));
evalcond[2]=(x2566+(((-1.0)*x2568)));
evalcond[3]=((((-1.0)*cj6*r21*x2567))+(((-1.0)*r20*sj6*x2567))+(((-1.0)*cj5*x2562)));
evalcond[4]=((((-1.0)*r00*x2569))+(((-1.0)*r01*x2560*x2565))+(((-1.0)*r10*x2561*x2564))+((r12*sj0*sj5))+(((-1.0)*r11*x2560*x2561))+((r02*x2563)));
evalcond[5]=((((-1.0)*r02*sj5*x2561))+((r12*x2563))+(((-1.0)*r11*x2560*x2565))+((r00*sj0*x2564))+(((-1.0)*r10*x2569))+((r01*sj0*x2560)));
evalcond[6]=((0.0001)+pz+(((-0.026255)*x2568))+(((0.026255)*x2566)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2570=(cj0*cj6);
IkReal x2571=(sj0*sj6);
IkReal x2572=((1.0)*r11);
IkReal x2573=(cj6*sj0);
IkReal x2574=(cj0*sj6);
if( IKabs((((r10*x2570))+(((-1.0)*r00*x2573))+((r01*x2571))+(((-1.0)*x2572*x2574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2573))+(((-1.0)*r01*x2574))+(((-1.0)*x2571*x2572))+((r00*x2570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2570))+(((-1.0)*r00*x2573))+((r01*x2571))+(((-1.0)*x2572*x2574))))+IKsqr((((r10*x2573))+(((-1.0)*r01*x2574))+(((-1.0)*x2571*x2572))+((r00*x2570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x2570))+(((-1.0)*r00*x2573))+((r01*x2571))+(((-1.0)*x2572*x2574))), (((r10*x2573))+(((-1.0)*r01*x2574))+(((-1.0)*x2571*x2572))+((r00*x2570))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2575=IKsin(j4);
IkReal x2576=IKcos(j4);
IkReal x2577=(r11*sj6);
IkReal x2578=((0.026255)*cj0);
IkReal x2579=(r01*sj6);
IkReal x2580=(sj0*sj5);
IkReal x2581=(cj6*r11);
IkReal x2582=(r10*sj6);
IkReal x2583=(cj5*r12);
IkReal x2584=(cj6*sj0);
IkReal x2585=((1.0)*sj0);
IkReal x2586=(cj5*r02);
IkReal x2587=((1.0)*r10);
IkReal x2588=(cj0*sj5);
IkReal x2589=(r00*sj6);
IkReal x2590=((0.026255)*sj0);
IkReal x2591=(cj0*cj6);
IkReal x2592=((1.0)*cj0);
IkReal x2593=(cj6*r01);
evalcond[0]=(x2576+(((-1.0)*r00*x2591))+(((-1.0)*x2584*x2587))+((sj0*x2577))+((cj0*x2579)));
evalcond[1]=(x2575+((r00*x2584))+(((-1.0)*x2579*x2585))+(((-1.0)*x2587*x2591))+((cj0*x2577)));
evalcond[2]=(x2575+((cj0*x2586))+((x2580*x2582))+((x2580*x2581))+((sj0*x2583))+((x2588*x2593))+((x2588*x2589)));
evalcond[3]=((((-1.0)*x2585*x2586))+((cj0*x2583))+((x2581*x2588))+(((-1.0)*x2576))+(((-1.0)*x2580*x2589))+((x2582*x2588))+(((-1.0)*x2580*x2593)));
evalcond[4]=((0.33876)+(((-1.0)*cj6*r10*x2578))+(((0.0718)*x2576))+(((0.02626)*x2575))+(((-1.0)*x2579*x2590))+((px*sj0))+(((-1.0)*py*x2592))+((x2577*x2578))+(((0.026255)*r00*x2584)));
evalcond[5]=((-0.0001)+(((-1.0)*cj6*r00*x2578))+(((0.02626)*x2576))+((x2578*x2579))+(((-0.0718)*x2575))+(((-1.0)*py*x2585))+(((-0.026255)*r10*x2584))+((x2577*x2590))+(((-1.0)*px*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2594=(cj5*cj6);
IkReal x2595=((1.0)*sj0);
IkReal x2596=((1.0)*r22);
IkReal x2597=(cj0*sj5);
IkReal x2598=(cj5*sj6);
IkReal x2599=((1.0)*cj0);
IkReal x2600=(cj6*r20);
IkReal x2601=((1.0)*sj5);
IkReal x2602=(r21*sj6);
IkReal x2603=(x2598*x2599);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x2598))+(((-1.0)*sj5*x2596))+((r21*x2594)));
evalcond[2]=((((-1.0)*x2602))+x2600);
evalcond[3]=((((-1.0)*cj6*r21*x2601))+(((-1.0)*r20*sj6*x2601))+(((-1.0)*cj5*x2596)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r01*x2594*x2599))+(((-1.0)*r10*x2595*x2598))+(((-1.0)*r11*x2594*x2595))+(((-1.0)*r00*x2603))+((r02*x2597)));
evalcond[5]=((((-1.0)*r02*sj5*x2595))+(((-1.0)*r10*x2603))+((r12*x2597))+((r00*sj0*x2598))+(((-1.0)*r11*x2594*x2599))+((r01*sj0*x2594)));
evalcond[6]=((0.0001)+(((-0.026255)*x2602))+pz+(((0.026255)*x2600)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2604=(cj0*cj6);
IkReal x2605=(cj6*sj0);
IkReal x2606=(cj0*sj6);
IkReal x2607=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r10*x2604))+((r11*x2606))+(((-1.0)*r01*x2607))+((r00*x2605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2606))+(((-1.0)*r11*x2607))+((r10*x2605))+((r00*x2604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2604))+((r11*x2606))+(((-1.0)*r01*x2607))+((r00*x2605))))+IKsqr(((((-1.0)*r01*x2606))+(((-1.0)*r11*x2607))+((r10*x2605))+((r00*x2604))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x2604))+((r11*x2606))+(((-1.0)*r01*x2607))+((r00*x2605))), ((((-1.0)*r01*x2606))+(((-1.0)*r11*x2607))+((r10*x2605))+((r00*x2604))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=(r11*sj6);
IkReal x2611=((0.026255)*cj0);
IkReal x2612=(r01*sj6);
IkReal x2613=(sj0*sj5);
IkReal x2614=(cj6*r11);
IkReal x2615=(r10*sj6);
IkReal x2616=(cj5*r12);
IkReal x2617=(cj6*sj0);
IkReal x2618=((1.0)*sj0);
IkReal x2619=(cj5*r02);
IkReal x2620=((1.0)*r10);
IkReal x2621=(cj0*sj5);
IkReal x2622=(r00*sj6);
IkReal x2623=((0.026255)*sj0);
IkReal x2624=(cj0*cj6);
IkReal x2625=((1.0)*cj0);
IkReal x2626=(cj6*r01);
evalcond[0]=((((-1.0)*x2617*x2620))+(((-1.0)*r00*x2624))+((sj0*x2610))+((cj0*x2612))+x2609);
evalcond[1]=(((r00*x2617))+(((-1.0)*x2608))+(((-1.0)*x2612*x2618))+((cj0*x2610))+(((-1.0)*x2620*x2624)));
evalcond[2]=(((x2613*x2614))+((x2613*x2615))+((x2621*x2622))+((x2621*x2626))+((sj0*x2616))+((cj0*x2619))+x2608);
evalcond[3]=((((-1.0)*x2618*x2619))+((x2614*x2621))+((x2615*x2621))+(((-1.0)*x2613*x2622))+(((-1.0)*x2613*x2626))+((cj0*x2616))+x2609);
evalcond[4]=((0.14384)+(((0.026255)*r00*x2617))+((x2610*x2611))+(((-0.02626)*x2608))+(((-1.0)*x2612*x2623))+(((-1.0)*py*x2625))+((px*sj0))+(((-0.0718)*x2609))+(((-1.0)*cj6*r10*x2611)));
evalcond[5]=((-0.0001)+(((-0.026255)*r10*x2617))+((x2610*x2623))+(((-1.0)*cj6*r00*x2611))+((x2611*x2612))+(((-1.0)*py*x2618))+(((0.02626)*x2609))+(((-1.0)*px*x2625))+(((-0.0718)*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(cj3,-1);
if(!x2627.valid){
continue;
}
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(sj3,-1);
if(!x2628.valid){
continue;
}
if( IKabs(((x2627.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2628.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2627.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x2628.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2627.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x2628.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2629=IKcos(j4);
IkReal x2630=IKsin(j4);
IkReal x2631=(r11*sj0);
IkReal x2632=((0.026255)*sj6);
IkReal x2633=(cj0*r01);
IkReal x2634=(cj5*r12);
IkReal x2635=(cj6*sj5);
IkReal x2636=(r10*sj0);
IkReal x2637=(sj5*sj6);
IkReal x2638=(cj0*r11);
IkReal x2639=((1.0)*cj5);
IkReal x2640=((1.0)*cj6);
IkReal x2641=(cj0*r10);
IkReal x2642=((1.0)*sj0);
IkReal x2643=(cj0*r00);
IkReal x2644=((0.026255)*cj6);
IkReal x2645=((1.0)*r21);
IkReal x2646=((1.0)*cj0);
IkReal x2647=(sj3*x2630);
IkReal x2648=(sj3*x2629);
IkReal x2649=(r00*x2644);
IkReal x2650=(cj3*x2630);
IkReal x2651=(cj3*x2629);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x2645))+(((-1.0)*x2647)));
evalcond[1]=((((-1.0)*x2635*x2645))+(((-1.0)*r22*x2639))+(((-1.0)*r20*x2637))+x2648);
evalcond[2]=((((-1.0)*x2640*x2643))+(((-1.0)*x2636*x2640))+x2629+((sj6*x2633))+((sj6*x2631)));
evalcond[3]=((((-1.0)*r01*sj6*x2642))+((cj6*r00*sj0))+(((-1.0)*x2640*x2641))+x2650+((sj6*x2638)));
evalcond[4]=((0.0001)+(((-0.02626)*x2647))+(((-0.0718)*x2648))+(((-1.0)*r21*x2632))+pz+(((-0.09746)*sj3))+((r20*x2644)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x2634))+((x2633*x2635))+((x2631*x2635))+((x2637*x2643))+((x2636*x2637))+x2630);
evalcond[6]=((((-1.0)*r01*x2635*x2642))+(((-1.0)*r00*x2637*x2642))+((cj0*x2634))+(((-1.0)*r02*sj0*x2639))+((x2635*x2638))+((x2637*x2641))+(((-1.0)*x2651)));
evalcond[7]=((-0.0001)+(((-1.0)*py*x2642))+(((-1.0)*px*x2646))+(((-0.0718)*x2630))+(((0.02626)*x2629))+((x2632*x2633))+(((-1.0)*x2643*x2644))+(((-1.0)*x2636*x2644))+((x2631*x2632)));
evalcond[8]=((0.2413)+((sj0*x2649))+(((-1.0)*r01*sj0*x2632))+(((-1.0)*py*x2646))+(((0.02626)*x2650))+(((-1.0)*x2641*x2644))+((x2632*x2638))+(((0.0718)*x2651))+((px*sj0))+(((0.09746)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2652=((1.0)*sj6);
CheckValue<IkReal> x2653=IKPowWithIntegerCheck(sj3,-1);
if(!x2653.valid){
continue;
}
if( IKabs(((x2653.value)*(((((-1.0)*r21*x2652))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x2652))+(((-1.0)*r11*sj0*x2652))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2653.value)*(((((-1.0)*r21*x2652))+((cj6*r20))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x2652))+(((-1.0)*r11*sj0*x2652))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2653.value)*(((((-1.0)*r21*x2652))+((cj6*r20))))), (((cj6*r10*sj0))+(((-1.0)*cj0*r01*x2652))+(((-1.0)*r11*sj0*x2652))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2654=IKcos(j4);
IkReal x2655=IKsin(j4);
IkReal x2656=(r11*sj0);
IkReal x2657=((0.026255)*sj6);
IkReal x2658=(cj0*r01);
IkReal x2659=(cj5*r12);
IkReal x2660=(cj6*sj5);
IkReal x2661=(r10*sj0);
IkReal x2662=(sj5*sj6);
IkReal x2663=(cj0*r11);
IkReal x2664=((1.0)*cj5);
IkReal x2665=((1.0)*cj6);
IkReal x2666=(cj0*r10);
IkReal x2667=((1.0)*sj0);
IkReal x2668=(cj0*r00);
IkReal x2669=((0.026255)*cj6);
IkReal x2670=((1.0)*r21);
IkReal x2671=((1.0)*cj0);
IkReal x2672=(sj3*x2655);
IkReal x2673=(sj3*x2654);
IkReal x2674=(r00*x2669);
IkReal x2675=(cj3*x2655);
IkReal x2676=(cj3*x2654);
evalcond[0]=((((-1.0)*x2672))+(((-1.0)*sj6*x2670))+((cj6*r20)));
evalcond[1]=((((-1.0)*x2660*x2670))+(((-1.0)*r20*x2662))+(((-1.0)*r22*x2664))+x2673);
evalcond[2]=((((-1.0)*x2665*x2668))+(((-1.0)*x2661*x2665))+((sj6*x2656))+((sj6*x2658))+x2654);
evalcond[3]=((((-1.0)*r01*sj6*x2667))+((cj6*r00*sj0))+(((-1.0)*x2665*x2666))+((sj6*x2663))+x2675);
evalcond[4]=((0.0001)+(((-0.0718)*x2673))+(((-0.02626)*x2672))+(((-1.0)*r21*x2657))+pz+(((-0.09746)*sj3))+((r20*x2669)));
evalcond[5]=(((sj0*x2659))+((x2661*x2662))+((x2658*x2660))+((cj0*cj5*r02))+((x2662*x2668))+((x2656*x2660))+x2655);
evalcond[6]=((((-1.0)*x2676))+((x2662*x2666))+(((-1.0)*r00*x2662*x2667))+((cj0*x2659))+(((-1.0)*r02*sj0*x2664))+((x2660*x2663))+(((-1.0)*r01*x2660*x2667)));
evalcond[7]=((-0.0001)+(((-1.0)*px*x2671))+(((-0.0718)*x2655))+((x2657*x2658))+((x2656*x2657))+(((0.02626)*x2654))+(((-1.0)*x2661*x2669))+(((-1.0)*x2668*x2669))+(((-1.0)*py*x2667)));
evalcond[8]=((0.2413)+((x2657*x2663))+((sj0*x2674))+(((-1.0)*r01*sj0*x2657))+(((0.02626)*x2675))+(((0.0718)*x2676))+((px*sj0))+(((-1.0)*x2666*x2669))+(((0.09746)*cj3))+(((-1.0)*py*x2671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2677=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2677.valid){
continue;
}
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2677.value)))+(x2678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2679=IKcos(j4);
IkReal x2680=IKsin(j4);
IkReal x2681=(r11*sj0);
IkReal x2682=((0.026255)*sj6);
IkReal x2683=(cj0*r01);
IkReal x2684=(cj5*r12);
IkReal x2685=(cj6*sj5);
IkReal x2686=(r10*sj0);
IkReal x2687=(sj5*sj6);
IkReal x2688=(cj0*r11);
IkReal x2689=((1.0)*cj5);
IkReal x2690=((1.0)*cj6);
IkReal x2691=(cj0*r10);
IkReal x2692=((1.0)*sj0);
IkReal x2693=(cj0*r00);
IkReal x2694=((0.026255)*cj6);
IkReal x2695=((1.0)*r21);
IkReal x2696=((1.0)*cj0);
IkReal x2697=(sj3*x2680);
IkReal x2698=(sj3*x2679);
IkReal x2699=(r00*x2694);
IkReal x2700=(cj3*x2680);
IkReal x2701=(cj3*x2679);
evalcond[0]=((((-1.0)*sj6*x2695))+((cj6*r20))+(((-1.0)*x2697)));
evalcond[1]=((((-1.0)*r22*x2689))+(((-1.0)*r20*x2687))+(((-1.0)*x2685*x2695))+x2698);
evalcond[2]=(((sj6*x2683))+((sj6*x2681))+(((-1.0)*x2686*x2690))+(((-1.0)*x2690*x2693))+x2679);
evalcond[3]=(x2700+((sj6*x2688))+((cj6*r00*sj0))+(((-1.0)*x2690*x2691))+(((-1.0)*r01*sj6*x2692)));
evalcond[4]=((0.0001)+(((-0.0718)*x2698))+pz+(((-0.02626)*x2697))+(((-1.0)*r21*x2682))+(((-0.09746)*sj3))+((r20*x2694)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x2684))+((x2687*x2693))+((x2683*x2685))+((x2686*x2687))+((x2681*x2685))+x2680);
evalcond[6]=(((cj0*x2684))+(((-1.0)*r01*x2685*x2692))+((x2687*x2691))+(((-1.0)*r02*sj0*x2689))+(((-1.0)*r00*x2687*x2692))+((x2685*x2688))+(((-1.0)*x2701)));
evalcond[7]=((-0.0001)+(((-1.0)*py*x2692))+(((0.02626)*x2679))+(((-0.0718)*x2680))+(((-1.0)*x2686*x2694))+((x2681*x2682))+((x2682*x2683))+(((-1.0)*px*x2696))+(((-1.0)*x2693*x2694)));
evalcond[8]=((0.2413)+(((0.02626)*x2700))+(((-1.0)*x2691*x2694))+(((-1.0)*py*x2696))+(((0.0718)*x2701))+(((-1.0)*r01*sj0*x2682))+((sj0*x2699))+((px*sj0))+((x2682*x2688))+(((0.09746)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2702=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*cj6*r01*x2702))+(((-1.0)*cj0*r00*sj6*x2702))+((r12*sj0*sj5))+(((-1.0)*cj6*r11*sj0*x2702))+(((-1.0)*r10*sj0*sj6*x2702))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2703=(cj5*sj0);
IkReal x2704=((1.0)*cj5*cj6);
IkReal x2705=((1.0)*cj5*sj6);
if( IKabs((((cj6*r01*x2703))+(((-1.0)*cj0*r11*x2704))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x2703))+(((-1.0)*cj0*r10*x2705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj5))+(((-1.0)*r20*x2705))+(((-1.0)*r21*x2704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r01*x2703))+(((-1.0)*cj0*r11*x2704))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x2703))+(((-1.0)*cj0*r10*x2705))))+IKsqr((((r22*sj5))+(((-1.0)*r20*x2705))+(((-1.0)*r21*x2704))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj6*r01*x2703))+(((-1.0)*cj0*r11*x2704))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x2703))+(((-1.0)*cj0*r10*x2705))), (((r22*sj5))+(((-1.0)*r20*x2705))+(((-1.0)*r21*x2704))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2706=(cj5*cj6);
IkReal x2707=((1.0)*cj0);
IkReal x2708=((1.0)*sj5);
IkReal x2709=(cj5*sj6);
evalcond[0]=((((-1.0)*r22*x2708))+(IKcos(j3))+((r20*x2709))+((r21*x2706)));
evalcond[1]=((((-1.0)*r11*x2706*x2707))+((r01*sj0*x2706))+(((-1.0)*(IKsin(j3))))+((cj0*r12*sj5))+((r00*sj0*x2709))+(((-1.0)*r10*x2707*x2709))+(((-1.0)*r02*sj0*x2708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2710=(cj5*cj6);
IkReal x2711=((1.0)*sj0);
IkReal x2712=((1.0)*r22);
IkReal x2713=(cj0*sj5);
IkReal x2714=(cj5*sj6);
IkReal x2715=((1.0)*cj0);
IkReal x2716=(cj6*r20);
IkReal x2717=((1.0)*sj5);
IkReal x2718=(r21*sj6);
IkReal x2719=(x2714*x2715);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x2712))+((r21*x2710))+((r20*x2714)));
evalcond[2]=(x2716+(((-1.0)*x2718)));
evalcond[3]=((((-1.0)*r20*sj6*x2717))+(((-1.0)*cj6*r21*x2717))+(((-1.0)*cj5*x2712)));
evalcond[4]=(((r02*x2713))+((r12*sj0*sj5))+(((-1.0)*r10*x2711*x2714))+(((-1.0)*r11*x2710*x2711))+(((-1.0)*r01*x2710*x2715))+(((-1.0)*r00*x2719)));
evalcond[5]=(((r12*x2713))+(((-1.0)*r10*x2719))+((r00*sj0*x2714))+((r01*sj0*x2710))+(((-1.0)*r11*x2710*x2715))+(((-1.0)*r02*sj5*x2711)));
evalcond[6]=((0.0001)+(((0.026255)*x2716))+(((-0.026255)*x2718))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2720=(sj0*sj6);
IkReal x2721=(cj0*sj6);
IkReal x2722=(cj6*r00);
IkReal x2723=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x2723))+(((-1.0)*r01*x2720))+((r11*x2721))+((sj0*x2722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x2721))+((r11*x2720))+(((-1.0)*cj0*x2722))+(((-1.0)*sj0*x2723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x2723))+(((-1.0)*r01*x2720))+((r11*x2721))+((sj0*x2722))))+IKsqr((((r01*x2721))+((r11*x2720))+(((-1.0)*cj0*x2722))+(((-1.0)*sj0*x2723))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x2723))+(((-1.0)*r01*x2720))+((r11*x2721))+((sj0*x2722))), (((r01*x2721))+((r11*x2720))+(((-1.0)*cj0*x2722))+(((-1.0)*sj0*x2723))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2724=IKcos(j4);
IkReal x2725=IKsin(j4);
IkReal x2726=(r11*sj6);
IkReal x2727=((0.026255)*cj0);
IkReal x2728=(r01*sj6);
IkReal x2729=(sj0*sj5);
IkReal x2730=(cj6*r11);
IkReal x2731=(r10*sj6);
IkReal x2732=(cj5*r12);
IkReal x2733=(cj6*sj0);
IkReal x2734=((1.0)*sj0);
IkReal x2735=(cj5*r02);
IkReal x2736=((1.0)*r10);
IkReal x2737=(cj0*sj5);
IkReal x2738=(r00*sj6);
IkReal x2739=((0.026255)*sj0);
IkReal x2740=(cj0*cj6);
IkReal x2741=((1.0)*cj0);
IkReal x2742=(cj6*r01);
IkReal x2743=((1.0)*x2725);
evalcond[0]=((((-1.0)*x2733*x2736))+(((-1.0)*x2724))+(((-1.0)*r00*x2740))+((cj0*x2728))+((sj0*x2726)));
evalcond[1]=((((-1.0)*x2728*x2734))+(((-1.0)*x2736*x2740))+((r00*x2733))+(((-1.0)*x2743))+((cj0*x2726)));
evalcond[2]=(((cj0*x2735))+((x2737*x2738))+((x2737*x2742))+((sj0*x2732))+(((-1.0)*x2743))+((x2729*x2731))+((x2729*x2730)));
evalcond[3]=(x2724+(((-1.0)*x2729*x2738))+(((-1.0)*x2734*x2735))+((x2731*x2737))+(((-1.0)*x2729*x2742))+((cj0*x2732))+((x2730*x2737)));
evalcond[4]=((-0.08776)+(((-1.0)*py*x2741))+(((-1.0)*x2728*x2739))+(((0.026255)*r00*x2733))+(((-0.02626)*x2725))+((x2726*x2727))+(((-0.0718)*x2724))+(((-1.0)*cj6*r10*x2727))+((px*sj0)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x2734))+((x2726*x2739))+(((-0.02626)*x2724))+((x2727*x2728))+(((-0.026255)*r10*x2733))+(((-1.0)*cj6*r00*x2727))+(((-1.0)*px*x2741))+(((0.0718)*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2744=(cj5*cj6);
IkReal x2745=((1.0)*sj0);
IkReal x2746=((1.0)*r22);
IkReal x2747=(cj0*sj5);
IkReal x2748=(cj5*sj6);
IkReal x2749=((1.0)*cj0);
IkReal x2750=(cj6*r20);
IkReal x2751=((1.0)*sj5);
IkReal x2752=(r21*sj6);
IkReal x2753=(x2748*x2749);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x2744))+((r20*x2748))+(((-1.0)*sj5*x2746)));
evalcond[2]=(x2750+(((-1.0)*x2752)));
evalcond[3]=((((-1.0)*cj6*r21*x2751))+(((-1.0)*cj5*x2746))+(((-1.0)*r20*sj6*x2751)));
evalcond[4]=((((-1.0)*r01*x2744*x2749))+(((-1.0)*r00*x2753))+(((-1.0)*r10*x2745*x2748))+(((-1.0)*r11*x2744*x2745))+((r12*sj0*sj5))+((r02*x2747)));
evalcond[5]=(((r12*x2747))+(((-1.0)*r02*sj5*x2745))+((r01*sj0*x2744))+(((-1.0)*r11*x2744*x2749))+(((-1.0)*r10*x2753))+((r00*sj0*x2748)));
evalcond[6]=((0.0001)+(((-0.026255)*x2752))+pz+(((0.026255)*x2750)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2754=(sj0*sj6);
IkReal x2755=(cj6*r10);
IkReal x2756=((1.0)*sj0);
IkReal x2757=(cj6*r00);
IkReal x2758=(cj0*sj6);
if( IKabs((((cj0*x2755))+(((-1.0)*x2756*x2757))+(((-1.0)*r11*x2758))+((r01*x2754)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2754))+(((-1.0)*cj0*x2757))+((r01*x2758))+(((-1.0)*x2755*x2756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x2755))+(((-1.0)*x2756*x2757))+(((-1.0)*r11*x2758))+((r01*x2754))))+IKsqr((((r11*x2754))+(((-1.0)*cj0*x2757))+((r01*x2758))+(((-1.0)*x2755*x2756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x2755))+(((-1.0)*x2756*x2757))+(((-1.0)*r11*x2758))+((r01*x2754))), (((r11*x2754))+(((-1.0)*cj0*x2757))+((r01*x2758))+(((-1.0)*x2755*x2756))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2759=IKsin(j4);
IkReal x2760=IKcos(j4);
IkReal x2761=(r11*sj6);
IkReal x2762=((0.026255)*cj0);
IkReal x2763=(r01*sj6);
IkReal x2764=(sj0*sj5);
IkReal x2765=(cj6*r11);
IkReal x2766=(r10*sj6);
IkReal x2767=(cj5*r12);
IkReal x2768=(cj6*sj0);
IkReal x2769=((1.0)*sj0);
IkReal x2770=(cj5*r02);
IkReal x2771=((1.0)*r10);
IkReal x2772=(cj0*sj5);
IkReal x2773=(r00*sj6);
IkReal x2774=((0.026255)*sj0);
IkReal x2775=(cj0*cj6);
IkReal x2776=((1.0)*cj0);
IkReal x2777=(cj6*r01);
IkReal x2778=((1.0)*x2760);
evalcond[0]=(x2759+((r00*x2768))+(((-1.0)*x2771*x2775))+((cj0*x2761))+(((-1.0)*x2763*x2769)));
evalcond[1]=((((-1.0)*x2768*x2771))+((sj0*x2761))+(((-1.0)*r00*x2775))+((cj0*x2763))+(((-1.0)*x2778)));
evalcond[2]=(((sj0*x2767))+((cj0*x2770))+(((-1.0)*x2759))+((x2764*x2766))+((x2764*x2765))+((x2772*x2773))+((x2772*x2777)));
evalcond[3]=(((x2766*x2772))+(((-1.0)*x2769*x2770))+((cj0*x2767))+(((-1.0)*x2778))+((x2765*x2772))+(((-1.0)*x2764*x2777))+(((-1.0)*x2764*x2773)));
evalcond[4]=((0.10716)+(((-1.0)*x2763*x2774))+(((0.0718)*x2760))+(((-1.0)*py*x2776))+(((0.026255)*r00*x2768))+((x2761*x2762))+(((0.02626)*x2759))+((px*sj0))+(((-1.0)*cj6*r10*x2762)));
evalcond[5]=((-0.0019)+(((-0.02626)*x2760))+((x2761*x2774))+(((-1.0)*py*x2769))+(((0.0718)*x2759))+((x2762*x2763))+(((-0.026255)*r10*x2768))+(((-1.0)*px*x2776))+(((-1.0)*cj6*r00*x2762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2779=((1.0)*cj6);
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(sj3,-1);
if(!x2780.valid){
continue;
}
if( IKabs(((x2780.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x2779))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x2779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2780.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x2779))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x2779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2780.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+(((-1.0)*cj0*r00*x2779))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x2779))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2781=IKcos(j4);
IkReal x2782=IKsin(j4);
IkReal x2783=(r11*sj0);
IkReal x2784=((0.026255)*sj6);
IkReal x2785=(cj0*r01);
IkReal x2786=(cj6*sj5);
IkReal x2787=(r10*sj0);
IkReal x2788=(sj5*sj6);
IkReal x2789=(cj0*r11);
IkReal x2790=((1.0)*cj5);
IkReal x2791=((1.0)*cj6);
IkReal x2792=(cj0*r10);
IkReal x2793=((1.0)*sj0);
IkReal x2794=(cj0*r00);
IkReal x2795=(cj5*r12);
IkReal x2796=((0.026255)*cj6);
IkReal x2797=((1.0)*r21);
IkReal x2798=((1.0)*cj0);
IkReal x2799=((1.0)*x2782);
IkReal x2800=((0.02626)*x2782);
IkReal x2801=(sj3*x2781);
IkReal x2802=(r00*x2796);
IkReal x2803=(cj3*x2781);
evalcond[0]=((((-1.0)*sj6*x2797))+(((-1.0)*sj3*x2799))+((cj6*r20)));
evalcond[1]=((((-1.0)*x2786*x2797))+(((-1.0)*r20*x2788))+(((-1.0)*r22*x2790))+x2801);
evalcond[2]=((((-1.0)*x2787*x2791))+(((-1.0)*x2791*x2794))+((sj6*x2785))+((sj6*x2783))+(((-1.0)*x2781)));
evalcond[3]=((((-1.0)*cj3*x2799))+(((-1.0)*x2791*x2792))+(((-1.0)*r01*sj6*x2793))+((cj6*r00*sj0))+((sj6*x2789)));
evalcond[4]=((0.0001)+(((-1.0)*sj3*x2800))+(((-1.0)*r21*x2784))+(((-0.0718)*x2801))+pz+(((-0.09746)*sj3))+((r20*x2796)));
evalcond[5]=((((-1.0)*x2799))+((cj0*cj5*r02))+((x2785*x2786))+((x2787*x2788))+((x2783*x2786))+((sj0*x2795))+((x2788*x2794)));
evalcond[6]=((((-1.0)*r00*x2788*x2793))+x2803+((cj0*x2795))+(((-1.0)*r01*x2786*x2793))+((x2788*x2792))+(((-1.0)*r02*sj0*x2790))+((x2786*x2789)));
evalcond[7]=((-0.0019)+(((-1.0)*x2787*x2796))+(((-1.0)*px*x2798))+((x2784*x2785))+((x2783*x2784))+(((-0.02626)*x2781))+(((0.0718)*x2782))+(((-1.0)*x2794*x2796))+(((-1.0)*py*x2793)));
evalcond[8]=((0.0097)+(((-0.0718)*x2803))+(((-1.0)*r01*sj0*x2784))+((x2784*x2789))+(((-0.09746)*cj3))+((px*sj0))+(((-1.0)*x2792*x2796))+(((-1.0)*cj3*x2800))+((sj0*x2802))+(((-1.0)*py*x2798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2806=IKcos(j4);
IkReal x2807=IKsin(j4);
IkReal x2808=(r11*sj0);
IkReal x2809=((0.026255)*sj6);
IkReal x2810=(cj0*r01);
IkReal x2811=(cj6*sj5);
IkReal x2812=(r10*sj0);
IkReal x2813=(sj5*sj6);
IkReal x2814=(cj0*r11);
IkReal x2815=((1.0)*cj5);
IkReal x2816=((1.0)*cj6);
IkReal x2817=(cj0*r10);
IkReal x2818=((1.0)*sj0);
IkReal x2819=(cj0*r00);
IkReal x2820=(cj5*r12);
IkReal x2821=((0.026255)*cj6);
IkReal x2822=((1.0)*r21);
IkReal x2823=((1.0)*cj0);
IkReal x2824=((1.0)*x2807);
IkReal x2825=((0.02626)*x2807);
IkReal x2826=(sj3*x2806);
IkReal x2827=(r00*x2821);
IkReal x2828=(cj3*x2806);
evalcond[0]=((((-1.0)*sj3*x2824))+((cj6*r20))+(((-1.0)*sj6*x2822)));
evalcond[1]=((((-1.0)*x2811*x2822))+(((-1.0)*r22*x2815))+(((-1.0)*r20*x2813))+x2826);
evalcond[2]=((((-1.0)*x2806))+(((-1.0)*x2812*x2816))+((sj6*x2810))+((sj6*x2808))+(((-1.0)*x2816*x2819)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*r01*sj6*x2818))+(((-1.0)*cj3*x2824))+((sj6*x2814))+(((-1.0)*x2816*x2817)));
evalcond[4]=((0.0001)+((r20*x2821))+(((-0.0718)*x2826))+(((-1.0)*sj3*x2825))+(((-1.0)*r21*x2809))+pz+(((-0.09746)*sj3)));
evalcond[5]=(((x2810*x2811))+((cj0*cj5*r02))+((x2813*x2819))+((x2812*x2813))+((sj0*x2820))+(((-1.0)*x2824))+((x2808*x2811)));
evalcond[6]=(((x2813*x2817))+(((-1.0)*r00*x2813*x2818))+(((-1.0)*r01*x2811*x2818))+(((-1.0)*r02*sj0*x2815))+x2828+((x2811*x2814))+((cj0*x2820)));
evalcond[7]=((-0.0019)+((x2809*x2810))+(((-1.0)*x2812*x2821))+((x2808*x2809))+(((-1.0)*py*x2818))+(((0.0718)*x2807))+(((-1.0)*x2819*x2821))+(((-1.0)*px*x2823))+(((-0.02626)*x2806)));
evalcond[8]=((0.0097)+((x2809*x2814))+(((-0.0718)*x2828))+(((-1.0)*py*x2823))+(((-1.0)*x2817*x2821))+((sj0*x2827))+(((-1.0)*cj3*x2825))+(((-0.09746)*cj3))+((px*sj0))+(((-1.0)*r01*sj0*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2829=(cj5*cj6);
IkReal x2830=((1.0)*cj0);
IkReal x2831=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r01*sj0*x2829))+(((-1.0)*r10*x2830*x2831))+(((-1.0)*r11*x2829*x2830))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj0*x2831)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2832=((1.0)*cj5);
if( IKabs(((((-1.0)*cj6*r11*sj0*x2832))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x2832))+(((-1.0)*cj0*r00*sj6*x2832))+(((-1.0)*cj0*cj6*r01*x2832))+((cj0*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj5))+(((-1.0)*cj6*r21*x2832))+(((-1.0)*r20*sj6*x2832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r11*sj0*x2832))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x2832))+(((-1.0)*cj0*r00*sj6*x2832))+(((-1.0)*cj0*cj6*r01*x2832))+((cj0*r02*sj5))))+IKsqr((((r22*sj5))+(((-1.0)*cj6*r21*x2832))+(((-1.0)*r20*sj6*x2832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj6*r11*sj0*x2832))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x2832))+(((-1.0)*cj0*r00*sj6*x2832))+(((-1.0)*cj0*cj6*r01*x2832))+((cj0*r02*sj5))), (((r22*sj5))+(((-1.0)*cj6*r21*x2832))+(((-1.0)*r20*sj6*x2832))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2833=(cj5*cj6);
IkReal x2834=((1.0)*cj0);
IkReal x2835=((1.0)*sj0);
IkReal x2836=(cj5*sj6);
evalcond[0]=(((r20*x2836))+(IKcos(j3))+(((-1.0)*r22*sj5))+((r21*x2833)));
evalcond[1]=((((-1.0)*r01*x2833*x2834))+((r12*sj0*sj5))+(((-1.0)*(IKsin(j3))))+(((-1.0)*r00*x2834*x2836))+(((-1.0)*r11*x2833*x2835))+(((-1.0)*r10*x2835*x2836))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2837=(cj5*cj6);
IkReal x2838=((1.0)*sj0);
IkReal x2839=((1.0)*r22);
IkReal x2840=(cj0*sj5);
IkReal x2841=(cj5*sj6);
IkReal x2842=((1.0)*cj0);
IkReal x2843=(cj6*r20);
IkReal x2844=((1.0)*sj5);
IkReal x2845=(r21*sj6);
IkReal x2846=(x2841*x2842);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x2841))+(((-1.0)*sj5*x2839))+((r21*x2837)));
evalcond[2]=((((-1.0)*x2845))+x2843);
evalcond[3]=((((-1.0)*cj5*x2839))+(((-1.0)*r20*sj6*x2844))+(((-1.0)*cj6*r21*x2844)));
evalcond[4]=((((-1.0)*r10*x2838*x2841))+(((-1.0)*r01*x2837*x2842))+(((-1.0)*r00*x2846))+(((-1.0)*r11*x2837*x2838))+((r12*sj0*sj5))+((r02*x2840)));
evalcond[5]=(((r12*x2840))+(((-1.0)*r02*sj5*x2838))+(((-1.0)*r11*x2837*x2842))+((r00*sj0*x2841))+(((-1.0)*r10*x2846))+((r01*sj0*x2837)));
evalcond[6]=((0.0001)+(((-0.026255)*x2845))+(((0.026255)*x2843))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2847=(sj0*sj6);
IkReal x2848=(cj6*r10);
IkReal x2849=((1.0)*sj0);
IkReal x2850=(cj6*r00);
IkReal x2851=(cj0*sj6);
if( IKabs((((r11*x2847))+(((-1.0)*x2848*x2849))+((r01*x2851))+(((-1.0)*cj0*x2850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2851))+(((-1.0)*x2849*x2850))+((cj0*x2848))+((r01*x2847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2847))+(((-1.0)*x2848*x2849))+((r01*x2851))+(((-1.0)*cj0*x2850))))+IKsqr(((((-1.0)*r11*x2851))+(((-1.0)*x2849*x2850))+((cj0*x2848))+((r01*x2847))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x2847))+(((-1.0)*x2848*x2849))+((r01*x2851))+(((-1.0)*cj0*x2850))), ((((-1.0)*r11*x2851))+(((-1.0)*x2849*x2850))+((cj0*x2848))+((r01*x2847))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2852=IKcos(j4);
IkReal x2853=IKsin(j4);
IkReal x2854=(r11*sj6);
IkReal x2855=((0.026255)*cj0);
IkReal x2856=(r01*sj6);
IkReal x2857=(sj0*sj5);
IkReal x2858=(cj6*r11);
IkReal x2859=(r10*sj6);
IkReal x2860=(cj5*r12);
IkReal x2861=(cj6*sj0);
IkReal x2862=((1.0)*sj0);
IkReal x2863=(cj5*r02);
IkReal x2864=((1.0)*r10);
IkReal x2865=(cj0*sj5);
IkReal x2866=(r00*sj6);
IkReal x2867=((0.026255)*sj0);
IkReal x2868=(cj0*cj6);
IkReal x2869=((1.0)*cj0);
IkReal x2870=(cj6*r01);
evalcond[0]=(((r00*x2861))+(((-1.0)*x2864*x2868))+((cj0*x2854))+x2852+(((-1.0)*x2856*x2862)));
evalcond[1]=(((sj0*x2854))+(((-1.0)*x2861*x2864))+(((-1.0)*r00*x2868))+((cj0*x2856))+(((-1.0)*x2853)));
evalcond[2]=(((x2865*x2870))+((x2865*x2866))+((sj0*x2860))+((cj0*x2863))+((x2857*x2859))+((x2857*x2858))+x2852);
evalcond[3]=((((-1.0)*x2862*x2863))+(((-1.0)*x2857*x2866))+((x2858*x2865))+(((-1.0)*x2857*x2870))+((x2859*x2865))+((cj0*x2860))+x2853);
evalcond[4]=((0.1264)+(((-1.0)*py*x2869))+(((-0.0718)*x2853))+((px*sj0))+(((0.026255)*r00*x2861))+(((-1.0)*x2856*x2867))+((x2854*x2855))+(((-1.0)*cj6*r10*x2855))+(((0.02626)*x2852)));
evalcond[5]=((-0.21426)+((x2855*x2856))+(((-1.0)*py*x2862))+((x2854*x2867))+(((-1.0)*cj6*r00*x2855))+(((-0.0718)*x2852))+(((-0.02626)*x2853))+(((-1.0)*px*x2869))+(((-0.026255)*r10*x2861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2871=(cj5*cj6);
IkReal x2872=((1.0)*sj0);
IkReal x2873=((1.0)*r22);
IkReal x2874=(cj0*sj5);
IkReal x2875=(cj5*sj6);
IkReal x2876=((1.0)*cj0);
IkReal x2877=(cj6*r20);
IkReal x2878=((1.0)*sj5);
IkReal x2879=(r21*sj6);
IkReal x2880=(x2875*x2876);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x2871))+(((-1.0)*sj5*x2873))+((r20*x2875)));
evalcond[2]=((((-1.0)*x2879))+x2877);
evalcond[3]=((((-1.0)*r20*sj6*x2878))+(((-1.0)*cj6*r21*x2878))+(((-1.0)*cj5*x2873)));
evalcond[4]=((((-1.0)*r01*x2871*x2876))+(((-1.0)*r11*x2871*x2872))+((r12*sj0*sj5))+(((-1.0)*r00*x2880))+((r02*x2874))+(((-1.0)*r10*x2872*x2875)));
evalcond[5]=((((-1.0)*r10*x2880))+((r01*sj0*x2871))+(((-1.0)*r02*sj5*x2872))+((r00*sj0*x2875))+(((-1.0)*r11*x2871*x2876))+((r12*x2874)));
evalcond[6]=((0.0001)+pz+(((-0.026255)*x2879))+(((0.026255)*x2877)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2881=(cj0*cj6);
IkReal x2882=(sj0*sj6);
IkReal x2883=((1.0)*r11);
IkReal x2884=(cj6*sj0);
IkReal x2885=(cj0*sj6);
if( IKabs(((((-1.0)*x2882*x2883))+((r00*x2881))+((r10*x2884))+(((-1.0)*r01*x2885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2883*x2885))+((r01*x2882))+((r10*x2881))+(((-1.0)*r00*x2884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2882*x2883))+((r00*x2881))+((r10*x2884))+(((-1.0)*r01*x2885))))+IKsqr(((((-1.0)*x2883*x2885))+((r01*x2882))+((r10*x2881))+(((-1.0)*r00*x2884))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2882*x2883))+((r00*x2881))+((r10*x2884))+(((-1.0)*r01*x2885))), ((((-1.0)*x2883*x2885))+((r01*x2882))+((r10*x2881))+(((-1.0)*r00*x2884))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2886=IKcos(j4);
IkReal x2887=IKsin(j4);
IkReal x2888=(r11*sj6);
IkReal x2889=((0.026255)*cj0);
IkReal x2890=(r01*sj6);
IkReal x2891=(sj0*sj5);
IkReal x2892=(cj6*r11);
IkReal x2893=(r10*sj6);
IkReal x2894=(cj5*r12);
IkReal x2895=(cj6*sj0);
IkReal x2896=((1.0)*sj0);
IkReal x2897=(cj5*r02);
IkReal x2898=((1.0)*r10);
IkReal x2899=(cj0*sj5);
IkReal x2900=(r00*sj6);
IkReal x2901=((0.026255)*sj0);
IkReal x2902=(cj0*cj6);
IkReal x2903=((1.0)*cj0);
IkReal x2904=(cj6*r01);
evalcond[0]=((((-1.0)*x2895*x2898))+((cj0*x2890))+(((-1.0)*r00*x2902))+((sj0*x2888))+x2887);
evalcond[1]=((((-1.0)*x2890*x2896))+(((-1.0)*x2898*x2902))+((cj0*x2888))+((r00*x2895))+x2886);
evalcond[2]=(((x2891*x2893))+((x2891*x2892))+((x2899*x2904))+((x2899*x2900))+((cj0*x2897))+((sj0*x2894))+(((-1.0)*x2886)));
evalcond[3]=(((cj0*x2894))+((x2892*x2899))+(((-1.0)*x2891*x2900))+(((-1.0)*x2891*x2904))+((x2893*x2899))+(((-1.0)*x2896*x2897))+x2887);
evalcond[4]=((0.1264)+(((0.026255)*r00*x2895))+(((-1.0)*cj6*r10*x2889))+((x2888*x2889))+((px*sj0))+(((0.02626)*x2886))+(((-0.0718)*x2887))+(((-1.0)*py*x2903))+(((-1.0)*x2890*x2901)));
evalcond[5]=((-0.01934)+(((-0.026255)*r10*x2895))+(((0.0718)*x2886))+((x2889*x2890))+((x2888*x2901))+(((-1.0)*px*x2903))+(((-1.0)*py*x2896))+(((0.02626)*x2887))+(((-1.0)*cj6*r00*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2905=((1.0)*sj6);
CheckValue<IkReal> x2906=IKPowWithIntegerCheck(sj3,-1);
if(!x2906.valid){
continue;
}
if( IKabs(((x2906.value)*(((((-1.0)*r21*x2905))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x2905))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2906.value)*(((((-1.0)*r21*x2905))+((cj6*r20))))))+IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x2905))+(((-1.0)*cj6*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2906.value)*(((((-1.0)*r21*x2905))+((cj6*r20))))), (((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x2905))+(((-1.0)*cj6*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2907=IKcos(j4);
IkReal x2908=IKsin(j4);
IkReal x2909=(r11*sj0);
IkReal x2910=((0.026255)*sj6);
IkReal x2911=(cj0*r01);
IkReal x2912=(cj6*sj5);
IkReal x2913=(r10*sj0);
IkReal x2914=(sj5*sj6);
IkReal x2915=(cj0*r11);
IkReal x2916=((1.0)*cj5);
IkReal x2917=((1.0)*cj6);
IkReal x2918=(cj0*r10);
IkReal x2919=((1.0)*sj0);
IkReal x2920=(cj0*r00);
IkReal x2921=(cj5*r12);
IkReal x2922=((0.026255)*cj6);
IkReal x2923=((1.0)*r21);
IkReal x2924=((1.0)*cj0);
IkReal x2925=((1.0)*x2908);
IkReal x2926=((0.02626)*x2908);
IkReal x2927=(sj3*x2907);
IkReal x2928=(cj6*r00*sj0);
IkReal x2929=(cj3*x2907);
evalcond[0]=((((-1.0)*sj3*x2925))+(((-1.0)*sj6*x2923))+((cj6*r20)));
evalcond[1]=((((-1.0)*x2912*x2923))+(((-1.0)*r20*x2914))+x2927+(((-1.0)*r22*x2916)));
evalcond[2]=((((-1.0)*x2917*x2918))+(((-1.0)*r01*sj6*x2919))+((sj6*x2915))+x2907+x2928);
evalcond[3]=((((-1.0)*x2913*x2917))+((sj6*x2909))+(((-1.0)*x2917*x2920))+(((-1.0)*cj3*x2925))+((sj6*x2911)));
evalcond[4]=((0.0001)+(((-0.0718)*x2927))+(((-1.0)*sj3*x2926))+((r20*x2922))+pz+(((-0.09746)*sj3))+(((-1.0)*r21*x2910)));
evalcond[5]=(((sj0*x2921))+((cj0*cj5*r02))+((x2909*x2912))+((x2914*x2920))+((x2913*x2914))+((x2911*x2912))+x2929);
evalcond[6]=((((-1.0)*r02*sj0*x2916))+((x2914*x2918))+((cj0*x2921))+(((-1.0)*r00*x2914*x2919))+(((-1.0)*r01*x2912*x2919))+((x2912*x2915))+x2908);
evalcond[7]=((0.1264)+(((0.02626)*x2907))+(((-0.0718)*x2908))+((r00*sj0*x2922))+(((-1.0)*r01*sj0*x2910))+(((-1.0)*x2918*x2922))+((px*sj0))+(((-1.0)*py*x2924))+((x2910*x2915)));
evalcond[8]=((-0.1168)+(((-1.0)*py*x2919))+(((-0.0718)*x2929))+(((-1.0)*x2920*x2922))+(((-1.0)*px*x2924))+((x2909*x2910))+(((-0.09746)*cj3))+(((-1.0)*cj3*x2926))+(((-1.0)*x2913*x2922))+((x2910*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2932=IKcos(j4);
IkReal x2933=IKsin(j4);
IkReal x2934=(r11*sj0);
IkReal x2935=((0.026255)*sj6);
IkReal x2936=(cj0*r01);
IkReal x2937=(cj6*sj5);
IkReal x2938=(r10*sj0);
IkReal x2939=(sj5*sj6);
IkReal x2940=(cj0*r11);
IkReal x2941=((1.0)*cj5);
IkReal x2942=((1.0)*cj6);
IkReal x2943=(cj0*r10);
IkReal x2944=((1.0)*sj0);
IkReal x2945=(cj0*r00);
IkReal x2946=(cj5*r12);
IkReal x2947=((0.026255)*cj6);
IkReal x2948=((1.0)*r21);
IkReal x2949=((1.0)*cj0);
IkReal x2950=((1.0)*x2933);
IkReal x2951=((0.02626)*x2933);
IkReal x2952=(sj3*x2932);
IkReal x2953=(cj6*r00*sj0);
IkReal x2954=(cj3*x2932);
evalcond[0]=((((-1.0)*sj3*x2950))+((cj6*r20))+(((-1.0)*sj6*x2948)));
evalcond[1]=((((-1.0)*r20*x2939))+(((-1.0)*r22*x2941))+x2952+(((-1.0)*x2937*x2948)));
evalcond[2]=(((sj6*x2940))+(((-1.0)*x2942*x2943))+(((-1.0)*r01*sj6*x2944))+x2932+x2953);
evalcond[3]=((((-1.0)*x2942*x2945))+((sj6*x2934))+((sj6*x2936))+(((-1.0)*cj3*x2950))+(((-1.0)*x2938*x2942)));
evalcond[4]=((0.0001)+(((-0.0718)*x2952))+pz+(((-1.0)*sj3*x2951))+(((-0.09746)*sj3))+((r20*x2947))+(((-1.0)*r21*x2935)));
evalcond[5]=(((x2939*x2945))+((cj0*cj5*r02))+((x2938*x2939))+((x2936*x2937))+((sj0*x2946))+((x2934*x2937))+x2954);
evalcond[6]=(((x2939*x2943))+(((-1.0)*r00*x2939*x2944))+(((-1.0)*r01*x2937*x2944))+((cj0*x2946))+(((-1.0)*r02*sj0*x2941))+((x2937*x2940))+x2933);
evalcond[7]=((0.1264)+((x2935*x2940))+(((0.02626)*x2932))+(((-0.0718)*x2933))+(((-1.0)*x2943*x2947))+((r00*sj0*x2947))+((px*sj0))+(((-1.0)*r01*sj0*x2935))+(((-1.0)*py*x2949)));
evalcond[8]=((-0.1168)+(((-1.0)*px*x2949))+(((-0.0718)*x2954))+(((-0.09746)*cj3))+(((-1.0)*cj3*x2951))+(((-1.0)*x2945*x2947))+((x2935*x2936))+(((-1.0)*py*x2944))+((x2934*x2935))+(((-1.0)*x2938*x2947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2955=(cj5*cj6);
IkReal x2956=((1.0)*cj0);
IkReal x2957=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r00*sj0*x2957))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*r11*x2955*x2956))+(((-1.0)*r10*x2956*x2957))+((r01*sj0*x2955)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2958=(cj0*cj5);
IkReal x2959=((1.0)*sj5);
IkReal x2960=((1.0)*cj5);
IkReal x2961=(cj5*sj0);
if( IKabs(((((-1.0)*cj0*r02*x2959))+(((-1.0)*r12*sj0*x2959))+((cj6*r01*x2958))+((r00*sj6*x2958))+((r10*sj6*x2961))+((cj6*r11*x2961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r21*x2960))+((r22*sj5))+(((-1.0)*r20*sj6*x2960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r02*x2959))+(((-1.0)*r12*sj0*x2959))+((cj6*r01*x2958))+((r00*sj6*x2958))+((r10*sj6*x2961))+((cj6*r11*x2961))))+IKsqr(((((-1.0)*cj6*r21*x2960))+((r22*sj5))+(((-1.0)*r20*sj6*x2960))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r02*x2959))+(((-1.0)*r12*sj0*x2959))+((cj6*r01*x2958))+((r00*sj6*x2958))+((r10*sj6*x2961))+((cj6*r11*x2961))), ((((-1.0)*cj6*r21*x2960))+((r22*sj5))+(((-1.0)*r20*sj6*x2960))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2962=(cj5*cj6);
IkReal x2963=((1.0)*cj0);
IkReal x2964=((1.0)*sj0);
IkReal x2965=(cj5*sj6);
evalcond[0]=(((r21*x2962))+(IKcos(j3))+(((-1.0)*r22*sj5))+((r20*x2965)));
evalcond[1]=((((-1.0)*r11*x2962*x2964))+(((-1.0)*r00*x2963*x2965))+(((-1.0)*r10*x2964*x2965))+(((-1.0)*r01*x2962*x2963))+((r12*sj0*sj5))+(IKsin(j3))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2966=(cj5*cj6);
IkReal x2967=(r11*sj0);
IkReal x2968=(cj0*sj6);
IkReal x2969=(cj6*sj5);
IkReal x2970=((1.0)*cj0);
IkReal x2971=(r10*sj0);
IkReal x2972=((1.0)*cj5);
IkReal x2973=(cj0*r02);
IkReal x2974=((1.0)*sj5);
IkReal x2975=(cj5*sj6);
IkReal x2976=(cj6*r00);
IkReal x2977=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x2966))+(((-1.0)*r22*x2974))+((r20*x2975)));
evalcond[2]=(((sj6*x2967))+(((-1.0)*cj6*x2971))+((r01*x2968))+(((-1.0)*x2970*x2976)));
evalcond[3]=((1.0)+(((-1.0)*sj6*x2971*x2972))+((sj5*x2977))+((sj5*x2973))+(((-1.0)*r00*x2968*x2972))+(((-1.0)*x2966*x2967))+(((-1.0)*r01*x2966*x2970)));
evalcond[4]=(((cj0*r01*x2969))+((sj5*sj6*x2971))+((cj5*x2973))+((cj5*x2977))+((r00*sj5*x2968))+((x2967*x2969)));
evalcond[5]=(((r01*sj0*x2966))+(((-1.0)*r11*x2966*x2970))+((r00*sj0*x2975))+(((-1.0)*r10*x2968*x2972))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x2974)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x2976))+(((-0.026255)*cj6*x2971))+(((0.026255)*r01*x2968))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x2967))+(((-1.0)*px*x2970)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2978=IKcos(j4);
IkReal x2979=IKsin(j4);
IkReal x2980=((1.0)*cj5);
IkReal x2981=(cj0*r10);
IkReal x2982=(sj5*sj6);
IkReal x2983=((1.0)*cj6);
IkReal x2984=((0.026255)*cj6);
IkReal x2985=(r21*sj6);
IkReal x2986=((1.0)*x2979);
IkReal x2987=(cj0*r11*sj6);
IkReal x2988=(cj6*r00*sj0);
IkReal x2989=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x2986))+(((-1.0)*x2985))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x2983))+(((-1.0)*r20*x2982))+(((-1.0)*r22*x2980))+x2978);
evalcond[2]=((-0.09736)+(((-0.026255)*x2985))+((r20*x2984))+pz+(((-0.02626)*x2979))+(((-0.0718)*x2978)));
evalcond[3]=((((-1.0)*x2978))+(((-1.0)*x2981*x2983))+(((-1.0)*x2989))+x2988+x2987);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*x2986))+((x2981*x2982))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x2983))+(((-1.0)*r00*sj0*x2982))+(((-1.0)*r02*sj0*x2980)));
evalcond[5]=((0.1246)+(((-0.026255)*x2989))+(((0.026255)*x2987))+(((-1.0)*x2981*x2984))+(((0.0718)*x2979))+((r00*sj0*x2984))+((px*sj0))+(((-0.02626)*x2978))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2990=(cj5*cj6);
IkReal x2991=(r11*sj0);
IkReal x2992=(cj0*sj6);
IkReal x2993=(cj6*sj5);
IkReal x2994=((1.0)*cj0);
IkReal x2995=(r10*sj0);
IkReal x2996=((1.0)*cj5);
IkReal x2997=(cj0*r02);
IkReal x2998=((1.0)*sj5);
IkReal x2999=(cj5*sj6);
IkReal x3000=(cj6*r00);
IkReal x3001=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x2998))+((r20*x2999))+((r21*x2990)));
evalcond[2]=((((-1.0)*cj6*x2995))+((r01*x2992))+(((-1.0)*x2994*x3000))+((sj6*x2991)));
evalcond[3]=((-1.0)+((sj5*x2997))+(((-1.0)*sj6*x2995*x2996))+((sj5*x3001))+(((-1.0)*r01*x2990*x2994))+(((-1.0)*r00*x2992*x2996))+(((-1.0)*x2990*x2991)));
evalcond[4]=(((r00*sj5*x2992))+((cj5*x3001))+((sj5*sj6*x2995))+((x2991*x2993))+((cj0*r01*x2993))+((cj5*x2997)));
evalcond[5]=((((-1.0)*r11*x2990*x2994))+(((-1.0)*r02*sj0*x2998))+(((-1.0)*r10*x2992*x2996))+((cj0*r12*sj5))+((r01*sj0*x2990))+((r00*sj0*x2999)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x2992))+(((0.026255)*sj6*x2991))+(((-0.026255)*cj0*x3000))+(((-1.0)*px*x2994))+(((-0.026255)*cj6*x2995))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3002=(cj6*r20);
IkReal x3003=(r21*sj6);
if( IKabs(((((-1.0)*x3002))+x3003)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3003))+(((6.96378830083565e-5)*x3002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3002))+x3003))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3003))+(((6.96378830083565e-5)*x3002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x3002))+x3003), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3003))+(((6.96378830083565e-5)*x3002))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j4);
IkReal x3005=IKsin(j4);
IkReal x3006=((1.0)*cj5);
IkReal x3007=(cj0*r10);
IkReal x3008=(sj5*sj6);
IkReal x3009=((1.0)*cj6);
IkReal x3010=((0.026255)*cj6);
IkReal x3011=(r21*sj6);
IkReal x3012=((1.0)*x3004);
IkReal x3013=(cj0*r11*sj6);
IkReal x3014=(cj6*r00*sj0);
IkReal x3015=(r01*sj0*sj6);
evalcond[0]=(x3005+((cj6*r20))+(((-1.0)*x3011)));
evalcond[1]=((((-1.0)*r22*x3006))+(((-1.0)*r21*sj5*x3009))+(((-1.0)*x3012))+(((-1.0)*r20*x3008)));
evalcond[2]=((0.09756)+(((0.0718)*x3004))+(((-0.026255)*x3011))+pz+((r20*x3010))+(((0.02626)*x3005)));
evalcond[3]=(x3013+x3014+(((-1.0)*x3012))+(((-1.0)*x3007*x3009))+(((-1.0)*x3015)));
evalcond[4]=((((-1.0)*r02*sj0*x3006))+(((-1.0)*x3005))+(((-1.0)*r00*sj0*x3008))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x3009))+((x3007*x3008)));
evalcond[5]=((0.1246)+(((0.0718)*x3005))+(((-0.026255)*x3015))+(((-0.02626)*x3004))+(((0.026255)*x3013))+(((-1.0)*x3007*x3010))+((r00*sj0*x3010))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3016=(cj5*cj6);
IkReal x3017=((1.0)*sj0);
IkReal x3018=((1.0)*r22);
IkReal x3019=(cj0*sj5);
IkReal x3020=(cj5*sj6);
IkReal x3021=((1.0)*cj0);
IkReal x3022=(cj6*r20);
IkReal x3023=((1.0)*sj5);
IkReal x3024=(r21*sj6);
IkReal x3025=(x3020*x3021);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x3020))+(((-1.0)*sj5*x3018))+((r21*x3016)));
evalcond[2]=(x3022+(((-1.0)*x3024)));
evalcond[3]=((((-1.0)*cj6*r21*x3023))+(((-1.0)*r20*sj6*x3023))+(((-1.0)*cj5*x3018)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r11*x3016*x3017))+(((-1.0)*r00*x3025))+(((-1.0)*r01*x3016*x3021))+(((-1.0)*r10*x3017*x3020))+((r02*x3019)));
evalcond[5]=((((-1.0)*r11*x3016*x3021))+((r00*sj0*x3020))+((r01*sj0*x3016))+(((-1.0)*r02*sj5*x3017))+((r12*x3019))+(((-1.0)*r10*x3025)));
evalcond[6]=((0.0001)+(((0.026255)*x3022))+pz+(((-0.026255)*x3024)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3026=(cj0*cj6);
IkReal x3027=(cj6*sj0);
IkReal x3028=(cj0*sj6);
IkReal x3029=((1.0)*sj0*sj6);
if( IKabs((((r10*x3027))+(((-1.0)*r11*x3029))+(((-1.0)*r01*x3028))+((r00*x3026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3028))+(((-1.0)*r01*x3029))+((r00*x3027))+(((-1.0)*r10*x3026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3027))+(((-1.0)*r11*x3029))+(((-1.0)*r01*x3028))+((r00*x3026))))+IKsqr((((r11*x3028))+(((-1.0)*r01*x3029))+((r00*x3027))+(((-1.0)*r10*x3026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x3027))+(((-1.0)*r11*x3029))+(((-1.0)*r01*x3028))+((r00*x3026))), (((r11*x3028))+(((-1.0)*r01*x3029))+((r00*x3027))+(((-1.0)*r10*x3026))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKsin(j4);
IkReal x3031=IKcos(j4);
IkReal x3032=(r11*sj6);
IkReal x3033=((0.026255)*cj0);
IkReal x3034=(r01*sj6);
IkReal x3035=(sj0*sj5);
IkReal x3036=(cj6*r11);
IkReal x3037=(r10*sj6);
IkReal x3038=(cj5*r12);
IkReal x3039=(cj6*sj0);
IkReal x3040=((1.0)*sj0);
IkReal x3041=(cj5*r02);
IkReal x3042=((1.0)*r10);
IkReal x3043=(cj0*sj5);
IkReal x3044=(r00*sj6);
IkReal x3045=((0.026255)*sj0);
IkReal x3046=(cj0*cj6);
IkReal x3047=((1.0)*cj0);
IkReal x3048=(cj6*r01);
IkReal x3049=((1.0)*x3031);
evalcond[0]=(x3030+(((-1.0)*x3039*x3042))+((sj0*x3032))+((cj0*x3034))+(((-1.0)*r00*x3046)));
evalcond[1]=((((-1.0)*x3042*x3046))+(((-1.0)*x3049))+((cj0*x3032))+((r00*x3039))+(((-1.0)*x3034*x3040)));
evalcond[2]=(((x3043*x3044))+((x3043*x3048))+(((-1.0)*x3049))+((x3035*x3037))+((x3035*x3036))+((sj0*x3038))+((cj0*x3041)));
evalcond[3]=(((x3037*x3043))+(((-1.0)*x3035*x3044))+(((-1.0)*x3035*x3048))+(((-1.0)*x3030))+((cj0*x3038))+(((-1.0)*x3040*x3041))+((x3036*x3043)));
evalcond[4]=((0.1246)+(((-1.0)*py*x3047))+(((-1.0)*cj6*r10*x3033))+(((0.026255)*r00*x3039))+(((0.0718)*x3030))+(((-1.0)*x3034*x3045))+((x3032*x3033))+((px*sj0))+(((-0.02626)*x3031)));
evalcond[5]=((0.21226)+(((0.02626)*x3030))+(((-1.0)*py*x3040))+((x3032*x3045))+(((-1.0)*cj6*r00*x3033))+(((-1.0)*px*x3047))+(((0.0718)*x3031))+((x3033*x3034))+(((-0.026255)*r10*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3050=(cj5*cj6);
IkReal x3051=((1.0)*sj0);
IkReal x3052=((1.0)*r22);
IkReal x3053=(cj0*sj5);
IkReal x3054=(cj5*sj6);
IkReal x3055=((1.0)*cj0);
IkReal x3056=(cj6*r20);
IkReal x3057=((1.0)*sj5);
IkReal x3058=(r21*sj6);
IkReal x3059=(x3054*x3055);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x3050))+((r20*x3054))+(((-1.0)*sj5*x3052)));
evalcond[2]=(x3056+(((-1.0)*x3058)));
evalcond[3]=((((-1.0)*cj5*x3052))+(((-1.0)*r20*sj6*x3057))+(((-1.0)*cj6*r21*x3057)));
evalcond[4]=(((r02*x3053))+(((-1.0)*r10*x3051*x3054))+((r12*sj0*sj5))+(((-1.0)*r01*x3050*x3055))+(((-1.0)*r11*x3050*x3051))+(((-1.0)*r00*x3059)));
evalcond[5]=(((r00*sj0*x3054))+(((-1.0)*r02*sj5*x3051))+((r12*x3053))+((r01*sj0*x3050))+(((-1.0)*r11*x3050*x3055))+(((-1.0)*r10*x3059)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x3056))+(((-0.026255)*x3058)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3060=(sj0*sj6);
IkReal x3061=(cj0*sj6);
IkReal x3062=(cj6*r00);
IkReal x3063=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x3062))+(((-1.0)*sj0*x3063))+((r01*x3061))+((r11*x3060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x3063))+((r11*x3061))+(((-1.0)*r01*x3060))+((sj0*x3062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x3062))+(((-1.0)*sj0*x3063))+((r01*x3061))+((r11*x3060))))+IKsqr(((((-1.0)*cj0*x3063))+((r11*x3061))+(((-1.0)*r01*x3060))+((sj0*x3062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x3062))+(((-1.0)*sj0*x3063))+((r01*x3061))+((r11*x3060))), ((((-1.0)*cj0*x3063))+((r11*x3061))+(((-1.0)*r01*x3060))+((sj0*x3062))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3064=IKcos(j4);
IkReal x3065=IKsin(j4);
IkReal x3066=(r11*sj6);
IkReal x3067=((0.026255)*cj0);
IkReal x3068=(r01*sj6);
IkReal x3069=(sj0*sj5);
IkReal x3070=(cj6*r11);
IkReal x3071=(r10*sj6);
IkReal x3072=(cj5*r12);
IkReal x3073=(cj6*sj0);
IkReal x3074=((1.0)*sj0);
IkReal x3075=(cj5*r02);
IkReal x3076=((1.0)*r10);
IkReal x3077=(cj0*sj5);
IkReal x3078=(r00*sj6);
IkReal x3079=((0.026255)*sj0);
IkReal x3080=(cj0*cj6);
IkReal x3081=((1.0)*cj0);
IkReal x3082=(cj6*r01);
IkReal x3083=((1.0)*x3065);
evalcond[0]=((((-1.0)*x3083))+((cj0*x3068))+(((-1.0)*x3073*x3076))+(((-1.0)*r00*x3080))+((sj0*x3066)));
evalcond[1]=((((-1.0)*x3064))+((r00*x3073))+((cj0*x3066))+(((-1.0)*x3076*x3080))+(((-1.0)*x3068*x3074)));
evalcond[2]=(((cj0*x3075))+x3064+((x3077*x3078))+((sj0*x3072))+((x3069*x3071))+((x3069*x3070))+((x3077*x3082)));
evalcond[3]=((((-1.0)*x3083))+((cj0*x3072))+(((-1.0)*x3069*x3082))+(((-1.0)*x3074*x3075))+((x3070*x3077))+(((-1.0)*x3069*x3078))+((x3071*x3077)));
evalcond[4]=((0.1246)+(((-1.0)*py*x3081))+(((-1.0)*cj6*r10*x3067))+(((-0.02626)*x3064))+((x3066*x3067))+(((0.026255)*r00*x3073))+((px*sj0))+(((-1.0)*x3068*x3079))+(((0.0718)*x3065)));
evalcond[5]=((0.01734)+(((-0.026255)*r10*x3073))+(((-0.02626)*x3065))+(((-1.0)*cj6*r00*x3067))+((x3067*x3068))+(((-0.0718)*x3064))+(((-1.0)*px*x3081))+((x3066*x3079))+(((-1.0)*py*x3074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3084=((1.0)*sj6);
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(cj3,-1);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(sj3,-1);
if(!x3086.valid){
continue;
}
if( IKabs(((x3085.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3084))+(((-1.0)*r11*sj0*x3084))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3086.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3085.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3084))+(((-1.0)*r11*sj0*x3084))+((cj0*cj6*r00))))))+IKsqr(((x3086.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3085.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3084))+(((-1.0)*r11*sj0*x3084))+((cj0*cj6*r00))))), ((x3086.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=(r11*sj0);
IkReal x3090=((0.026255)*sj6);
IkReal x3091=(cj0*r01);
IkReal x3092=(cj5*r12);
IkReal x3093=(cj6*sj5);
IkReal x3094=(r10*sj0);
IkReal x3095=(sj5*sj6);
IkReal x3096=(cj0*r11);
IkReal x3097=((1.0)*cj5);
IkReal x3098=((1.0)*cj6);
IkReal x3099=(cj0*r10);
IkReal x3100=((1.0)*sj0);
IkReal x3101=(cj0*r00);
IkReal x3102=((0.026255)*cj6);
IkReal x3103=((1.0)*r21);
IkReal x3104=((1.0)*cj0);
IkReal x3105=(sj3*x3087);
IkReal x3106=(sj3*x3088);
IkReal x3107=(r00*x3102);
IkReal x3108=(cj3*x3087);
IkReal x3109=((1.0)*x3088);
evalcond[0]=((((-1.0)*x3105))+(((-1.0)*sj6*x3103))+((cj6*r20)));
evalcond[1]=(x3106+(((-1.0)*r22*x3097))+(((-1.0)*x3093*x3103))+(((-1.0)*r20*x3095)));
evalcond[2]=(x3108+((sj6*x3091))+(((-1.0)*x3098*x3101))+((sj6*x3089))+(((-1.0)*x3094*x3098)));
evalcond[3]=((((-1.0)*x3098*x3099))+((sj6*x3096))+((cj6*r00*sj0))+(((-1.0)*x3109))+(((-1.0)*r01*sj6*x3100)));
evalcond[4]=((0.0001)+(((-0.0718)*x3106))+(((-0.02626)*x3105))+(((-1.0)*r21*x3090))+pz+(((-0.09746)*sj3))+((r20*x3102)));
evalcond[5]=(((cj0*cj5*r02))+((x3091*x3093))+((x3089*x3093))+(((-1.0)*cj3*x3109))+((x3095*x3101))+((x3094*x3095))+((sj0*x3092)));
evalcond[6]=(((cj0*x3092))+(((-1.0)*r01*x3093*x3100))+(((-1.0)*x3087))+(((-1.0)*r00*x3095*x3100))+((x3093*x3096))+(((-1.0)*r02*sj0*x3097))+((x3095*x3099)));
evalcond[7]=((0.1246)+((sj0*x3107))+(((-1.0)*r01*sj0*x3090))+(((-1.0)*x3099*x3102))+(((-1.0)*py*x3104))+(((0.0718)*x3087))+((x3090*x3096))+((px*sj0))+(((-0.02626)*x3088)));
evalcond[8]=((0.1148)+(((0.02626)*x3108))+(((-1.0)*py*x3100))+(((-1.0)*x3094*x3102))+((x3090*x3091))+((x3089*x3090))+(((-1.0)*px*x3104))+(((0.09746)*cj3))+(((0.0718)*cj3*x3088))+(((-1.0)*x3101*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3110=((1.0)*sj6);
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(sj3,-1);
if(!x3111.valid){
continue;
}
if( IKabs(((x3111.value)*(((((-1.0)*r21*x3110))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x3110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3111.value)*(((((-1.0)*r21*x3110))+((cj6*r20))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x3110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3111.value)*(((((-1.0)*r21*x3110))+((cj6*r20))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x3110))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3112=IKsin(j4);
IkReal x3113=IKcos(j4);
IkReal x3114=(r11*sj0);
IkReal x3115=((0.026255)*sj6);
IkReal x3116=(cj0*r01);
IkReal x3117=(cj5*r12);
IkReal x3118=(cj6*sj5);
IkReal x3119=(r10*sj0);
IkReal x3120=(sj5*sj6);
IkReal x3121=(cj0*r11);
IkReal x3122=((1.0)*cj5);
IkReal x3123=((1.0)*cj6);
IkReal x3124=(cj0*r10);
IkReal x3125=((1.0)*sj0);
IkReal x3126=(cj0*r00);
IkReal x3127=((0.026255)*cj6);
IkReal x3128=((1.0)*r21);
IkReal x3129=((1.0)*cj0);
IkReal x3130=(sj3*x3112);
IkReal x3131=(sj3*x3113);
IkReal x3132=(r00*x3127);
IkReal x3133=(cj3*x3112);
IkReal x3134=((1.0)*x3113);
evalcond[0]=((((-1.0)*x3130))+((cj6*r20))+(((-1.0)*sj6*x3128)));
evalcond[1]=(x3131+(((-1.0)*r20*x3120))+(((-1.0)*r22*x3122))+(((-1.0)*x3118*x3128)));
evalcond[2]=(x3133+((sj6*x3114))+((sj6*x3116))+(((-1.0)*x3123*x3126))+(((-1.0)*x3119*x3123)));
evalcond[3]=(((sj6*x3121))+((cj6*r00*sj0))+(((-1.0)*x3123*x3124))+(((-1.0)*x3134))+(((-1.0)*r01*sj6*x3125)));
evalcond[4]=((0.0001)+(((-0.0718)*x3131))+(((-1.0)*r21*x3115))+((r20*x3127))+pz+(((-0.02626)*x3130))+(((-0.09746)*sj3)));
evalcond[5]=(((x3120*x3126))+((cj0*cj5*r02))+((sj0*x3117))+((x3114*x3118))+((x3119*x3120))+(((-1.0)*cj3*x3134))+((x3116*x3118)));
evalcond[6]=(((x3120*x3124))+(((-1.0)*r00*x3120*x3125))+(((-1.0)*x3112))+((x3118*x3121))+((cj0*x3117))+(((-1.0)*r02*sj0*x3122))+(((-1.0)*r01*x3118*x3125)));
evalcond[7]=((0.1246)+(((-1.0)*py*x3129))+((x3115*x3121))+(((-1.0)*x3124*x3127))+(((0.0718)*x3112))+(((-1.0)*r01*sj0*x3115))+((px*sj0))+(((-0.02626)*x3113))+((sj0*x3132)));
evalcond[8]=((0.1148)+(((0.0718)*cj3*x3113))+(((-1.0)*py*x3125))+((x3114*x3115))+(((0.02626)*x3133))+(((0.09746)*cj3))+(((-1.0)*x3126*x3127))+(((-1.0)*x3119*x3127))+(((-1.0)*px*x3129))+((x3115*x3116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3135.value)))+(x3136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3137=IKsin(j4);
IkReal x3138=IKcos(j4);
IkReal x3139=(r11*sj0);
IkReal x3140=((0.026255)*sj6);
IkReal x3141=(cj0*r01);
IkReal x3142=(cj5*r12);
IkReal x3143=(cj6*sj5);
IkReal x3144=(r10*sj0);
IkReal x3145=(sj5*sj6);
IkReal x3146=(cj0*r11);
IkReal x3147=((1.0)*cj5);
IkReal x3148=((1.0)*cj6);
IkReal x3149=(cj0*r10);
IkReal x3150=((1.0)*sj0);
IkReal x3151=(cj0*r00);
IkReal x3152=((0.026255)*cj6);
IkReal x3153=((1.0)*r21);
IkReal x3154=((1.0)*cj0);
IkReal x3155=(sj3*x3137);
IkReal x3156=(sj3*x3138);
IkReal x3157=(r00*x3152);
IkReal x3158=(cj3*x3137);
IkReal x3159=((1.0)*x3138);
evalcond[0]=((((-1.0)*x3155))+(((-1.0)*sj6*x3153))+((cj6*r20)));
evalcond[1]=(x3156+(((-1.0)*r22*x3147))+(((-1.0)*x3143*x3153))+(((-1.0)*r20*x3145)));
evalcond[2]=((((-1.0)*x3148*x3151))+x3158+((sj6*x3139))+(((-1.0)*x3144*x3148))+((sj6*x3141)));
evalcond[3]=((((-1.0)*x3159))+(((-1.0)*x3148*x3149))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x3150))+((sj6*x3146)));
evalcond[4]=((0.0001)+(((-0.02626)*x3155))+((r20*x3152))+(((-0.0718)*x3156))+pz+(((-1.0)*r21*x3140))+(((-0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x3142))+((x3144*x3145))+((x3145*x3151))+((x3139*x3143))+(((-1.0)*cj3*x3159))+((x3141*x3143)));
evalcond[6]=(((cj0*x3142))+((x3145*x3149))+(((-1.0)*r02*sj0*x3147))+(((-1.0)*x3137))+((x3143*x3146))+(((-1.0)*r00*x3145*x3150))+(((-1.0)*r01*x3143*x3150)));
evalcond[7]=((0.1246)+(((0.0718)*x3137))+((sj0*x3157))+(((-1.0)*x3149*x3152))+(((-1.0)*r01*sj0*x3140))+(((-0.02626)*x3138))+(((-1.0)*py*x3154))+((x3140*x3146))+((px*sj0)));
evalcond[8]=((0.1148)+(((0.0718)*cj3*x3138))+(((-1.0)*x3144*x3152))+((x3139*x3140))+(((-1.0)*py*x3150))+((x3140*x3141))+(((0.02626)*x3158))+(((0.09746)*cj3))+(((-1.0)*x3151*x3152))+(((-1.0)*px*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3160=((1.0)*cj5);
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(sj2,-1);
if(!x3161.valid){
continue;
}
if( IKabs(((x3161.value)*(((((-1.0)*cj6*r11*sj0*x3160))+((r12*sj0*sj5))+(((-1.0)*cj0*r00*sj6*x3160))+(((-1.0)*r10*sj0*sj6*x3160))+(((-1.0)*cj0*cj6*r01*x3160))+((cj0*r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r21*x3160))+((r22*sj5))+(((-1.0)*r20*sj6*x3160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3161.value)*(((((-1.0)*cj6*r11*sj0*x3160))+((r12*sj0*sj5))+(((-1.0)*cj0*r00*sj6*x3160))+(((-1.0)*r10*sj0*sj6*x3160))+(((-1.0)*cj0*cj6*r01*x3160))+((cj0*r02*sj5))))))+IKsqr(((((-1.0)*cj6*r21*x3160))+((r22*sj5))+(((-1.0)*r20*sj6*x3160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x3161.value)*(((((-1.0)*cj6*r11*sj0*x3160))+((r12*sj0*sj5))+(((-1.0)*cj0*r00*sj6*x3160))+(((-1.0)*r10*sj0*sj6*x3160))+(((-1.0)*cj0*cj6*r01*x3160))+((cj0*r02*sj5))))), ((((-1.0)*cj6*r21*x3160))+((r22*sj5))+(((-1.0)*r20*sj6*x3160))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3162=IKsin(j3);
IkReal x3163=(cj5*cj6);
IkReal x3164=((1.0)*sj5);
IkReal x3165=((1.0)*cj0);
IkReal x3166=(cj0*sj5);
IkReal x3167=(cj5*sj6);
IkReal x3168=(r10*x3167);
IkReal x3169=((1.0)*r11*x3163);
evalcond[0]=(((r20*x3167))+(IKcos(j3))+((r21*x3163))+(((-1.0)*r22*x3164)));
evalcond[1]=((((-1.0)*r02*sj0*x3164))+(((-1.0)*x3165*x3168))+((r12*x3166))+((r01*sj0*x3163))+((cj2*x3162))+(((-1.0)*r11*x3163*x3165))+((r00*sj0*x3167)));
evalcond[2]=(((r02*x3166))+(((-1.0)*sj0*x3169))+((r12*sj0*sj5))+(((-1.0)*r00*x3165*x3167))+(((-1.0)*sj2*x3162))+(((-1.0)*sj0*x3168))+(((-1.0)*r01*x3163*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3170=(cj5*cj6);
IkReal x3171=((1.0)*sj0);
IkReal x3172=((1.0)*r22);
IkReal x3173=(cj0*sj5);
IkReal x3174=(cj5*sj6);
IkReal x3175=((1.0)*cj0);
IkReal x3176=(cj6*r20);
IkReal x3177=((1.0)*sj5);
IkReal x3178=(r21*sj6);
IkReal x3179=(x3174*x3175);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x3172))+((r21*x3170))+((r20*x3174)));
evalcond[2]=(x3176+(((-1.0)*x3178)));
evalcond[3]=((((-1.0)*cj5*x3172))+(((-1.0)*cj6*r21*x3177))+(((-1.0)*r20*sj6*x3177)));
evalcond[4]=((((-1.0)*r10*x3171*x3174))+(((-1.0)*r01*x3170*x3175))+(((-1.0)*r00*x3179))+((r12*sj0*sj5))+(((-1.0)*r11*x3170*x3171))+((r02*x3173)));
evalcond[5]=(((r00*sj0*x3174))+(((-1.0)*r02*sj5*x3171))+(((-1.0)*r10*x3179))+(((-1.0)*r11*x3170*x3175))+((r01*sj0*x3170))+((r12*x3173)));
evalcond[6]=((0.0001)+pz+(((-0.026255)*x3178))+(((0.026255)*x3176)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3180=(cj0*sj6);
IkReal x3181=(r01*sj2);
IkReal x3182=(sj0*sj2);
IkReal x3183=((1.0)*cj6);
IkReal x3184=(sj0*sj6);
IkReal x3185=(cj0*sj2);
IkReal x3186=(cj6*r10);
IkReal x3187=(cj2*sj0);
IkReal x3188=(cj2*r01);
IkReal x3189=(cj0*cj2);
IkReal x3190=((1.0)*cj2*r11);
if( IKabs(((((-1.0)*r00*x3183*x3185))+(((-1.0)*r00*x3183*x3187))+(((-1.0)*x3180*x3190))+((x3184*x3188))+((r11*sj6*x3182))+((x3180*x3181))+(((-1.0)*r10*x3182*x3183))+((x3186*x3189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3184*x3190))+(((-1.0)*x3180*x3188))+((x3185*x3186))+(((-1.0)*r11*sj2*x3180))+((x3181*x3184))+((x3186*x3187))+((cj6*r00*x3189))+(((-1.0)*r00*x3182*x3183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3183*x3185))+(((-1.0)*r00*x3183*x3187))+(((-1.0)*x3180*x3190))+((x3184*x3188))+((r11*sj6*x3182))+((x3180*x3181))+(((-1.0)*r10*x3182*x3183))+((x3186*x3189))))+IKsqr(((((-1.0)*x3184*x3190))+(((-1.0)*x3180*x3188))+((x3185*x3186))+(((-1.0)*r11*sj2*x3180))+((x3181*x3184))+((x3186*x3187))+((cj6*r00*x3189))+(((-1.0)*r00*x3182*x3183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x3183*x3185))+(((-1.0)*r00*x3183*x3187))+(((-1.0)*x3180*x3190))+((x3184*x3188))+((r11*sj6*x3182))+((x3180*x3181))+(((-1.0)*r10*x3182*x3183))+((x3186*x3189))), ((((-1.0)*x3184*x3190))+(((-1.0)*x3180*x3188))+((x3185*x3186))+(((-1.0)*r11*sj2*x3180))+((x3181*x3184))+((x3186*x3187))+((cj6*r00*x3189))+(((-1.0)*r00*x3182*x3183))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=(r11*sj6);
IkReal x3194=((0.026255)*cj0);
IkReal x3195=(r01*sj6);
IkReal x3196=(sj0*sj5);
IkReal x3197=(cj6*r11);
IkReal x3198=(r10*sj6);
IkReal x3199=((0.026255)*sj0);
IkReal x3200=(cj5*r12);
IkReal x3201=(cj6*r00);
IkReal x3202=((1.0)*sj0);
IkReal x3203=(cj5*r02);
IkReal x3204=(cj6*r10);
IkReal x3205=(cj0*sj5);
IkReal x3206=(r00*sj6);
IkReal x3207=((1.0)*cj0);
IkReal x3208=(cj6*r01);
IkReal x3209=(sj2*x3191);
IkReal x3210=(cj2*x3192);
IkReal x3211=(sj2*x3192);
IkReal x3212=((0.0718)*x3191);
IkReal x3213=(cj2*x3191);
IkReal x3214=(x3210+x3209);
evalcond[0]=(((sj0*x3201))+(((-1.0)*x3204*x3207))+((cj0*x3193))+x3214+(((-1.0)*x3195*x3202)));
evalcond[1]=(((cj0*x3195))+x3213+(((-1.0)*x3211))+(((-1.0)*x3202*x3204))+(((-1.0)*x3201*x3207))+((sj0*x3193)));
evalcond[2]=(((sj0*x3200))+((cj0*x3203))+((x3205*x3208))+((x3205*x3206))+x3214+((x3196*x3197))+((x3196*x3198)));
evalcond[3]=(((x3197*x3205))+((x3198*x3205))+((cj0*x3200))+x3211+(((-1.0)*x3213))+(((-1.0)*x3202*x3203))+(((-1.0)*x3196*x3206))+(((-1.0)*x3196*x3208)));
evalcond[4]=((0.1255)+(((-1.0)*x3194*x3204))+((x3199*x3201))+((cj2*x3212))+(((-0.0718)*x3211))+(((0.02626)*x3209))+((px*sj0))+(((0.02626)*x3210))+(((0.21326)*cj2))+(((-1.0)*py*x3207))+(((0.0009)*sj2))+(((-1.0)*x3195*x3199))+((x3193*x3194)));
evalcond[5]=((-0.001)+(((-1.0)*x3194*x3201))+(((-1.0)*x3199*x3204))+(((-0.0718)*x3209))+(((-0.0718)*x3210))+(((0.0009)*cj2))+((x3194*x3195))+(((-0.21326)*sj2))+(((-0.02626)*x3211))+(((0.02626)*x3213))+(((-1.0)*py*x3202))+((x3193*x3199))+(((-1.0)*px*x3207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3215=(cj5*cj6);
IkReal x3216=((1.0)*sj0);
IkReal x3217=((1.0)*r22);
IkReal x3218=(cj0*sj5);
IkReal x3219=(cj5*sj6);
IkReal x3220=((1.0)*cj0);
IkReal x3221=(cj6*r20);
IkReal x3222=((1.0)*sj5);
IkReal x3223=(r21*sj6);
IkReal x3224=(x3219*x3220);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x3219))+(((-1.0)*sj5*x3217))+((r21*x3215)));
evalcond[2]=(x3221+(((-1.0)*x3223)));
evalcond[3]=((((-1.0)*cj6*r21*x3222))+(((-1.0)*r20*sj6*x3222))+(((-1.0)*cj5*x3217)));
evalcond[4]=((((-1.0)*r11*x3215*x3216))+(((-1.0)*r10*x3216*x3219))+((r12*sj0*sj5))+(((-1.0)*r01*x3215*x3220))+((r02*x3218))+(((-1.0)*r00*x3224)));
evalcond[5]=(((r12*x3218))+((r01*sj0*x3215))+(((-1.0)*r11*x3215*x3220))+(((-1.0)*r10*x3224))+((r00*sj0*x3219))+(((-1.0)*r02*sj5*x3216)));
evalcond[6]=((0.0001)+(((0.026255)*x3221))+(((-0.026255)*x3223))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3225=(cj6*r10);
IkReal x3226=(r11*sj0);
IkReal x3227=(r01*sj6);
IkReal x3228=((1.0)*sj0);
IkReal x3229=(cj2*sj6);
IkReal x3230=(cj0*r11);
IkReal x3231=(cj2*sj0);
IkReal x3232=(cj6*r00);
IkReal x3233=(sj0*sj2);
IkReal x3234=((1.0)*cj0*cj2);
IkReal x3235=((1.0)*sj2*sj6);
IkReal x3236=(sj2*x3232);
if( IKabs((((x3225*x3233))+((cj0*x3236))+(((-1.0)*cj0*sj2*x3227))+(((-1.0)*x3226*x3235))+((x3231*x3232))+(((-1.0)*x3225*x3234))+((x3229*x3230))+(((-1.0)*cj2*x3227*x3228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3225*x3231))+((cj0*sj2*x3225))+(((-1.0)*x3226*x3229))+(((-1.0)*x3228*x3236))+(((-1.0)*x3230*x3235))+(((-1.0)*x3227*x3234))+((cj0*cj2*x3232))+((x3227*x3233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3225*x3233))+((cj0*x3236))+(((-1.0)*cj0*sj2*x3227))+(((-1.0)*x3226*x3235))+((x3231*x3232))+(((-1.0)*x3225*x3234))+((x3229*x3230))+(((-1.0)*cj2*x3227*x3228))))+IKsqr((((x3225*x3231))+((cj0*sj2*x3225))+(((-1.0)*x3226*x3229))+(((-1.0)*x3228*x3236))+(((-1.0)*x3230*x3235))+(((-1.0)*x3227*x3234))+((cj0*cj2*x3232))+((x3227*x3233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x3225*x3233))+((cj0*x3236))+(((-1.0)*cj0*sj2*x3227))+(((-1.0)*x3226*x3235))+((x3231*x3232))+(((-1.0)*x3225*x3234))+((x3229*x3230))+(((-1.0)*cj2*x3227*x3228))), (((x3225*x3231))+((cj0*sj2*x3225))+(((-1.0)*x3226*x3229))+(((-1.0)*x3228*x3236))+(((-1.0)*x3230*x3235))+(((-1.0)*x3227*x3234))+((cj0*cj2*x3232))+((x3227*x3233))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=(r11*sj6);
IkReal x3240=((0.026255)*cj0);
IkReal x3241=(r01*sj6);
IkReal x3242=(sj0*sj5);
IkReal x3243=(cj6*r11);
IkReal x3244=(r10*sj6);
IkReal x3245=(cj5*r12);
IkReal x3246=(cj6*sj0);
IkReal x3247=((1.0)*sj0);
IkReal x3248=(cj5*r02);
IkReal x3249=((1.0)*r10);
IkReal x3250=(cj0*sj5);
IkReal x3251=(r00*sj6);
IkReal x3252=((0.026255)*sj0);
IkReal x3253=(cj0*cj6);
IkReal x3254=((1.0)*cj0);
IkReal x3255=(cj6*r01);
IkReal x3256=(cj2*x3237);
IkReal x3257=(sj2*x3238);
IkReal x3258=((0.02626)*x3238);
IkReal x3259=(cj2*x3238);
IkReal x3260=((0.0718)*x3237);
IkReal x3261=(sj2*x3237);
IkReal x3262=(x3256+x3257);
evalcond[0]=((((-1.0)*r00*x3253))+x3262+(((-1.0)*x3246*x3249))+((cj0*x3241))+((sj0*x3239)));
evalcond[1]=(((r00*x3246))+((cj0*x3239))+x3261+(((-1.0)*x3249*x3253))+(((-1.0)*x3259))+(((-1.0)*x3241*x3247)));
evalcond[2]=((((-1.0)*x3261))+x3259+((x3250*x3255))+((x3250*x3251))+((cj0*x3248))+((x3242*x3243))+((x3242*x3244))+((sj0*x3245)));
evalcond[3]=((((-1.0)*x3242*x3255))+(((-1.0)*x3242*x3251))+x3262+((x3244*x3250))+((x3243*x3250))+((cj0*x3245))+(((-1.0)*x3247*x3248)));
evalcond[4]=((0.1255)+(((-1.0)*cj6*r10*x3240))+(((-1.0)*cj2*x3258))+(((-0.0718)*x3256))+(((-0.0718)*x3257))+(((-1.0)*x3241*x3252))+(((0.02626)*x3261))+((x3239*x3240))+(((-1.0)*py*x3254))+(((0.01834)*cj2))+((px*sj0))+(((0.0009)*sj2))+(((0.026255)*r00*x3246)));
evalcond[5]=((-0.001)+((x3239*x3252))+(((0.02626)*x3256))+(((0.02626)*x3257))+(((-0.01834)*sj2))+(((-0.0718)*x3259))+(((-0.026255)*r10*x3246))+((sj2*x3260))+(((0.0009)*cj2))+(((-1.0)*cj6*r00*x3240))+(((-1.0)*px*x3254))+((x3240*x3241))+(((-1.0)*py*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3263=(cj0*sj5);
IkReal x3264=(cj5*cj6);
IkReal x3265=((1.0)*sj5);
IkReal x3266=((1.0)*cj0);
IkReal x3267=((1.0)*sj0);
IkReal x3268=(cj5*sj6);
IkReal x3269=(r10*x3268);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r21*x3264))+cj3+((r20*x3268))+(((-1.0)*r22*x3265)));
evalcond[2]=((((-1.0)*r11*x3264*x3267))+((r12*sj0*sj5))+(((-1.0)*r00*x3266*x3268))+((r02*x3263))+(((-1.0)*x3267*x3269))+(((-1.0)*r01*x3264*x3266)));
evalcond[3]=((((-1.0)*r11*x3264*x3266))+sj3+((r01*sj0*x3264))+(((-1.0)*r02*sj0*x3265))+(((-1.0)*x3266*x3269))+((r12*x3263))+((r00*sj0*x3268)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3270=(cj5*cj6);
IkReal x3271=(cj0*sj6);
IkReal x3272=(r01*sj0);
IkReal x3273=((1.0)*sj0);
IkReal x3274=((1.0)*cj5);
IkReal x3275=(cj0*r12);
IkReal x3276=(r02*sj5);
IkReal x3277=((1.0)*sj5);
IkReal x3278=(cj5*sj6);
IkReal x3279=((1.0)*cj0);
IkReal x3280=(cj6*r10);
IkReal x3281=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x3270))+((r20*x3278))+(((-1.0)*r22*x3277)));
evalcond[2]=((((-1.0)*x3279*x3280))+x3281+(((-1.0)*sj6*x3272))+((r11*x3271)));
evalcond[3]=(((cj0*x3276))+(((-1.0)*r01*x3270*x3279))+((r12*sj0*sj5))+(((-1.0)*r10*x3273*x3278))+(((-1.0)*r11*x3270*x3273))+(((-1.0)*r00*x3271*x3274)));
evalcond[4]=((1.0)+(((-1.0)*x3273*x3276))+((sj5*x3275))+(((-1.0)*r11*x3270*x3279))+(((-1.0)*r10*x3271*x3274))+((r00*sj0*x3278))+((x3270*x3272)));
evalcond[5]=(((cj5*x3275))+((r10*sj5*x3271))+(((-1.0)*r00*sj5*sj6*x3273))+(((-1.0)*cj6*x3272*x3277))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x3273)));
evalcond[6]=((0.2413)+(((0.026255)*r11*x3271))+(((-0.026255)*sj6*x3272))+(((-0.026255)*cj0*x3280))+(((0.026255)*x3281))+((px*sj0))+(((-1.0)*py*x3279)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3282=IKcos(j4);
IkReal x3283=IKsin(j4);
IkReal x3284=(r11*sj0);
IkReal x3285=(cj0*sj6);
IkReal x3286=(cj6*sj5);
IkReal x3287=(r10*sj0);
IkReal x3288=(sj5*sj6);
IkReal x3289=((1.0)*cj6);
IkReal x3290=((0.026255)*sj6);
IkReal x3291=((0.026255)*cj6);
IkReal x3292=(cj0*r00);
IkReal x3293=((1.0)*r21);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x3293))+(((-1.0)*x3283)));
evalcond[1]=((((-1.0)*r20*x3288))+x3282+(((-1.0)*cj5*r22))+(((-1.0)*x3286*x3293)));
evalcond[2]=((-0.09736)+(((-1.0)*r21*x3290))+((r20*x3291))+(((-0.02626)*x3283))+pz+(((-0.0718)*x3282)));
evalcond[3]=(((sj6*x3284))+x3282+(((-1.0)*x3287*x3289))+(((-1.0)*x3289*x3292))+((r01*x3285)));
evalcond[4]=(((cj5*r12*sj0))+((x3287*x3288))+((cj0*r01*x3286))+((cj0*cj5*r02))+x3283+((r00*sj5*x3285))+((x3284*x3286)));
evalcond[5]=((-0.0001)+(((0.02626)*x3282))+(((-1.0)*x3287*x3291))+(((-1.0)*x3291*x3292))+(((0.026255)*r01*x3285))+(((-1.0)*py*sj0))+(((-0.0718)*x3283))+((x3284*x3290))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3294=(cj5*cj6);
IkReal x3295=(cj0*sj6);
IkReal x3296=(r01*sj0);
IkReal x3297=((1.0)*sj0);
IkReal x3298=((1.0)*cj5);
IkReal x3299=(cj0*r12);
IkReal x3300=(r02*sj5);
IkReal x3301=((1.0)*sj5);
IkReal x3302=(cj5*sj6);
IkReal x3303=((1.0)*cj0);
IkReal x3304=(cj6*r10);
IkReal x3305=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x3301))+((r21*x3294))+((r20*x3302)));
evalcond[2]=(x3305+((r11*x3295))+(((-1.0)*x3303*x3304))+(((-1.0)*sj6*x3296)));
evalcond[3]=((((-1.0)*r10*x3297*x3302))+(((-1.0)*r11*x3294*x3297))+((cj0*x3300))+((r12*sj0*sj5))+(((-1.0)*r00*x3295*x3298))+(((-1.0)*r01*x3294*x3303)));
evalcond[4]=((-1.0)+((sj5*x3299))+(((-1.0)*x3297*x3300))+(((-1.0)*r10*x3295*x3298))+((r00*sj0*x3302))+(((-1.0)*r11*x3294*x3303))+((x3294*x3296)));
evalcond[5]=(((r10*sj5*x3295))+((cj5*x3299))+(((-1.0)*cj5*r02*x3297))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x3297))+(((-1.0)*cj6*x3296*x3301)));
evalcond[6]=((0.2413)+(((-1.0)*py*x3303))+(((0.026255)*x3305))+(((0.026255)*r11*x3295))+(((-0.026255)*sj6*x3296))+((px*sj0))+(((-0.026255)*cj0*x3304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3306=(cj6*r20);
IkReal x3307=(r21*sj6);
if( IKabs((x3307+(((-1.0)*x3306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x3306))+(((-6.96378830083565e-5)*x3307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3307+(((-1.0)*x3306))))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x3306))+(((-6.96378830083565e-5)*x3307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x3307+(((-1.0)*x3306))), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x3306))+(((-6.96378830083565e-5)*x3307))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3308=IKcos(j4);
IkReal x3309=IKsin(j4);
IkReal x3310=(r11*sj0);
IkReal x3311=(cj0*sj6);
IkReal x3312=(cj6*sj5);
IkReal x3313=(r10*sj0);
IkReal x3314=(sj5*sj6);
IkReal x3315=((1.0)*cj6);
IkReal x3316=((0.026255)*sj6);
IkReal x3317=((0.026255)*cj6);
IkReal x3318=(cj0*r00);
IkReal x3319=((1.0)*r21);
evalcond[0]=(x3309+(((-1.0)*sj6*x3319))+((cj6*r20)));
evalcond[1]=((((-1.0)*x3312*x3319))+(((-1.0)*x3308))+(((-1.0)*cj5*r22))+(((-1.0)*r20*x3314)));
evalcond[2]=((0.09756)+(((-1.0)*r21*x3316))+pz+(((0.02626)*x3309))+((r20*x3317))+(((0.0718)*x3308)));
evalcond[3]=(((sj6*x3310))+x3308+(((-1.0)*x3315*x3318))+(((-1.0)*x3313*x3315))+((r01*x3311)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x3312))+x3309+((x3313*x3314))+((r00*sj5*x3311))+((x3310*x3312)));
evalcond[5]=((-0.0001)+(((0.026255)*r01*x3311))+(((-0.0718)*x3309))+(((-1.0)*x3317*x3318))+(((-1.0)*x3313*x3317))+(((-1.0)*py*sj0))+(((0.02626)*x3308))+(((-1.0)*cj0*px))+((x3310*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3320=(cj5*cj6);
IkReal x3321=((1.0)*sj0);
IkReal x3322=((1.0)*r22);
IkReal x3323=(cj0*sj5);
IkReal x3324=(cj5*sj6);
IkReal x3325=((1.0)*cj0);
IkReal x3326=(cj6*r20);
IkReal x3327=((1.0)*sj5);
IkReal x3328=(r21*sj6);
IkReal x3329=(x3324*x3325);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x3324))+(((-1.0)*sj5*x3322))+((r21*x3320)));
evalcond[2]=((((-1.0)*x3328))+x3326);
evalcond[3]=((((-1.0)*cj5*x3322))+(((-1.0)*r20*sj6*x3327))+(((-1.0)*cj6*r21*x3327)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r01*x3320*x3325))+(((-1.0)*r10*x3321*x3324))+(((-1.0)*r00*x3329))+(((-1.0)*r11*x3320*x3321))+((r02*x3323)));
evalcond[5]=(((r01*sj0*x3320))+((r12*x3323))+(((-1.0)*r10*x3329))+(((-1.0)*r02*sj5*x3321))+((r00*sj0*x3324))+(((-1.0)*r11*x3320*x3325)));
evalcond[6]=((0.0001)+(((-0.026255)*x3328))+(((0.026255)*x3326))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3330=(cj0*cj6);
IkReal x3331=(sj0*sj6);
IkReal x3332=((1.0)*r11);
IkReal x3333=(cj6*sj0);
IkReal x3334=(cj0*sj6);
if( IKabs((((r10*x3330))+(((-1.0)*r00*x3333))+((r01*x3331))+(((-1.0)*x3332*x3334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3331*x3332))+((r10*x3333))+(((-1.0)*r01*x3334))+((r00*x3330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3330))+(((-1.0)*r00*x3333))+((r01*x3331))+(((-1.0)*x3332*x3334))))+IKsqr(((((-1.0)*x3331*x3332))+((r10*x3333))+(((-1.0)*r01*x3334))+((r00*x3330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x3330))+(((-1.0)*r00*x3333))+((r01*x3331))+(((-1.0)*x3332*x3334))), ((((-1.0)*x3331*x3332))+((r10*x3333))+(((-1.0)*r01*x3334))+((r00*x3330))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3335=IKsin(j4);
IkReal x3336=IKcos(j4);
IkReal x3337=(r11*sj6);
IkReal x3338=((0.026255)*cj0);
IkReal x3339=(r01*sj6);
IkReal x3340=(sj0*sj5);
IkReal x3341=(cj6*r11);
IkReal x3342=(r10*sj6);
IkReal x3343=(cj5*r12);
IkReal x3344=(cj6*sj0);
IkReal x3345=((1.0)*sj0);
IkReal x3346=(cj5*r02);
IkReal x3347=((1.0)*r10);
IkReal x3348=(cj0*sj5);
IkReal x3349=(r00*sj6);
IkReal x3350=((0.026255)*sj0);
IkReal x3351=(cj0*cj6);
IkReal x3352=((1.0)*cj0);
IkReal x3353=(cj6*r01);
evalcond[0]=(((cj0*x3339))+x3336+(((-1.0)*r00*x3351))+((sj0*x3337))+(((-1.0)*x3344*x3347)));
evalcond[1]=(((r00*x3344))+((cj0*x3337))+x3335+(((-1.0)*x3347*x3351))+(((-1.0)*x3339*x3345)));
evalcond[2]=(((cj0*x3346))+((x3340*x3342))+((x3340*x3341))+x3335+((x3348*x3349))+((sj0*x3343))+((x3348*x3353)));
evalcond[3]=(((cj0*x3343))+(((-1.0)*x3340*x3353))+((x3342*x3348))+((x3341*x3348))+(((-1.0)*x3340*x3349))+(((-1.0)*x3336))+(((-1.0)*x3345*x3346)));
evalcond[4]=((0.33876)+(((-1.0)*x3339*x3350))+(((-1.0)*cj6*r10*x3338))+(((-1.0)*py*x3352))+((x3337*x3338))+((px*sj0))+(((0.026255)*r00*x3344))+(((0.02626)*x3335))+(((0.0718)*x3336)));
evalcond[5]=((-0.0001)+((x3337*x3350))+(((-0.0718)*x3335))+(((-0.026255)*r10*x3344))+(((-1.0)*cj6*r00*x3338))+(((0.02626)*x3336))+(((-1.0)*px*x3352))+((x3338*x3339))+(((-1.0)*py*x3345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3354=(cj5*cj6);
IkReal x3355=((1.0)*sj0);
IkReal x3356=((1.0)*r22);
IkReal x3357=(cj0*sj5);
IkReal x3358=(cj5*sj6);
IkReal x3359=((1.0)*cj0);
IkReal x3360=(cj6*r20);
IkReal x3361=((1.0)*sj5);
IkReal x3362=(r21*sj6);
IkReal x3363=(x3358*x3359);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x3356))+((r20*x3358))+((r21*x3354)));
evalcond[2]=(x3360+(((-1.0)*x3362)));
evalcond[3]=((((-1.0)*cj6*r21*x3361))+(((-1.0)*r20*sj6*x3361))+(((-1.0)*cj5*x3356)));
evalcond[4]=((((-1.0)*r11*x3354*x3355))+((r12*sj0*sj5))+(((-1.0)*r00*x3363))+(((-1.0)*r10*x3355*x3358))+(((-1.0)*r01*x3354*x3359))+((r02*x3357)));
evalcond[5]=((((-1.0)*r10*x3363))+((r12*x3357))+(((-1.0)*r11*x3354*x3359))+(((-1.0)*r02*sj5*x3355))+((r00*sj0*x3358))+((r01*sj0*x3354)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x3360))+(((-0.026255)*x3362)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3364=(cj0*cj6);
IkReal x3365=(cj6*sj0);
IkReal x3366=(cj0*sj6);
IkReal x3367=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r10*x3364))+(((-1.0)*r01*x3367))+((r00*x3365))+((r11*x3366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3366))+((r10*x3365))+((r00*x3364))+(((-1.0)*r11*x3367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3364))+(((-1.0)*r01*x3367))+((r00*x3365))+((r11*x3366))))+IKsqr(((((-1.0)*r01*x3366))+((r10*x3365))+((r00*x3364))+(((-1.0)*r11*x3367))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x3364))+(((-1.0)*r01*x3367))+((r00*x3365))+((r11*x3366))), ((((-1.0)*r01*x3366))+((r10*x3365))+((r00*x3364))+(((-1.0)*r11*x3367))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3368=IKsin(j4);
IkReal x3369=IKcos(j4);
IkReal x3370=(r11*sj6);
IkReal x3371=((0.026255)*cj0);
IkReal x3372=(r01*sj6);
IkReal x3373=(sj0*sj5);
IkReal x3374=(cj6*r11);
IkReal x3375=(r10*sj6);
IkReal x3376=(cj5*r12);
IkReal x3377=(cj6*sj0);
IkReal x3378=((1.0)*sj0);
IkReal x3379=(cj5*r02);
IkReal x3380=((1.0)*r10);
IkReal x3381=(cj0*sj5);
IkReal x3382=(r00*sj6);
IkReal x3383=((0.026255)*sj0);
IkReal x3384=(cj0*cj6);
IkReal x3385=((1.0)*cj0);
IkReal x3386=(cj6*r01);
evalcond[0]=(((cj0*x3372))+(((-1.0)*x3377*x3380))+x3369+((sj0*x3370))+(((-1.0)*r00*x3384)));
evalcond[1]=(((cj0*x3370))+(((-1.0)*x3380*x3384))+(((-1.0)*x3368))+(((-1.0)*x3372*x3378))+((r00*x3377)));
evalcond[2]=(((cj0*x3379))+((x3381*x3386))+((x3381*x3382))+x3368+((x3373*x3374))+((x3373*x3375))+((sj0*x3376)));
evalcond[3]=(((x3375*x3381))+((x3374*x3381))+((cj0*x3376))+x3369+(((-1.0)*x3373*x3382))+(((-1.0)*x3373*x3386))+(((-1.0)*x3378*x3379)));
evalcond[4]=((0.14384)+(((-0.02626)*x3368))+(((-1.0)*py*x3385))+((x3370*x3371))+(((-0.0718)*x3369))+((px*sj0))+(((-1.0)*x3372*x3383))+(((-1.0)*cj6*r10*x3371))+(((0.026255)*r00*x3377)));
evalcond[5]=((-0.0001)+(((-1.0)*py*x3378))+(((-0.0718)*x3368))+((x3371*x3372))+(((0.02626)*x3369))+(((-0.026255)*r10*x3377))+(((-1.0)*cj6*r00*x3371))+(((-1.0)*px*x3385))+((x3370*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(cj3,-1);
if(!x3387.valid){
continue;
}
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(sj3,-1);
if(!x3388.valid){
continue;
}
if( IKabs(((x3387.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3388.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3387.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x3388.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3387.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x3388.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3389=IKcos(j4);
IkReal x3390=IKsin(j4);
IkReal x3391=(r11*sj0);
IkReal x3392=((0.026255)*sj6);
IkReal x3393=(cj0*r01);
IkReal x3394=(cj5*r12);
IkReal x3395=(cj6*sj5);
IkReal x3396=(r10*sj0);
IkReal x3397=(sj5*sj6);
IkReal x3398=(cj0*r11);
IkReal x3399=((1.0)*cj5);
IkReal x3400=((1.0)*cj6);
IkReal x3401=(cj0*r10);
IkReal x3402=((1.0)*sj0);
IkReal x3403=(cj0*r00);
IkReal x3404=((0.026255)*cj6);
IkReal x3405=((1.0)*r21);
IkReal x3406=((1.0)*cj0);
IkReal x3407=(sj3*x3390);
IkReal x3408=(sj3*x3389);
IkReal x3409=(r00*x3404);
IkReal x3410=(cj3*x3390);
IkReal x3411=(cj3*x3389);
evalcond[0]=((((-1.0)*x3407))+(((-1.0)*sj6*x3405))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x3399))+x3408+(((-1.0)*x3395*x3405))+(((-1.0)*r20*x3397)));
evalcond[2]=((((-1.0)*x3400*x3403))+x3389+(((-1.0)*x3396*x3400))+((sj6*x3393))+((sj6*x3391)));
evalcond[3]=((((-1.0)*x3400*x3401))+(((-1.0)*r01*sj6*x3402))+((cj6*r00*sj0))+x3410+((sj6*x3398)));
evalcond[4]=((0.0001)+(((-0.0718)*x3408))+(((-0.02626)*x3407))+((r20*x3404))+pz+(((-0.09746)*sj3))+(((-1.0)*r21*x3392)));
evalcond[5]=(((cj0*cj5*r02))+((x3391*x3395))+x3390+((sj0*x3394))+((x3393*x3395))+((x3397*x3403))+((x3396*x3397)));
evalcond[6]=((((-1.0)*r01*x3395*x3402))+(((-1.0)*x3411))+((cj0*x3394))+(((-1.0)*r00*x3397*x3402))+((x3397*x3401))+(((-1.0)*r02*sj0*x3399))+((x3395*x3398)));
evalcond[7]=((-0.0001)+(((-1.0)*py*x3402))+(((-0.0718)*x3390))+((x3391*x3392))+(((-1.0)*x3396*x3404))+(((-1.0)*px*x3406))+((x3392*x3393))+(((0.02626)*x3389))+(((-1.0)*x3403*x3404)));
evalcond[8]=((0.2413)+(((0.02626)*x3410))+(((-1.0)*py*x3406))+(((0.0718)*x3411))+(((-1.0)*x3401*x3404))+((sj0*x3409))+((px*sj0))+((x3392*x3398))+(((0.09746)*cj3))+(((-1.0)*r01*sj0*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3412=((1.0)*sj6);
CheckValue<IkReal> x3413=IKPowWithIntegerCheck(sj3,-1);
if(!x3413.valid){
continue;
}
if( IKabs(((x3413.value)*(((((-1.0)*r21*x3412))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3412))+(((-1.0)*r11*sj0*x3412))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3413.value)*(((((-1.0)*r21*x3412))+((cj6*r20))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3412))+(((-1.0)*r11*sj0*x3412))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3413.value)*(((((-1.0)*r21*x3412))+((cj6*r20))))), (((cj6*r10*sj0))+(((-1.0)*cj0*r01*x3412))+(((-1.0)*r11*sj0*x3412))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3414=IKcos(j4);
IkReal x3415=IKsin(j4);
IkReal x3416=(r11*sj0);
IkReal x3417=((0.026255)*sj6);
IkReal x3418=(cj0*r01);
IkReal x3419=(cj5*r12);
IkReal x3420=(cj6*sj5);
IkReal x3421=(r10*sj0);
IkReal x3422=(sj5*sj6);
IkReal x3423=(cj0*r11);
IkReal x3424=((1.0)*cj5);
IkReal x3425=((1.0)*cj6);
IkReal x3426=(cj0*r10);
IkReal x3427=((1.0)*sj0);
IkReal x3428=(cj0*r00);
IkReal x3429=((0.026255)*cj6);
IkReal x3430=((1.0)*r21);
IkReal x3431=((1.0)*cj0);
IkReal x3432=(sj3*x3415);
IkReal x3433=(sj3*x3414);
IkReal x3434=(r00*x3429);
IkReal x3435=(cj3*x3415);
IkReal x3436=(cj3*x3414);
evalcond[0]=((((-1.0)*sj6*x3430))+(((-1.0)*x3432))+((cj6*r20)));
evalcond[1]=((((-1.0)*x3420*x3430))+x3433+(((-1.0)*r20*x3422))+(((-1.0)*r22*x3424)));
evalcond[2]=((((-1.0)*x3425*x3428))+x3414+((sj6*x3416))+((sj6*x3418))+(((-1.0)*x3421*x3425)));
evalcond[3]=(((sj6*x3423))+((cj6*r00*sj0))+(((-1.0)*x3425*x3426))+x3435+(((-1.0)*r01*sj6*x3427)));
evalcond[4]=((0.0001)+((r20*x3429))+(((-1.0)*r21*x3417))+pz+(((-0.09746)*sj3))+(((-0.0718)*x3433))+(((-0.02626)*x3432)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x3419))+((x3418*x3420))+x3415+((x3421*x3422))+((x3422*x3428))+((x3416*x3420)));
evalcond[6]=((((-1.0)*r02*sj0*x3424))+((x3420*x3423))+(((-1.0)*r00*x3422*x3427))+(((-1.0)*r01*x3420*x3427))+((cj0*x3419))+((x3422*x3426))+(((-1.0)*x3436)));
evalcond[7]=((-0.0001)+((x3417*x3418))+(((-1.0)*px*x3431))+(((0.02626)*x3414))+((x3416*x3417))+(((-0.0718)*x3415))+(((-1.0)*py*x3427))+(((-1.0)*x3421*x3429))+(((-1.0)*x3428*x3429)));
evalcond[8]=((0.2413)+(((-1.0)*r01*sj0*x3417))+(((-1.0)*x3426*x3429))+((x3417*x3423))+(((0.02626)*x3435))+(((0.0718)*x3436))+((px*sj0))+((sj0*x3434))+(((0.09746)*cj3))+(((-1.0)*py*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3437.value)))+(x3438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3439=IKcos(j4);
IkReal x3440=IKsin(j4);
IkReal x3441=(r11*sj0);
IkReal x3442=((0.026255)*sj6);
IkReal x3443=(cj0*r01);
IkReal x3444=(cj5*r12);
IkReal x3445=(cj6*sj5);
IkReal x3446=(r10*sj0);
IkReal x3447=(sj5*sj6);
IkReal x3448=(cj0*r11);
IkReal x3449=((1.0)*cj5);
IkReal x3450=((1.0)*cj6);
IkReal x3451=(cj0*r10);
IkReal x3452=((1.0)*sj0);
IkReal x3453=(cj0*r00);
IkReal x3454=((0.026255)*cj6);
IkReal x3455=((1.0)*r21);
IkReal x3456=((1.0)*cj0);
IkReal x3457=(sj3*x3440);
IkReal x3458=(sj3*x3439);
IkReal x3459=(r00*x3454);
IkReal x3460=(cj3*x3440);
IkReal x3461=(cj3*x3439);
evalcond[0]=((((-1.0)*sj6*x3455))+(((-1.0)*x3457))+((cj6*r20)));
evalcond[1]=(x3458+(((-1.0)*x3445*x3455))+(((-1.0)*r20*x3447))+(((-1.0)*r22*x3449)));
evalcond[2]=(((sj6*x3443))+((sj6*x3441))+(((-1.0)*x3446*x3450))+x3439+(((-1.0)*x3450*x3453)));
evalcond[3]=((((-1.0)*r01*sj6*x3452))+((cj6*r00*sj0))+((sj6*x3448))+x3460+(((-1.0)*x3450*x3451)));
evalcond[4]=((0.0001)+(((-0.0718)*x3458))+(((-1.0)*r21*x3442))+pz+(((-0.09746)*sj3))+(((-0.02626)*x3457))+((r20*x3454)));
evalcond[5]=(((sj0*x3444))+((cj0*cj5*r02))+((x3447*x3453))+x3440+((x3446*x3447))+((x3443*x3445))+((x3441*x3445)));
evalcond[6]=((((-1.0)*r01*x3445*x3452))+((x3447*x3451))+(((-1.0)*r02*sj0*x3449))+((x3445*x3448))+(((-1.0)*r00*x3447*x3452))+(((-1.0)*x3461))+((cj0*x3444)));
evalcond[7]=((-0.0001)+(((-1.0)*x3453*x3454))+((x3442*x3443))+(((-0.0718)*x3440))+(((-1.0)*px*x3456))+(((-1.0)*x3446*x3454))+(((0.02626)*x3439))+((x3441*x3442))+(((-1.0)*py*x3452)));
evalcond[8]=((0.2413)+(((-1.0)*x3451*x3454))+(((-1.0)*r01*sj0*x3442))+((x3442*x3448))+((sj0*x3459))+(((0.0718)*x3461))+((px*sj0))+(((0.09746)*cj3))+(((0.02626)*x3460))+(((-1.0)*py*x3456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3462=(cj0*sj5);
IkReal x3463=(cj5*cj6);
IkReal x3464=((1.0)*sj5);
IkReal x3465=((1.0)*cj0);
IkReal x3466=((1.0)*sj0);
IkReal x3467=(cj5*sj6);
IkReal x3468=(r10*x3467);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+((r20*x3467))+(((-1.0)*r22*x3464))+((r21*x3463)));
evalcond[2]=((((-1.0)*r01*x3463*x3465))+(((-1.0)*r11*x3463*x3466))+((r12*sj0*sj5))+(((-1.0)*r00*x3465*x3467))+((r02*x3462))+(((-1.0)*x3466*x3468)));
evalcond[3]=((((-1.0)*r02*sj0*x3464))+(((-1.0)*sj3))+(((-1.0)*x3465*x3468))+(((-1.0)*r11*x3463*x3465))+((r12*x3462))+((r00*sj0*x3467))+((r01*sj0*x3463)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3469=(cj5*cj6);
IkReal x3470=((1.0)*sj0);
IkReal x3471=((1.0)*r22);
IkReal x3472=(cj0*sj5);
IkReal x3473=(cj5*sj6);
IkReal x3474=((1.0)*cj0);
IkReal x3475=(cj6*r20);
IkReal x3476=((1.0)*sj5);
IkReal x3477=(r21*sj6);
IkReal x3478=(x3473*x3474);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x3473))+(((-1.0)*sj5*x3471))+((r21*x3469)));
evalcond[2]=(x3475+(((-1.0)*x3477)));
evalcond[3]=((((-1.0)*cj5*x3471))+(((-1.0)*cj6*r21*x3476))+(((-1.0)*r20*sj6*x3476)));
evalcond[4]=((((-1.0)*r00*x3478))+(((-1.0)*r01*x3469*x3474))+(((-1.0)*r10*x3470*x3473))+((r12*sj0*sj5))+(((-1.0)*r11*x3469*x3470))+((r02*x3472)));
evalcond[5]=((((-1.0)*r10*x3478))+(((-1.0)*r02*sj5*x3470))+((r12*x3472))+(((-1.0)*r11*x3469*x3474))+((r00*sj0*x3473))+((r01*sj0*x3469)));
evalcond[6]=((0.0001)+(((-0.026255)*x3477))+(((0.026255)*x3475))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3479=(sj0*sj6);
IkReal x3480=(cj0*sj6);
IkReal x3481=(cj6*r00);
IkReal x3482=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*r01*x3479))+((sj0*x3481))+((r11*x3480))+(((-1.0)*cj0*x3482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x3482))+((r01*x3480))+(((-1.0)*cj0*x3481))+((r11*x3479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3479))+((sj0*x3481))+((r11*x3480))+(((-1.0)*cj0*x3482))))+IKsqr(((((-1.0)*sj0*x3482))+((r01*x3480))+(((-1.0)*cj0*x3481))+((r11*x3479))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x3479))+((sj0*x3481))+((r11*x3480))+(((-1.0)*cj0*x3482))), ((((-1.0)*sj0*x3482))+((r01*x3480))+(((-1.0)*cj0*x3481))+((r11*x3479))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3483=IKcos(j4);
IkReal x3484=IKsin(j4);
IkReal x3485=(r11*sj6);
IkReal x3486=((0.026255)*cj0);
IkReal x3487=(r01*sj6);
IkReal x3488=(sj0*sj5);
IkReal x3489=(cj6*r11);
IkReal x3490=(r10*sj6);
IkReal x3491=(cj5*r12);
IkReal x3492=(cj6*sj0);
IkReal x3493=((1.0)*sj0);
IkReal x3494=(cj5*r02);
IkReal x3495=((1.0)*r10);
IkReal x3496=(cj0*sj5);
IkReal x3497=(r00*sj6);
IkReal x3498=((0.026255)*sj0);
IkReal x3499=(cj0*cj6);
IkReal x3500=((1.0)*cj0);
IkReal x3501=(cj6*r01);
IkReal x3502=((1.0)*x3484);
evalcond[0]=(((cj0*x3487))+(((-1.0)*r00*x3499))+((sj0*x3485))+(((-1.0)*x3492*x3495))+(((-1.0)*x3483)));
evalcond[1]=(((r00*x3492))+(((-1.0)*x3502))+((cj0*x3485))+(((-1.0)*x3487*x3493))+(((-1.0)*x3495*x3499)));
evalcond[2]=(((cj0*x3494))+(((-1.0)*x3502))+((x3496*x3497))+((x3488*x3489))+((x3496*x3501))+((x3488*x3490))+((sj0*x3491)));
evalcond[3]=(((cj0*x3491))+(((-1.0)*x3488*x3497))+x3483+(((-1.0)*x3493*x3494))+((x3490*x3496))+(((-1.0)*x3488*x3501))+((x3489*x3496)));
evalcond[4]=((-0.08776)+(((0.026255)*r00*x3492))+(((-1.0)*cj6*r10*x3486))+(((-1.0)*x3487*x3498))+(((-0.0718)*x3483))+((x3485*x3486))+((px*sj0))+(((-1.0)*py*x3500))+(((-0.02626)*x3484)));
evalcond[5]=((-0.0019)+((x3486*x3487))+((x3485*x3498))+(((0.0718)*x3484))+(((-1.0)*px*x3500))+(((-1.0)*cj6*r00*x3486))+(((-1.0)*py*x3493))+(((-0.026255)*r10*x3492))+(((-0.02626)*x3483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3503=(cj5*cj6);
IkReal x3504=((1.0)*sj0);
IkReal x3505=((1.0)*r22);
IkReal x3506=(cj0*sj5);
IkReal x3507=(cj5*sj6);
IkReal x3508=((1.0)*cj0);
IkReal x3509=(cj6*r20);
IkReal x3510=((1.0)*sj5);
IkReal x3511=(r21*sj6);
IkReal x3512=(x3507*x3508);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x3507))+(((-1.0)*sj5*x3505))+((r21*x3503)));
evalcond[2]=(x3509+(((-1.0)*x3511)));
evalcond[3]=((((-1.0)*cj6*r21*x3510))+(((-1.0)*r20*sj6*x3510))+(((-1.0)*cj5*x3505)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r11*x3503*x3504))+((r02*x3506))+(((-1.0)*r00*x3512))+(((-1.0)*r01*x3503*x3508))+(((-1.0)*r10*x3504*x3507)));
evalcond[5]=((((-1.0)*r02*sj5*x3504))+(((-1.0)*r10*x3512))+((r12*x3506))+((r01*sj0*x3503))+(((-1.0)*r11*x3503*x3508))+((r00*sj0*x3507)));
evalcond[6]=((0.0001)+(((-0.026255)*x3511))+pz+(((0.026255)*x3509)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3513=(sj0*sj6);
IkReal x3514=(cj6*r10);
IkReal x3515=((1.0)*sj0);
IkReal x3516=(cj6*r00);
IkReal x3517=(cj0*sj6);
if( IKabs(((((-1.0)*x3515*x3516))+((r01*x3513))+((cj0*x3514))+(((-1.0)*r11*x3517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3514*x3515))+((r01*x3517))+((r11*x3513))+(((-1.0)*cj0*x3516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3515*x3516))+((r01*x3513))+((cj0*x3514))+(((-1.0)*r11*x3517))))+IKsqr(((((-1.0)*x3514*x3515))+((r01*x3517))+((r11*x3513))+(((-1.0)*cj0*x3516))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x3515*x3516))+((r01*x3513))+((cj0*x3514))+(((-1.0)*r11*x3517))), ((((-1.0)*x3514*x3515))+((r01*x3517))+((r11*x3513))+(((-1.0)*cj0*x3516))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3518=IKsin(j4);
IkReal x3519=IKcos(j4);
IkReal x3520=(r11*sj6);
IkReal x3521=((0.026255)*cj0);
IkReal x3522=(r01*sj6);
IkReal x3523=(sj0*sj5);
IkReal x3524=(cj6*r11);
IkReal x3525=(r10*sj6);
IkReal x3526=(cj5*r12);
IkReal x3527=(cj6*sj0);
IkReal x3528=((1.0)*sj0);
IkReal x3529=(cj5*r02);
IkReal x3530=((1.0)*r10);
IkReal x3531=(cj0*sj5);
IkReal x3532=(r00*sj6);
IkReal x3533=((0.026255)*sj0);
IkReal x3534=(cj0*cj6);
IkReal x3535=((1.0)*cj0);
IkReal x3536=(cj6*r01);
IkReal x3537=((1.0)*x3519);
evalcond[0]=((((-1.0)*x3522*x3528))+((cj0*x3520))+((r00*x3527))+x3518+(((-1.0)*x3530*x3534)));
evalcond[1]=(((cj0*x3522))+(((-1.0)*x3527*x3530))+(((-1.0)*x3537))+((sj0*x3520))+(((-1.0)*r00*x3534)));
evalcond[2]=(((cj0*x3529))+((x3531*x3536))+((x3531*x3532))+((x3523*x3525))+((x3523*x3524))+((sj0*x3526))+(((-1.0)*x3518)));
evalcond[3]=(((cj0*x3526))+(((-1.0)*x3537))+(((-1.0)*x3523*x3532))+(((-1.0)*x3523*x3536))+((x3525*x3531))+((x3524*x3531))+(((-1.0)*x3528*x3529)));
evalcond[4]=((0.10716)+(((0.026255)*r00*x3527))+(((-1.0)*py*x3535))+((x3520*x3521))+(((-1.0)*cj6*r10*x3521))+((px*sj0))+(((0.02626)*x3518))+(((-1.0)*x3522*x3533))+(((0.0718)*x3519)));
evalcond[5]=((-0.0019)+((x3520*x3533))+(((-0.026255)*r10*x3527))+(((-1.0)*cj6*r00*x3521))+(((-1.0)*px*x3535))+(((-1.0)*py*x3528))+(((-0.02626)*x3519))+((x3521*x3522))+(((0.0718)*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3538=((1.0)*cj6);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(sj3,-1);
if(!x3539.valid){
continue;
}
if( IKabs(((x3539.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x3538))+(((-1.0)*r10*sj0*x3538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3539.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x3538))+(((-1.0)*r10*sj0*x3538))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3539.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x3538))+(((-1.0)*r10*sj0*x3538))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3540=IKcos(j4);
IkReal x3541=IKsin(j4);
IkReal x3542=(r11*sj0);
IkReal x3543=((0.026255)*sj6);
IkReal x3544=(cj0*r01);
IkReal x3545=(cj6*sj5);
IkReal x3546=(r10*sj0);
IkReal x3547=(sj5*sj6);
IkReal x3548=(cj0*r11);
IkReal x3549=((1.0)*cj5);
IkReal x3550=((1.0)*cj6);
IkReal x3551=(cj0*r10);
IkReal x3552=((1.0)*sj0);
IkReal x3553=(cj0*r00);
IkReal x3554=(cj5*r12);
IkReal x3555=((0.026255)*cj6);
IkReal x3556=((1.0)*r21);
IkReal x3557=((1.0)*cj0);
IkReal x3558=((1.0)*x3541);
IkReal x3559=((0.02626)*x3541);
IkReal x3560=(sj3*x3540);
IkReal x3561=(r00*x3555);
IkReal x3562=(cj3*x3540);
evalcond[0]=((((-1.0)*sj3*x3558))+((cj6*r20))+(((-1.0)*sj6*x3556)));
evalcond[1]=((((-1.0)*x3545*x3556))+x3560+(((-1.0)*r20*x3547))+(((-1.0)*r22*x3549)));
evalcond[2]=(((sj6*x3542))+((sj6*x3544))+(((-1.0)*x3540))+(((-1.0)*x3550*x3553))+(((-1.0)*x3546*x3550)));
evalcond[3]=((((-1.0)*r01*sj6*x3552))+((cj6*r00*sj0))+((sj6*x3548))+(((-1.0)*cj3*x3558))+(((-1.0)*x3550*x3551)));
evalcond[4]=((0.0001)+((r20*x3555))+(((-1.0)*r21*x3543))+(((-1.0)*sj3*x3559))+pz+(((-0.0718)*x3560))+(((-0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x3554))+((x3542*x3545))+((x3547*x3553))+((x3546*x3547))+(((-1.0)*x3558))+((x3544*x3545)));
evalcond[6]=((((-1.0)*r01*x3545*x3552))+(((-1.0)*r00*x3547*x3552))+x3562+((x3547*x3551))+((cj0*x3554))+(((-1.0)*r02*sj0*x3549))+((x3545*x3548)));
evalcond[7]=((-0.0019)+((x3542*x3543))+(((0.0718)*x3541))+(((-1.0)*py*x3552))+((x3543*x3544))+(((-1.0)*x3553*x3555))+(((-1.0)*px*x3557))+(((-0.02626)*x3540))+(((-1.0)*x3546*x3555)));
evalcond[8]=((0.0097)+(((-1.0)*py*x3557))+((sj0*x3561))+((x3543*x3548))+(((-1.0)*cj3*x3559))+(((-1.0)*r01*sj0*x3543))+(((-0.09746)*cj3))+(((-1.0)*x3551*x3555))+((px*sj0))+(((-0.0718)*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3563.valid){
continue;
}
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3563.value)))+(x3564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3565=IKcos(j4);
IkReal x3566=IKsin(j4);
IkReal x3567=(r11*sj0);
IkReal x3568=((0.026255)*sj6);
IkReal x3569=(cj0*r01);
IkReal x3570=(cj6*sj5);
IkReal x3571=(r10*sj0);
IkReal x3572=(sj5*sj6);
IkReal x3573=(cj0*r11);
IkReal x3574=((1.0)*cj5);
IkReal x3575=((1.0)*cj6);
IkReal x3576=(cj0*r10);
IkReal x3577=((1.0)*sj0);
IkReal x3578=(cj0*r00);
IkReal x3579=(cj5*r12);
IkReal x3580=((0.026255)*cj6);
IkReal x3581=((1.0)*r21);
IkReal x3582=((1.0)*cj0);
IkReal x3583=((1.0)*x3566);
IkReal x3584=((0.02626)*x3566);
IkReal x3585=(sj3*x3565);
IkReal x3586=(r00*x3580);
IkReal x3587=(cj3*x3565);
evalcond[0]=((((-1.0)*sj3*x3583))+((cj6*r20))+(((-1.0)*sj6*x3581)));
evalcond[1]=((((-1.0)*r20*x3572))+(((-1.0)*x3570*x3581))+x3585+(((-1.0)*r22*x3574)));
evalcond[2]=(((sj6*x3567))+((sj6*x3569))+(((-1.0)*x3575*x3578))+(((-1.0)*x3571*x3575))+(((-1.0)*x3565)));
evalcond[3]=((((-1.0)*cj3*x3583))+((cj6*r00*sj0))+(((-1.0)*x3575*x3576))+(((-1.0)*r01*sj6*x3577))+((sj6*x3573)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x3568))+((r20*x3580))+(((-0.0718)*x3585))+(((-1.0)*sj3*x3584))+pz+(((-0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((x3571*x3572))+((x3567*x3570))+((x3569*x3570))+((sj0*x3579))+((x3572*x3578))+(((-1.0)*x3583)));
evalcond[6]=(((x3570*x3573))+((cj0*x3579))+x3587+(((-1.0)*r02*sj0*x3574))+(((-1.0)*r01*x3570*x3577))+((x3572*x3576))+(((-1.0)*r00*x3572*x3577)));
evalcond[7]=((-0.0019)+(((-1.0)*px*x3582))+((x3568*x3569))+(((-0.02626)*x3565))+(((-1.0)*x3578*x3580))+(((-1.0)*py*x3577))+((x3567*x3568))+(((-1.0)*x3571*x3580))+(((0.0718)*x3566)));
evalcond[8]=((0.0097)+(((-1.0)*x3576*x3580))+(((-1.0)*cj3*x3584))+(((-1.0)*r01*sj0*x3568))+(((-0.0718)*x3587))+(((-0.09746)*cj3))+((x3568*x3573))+((px*sj0))+((sj0*x3586))+(((-1.0)*py*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(sj3,-1);
if(!x3594.valid){
continue;
}
IkReal x3588=x3594.value;
IkReal x3589=(cj6*sj3);
IkReal x3590=(sj3*sj6);
IkReal x3591=(r21*sj6);
IkReal x3592=(cj2*cj3);
IkReal x3593=(cj6*r20);
CheckValue<IkReal> x3595=IKPowWithIntegerCheck(sj2,-1);
if(!x3595.valid){
continue;
}
if( IKabs((x3588*((x3593+(((-1.0)*x3591)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3588*(x3595.value)*(((((-1.0)*x3592*x3593))+((x3591*x3592))+(((-1.0)*cj0*r11*x3590))+(((-1.0)*r00*sj0*x3589))+((r01*sj0*x3590))+((cj0*r10*x3589)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3588*((x3593+(((-1.0)*x3591))))))+IKsqr((x3588*(x3595.value)*(((((-1.0)*x3592*x3593))+((x3591*x3592))+(((-1.0)*cj0*r11*x3590))+(((-1.0)*r00*sj0*x3589))+((r01*sj0*x3590))+((cj0*r10*x3589))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x3588*((x3593+(((-1.0)*x3591))))), (x3588*(x3595.value)*(((((-1.0)*x3592*x3593))+((x3591*x3592))+(((-1.0)*cj0*r11*x3590))+(((-1.0)*r00*sj0*x3589))+((r01*sj0*x3590))+((cj0*r10*x3589))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3596=IKsin(j4);
IkReal x3597=IKcos(j4);
IkReal x3598=(r11*sj0);
IkReal x3599=((0.026255)*sj6);
IkReal x3600=(cj0*r01);
IkReal x3601=(cj0*cj5);
IkReal x3602=(cj6*sj5);
IkReal x3603=(r10*sj0);
IkReal x3604=(sj5*sj6);
IkReal x3605=(cj0*r11);
IkReal x3606=((1.0)*cj5);
IkReal x3607=((0.02626)*cj3);
IkReal x3608=((1.0)*cj6);
IkReal x3609=(cj0*r10);
IkReal x3610=((1.0)*cj3);
IkReal x3611=((1.0)*sj0);
IkReal x3612=(cj0*r00);
IkReal x3613=((0.0718)*cj3);
IkReal x3614=((0.09746)*cj3);
IkReal x3615=((0.026255)*cj6);
IkReal x3616=((1.0)*r21);
IkReal x3617=((1.0)*cj0);
IkReal x3618=(sj3*x3596);
IkReal x3619=(cj2*x3596);
IkReal x3620=(sj3*x3597);
IkReal x3621=(cj6*r00*sj0);
IkReal x3622=(cj2*x3597);
IkReal x3623=(sj2*x3596);
IkReal x3624=(sj2*x3597);
evalcond[0]=((((-1.0)*sj6*x3616))+(((-1.0)*x3618))+((cj6*r20)));
evalcond[1]=(x3620+(((-1.0)*x3602*x3616))+(((-1.0)*r22*x3606))+(((-1.0)*r20*x3604)));
evalcond[2]=((0.0001)+(((-0.02626)*x3618))+(((-0.0718)*x3620))+pz+(((-1.0)*r21*x3599))+(((-0.09746)*sj3))+((r20*x3615)));
evalcond[3]=(x3621+x3624+(((-1.0)*x3608*x3609))+(((-1.0)*r01*sj6*x3611))+((cj3*x3619))+((sj6*x3605)));
evalcond[4]=((((-1.0)*x3610*x3623))+x3622+(((-1.0)*x3603*x3608))+(((-1.0)*x3608*x3612))+((sj6*x3600))+((sj6*x3598)));
evalcond[5]=(((cj5*r12*sj0))+((cj3*x3624))+((r02*x3601))+((x3598*x3602))+((x3600*x3602))+x3619+((x3603*x3604))+((x3604*x3612)));
evalcond[6]=(((x3604*x3609))+(((-1.0)*r02*sj0*x3606))+(((-1.0)*r01*x3602*x3611))+(((-1.0)*x3610*x3622))+x3623+(((-1.0)*r00*x3604*x3611))+((x3602*x3605))+((r12*x3601)));
evalcond[7]=((0.1255)+(((0.02626)*x3624))+(((0.1158)*cj2))+(((-1.0)*py*x3617))+(((-0.0718)*x3623))+((x3599*x3605))+((x3607*x3619))+(((-1.0)*x3609*x3615))+((cj2*x3614))+((r00*sj0*x3615))+((px*sj0))+(((-1.0)*r01*sj0*x3599))+((x3613*x3622))+(((0.0009)*sj2)));
evalcond[8]=((-0.001)+((x3598*x3599))+(((0.02626)*x3622))+(((-0.1158)*sj2))+(((-1.0)*x3613*x3624))+(((-1.0)*py*x3611))+(((-1.0)*x3612*x3615))+((x3599*x3600))+(((-1.0)*x3603*x3615))+(((0.0009)*cj2))+(((-0.0718)*x3619))+(((-1.0)*px*x3617))+(((-1.0)*sj2*x3614))+(((-1.0)*x3607*x3623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(sj3,-1);
if(!x3628.valid){
continue;
}
IkReal x3625=x3628.value;
IkReal x3626=(r21*sj6);
IkReal x3627=(cj6*r20);
if( IKabs((x3625*((x3627+(((-1.0)*x3626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000278551532033426)*x3625*(((5.0)+(((-0.25)*x3627))+(((50000.0)*pz))+(((-4873.0)*sj3))+(((0.25)*x3626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3625*((x3627+(((-1.0)*x3626))))))+IKsqr(((0.000278551532033426)*x3625*(((5.0)+(((-0.25)*x3627))+(((50000.0)*pz))+(((-4873.0)*sj3))+(((0.25)*x3626))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x3625*((x3627+(((-1.0)*x3626))))), ((0.000278551532033426)*x3625*(((5.0)+(((-0.25)*x3627))+(((50000.0)*pz))+(((-4873.0)*sj3))+(((0.25)*x3626))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3629=IKsin(j4);
IkReal x3630=IKcos(j4);
IkReal x3631=(r11*sj0);
IkReal x3632=((0.026255)*sj6);
IkReal x3633=(cj0*r01);
IkReal x3634=(cj0*cj5);
IkReal x3635=(cj6*sj5);
IkReal x3636=(r10*sj0);
IkReal x3637=(sj5*sj6);
IkReal x3638=(cj0*r11);
IkReal x3639=((1.0)*cj5);
IkReal x3640=((0.02626)*cj3);
IkReal x3641=((1.0)*cj6);
IkReal x3642=(cj0*r10);
IkReal x3643=((1.0)*cj3);
IkReal x3644=((1.0)*sj0);
IkReal x3645=(cj0*r00);
IkReal x3646=((0.0718)*cj3);
IkReal x3647=((0.09746)*cj3);
IkReal x3648=((0.026255)*cj6);
IkReal x3649=((1.0)*r21);
IkReal x3650=((1.0)*cj0);
IkReal x3651=(sj3*x3629);
IkReal x3652=(cj2*x3629);
IkReal x3653=(sj3*x3630);
IkReal x3654=(cj6*r00*sj0);
IkReal x3655=(cj2*x3630);
IkReal x3656=(sj2*x3629);
IkReal x3657=(sj2*x3630);
evalcond[0]=((((-1.0)*sj6*x3649))+(((-1.0)*x3651))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x3637))+(((-1.0)*x3635*x3649))+(((-1.0)*r22*x3639))+x3653);
evalcond[2]=((0.0001)+(((-0.02626)*x3651))+((r20*x3648))+pz+(((-0.09746)*sj3))+(((-1.0)*r21*x3632))+(((-0.0718)*x3653)));
evalcond[3]=(((cj3*x3652))+x3654+x3657+(((-1.0)*r01*sj6*x3644))+((sj6*x3638))+(((-1.0)*x3641*x3642)));
evalcond[4]=((((-1.0)*x3636*x3641))+x3655+(((-1.0)*x3643*x3656))+((sj6*x3631))+((sj6*x3633))+(((-1.0)*x3641*x3645)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x3634))+((x3636*x3637))+((cj3*x3657))+((x3637*x3645))+x3652+((x3631*x3635))+((x3633*x3635)));
evalcond[6]=(((r12*x3634))+((x3635*x3638))+((x3637*x3642))+(((-1.0)*r00*x3637*x3644))+x3656+(((-1.0)*x3643*x3655))+(((-1.0)*r01*x3635*x3644))+(((-1.0)*r02*sj0*x3639)));
evalcond[7]=((0.1255)+((cj2*x3647))+((x3646*x3655))+((x3640*x3652))+((r00*sj0*x3648))+(((0.1158)*cj2))+(((-1.0)*r01*sj0*x3632))+((x3632*x3638))+(((-1.0)*py*x3650))+(((0.02626)*x3657))+((px*sj0))+(((-1.0)*x3642*x3648))+(((0.0009)*sj2))+(((-0.0718)*x3656)));
evalcond[8]=((-0.001)+(((-1.0)*x3646*x3657))+(((-0.1158)*sj2))+(((-1.0)*x3640*x3656))+(((-1.0)*py*x3644))+((x3632*x3633))+(((-1.0)*x3645*x3648))+(((-1.0)*x3636*x3648))+(((0.0009)*cj2))+((x3631*x3632))+(((-1.0)*sj2*x3647))+(((0.02626)*x3655))+(((-1.0)*px*x3650))+(((-0.0718)*x3652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3658.valid){
continue;
}
CheckValue<IkReal> x3659 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3658.value)))+(x3659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3660=IKsin(j4);
IkReal x3661=IKcos(j4);
IkReal x3662=(r11*sj0);
IkReal x3663=((0.026255)*sj6);
IkReal x3664=(cj0*r01);
IkReal x3665=(cj0*cj5);
IkReal x3666=(cj6*sj5);
IkReal x3667=(r10*sj0);
IkReal x3668=(sj5*sj6);
IkReal x3669=(cj0*r11);
IkReal x3670=((1.0)*cj5);
IkReal x3671=((0.02626)*cj3);
IkReal x3672=((1.0)*cj6);
IkReal x3673=(cj0*r10);
IkReal x3674=((1.0)*cj3);
IkReal x3675=((1.0)*sj0);
IkReal x3676=(cj0*r00);
IkReal x3677=((0.0718)*cj3);
IkReal x3678=((0.09746)*cj3);
IkReal x3679=((0.026255)*cj6);
IkReal x3680=((1.0)*r21);
IkReal x3681=((1.0)*cj0);
IkReal x3682=(sj3*x3660);
IkReal x3683=(cj2*x3660);
IkReal x3684=(sj3*x3661);
IkReal x3685=(cj6*r00*sj0);
IkReal x3686=(cj2*x3661);
IkReal x3687=(sj2*x3660);
IkReal x3688=(sj2*x3661);
evalcond[0]=((((-1.0)*sj6*x3680))+((cj6*r20))+(((-1.0)*x3682)));
evalcond[1]=((((-1.0)*x3666*x3680))+x3684+(((-1.0)*r22*x3670))+(((-1.0)*r20*x3668)));
evalcond[2]=((0.0001)+((r20*x3679))+(((-0.0718)*x3684))+(((-0.02626)*x3682))+(((-1.0)*r21*x3663))+pz+(((-0.09746)*sj3)));
evalcond[3]=(((sj6*x3669))+((cj3*x3683))+(((-1.0)*x3672*x3673))+x3688+x3685+(((-1.0)*r01*sj6*x3675)));
evalcond[4]=(((sj6*x3664))+((sj6*x3662))+(((-1.0)*x3672*x3676))+x3686+(((-1.0)*x3674*x3687))+(((-1.0)*x3667*x3672)));
evalcond[5]=(((cj5*r12*sj0))+((x3662*x3666))+((cj3*x3688))+((x3667*x3668))+((x3664*x3666))+((x3668*x3676))+x3683+((r02*x3665)));
evalcond[6]=((((-1.0)*r00*x3668*x3675))+(((-1.0)*r02*sj0*x3670))+((r12*x3665))+((x3668*x3673))+x3687+(((-1.0)*x3674*x3686))+(((-1.0)*r01*x3666*x3675))+((x3666*x3669)));
evalcond[7]=((0.1255)+((cj2*x3678))+((r00*sj0*x3679))+(((0.1158)*cj2))+((x3671*x3683))+(((-1.0)*x3673*x3679))+(((-0.0718)*x3687))+(((0.02626)*x3688))+(((-1.0)*py*x3681))+((px*sj0))+((x3663*x3669))+((x3677*x3686))+(((0.0009)*sj2))+(((-1.0)*r01*sj0*x3663)));
evalcond[8]=((-0.001)+(((-1.0)*x3676*x3679))+((x3662*x3663))+(((-0.1158)*sj2))+(((-1.0)*py*x3675))+(((-1.0)*x3671*x3687))+(((-0.0718)*x3683))+(((0.02626)*x3686))+(((-1.0)*px*x3681))+(((-1.0)*x3677*x3688))+(((0.0009)*cj2))+(((-1.0)*x3667*x3679))+(((-1.0)*sj2*x3678))+((x3663*x3664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3689=((1.0)*cj5);
IkReal x3690=(cj0*cj5);
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(cj2,-1);
if(!x3691.valid){
continue;
}
if( IKabs(((x3691.value)*((((r02*sj0*sj5))+((cj6*r11*x3690))+(((-1.0)*cj6*r01*sj0*x3689))+((r10*sj6*x3690))+(((-1.0)*r00*sj0*sj6*x3689))+(((-1.0)*cj0*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj5))+(((-1.0)*r20*sj6*x3689))+(((-1.0)*cj6*r21*x3689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3691.value)*((((r02*sj0*sj5))+((cj6*r11*x3690))+(((-1.0)*cj6*r01*sj0*x3689))+((r10*sj6*x3690))+(((-1.0)*r00*sj0*sj6*x3689))+(((-1.0)*cj0*r12*sj5))))))+IKsqr((((r22*sj5))+(((-1.0)*r20*sj6*x3689))+(((-1.0)*cj6*r21*x3689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x3691.value)*((((r02*sj0*sj5))+((cj6*r11*x3690))+(((-1.0)*cj6*r01*sj0*x3689))+((r10*sj6*x3690))+(((-1.0)*r00*sj0*sj6*x3689))+(((-1.0)*cj0*r12*sj5))))), (((r22*sj5))+(((-1.0)*r20*sj6*x3689))+(((-1.0)*cj6*r21*x3689))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x3692=IKsin(j3);
IkReal x3693=(cj5*cj6);
IkReal x3694=((1.0)*sj5);
IkReal x3695=((1.0)*cj0);
IkReal x3696=(cj0*sj5);
IkReal x3697=(cj5*sj6);
IkReal x3698=(r10*x3697);
IkReal x3699=((1.0)*r11*x3693);
evalcond[0]=(((r20*x3697))+(((-1.0)*r22*x3694))+((r21*x3693))+(IKcos(j3)));
evalcond[1]=((((-1.0)*r02*sj0*x3694))+((cj2*x3692))+((r01*sj0*x3693))+(((-1.0)*x3695*x3698))+(((-1.0)*r11*x3693*x3695))+((r12*x3696))+((r00*sj0*x3697)));
evalcond[2]=(((r02*x3696))+((r12*sj0*sj5))+(((-1.0)*sj0*x3699))+(((-1.0)*r00*x3695*x3697))+(((-1.0)*sj2*x3692))+(((-1.0)*sj0*x3698))+(((-1.0)*r01*x3693*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3700=(cj5*cj6);
IkReal x3701=((1.0)*sj0);
IkReal x3702=((1.0)*r22);
IkReal x3703=(cj0*sj5);
IkReal x3704=(cj5*sj6);
IkReal x3705=((1.0)*cj0);
IkReal x3706=(cj6*r20);
IkReal x3707=((1.0)*sj5);
IkReal x3708=(r21*sj6);
IkReal x3709=(x3704*x3705);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x3704))+((r21*x3700))+(((-1.0)*sj5*x3702)));
evalcond[2]=(x3706+(((-1.0)*x3708)));
evalcond[3]=((((-1.0)*r20*sj6*x3707))+(((-1.0)*cj5*x3702))+(((-1.0)*cj6*r21*x3707)));
evalcond[4]=((((-1.0)*r10*x3701*x3704))+(((-1.0)*r00*x3709))+((r12*sj0*sj5))+(((-1.0)*r11*x3700*x3701))+((r02*x3703))+(((-1.0)*r01*x3700*x3705)));
evalcond[5]=(((r12*x3703))+(((-1.0)*r02*sj5*x3701))+(((-1.0)*r10*x3709))+(((-1.0)*r11*x3700*x3705))+((r00*sj0*x3704))+((r01*sj0*x3700)));
evalcond[6]=((0.0001)+pz+(((-0.026255)*x3708))+(((0.026255)*x3706)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3710=(cj0*sj6);
IkReal x3711=(r01*sj2);
IkReal x3712=(sj0*sj2);
IkReal x3713=((1.0)*cj6);
IkReal x3714=(sj0*sj6);
IkReal x3715=(cj0*sj2);
IkReal x3716=(cj6*r10);
IkReal x3717=(cj2*sj0);
IkReal x3718=(cj2*r01);
IkReal x3719=(cj0*cj2);
IkReal x3720=((1.0)*cj2*r11);
if( IKabs((((x3710*x3711))+(((-1.0)*r00*x3713*x3717))+(((-1.0)*r00*x3713*x3715))+((x3714*x3718))+((r11*sj6*x3712))+(((-1.0)*x3710*x3720))+((x3716*x3719))+(((-1.0)*r10*x3712*x3713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj2*x3710))+((x3711*x3714))+(((-1.0)*x3710*x3718))+((cj6*r00*x3719))+((x3716*x3717))+(((-1.0)*r00*x3712*x3713))+(((-1.0)*x3714*x3720))+((x3715*x3716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3710*x3711))+(((-1.0)*r00*x3713*x3717))+(((-1.0)*r00*x3713*x3715))+((x3714*x3718))+((r11*sj6*x3712))+(((-1.0)*x3710*x3720))+((x3716*x3719))+(((-1.0)*r10*x3712*x3713))))+IKsqr(((((-1.0)*r11*sj2*x3710))+((x3711*x3714))+(((-1.0)*x3710*x3718))+((cj6*r00*x3719))+((x3716*x3717))+(((-1.0)*r00*x3712*x3713))+(((-1.0)*x3714*x3720))+((x3715*x3716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x3710*x3711))+(((-1.0)*r00*x3713*x3717))+(((-1.0)*r00*x3713*x3715))+((x3714*x3718))+((r11*sj6*x3712))+(((-1.0)*x3710*x3720))+((x3716*x3719))+(((-1.0)*r10*x3712*x3713))), ((((-1.0)*r11*sj2*x3710))+((x3711*x3714))+(((-1.0)*x3710*x3718))+((cj6*r00*x3719))+((x3716*x3717))+(((-1.0)*r00*x3712*x3713))+(((-1.0)*x3714*x3720))+((x3715*x3716))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3721=IKcos(j4);
IkReal x3722=IKsin(j4);
IkReal x3723=(r11*sj6);
IkReal x3724=((0.026255)*cj0);
IkReal x3725=(r01*sj6);
IkReal x3726=(sj0*sj5);
IkReal x3727=(cj6*r11);
IkReal x3728=(r10*sj6);
IkReal x3729=((0.026255)*sj0);
IkReal x3730=(cj5*r12);
IkReal x3731=(cj6*r00);
IkReal x3732=((1.0)*sj0);
IkReal x3733=(cj5*r02);
IkReal x3734=(cj6*r10);
IkReal x3735=(cj0*sj5);
IkReal x3736=(r00*sj6);
IkReal x3737=((1.0)*cj0);
IkReal x3738=(cj6*r01);
IkReal x3739=(sj2*x3721);
IkReal x3740=(cj2*x3722);
IkReal x3741=(sj2*x3722);
IkReal x3742=((0.0718)*x3721);
IkReal x3743=(cj2*x3721);
IkReal x3744=(x3740+x3739);
evalcond[0]=((((-1.0)*x3725*x3732))+((sj0*x3731))+((cj0*x3723))+x3744+(((-1.0)*x3734*x3737)));
evalcond[1]=(((sj0*x3723))+((cj0*x3725))+x3743+(((-1.0)*x3741))+(((-1.0)*x3731*x3737))+(((-1.0)*x3732*x3734)));
evalcond[2]=(((x3735*x3738))+((x3735*x3736))+((sj0*x3730))+((x3726*x3728))+((x3726*x3727))+((cj0*x3733))+x3744);
evalcond[3]=(((x3727*x3735))+(((-1.0)*x3726*x3738))+(((-1.0)*x3726*x3736))+((cj0*x3730))+x3741+(((-1.0)*x3743))+(((-1.0)*x3732*x3733))+((x3728*x3735)));
evalcond[4]=((0.1255)+(((-0.0718)*x3741))+(((0.02626)*x3740))+((cj2*x3742))+((x3729*x3731))+(((-1.0)*x3725*x3729))+(((-1.0)*x3724*x3734))+((x3723*x3724))+(((-1.0)*py*x3737))+((px*sj0))+(((0.21326)*cj2))+(((0.0009)*sj2))+(((0.02626)*x3739)));
evalcond[5]=((-0.001)+(((-0.0718)*x3740))+(((0.02626)*x3743))+(((-1.0)*px*x3737))+(((-1.0)*x3724*x3731))+((x3724*x3725))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*x3729*x3734))+((x3723*x3729))+(((-1.0)*py*x3732))+(((-0.02626)*x3741))+(((-0.0718)*x3739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3745=(cj5*cj6);
IkReal x3746=((1.0)*sj0);
IkReal x3747=((1.0)*r22);
IkReal x3748=(cj0*sj5);
IkReal x3749=(cj5*sj6);
IkReal x3750=((1.0)*cj0);
IkReal x3751=(cj6*r20);
IkReal x3752=((1.0)*sj5);
IkReal x3753=(r21*sj6);
IkReal x3754=(x3749*x3750);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x3749))+(((-1.0)*sj5*x3747))+((r21*x3745)));
evalcond[2]=(x3751+(((-1.0)*x3753)));
evalcond[3]=((((-1.0)*r20*sj6*x3752))+(((-1.0)*cj5*x3747))+(((-1.0)*cj6*r21*x3752)));
evalcond[4]=((((-1.0)*r00*x3754))+(((-1.0)*r11*x3745*x3746))+(((-1.0)*r01*x3745*x3750))+(((-1.0)*r10*x3746*x3749))+((r12*sj0*sj5))+((r02*x3748)));
evalcond[5]=((((-1.0)*r11*x3745*x3750))+((r00*sj0*x3749))+((r12*x3748))+(((-1.0)*r02*sj5*x3746))+(((-1.0)*r10*x3754))+((r01*sj0*x3745)));
evalcond[6]=((0.0001)+(((0.026255)*x3751))+pz+(((-0.026255)*x3753)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3755=(cj6*r10);
IkReal x3756=(r11*sj0);
IkReal x3757=(r01*sj6);
IkReal x3758=((1.0)*sj0);
IkReal x3759=(cj2*sj6);
IkReal x3760=(cj0*r11);
IkReal x3761=(cj2*sj0);
IkReal x3762=(cj6*r00);
IkReal x3763=(sj0*sj2);
IkReal x3764=((1.0)*cj0*cj2);
IkReal x3765=((1.0)*sj2*sj6);
IkReal x3766=(sj2*x3762);
if( IKabs((((cj0*x3766))+(((-1.0)*x3755*x3764))+(((-1.0)*cj2*x3757*x3758))+((x3761*x3762))+((x3759*x3760))+(((-1.0)*cj0*sj2*x3757))+(((-1.0)*x3756*x3765))+((x3755*x3763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3757*x3764))+(((-1.0)*x3756*x3759))+((cj0*cj2*x3762))+((cj0*sj2*x3755))+(((-1.0)*x3760*x3765))+((x3757*x3763))+((x3755*x3761))+(((-1.0)*x3758*x3766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x3766))+(((-1.0)*x3755*x3764))+(((-1.0)*cj2*x3757*x3758))+((x3761*x3762))+((x3759*x3760))+(((-1.0)*cj0*sj2*x3757))+(((-1.0)*x3756*x3765))+((x3755*x3763))))+IKsqr(((((-1.0)*x3757*x3764))+(((-1.0)*x3756*x3759))+((cj0*cj2*x3762))+((cj0*sj2*x3755))+(((-1.0)*x3760*x3765))+((x3757*x3763))+((x3755*x3761))+(((-1.0)*x3758*x3766))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x3766))+(((-1.0)*x3755*x3764))+(((-1.0)*cj2*x3757*x3758))+((x3761*x3762))+((x3759*x3760))+(((-1.0)*cj0*sj2*x3757))+(((-1.0)*x3756*x3765))+((x3755*x3763))), ((((-1.0)*x3757*x3764))+(((-1.0)*x3756*x3759))+((cj0*cj2*x3762))+((cj0*sj2*x3755))+(((-1.0)*x3760*x3765))+((x3757*x3763))+((x3755*x3761))+(((-1.0)*x3758*x3766))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3767=IKcos(j4);
IkReal x3768=IKsin(j4);
IkReal x3769=(r11*sj6);
IkReal x3770=((0.026255)*cj0);
IkReal x3771=(r01*sj6);
IkReal x3772=(sj0*sj5);
IkReal x3773=(cj6*r11);
IkReal x3774=(r10*sj6);
IkReal x3775=(cj5*r12);
IkReal x3776=(cj6*sj0);
IkReal x3777=((1.0)*sj0);
IkReal x3778=(cj5*r02);
IkReal x3779=((1.0)*r10);
IkReal x3780=(cj0*sj5);
IkReal x3781=(r00*sj6);
IkReal x3782=((0.026255)*sj0);
IkReal x3783=(cj0*cj6);
IkReal x3784=((1.0)*cj0);
IkReal x3785=(cj6*r01);
IkReal x3786=(cj2*x3767);
IkReal x3787=(sj2*x3768);
IkReal x3788=((0.02626)*x3768);
IkReal x3789=(cj2*x3768);
IkReal x3790=((0.0718)*x3767);
IkReal x3791=(sj2*x3767);
IkReal x3792=(x3786+x3787);
evalcond[0]=(((cj0*x3771))+(((-1.0)*r00*x3783))+x3792+((sj0*x3769))+(((-1.0)*x3776*x3779)));
evalcond[1]=((((-1.0)*x3779*x3783))+((cj0*x3769))+(((-1.0)*x3789))+x3791+(((-1.0)*x3771*x3777))+((r00*x3776)));
evalcond[2]=(((cj0*x3778))+(((-1.0)*x3791))+x3789+((sj0*x3775))+((x3772*x3774))+((x3772*x3773))+((x3780*x3785))+((x3780*x3781)));
evalcond[3]=(((cj0*x3775))+(((-1.0)*x3777*x3778))+((x3774*x3780))+((x3773*x3780))+x3792+(((-1.0)*x3772*x3781))+(((-1.0)*x3772*x3785)));
evalcond[4]=((0.1255)+((x3769*x3770))+(((-1.0)*x3771*x3782))+(((-1.0)*py*x3784))+(((-1.0)*cj2*x3788))+(((-0.0718)*x3787))+(((-0.0718)*x3786))+(((0.01834)*cj2))+((px*sj0))+(((0.026255)*r00*x3776))+(((0.0009)*sj2))+(((0.02626)*x3791))+(((-1.0)*cj6*r10*x3770)));
evalcond[5]=((-0.001)+(((-0.01834)*sj2))+(((0.02626)*x3787))+(((0.02626)*x3786))+((sj2*x3790))+(((-0.026255)*r10*x3776))+(((0.0009)*cj2))+((x3770*x3771))+(((-0.0718)*x3789))+(((-1.0)*px*x3784))+(((-1.0)*cj6*r00*x3770))+((x3769*x3782))+(((-1.0)*py*x3777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3793=(cj0*sj5);
IkReal x3794=(cj5*cj6);
IkReal x3795=((1.0)*sj5);
IkReal x3796=((1.0)*cj0);
IkReal x3797=((1.0)*sj0);
IkReal x3798=(cj5*sj6);
IkReal x3799=(r10*x3798);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r21*x3794))+cj3+(((-1.0)*r22*x3795))+((r20*x3798)));
evalcond[2]=((((-1.0)*x3797*x3799))+(((-1.0)*r00*x3796*x3798))+((r02*x3793))+(((-1.0)*r01*x3794*x3796))+((r12*sj0*sj5))+(((-1.0)*r11*x3794*x3797)));
evalcond[3]=(((r00*sj0*x3798))+(((-1.0)*x3796*x3799))+sj3+((r01*sj0*x3794))+(((-1.0)*r11*x3794*x3796))+(((-1.0)*r02*sj0*x3795))+((r12*x3793)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3800=(cj5*cj6);
IkReal x3801=(cj0*sj6);
IkReal x3802=(r01*sj0);
IkReal x3803=((1.0)*sj0);
IkReal x3804=((1.0)*cj5);
IkReal x3805=(cj0*r12);
IkReal x3806=(r02*sj5);
IkReal x3807=((1.0)*sj5);
IkReal x3808=(cj5*sj6);
IkReal x3809=((1.0)*cj0);
IkReal x3810=(cj6*r10);
IkReal x3811=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x3800))+((r20*x3808))+(((-1.0)*r22*x3807)));
evalcond[2]=(((r11*x3801))+(((-1.0)*sj6*x3802))+(((-1.0)*x3809*x3810))+x3811);
evalcond[3]=((((-1.0)*r00*x3801*x3804))+(((-1.0)*r10*x3803*x3808))+(((-1.0)*r11*x3800*x3803))+((r12*sj0*sj5))+((cj0*x3806))+(((-1.0)*r01*x3800*x3809)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3801*x3804))+((x3800*x3802))+(((-1.0)*r11*x3800*x3809))+((r00*sj0*x3808))+((sj5*x3805))+(((-1.0)*x3803*x3806)));
evalcond[5]=((((-1.0)*cj6*x3802*x3807))+((cj5*x3805))+(((-1.0)*cj5*r02*x3803))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x3803))+((r10*sj5*x3801)));
evalcond[6]=((0.2413)+(((0.026255)*r11*x3801))+(((-0.026255)*cj0*x3810))+(((-1.0)*py*x3809))+(((-0.026255)*sj6*x3802))+((px*sj0))+(((0.026255)*x3811)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKcos(j4);
IkReal x3813=IKsin(j4);
IkReal x3814=(r11*sj0);
IkReal x3815=(cj0*sj6);
IkReal x3816=(cj6*sj5);
IkReal x3817=(r10*sj0);
IkReal x3818=(sj5*sj6);
IkReal x3819=((1.0)*cj6);
IkReal x3820=((0.026255)*sj6);
IkReal x3821=((0.026255)*cj6);
IkReal x3822=(cj0*r00);
IkReal x3823=((1.0)*r21);
evalcond[0]=((((-1.0)*sj6*x3823))+(((-1.0)*x3813))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x3818))+x3812+(((-1.0)*cj5*r22))+(((-1.0)*x3816*x3823)));
evalcond[2]=((-0.09736)+(((-1.0)*r21*x3820))+(((-0.02626)*x3813))+pz+(((-0.0718)*x3812))+((r20*x3821)));
evalcond[3]=((((-1.0)*x3817*x3819))+x3812+((sj6*x3814))+(((-1.0)*x3819*x3822))+((r01*x3815)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x3816))+((r00*sj5*x3815))+((x3817*x3818))+x3813+((x3814*x3816)));
evalcond[5]=((-0.0001)+(((-1.0)*x3817*x3821))+(((0.02626)*x3812))+(((-1.0)*x3821*x3822))+(((-1.0)*py*sj0))+((x3814*x3820))+(((-0.0718)*x3813))+(((-1.0)*cj0*px))+(((0.026255)*r01*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3824=(cj5*cj6);
IkReal x3825=(cj0*sj6);
IkReal x3826=(r01*sj0);
IkReal x3827=((1.0)*sj0);
IkReal x3828=((1.0)*cj5);
IkReal x3829=(cj0*r12);
IkReal x3830=(r02*sj5);
IkReal x3831=((1.0)*sj5);
IkReal x3832=(cj5*sj6);
IkReal x3833=((1.0)*cj0);
IkReal x3834=(cj6*r10);
IkReal x3835=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x3832))+(((-1.0)*r22*x3831))+((r21*x3824)));
evalcond[2]=((((-1.0)*x3833*x3834))+((r11*x3825))+(((-1.0)*sj6*x3826))+x3835);
evalcond[3]=((((-1.0)*r01*x3824*x3833))+(((-1.0)*r00*x3825*x3828))+((cj0*x3830))+((r12*sj0*sj5))+(((-1.0)*r10*x3827*x3832))+(((-1.0)*r11*x3824*x3827)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3825*x3828))+((sj5*x3829))+(((-1.0)*r11*x3824*x3833))+((x3824*x3826))+(((-1.0)*x3827*x3830))+((r00*sj0*x3832)));
evalcond[5]=((((-1.0)*cj5*r02*x3827))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x3826*x3831))+((cj5*x3829))+((r10*sj5*x3825))+(((-1.0)*r00*sj5*sj6*x3827)));
evalcond[6]=((0.2413)+(((-1.0)*py*x3833))+(((0.026255)*r11*x3825))+(((0.026255)*x3835))+(((-0.026255)*cj0*x3834))+((px*sj0))+(((-0.026255)*sj6*x3826)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3836=(cj6*r20);
IkReal x3837=(r21*sj6);
if( IKabs(((((-1.0)*x3836))+x3837)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3837))+(((6.96378830083565e-5)*x3836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3836))+x3837))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3837))+(((6.96378830083565e-5)*x3836))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x3836))+x3837), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x3837))+(((6.96378830083565e-5)*x3836))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3838=IKcos(j4);
IkReal x3839=IKsin(j4);
IkReal x3840=(r11*sj0);
IkReal x3841=(cj0*sj6);
IkReal x3842=(cj6*sj5);
IkReal x3843=(r10*sj0);
IkReal x3844=(sj5*sj6);
IkReal x3845=((1.0)*cj6);
IkReal x3846=((0.026255)*sj6);
IkReal x3847=((0.026255)*cj6);
IkReal x3848=(cj0*r00);
IkReal x3849=((1.0)*r21);
evalcond[0]=(x3839+((cj6*r20))+(((-1.0)*sj6*x3849)));
evalcond[1]=((((-1.0)*x3838))+(((-1.0)*x3842*x3849))+(((-1.0)*r20*x3844))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09756)+(((-1.0)*r21*x3846))+((r20*x3847))+pz+(((0.02626)*x3839))+(((0.0718)*x3838)));
evalcond[3]=((((-1.0)*x3845*x3848))+(((-1.0)*x3843*x3845))+x3838+((r01*x3841))+((sj6*x3840)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x3843*x3844))+x3839+((x3840*x3842))+((cj0*r01*x3842))+((r00*sj5*x3841)));
evalcond[5]=((-0.0001)+(((-0.0718)*x3839))+(((-1.0)*x3843*x3847))+(((0.026255)*r01*x3841))+((x3840*x3846))+(((-1.0)*py*sj0))+(((0.02626)*x3838))+(((-1.0)*cj0*px))+(((-1.0)*x3847*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3850=(cj5*cj6);
IkReal x3851=((1.0)*sj0);
IkReal x3852=((1.0)*r22);
IkReal x3853=(cj0*sj5);
IkReal x3854=(cj5*sj6);
IkReal x3855=((1.0)*cj0);
IkReal x3856=(cj6*r20);
IkReal x3857=((1.0)*sj5);
IkReal x3858=(r21*sj6);
IkReal x3859=(x3854*x3855);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x3850))+(((-1.0)*sj5*x3852))+((r20*x3854)));
evalcond[2]=((((-1.0)*x3858))+x3856);
evalcond[3]=((((-1.0)*cj5*x3852))+(((-1.0)*r20*sj6*x3857))+(((-1.0)*cj6*r21*x3857)));
evalcond[4]=(((r02*x3853))+(((-1.0)*r10*x3851*x3854))+((r12*sj0*sj5))+(((-1.0)*r00*x3859))+(((-1.0)*r11*x3850*x3851))+(((-1.0)*r01*x3850*x3855)));
evalcond[5]=(((r01*sj0*x3850))+(((-1.0)*r10*x3859))+(((-1.0)*r11*x3850*x3855))+(((-1.0)*r02*sj5*x3851))+((r12*x3853))+((r00*sj0*x3854)));
evalcond[6]=((0.0001)+(((0.026255)*x3856))+(((-0.026255)*x3858))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3860=(cj0*cj6);
IkReal x3861=(sj0*sj6);
IkReal x3862=((1.0)*r11);
IkReal x3863=(cj6*sj0);
IkReal x3864=(cj0*sj6);
if( IKabs((((r10*x3860))+((r01*x3861))+(((-1.0)*x3862*x3864))+(((-1.0)*r00*x3863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3864))+(((-1.0)*x3861*x3862))+((r00*x3860))+((r10*x3863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3860))+((r01*x3861))+(((-1.0)*x3862*x3864))+(((-1.0)*r00*x3863))))+IKsqr(((((-1.0)*r01*x3864))+(((-1.0)*x3861*x3862))+((r00*x3860))+((r10*x3863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x3860))+((r01*x3861))+(((-1.0)*x3862*x3864))+(((-1.0)*r00*x3863))), ((((-1.0)*r01*x3864))+(((-1.0)*x3861*x3862))+((r00*x3860))+((r10*x3863))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKsin(j4);
IkReal x3866=IKcos(j4);
IkReal x3867=(r11*sj6);
IkReal x3868=((0.026255)*cj0);
IkReal x3869=(r01*sj6);
IkReal x3870=(sj0*sj5);
IkReal x3871=(cj6*r11);
IkReal x3872=(r10*sj6);
IkReal x3873=(cj5*r12);
IkReal x3874=(cj6*sj0);
IkReal x3875=((1.0)*sj0);
IkReal x3876=(cj5*r02);
IkReal x3877=((1.0)*r10);
IkReal x3878=(cj0*sj5);
IkReal x3879=(r00*sj6);
IkReal x3880=((0.026255)*sj0);
IkReal x3881=(cj0*cj6);
IkReal x3882=((1.0)*cj0);
IkReal x3883=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x3881))+(((-1.0)*x3874*x3877))+x3866+((cj0*x3869))+((sj0*x3867)));
evalcond[1]=(((r00*x3874))+(((-1.0)*x3877*x3881))+x3865+(((-1.0)*x3869*x3875))+((cj0*x3867)));
evalcond[2]=(((x3878*x3883))+((x3870*x3871))+((x3870*x3872))+((sj0*x3873))+x3865+((x3878*x3879))+((cj0*x3876)));
evalcond[3]=((((-1.0)*x3870*x3879))+((x3871*x3878))+(((-1.0)*x3866))+((x3872*x3878))+(((-1.0)*x3875*x3876))+(((-1.0)*x3870*x3883))+((cj0*x3873)));
evalcond[4]=((0.33876)+(((-1.0)*x3869*x3880))+((x3867*x3868))+(((0.026255)*r00*x3874))+(((0.0718)*x3866))+(((0.02626)*x3865))+(((-1.0)*py*x3882))+((px*sj0))+(((-1.0)*cj6*r10*x3868)));
evalcond[5]=((-0.0001)+(((-1.0)*py*x3875))+((x3868*x3869))+(((0.02626)*x3866))+(((-0.0718)*x3865))+(((-0.026255)*r10*x3874))+((x3867*x3880))+(((-1.0)*cj6*r00*x3868))+(((-1.0)*px*x3882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3884=(cj5*cj6);
IkReal x3885=((1.0)*sj0);
IkReal x3886=((1.0)*r22);
IkReal x3887=(cj0*sj5);
IkReal x3888=(cj5*sj6);
IkReal x3889=((1.0)*cj0);
IkReal x3890=(cj6*r20);
IkReal x3891=((1.0)*sj5);
IkReal x3892=(r21*sj6);
IkReal x3893=(x3888*x3889);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x3884))+((r20*x3888))+(((-1.0)*sj5*x3886)));
evalcond[2]=((((-1.0)*x3892))+x3890);
evalcond[3]=((((-1.0)*cj6*r21*x3891))+(((-1.0)*r20*sj6*x3891))+(((-1.0)*cj5*x3886)));
evalcond[4]=((((-1.0)*r11*x3884*x3885))+(((-1.0)*r01*x3884*x3889))+(((-1.0)*r10*x3885*x3888))+((r12*sj0*sj5))+((r02*x3887))+(((-1.0)*r00*x3893)));
evalcond[5]=((((-1.0)*r11*x3884*x3889))+((r00*sj0*x3888))+(((-1.0)*r10*x3893))+((r12*x3887))+(((-1.0)*r02*sj5*x3885))+((r01*sj0*x3884)));
evalcond[6]=((0.0001)+(((-0.026255)*x3892))+(((0.026255)*x3890))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3894=(cj0*cj6);
IkReal x3895=(cj6*sj0);
IkReal x3896=(cj0*sj6);
IkReal x3897=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r10*x3894))+((r00*x3895))+((r11*x3896))+(((-1.0)*r01*x3897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3895))+(((-1.0)*r11*x3897))+((r00*x3894))+(((-1.0)*r01*x3896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3894))+((r00*x3895))+((r11*x3896))+(((-1.0)*r01*x3897))))+IKsqr((((r10*x3895))+(((-1.0)*r11*x3897))+((r00*x3894))+(((-1.0)*r01*x3896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x3894))+((r00*x3895))+((r11*x3896))+(((-1.0)*r01*x3897))), (((r10*x3895))+(((-1.0)*r11*x3897))+((r00*x3894))+(((-1.0)*r01*x3896))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3898=IKsin(j4);
IkReal x3899=IKcos(j4);
IkReal x3900=(r11*sj6);
IkReal x3901=((0.026255)*cj0);
IkReal x3902=(r01*sj6);
IkReal x3903=(sj0*sj5);
IkReal x3904=(cj6*r11);
IkReal x3905=(r10*sj6);
IkReal x3906=(cj5*r12);
IkReal x3907=(cj6*sj0);
IkReal x3908=((1.0)*sj0);
IkReal x3909=(cj5*r02);
IkReal x3910=((1.0)*r10);
IkReal x3911=(cj0*sj5);
IkReal x3912=(r00*sj6);
IkReal x3913=((0.026255)*sj0);
IkReal x3914=(cj0*cj6);
IkReal x3915=((1.0)*cj0);
IkReal x3916=(cj6*r01);
evalcond[0]=(((sj0*x3900))+(((-1.0)*x3907*x3910))+(((-1.0)*r00*x3914))+((cj0*x3902))+x3899);
evalcond[1]=((((-1.0)*x3898))+(((-1.0)*x3902*x3908))+(((-1.0)*x3910*x3914))+((cj0*x3900))+((r00*x3907)));
evalcond[2]=(((sj0*x3906))+((x3903*x3905))+((x3903*x3904))+((cj0*x3909))+((x3911*x3912))+((x3911*x3916))+x3898);
evalcond[3]=(((x3904*x3911))+((x3905*x3911))+(((-1.0)*x3908*x3909))+((cj0*x3906))+x3899+(((-1.0)*x3903*x3912))+(((-1.0)*x3903*x3916)));
evalcond[4]=((0.14384)+((x3900*x3901))+(((-1.0)*x3902*x3913))+(((-0.0718)*x3899))+(((0.026255)*r00*x3907))+(((-0.02626)*x3898))+(((-1.0)*py*x3915))+((px*sj0))+(((-1.0)*cj6*r10*x3901)));
evalcond[5]=((-0.0001)+((x3901*x3902))+(((-0.0718)*x3898))+(((-1.0)*px*x3915))+(((-0.026255)*r10*x3907))+(((-1.0)*py*x3908))+(((0.02626)*x3899))+(((-1.0)*cj6*r00*x3901))+((x3900*x3913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(cj3,-1);
if(!x3917.valid){
continue;
}
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(sj3,-1);
if(!x3918.valid){
continue;
}
if( IKabs(((x3917.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3918.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3917.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x3918.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3917.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x3918.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3919=IKcos(j4);
IkReal x3920=IKsin(j4);
IkReal x3921=(r11*sj0);
IkReal x3922=((0.026255)*sj6);
IkReal x3923=(cj0*r01);
IkReal x3924=(cj5*r12);
IkReal x3925=(cj6*sj5);
IkReal x3926=(r10*sj0);
IkReal x3927=(sj5*sj6);
IkReal x3928=(cj0*r11);
IkReal x3929=((1.0)*cj5);
IkReal x3930=((1.0)*cj6);
IkReal x3931=(cj0*r10);
IkReal x3932=((1.0)*sj0);
IkReal x3933=(cj0*r00);
IkReal x3934=((0.026255)*cj6);
IkReal x3935=((1.0)*r21);
IkReal x3936=((1.0)*cj0);
IkReal x3937=(sj3*x3920);
IkReal x3938=(sj3*x3919);
IkReal x3939=(r00*x3934);
IkReal x3940=(cj3*x3920);
IkReal x3941=(cj3*x3919);
evalcond[0]=((((-1.0)*x3937))+(((-1.0)*sj6*x3935))+((cj6*r20)));
evalcond[1]=(x3938+(((-1.0)*r22*x3929))+(((-1.0)*x3925*x3935))+(((-1.0)*r20*x3927)));
evalcond[2]=(((sj6*x3923))+((sj6*x3921))+(((-1.0)*x3926*x3930))+x3919+(((-1.0)*x3930*x3933)));
evalcond[3]=(((cj6*r00*sj0))+((sj6*x3928))+x3940+(((-1.0)*x3930*x3931))+(((-1.0)*r01*sj6*x3932)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x3922))+((r20*x3934))+(((-0.0718)*x3938))+pz+(((-0.09746)*sj3))+(((-0.02626)*x3937)));
evalcond[5]=(((x3921*x3925))+((cj0*cj5*r02))+x3920+((sj0*x3924))+((x3927*x3933))+((x3923*x3925))+((x3926*x3927)));
evalcond[6]=(((cj0*x3924))+(((-1.0)*x3941))+((x3927*x3931))+((x3925*x3928))+(((-1.0)*r00*x3927*x3932))+(((-1.0)*r02*sj0*x3929))+(((-1.0)*r01*x3925*x3932)));
evalcond[7]=((-0.0001)+((x3921*x3922))+(((-1.0)*px*x3936))+(((-1.0)*x3933*x3934))+(((-1.0)*x3926*x3934))+(((-0.0718)*x3920))+(((0.02626)*x3919))+(((-1.0)*py*x3932))+((x3922*x3923)));
evalcond[8]=((0.2413)+(((-1.0)*r01*sj0*x3922))+((sj0*x3939))+(((0.0718)*x3941))+(((-1.0)*x3931*x3934))+(((0.02626)*x3940))+((px*sj0))+(((0.09746)*cj3))+(((-1.0)*py*x3936))+((x3922*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3942=((1.0)*sj6);
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(sj3,-1);
if(!x3943.valid){
continue;
}
if( IKabs(((x3943.value)*(((((-1.0)*r21*x3942))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x3942))+(((-1.0)*cj0*r01*x3942))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3943.value)*(((((-1.0)*r21*x3942))+((cj6*r20))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x3942))+(((-1.0)*cj0*r01*x3942))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3943.value)*(((((-1.0)*r21*x3942))+((cj6*r20))))), (((cj6*r10*sj0))+(((-1.0)*r11*sj0*x3942))+(((-1.0)*cj0*r01*x3942))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3944=IKcos(j4);
IkReal x3945=IKsin(j4);
IkReal x3946=(r11*sj0);
IkReal x3947=((0.026255)*sj6);
IkReal x3948=(cj0*r01);
IkReal x3949=(cj5*r12);
IkReal x3950=(cj6*sj5);
IkReal x3951=(r10*sj0);
IkReal x3952=(sj5*sj6);
IkReal x3953=(cj0*r11);
IkReal x3954=((1.0)*cj5);
IkReal x3955=((1.0)*cj6);
IkReal x3956=(cj0*r10);
IkReal x3957=((1.0)*sj0);
IkReal x3958=(cj0*r00);
IkReal x3959=((0.026255)*cj6);
IkReal x3960=((1.0)*r21);
IkReal x3961=((1.0)*cj0);
IkReal x3962=(sj3*x3945);
IkReal x3963=(sj3*x3944);
IkReal x3964=(r00*x3959);
IkReal x3965=(cj3*x3945);
IkReal x3966=(cj3*x3944);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x3960))+(((-1.0)*x3962)));
evalcond[1]=((((-1.0)*r20*x3952))+(((-1.0)*r22*x3954))+x3963+(((-1.0)*x3950*x3960)));
evalcond[2]=((((-1.0)*x3955*x3958))+((sj6*x3948))+((sj6*x3946))+x3944+(((-1.0)*x3951*x3955)));
evalcond[3]=((((-1.0)*x3955*x3956))+(((-1.0)*r01*sj6*x3957))+((sj6*x3953))+((cj6*r00*sj0))+x3965);
evalcond[4]=((0.0001)+((r20*x3959))+(((-1.0)*r21*x3947))+pz+(((-0.02626)*x3962))+(((-0.09746)*sj3))+(((-0.0718)*x3963)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x3949))+((x3948*x3950))+x3945+((x3946*x3950))+((x3952*x3958))+((x3951*x3952)));
evalcond[6]=(((cj0*x3949))+(((-1.0)*r02*sj0*x3954))+(((-1.0)*r00*x3952*x3957))+((x3950*x3953))+((x3952*x3956))+(((-1.0)*r01*x3950*x3957))+(((-1.0)*x3966)));
evalcond[7]=((-0.0001)+((x3947*x3948))+(((0.02626)*x3944))+((x3946*x3947))+(((-1.0)*px*x3961))+(((-0.0718)*x3945))+(((-1.0)*x3951*x3959))+(((-1.0)*py*x3957))+(((-1.0)*x3958*x3959)));
evalcond[8]=((0.2413)+(((0.02626)*x3965))+(((-1.0)*x3956*x3959))+(((-1.0)*py*x3961))+((px*sj0))+((x3947*x3953))+(((0.09746)*cj3))+(((-1.0)*r01*sj0*x3947))+(((0.0718)*x3966))+((sj0*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3967=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3967.valid){
continue;
}
CheckValue<IkReal> x3968 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3967.value)))+(x3968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x3969=IKcos(j4);
IkReal x3970=IKsin(j4);
IkReal x3971=(r11*sj0);
IkReal x3972=((0.026255)*sj6);
IkReal x3973=(cj0*r01);
IkReal x3974=(cj5*r12);
IkReal x3975=(cj6*sj5);
IkReal x3976=(r10*sj0);
IkReal x3977=(sj5*sj6);
IkReal x3978=(cj0*r11);
IkReal x3979=((1.0)*cj5);
IkReal x3980=((1.0)*cj6);
IkReal x3981=(cj0*r10);
IkReal x3982=((1.0)*sj0);
IkReal x3983=(cj0*r00);
IkReal x3984=((0.026255)*cj6);
IkReal x3985=((1.0)*r21);
IkReal x3986=((1.0)*cj0);
IkReal x3987=(sj3*x3970);
IkReal x3988=(sj3*x3969);
IkReal x3989=(r00*x3984);
IkReal x3990=(cj3*x3970);
IkReal x3991=(cj3*x3969);
evalcond[0]=((((-1.0)*sj6*x3985))+((cj6*r20))+(((-1.0)*x3987)));
evalcond[1]=(x3988+(((-1.0)*r22*x3979))+(((-1.0)*r20*x3977))+(((-1.0)*x3975*x3985)));
evalcond[2]=((((-1.0)*x3976*x3980))+x3969+((sj6*x3973))+((sj6*x3971))+(((-1.0)*x3980*x3983)));
evalcond[3]=(((cj6*r00*sj0))+x3990+((sj6*x3978))+(((-1.0)*r01*sj6*x3982))+(((-1.0)*x3980*x3981)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x3972))+(((-0.0718)*x3988))+((r20*x3984))+pz+(((-0.09746)*sj3))+(((-0.02626)*x3987)));
evalcond[5]=(((cj0*cj5*r02))+((x3977*x3983))+((x3976*x3977))+((x3973*x3975))+((x3971*x3975))+x3970+((sj0*x3974)));
evalcond[6]=(((x3977*x3981))+(((-1.0)*r01*x3975*x3982))+((x3975*x3978))+(((-1.0)*x3991))+(((-1.0)*r02*sj0*x3979))+((cj0*x3974))+(((-1.0)*r00*x3977*x3982)));
evalcond[7]=((-0.0001)+(((0.02626)*x3969))+(((-0.0718)*x3970))+(((-1.0)*x3976*x3984))+(((-1.0)*px*x3986))+((x3971*x3972))+(((-1.0)*py*x3982))+(((-1.0)*x3983*x3984))+((x3972*x3973)));
evalcond[8]=((0.2413)+(((0.0718)*x3991))+(((-1.0)*r01*sj0*x3972))+(((-1.0)*x3981*x3984))+(((0.02626)*x3990))+((sj0*x3989))+(((-1.0)*py*x3986))+((px*sj0))+((x3972*x3978))+(((0.09746)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3992=(cj0*sj5);
IkReal x3993=(cj5*cj6);
IkReal x3994=((1.0)*sj5);
IkReal x3995=((1.0)*cj0);
IkReal x3996=((1.0)*sj0);
IkReal x3997=(cj5*sj6);
IkReal x3998=(r10*x3997);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(cj3+((r21*x3993))+(((-1.0)*r22*x3994))+((r20*x3997)));
evalcond[2]=((((-1.0)*x3996*x3998))+(((-1.0)*r01*x3993*x3995))+((r12*sj0*sj5))+((r02*x3992))+(((-1.0)*r11*x3993*x3996))+(((-1.0)*r00*x3995*x3997)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x3995*x3998))+((r01*sj0*x3993))+((r12*x3992))+(((-1.0)*r02*sj0*x3994))+((r00*sj0*x3997))+(((-1.0)*r11*x3993*x3995)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3999=(cj5*cj6);
IkReal x4000=((1.0)*sj0);
IkReal x4001=((1.0)*r22);
IkReal x4002=(cj0*sj5);
IkReal x4003=(cj5*sj6);
IkReal x4004=((1.0)*cj0);
IkReal x4005=(cj6*r20);
IkReal x4006=((1.0)*sj5);
IkReal x4007=(r21*sj6);
IkReal x4008=(x4003*x4004);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x3999))+(((-1.0)*sj5*x4001))+((r20*x4003)));
evalcond[2]=((((-1.0)*x4007))+x4005);
evalcond[3]=((((-1.0)*cj5*x4001))+(((-1.0)*cj6*r21*x4006))+(((-1.0)*r20*sj6*x4006)));
evalcond[4]=((((-1.0)*r00*x4008))+(((-1.0)*r10*x4000*x4003))+((r12*sj0*sj5))+((r02*x4002))+(((-1.0)*r11*x3999*x4000))+(((-1.0)*r01*x3999*x4004)));
evalcond[5]=((((-1.0)*r10*x4008))+((r12*x4002))+(((-1.0)*r02*sj5*x4000))+((r01*sj0*x3999))+((r00*sj0*x4003))+(((-1.0)*r11*x3999*x4004)));
evalcond[6]=((0.0001)+(((-0.026255)*x4007))+(((0.026255)*x4005))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4009=(sj0*sj6);
IkReal x4010=(cj0*sj6);
IkReal x4011=(cj6*r00);
IkReal x4012=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x4012))+((sj0*x4011))+(((-1.0)*r01*x4009))+((r11*x4010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x4011))+((r01*x4010))+(((-1.0)*sj0*x4012))+((r11*x4009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x4012))+((sj0*x4011))+(((-1.0)*r01*x4009))+((r11*x4010))))+IKsqr(((((-1.0)*cj0*x4011))+((r01*x4010))+(((-1.0)*sj0*x4012))+((r11*x4009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x4012))+((sj0*x4011))+(((-1.0)*r01*x4009))+((r11*x4010))), ((((-1.0)*cj0*x4011))+((r01*x4010))+(((-1.0)*sj0*x4012))+((r11*x4009))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4013=IKcos(j4);
IkReal x4014=IKsin(j4);
IkReal x4015=(r11*sj6);
IkReal x4016=((0.026255)*cj0);
IkReal x4017=(r01*sj6);
IkReal x4018=(sj0*sj5);
IkReal x4019=(cj6*r11);
IkReal x4020=(r10*sj6);
IkReal x4021=(cj5*r12);
IkReal x4022=(cj6*sj0);
IkReal x4023=((1.0)*sj0);
IkReal x4024=(cj5*r02);
IkReal x4025=((1.0)*r10);
IkReal x4026=(cj0*sj5);
IkReal x4027=(r00*sj6);
IkReal x4028=((0.026255)*sj0);
IkReal x4029=(cj0*cj6);
IkReal x4030=((1.0)*cj0);
IkReal x4031=(cj6*r01);
IkReal x4032=((1.0)*x4014);
evalcond[0]=(((cj0*x4017))+((sj0*x4015))+(((-1.0)*x4022*x4025))+(((-1.0)*x4013))+(((-1.0)*r00*x4029)));
evalcond[1]=(((cj0*x4015))+(((-1.0)*x4025*x4029))+((r00*x4022))+(((-1.0)*x4032))+(((-1.0)*x4017*x4023)));
evalcond[2]=(((sj0*x4021))+((cj0*x4024))+((x4026*x4031))+((x4018*x4019))+((x4018*x4020))+(((-1.0)*x4032))+((x4026*x4027)));
evalcond[3]=(((cj0*x4021))+(((-1.0)*x4023*x4024))+((x4020*x4026))+(((-1.0)*x4018*x4031))+((x4019*x4026))+(((-1.0)*x4018*x4027))+x4013);
evalcond[4]=((-0.08776)+(((-1.0)*cj6*r10*x4016))+(((0.026255)*r00*x4022))+(((-1.0)*py*x4030))+((px*sj0))+((x4015*x4016))+(((-0.0718)*x4013))+(((-1.0)*x4017*x4028))+(((-0.02626)*x4014)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x4030))+(((-1.0)*cj6*r00*x4016))+(((0.0718)*x4014))+(((-0.026255)*r10*x4022))+(((-1.0)*py*x4023))+((x4016*x4017))+((x4015*x4028))+(((-0.02626)*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4033=(cj5*cj6);
IkReal x4034=((1.0)*sj0);
IkReal x4035=((1.0)*r22);
IkReal x4036=(cj0*sj5);
IkReal x4037=(cj5*sj6);
IkReal x4038=((1.0)*cj0);
IkReal x4039=(cj6*r20);
IkReal x4040=((1.0)*sj5);
IkReal x4041=(r21*sj6);
IkReal x4042=(x4037*x4038);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x4033))+((r20*x4037))+(((-1.0)*sj5*x4035)));
evalcond[2]=(x4039+(((-1.0)*x4041)));
evalcond[3]=((((-1.0)*cj5*x4035))+(((-1.0)*cj6*r21*x4040))+(((-1.0)*r20*sj6*x4040)));
evalcond[4]=((((-1.0)*r01*x4033*x4038))+((r02*x4036))+((r12*sj0*sj5))+(((-1.0)*r00*x4042))+(((-1.0)*r11*x4033*x4034))+(((-1.0)*r10*x4034*x4037)));
evalcond[5]=((((-1.0)*r10*x4042))+(((-1.0)*r02*sj5*x4034))+((r00*sj0*x4037))+((r01*sj0*x4033))+(((-1.0)*r11*x4033*x4038))+((r12*x4036)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x4039))+(((-0.026255)*x4041)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4043=(sj0*sj6);
IkReal x4044=(cj6*r10);
IkReal x4045=((1.0)*sj0);
IkReal x4046=(cj6*r00);
IkReal x4047=(cj0*sj6);
if( IKabs(((((-1.0)*r11*x4047))+(((-1.0)*x4045*x4046))+((cj0*x4044))+((r01*x4043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4044*x4045))+(((-1.0)*cj0*x4046))+((r11*x4043))+((r01*x4047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4047))+(((-1.0)*x4045*x4046))+((cj0*x4044))+((r01*x4043))))+IKsqr(((((-1.0)*x4044*x4045))+(((-1.0)*cj0*x4046))+((r11*x4043))+((r01*x4047))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x4047))+(((-1.0)*x4045*x4046))+((cj0*x4044))+((r01*x4043))), ((((-1.0)*x4044*x4045))+(((-1.0)*cj0*x4046))+((r11*x4043))+((r01*x4047))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4048=IKsin(j4);
IkReal x4049=IKcos(j4);
IkReal x4050=(r11*sj6);
IkReal x4051=((0.026255)*cj0);
IkReal x4052=(r01*sj6);
IkReal x4053=(sj0*sj5);
IkReal x4054=(cj6*r11);
IkReal x4055=(r10*sj6);
IkReal x4056=(cj5*r12);
IkReal x4057=(cj6*sj0);
IkReal x4058=((1.0)*sj0);
IkReal x4059=(cj5*r02);
IkReal x4060=((1.0)*r10);
IkReal x4061=(cj0*sj5);
IkReal x4062=(r00*sj6);
IkReal x4063=((0.026255)*sj0);
IkReal x4064=(cj0*cj6);
IkReal x4065=((1.0)*cj0);
IkReal x4066=(cj6*r01);
IkReal x4067=((1.0)*x4049);
evalcond[0]=((((-1.0)*x4060*x4064))+(((-1.0)*x4052*x4058))+x4048+((cj0*x4050))+((r00*x4057)));
evalcond[1]=(((sj0*x4050))+(((-1.0)*r00*x4064))+((cj0*x4052))+(((-1.0)*x4067))+(((-1.0)*x4057*x4060)));
evalcond[2]=(((sj0*x4056))+((x4061*x4062))+((x4061*x4066))+(((-1.0)*x4048))+((cj0*x4059))+((x4053*x4054))+((x4053*x4055)));
evalcond[3]=((((-1.0)*x4053*x4062))+(((-1.0)*x4053*x4066))+((x4054*x4061))+((cj0*x4056))+(((-1.0)*x4058*x4059))+((x4055*x4061))+(((-1.0)*x4067)));
evalcond[4]=((0.10716)+(((0.026255)*r00*x4057))+(((-1.0)*x4052*x4063))+((px*sj0))+((x4050*x4051))+(((0.02626)*x4048))+(((-1.0)*cj6*r10*x4051))+(((-1.0)*py*x4065))+(((0.0718)*x4049)));
evalcond[5]=((-0.0019)+(((-0.02626)*x4049))+(((-1.0)*px*x4065))+(((-0.026255)*r10*x4057))+(((-1.0)*cj6*r00*x4051))+((x4050*x4063))+((x4051*x4052))+(((-1.0)*py*x4058))+(((0.0718)*x4048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4068=((1.0)*cj6);
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(sj3,-1);
if(!x4069.valid){
continue;
}
if( IKabs(((x4069.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x4068))+(((-1.0)*cj0*r00*x4068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4069.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x4068))+(((-1.0)*cj0*r00*x4068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4069.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x4068))+(((-1.0)*cj0*r00*x4068))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4070=IKcos(j4);
IkReal x4071=IKsin(j4);
IkReal x4072=(r11*sj0);
IkReal x4073=((0.026255)*sj6);
IkReal x4074=(cj0*r01);
IkReal x4075=(cj6*sj5);
IkReal x4076=(r10*sj0);
IkReal x4077=(sj5*sj6);
IkReal x4078=(cj0*r11);
IkReal x4079=((1.0)*cj5);
IkReal x4080=((1.0)*cj6);
IkReal x4081=(cj0*r10);
IkReal x4082=((1.0)*sj0);
IkReal x4083=(cj0*r00);
IkReal x4084=(cj5*r12);
IkReal x4085=((0.026255)*cj6);
IkReal x4086=((1.0)*r21);
IkReal x4087=((1.0)*cj0);
IkReal x4088=((1.0)*x4071);
IkReal x4089=((0.02626)*x4071);
IkReal x4090=(sj3*x4070);
IkReal x4091=(r00*x4085);
IkReal x4092=(cj3*x4070);
evalcond[0]=((((-1.0)*sj6*x4086))+(((-1.0)*sj3*x4088))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x4077))+(((-1.0)*r22*x4079))+(((-1.0)*x4075*x4086))+x4090);
evalcond[2]=(((sj6*x4072))+((sj6*x4074))+(((-1.0)*x4070))+(((-1.0)*x4076*x4080))+(((-1.0)*x4080*x4083)));
evalcond[3]=(((sj6*x4078))+((cj6*r00*sj0))+(((-1.0)*cj3*x4088))+(((-1.0)*r01*sj6*x4082))+(((-1.0)*x4080*x4081)));
evalcond[4]=((0.0001)+((r20*x4085))+(((-1.0)*sj3*x4089))+pz+(((-1.0)*r21*x4073))+(((-0.09746)*sj3))+(((-0.0718)*x4090)));
evalcond[5]=(((x4074*x4075))+((cj0*cj5*r02))+(((-1.0)*x4088))+((x4072*x4075))+((sj0*x4084))+((x4077*x4083))+((x4076*x4077)));
evalcond[6]=(((cj0*x4084))+((x4075*x4078))+(((-1.0)*r00*x4077*x4082))+x4092+(((-1.0)*r02*sj0*x4079))+(((-1.0)*r01*x4075*x4082))+((x4077*x4081)));
evalcond[7]=((-0.0019)+(((-1.0)*py*x4082))+(((0.0718)*x4071))+((x4072*x4073))+(((-1.0)*x4083*x4085))+((x4073*x4074))+(((-1.0)*px*x4087))+(((-1.0)*x4076*x4085))+(((-0.02626)*x4070)));
evalcond[8]=((0.0097)+(((-1.0)*py*x4087))+(((-1.0)*cj3*x4089))+((x4073*x4078))+(((-0.09746)*cj3))+((px*sj0))+(((-0.0718)*x4092))+(((-1.0)*x4081*x4085))+(((-1.0)*r01*sj0*x4073))+((sj0*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4093=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4093.valid){
continue;
}
CheckValue<IkReal> x4094 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4093.value)))+(x4094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4095=IKcos(j4);
IkReal x4096=IKsin(j4);
IkReal x4097=(r11*sj0);
IkReal x4098=((0.026255)*sj6);
IkReal x4099=(cj0*r01);
IkReal x4100=(cj6*sj5);
IkReal x4101=(r10*sj0);
IkReal x4102=(sj5*sj6);
IkReal x4103=(cj0*r11);
IkReal x4104=((1.0)*cj5);
IkReal x4105=((1.0)*cj6);
IkReal x4106=(cj0*r10);
IkReal x4107=((1.0)*sj0);
IkReal x4108=(cj0*r00);
IkReal x4109=(cj5*r12);
IkReal x4110=((0.026255)*cj6);
IkReal x4111=((1.0)*r21);
IkReal x4112=((1.0)*cj0);
IkReal x4113=((1.0)*x4096);
IkReal x4114=((0.02626)*x4096);
IkReal x4115=(sj3*x4095);
IkReal x4116=(r00*x4110);
IkReal x4117=(cj3*x4095);
evalcond[0]=((((-1.0)*sj3*x4113))+(((-1.0)*sj6*x4111))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x4102))+(((-1.0)*x4100*x4111))+(((-1.0)*r22*x4104))+x4115);
evalcond[2]=((((-1.0)*x4105*x4108))+((sj6*x4097))+((sj6*x4099))+(((-1.0)*x4095))+(((-1.0)*x4101*x4105)));
evalcond[3]=((((-1.0)*cj3*x4113))+(((-1.0)*x4105*x4106))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x4107))+((sj6*x4103)));
evalcond[4]=((0.0001)+((r20*x4110))+(((-0.0718)*x4115))+(((-1.0)*sj3*x4114))+(((-1.0)*r21*x4098))+pz+(((-0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((x4099*x4100))+(((-1.0)*x4113))+((x4101*x4102))+((sj0*x4109))+((x4097*x4100))+((x4102*x4108)));
evalcond[6]=((((-1.0)*r01*x4100*x4107))+((x4100*x4103))+(((-1.0)*r00*x4102*x4107))+((cj0*x4109))+x4117+(((-1.0)*r02*sj0*x4104))+((x4102*x4106)));
evalcond[7]=((-0.0019)+(((-1.0)*x4101*x4110))+((x4098*x4099))+(((-0.02626)*x4095))+(((-1.0)*py*x4107))+(((-1.0)*px*x4112))+((x4097*x4098))+(((-1.0)*x4108*x4110))+(((0.0718)*x4096)));
evalcond[8]=((0.0097)+((sj0*x4116))+(((-1.0)*cj3*x4114))+(((-0.0718)*x4117))+(((-1.0)*py*x4112))+((x4098*x4103))+(((-0.09746)*cj3))+(((-1.0)*r01*sj0*x4098))+((px*sj0))+(((-1.0)*x4106*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(sj3,-1);
if(!x4124.valid){
continue;
}
IkReal x4118=x4124.value;
IkReal x4119=(cj6*sj3);
IkReal x4120=(sj3*sj6);
IkReal x4121=(r21*sj6);
IkReal x4122=(cj2*cj3);
IkReal x4123=(cj6*r20);
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(sj2,-1);
if(!x4125.valid){
continue;
}
if( IKabs((x4118*((x4123+(((-1.0)*x4121)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4118*(x4125.value)*(((((-1.0)*cj0*r11*x4120))+(((-1.0)*x4122*x4123))+((cj0*r10*x4119))+(((-1.0)*r00*sj0*x4119))+((x4121*x4122))+((r01*sj0*x4120)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4118*((x4123+(((-1.0)*x4121))))))+IKsqr((x4118*(x4125.value)*(((((-1.0)*cj0*r11*x4120))+(((-1.0)*x4122*x4123))+((cj0*r10*x4119))+(((-1.0)*r00*sj0*x4119))+((x4121*x4122))+((r01*sj0*x4120))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x4118*((x4123+(((-1.0)*x4121))))), (x4118*(x4125.value)*(((((-1.0)*cj0*r11*x4120))+(((-1.0)*x4122*x4123))+((cj0*r10*x4119))+(((-1.0)*r00*sj0*x4119))+((x4121*x4122))+((r01*sj0*x4120))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4126=IKsin(j4);
IkReal x4127=IKcos(j4);
IkReal x4128=(r11*sj0);
IkReal x4129=((0.026255)*sj6);
IkReal x4130=(cj0*r01);
IkReal x4131=(cj0*cj5);
IkReal x4132=(cj6*sj5);
IkReal x4133=(r10*sj0);
IkReal x4134=(sj5*sj6);
IkReal x4135=(cj0*r11);
IkReal x4136=((1.0)*cj5);
IkReal x4137=((0.02626)*cj3);
IkReal x4138=((1.0)*cj6);
IkReal x4139=(cj0*r10);
IkReal x4140=((1.0)*cj3);
IkReal x4141=((1.0)*sj0);
IkReal x4142=(cj0*r00);
IkReal x4143=((0.0718)*cj3);
IkReal x4144=((0.09746)*cj3);
IkReal x4145=((0.026255)*cj6);
IkReal x4146=((1.0)*r21);
IkReal x4147=((1.0)*cj0);
IkReal x4148=(sj3*x4126);
IkReal x4149=(cj2*x4126);
IkReal x4150=(sj3*x4127);
IkReal x4151=(cj6*r00*sj0);
IkReal x4152=(cj2*x4127);
IkReal x4153=(sj2*x4126);
IkReal x4154=(sj2*x4127);
evalcond[0]=((((-1.0)*sj6*x4146))+(((-1.0)*x4148))+((cj6*r20)));
evalcond[1]=((((-1.0)*x4132*x4146))+x4150+(((-1.0)*r20*x4134))+(((-1.0)*r22*x4136)));
evalcond[2]=((0.0001)+(((-0.02626)*x4148))+(((-1.0)*r21*x4129))+pz+((r20*x4145))+(((-0.09746)*sj3))+(((-0.0718)*x4150)));
evalcond[3]=((((-1.0)*r01*sj6*x4141))+((sj6*x4135))+((cj3*x4149))+x4151+x4154+(((-1.0)*x4138*x4139)));
evalcond[4]=(((sj6*x4130))+(((-1.0)*x4140*x4153))+(((-1.0)*x4133*x4138))+x4152+(((-1.0)*x4138*x4142))+((sj6*x4128)));
evalcond[5]=(((cj5*r12*sj0))+((x4128*x4132))+((x4130*x4132))+((cj3*x4154))+x4149+((x4134*x4142))+((x4133*x4134))+((r02*x4131)));
evalcond[6]=((((-1.0)*r02*sj0*x4136))+(((-1.0)*r00*x4134*x4141))+(((-1.0)*x4140*x4152))+(((-1.0)*r01*x4132*x4141))+((x4132*x4135))+((r12*x4131))+((x4134*x4139))+x4153);
evalcond[7]=((0.1255)+((x4137*x4149))+((x4143*x4152))+(((0.1158)*cj2))+((x4129*x4135))+(((-1.0)*r01*sj0*x4129))+((cj2*x4144))+(((0.02626)*x4154))+((r00*sj0*x4145))+(((-1.0)*x4139*x4145))+((px*sj0))+(((-0.0718)*x4153))+(((-1.0)*py*x4147))+(((0.0009)*sj2)));
evalcond[8]=((-0.001)+(((-1.0)*px*x4147))+(((-0.1158)*sj2))+((x4129*x4130))+(((0.02626)*x4152))+(((-1.0)*x4142*x4145))+(((-1.0)*x4133*x4145))+(((-1.0)*x4143*x4154))+(((0.0009)*cj2))+(((-1.0)*x4137*x4153))+(((-1.0)*py*x4141))+(((-0.0718)*x4149))+((x4128*x4129))+(((-1.0)*sj2*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4158=IKPowWithIntegerCheck(sj3,-1);
if(!x4158.valid){
continue;
}
IkReal x4155=x4158.value;
IkReal x4156=(r21*sj6);
IkReal x4157=(cj6*r20);
if( IKabs((x4155*(((((-1.0)*x4156))+x4157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000278551532033426)*x4155*(((5.0)+(((50000.0)*pz))+(((0.25)*x4156))+(((-4873.0)*sj3))+(((-0.25)*x4157)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4155*(((((-1.0)*x4156))+x4157))))+IKsqr(((0.000278551532033426)*x4155*(((5.0)+(((50000.0)*pz))+(((0.25)*x4156))+(((-4873.0)*sj3))+(((-0.25)*x4157))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x4155*(((((-1.0)*x4156))+x4157))), ((0.000278551532033426)*x4155*(((5.0)+(((50000.0)*pz))+(((0.25)*x4156))+(((-4873.0)*sj3))+(((-0.25)*x4157))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4159=IKsin(j4);
IkReal x4160=IKcos(j4);
IkReal x4161=(r11*sj0);
IkReal x4162=((0.026255)*sj6);
IkReal x4163=(cj0*r01);
IkReal x4164=(cj0*cj5);
IkReal x4165=(cj6*sj5);
IkReal x4166=(r10*sj0);
IkReal x4167=(sj5*sj6);
IkReal x4168=(cj0*r11);
IkReal x4169=((1.0)*cj5);
IkReal x4170=((0.02626)*cj3);
IkReal x4171=((1.0)*cj6);
IkReal x4172=(cj0*r10);
IkReal x4173=((1.0)*cj3);
IkReal x4174=((1.0)*sj0);
IkReal x4175=(cj0*r00);
IkReal x4176=((0.0718)*cj3);
IkReal x4177=((0.09746)*cj3);
IkReal x4178=((0.026255)*cj6);
IkReal x4179=((1.0)*r21);
IkReal x4180=((1.0)*cj0);
IkReal x4181=(sj3*x4159);
IkReal x4182=(cj2*x4159);
IkReal x4183=(sj3*x4160);
IkReal x4184=(cj6*r00*sj0);
IkReal x4185=(cj2*x4160);
IkReal x4186=(sj2*x4159);
IkReal x4187=(sj2*x4160);
evalcond[0]=((((-1.0)*x4181))+(((-1.0)*sj6*x4179))+((cj6*r20)));
evalcond[1]=((((-1.0)*x4165*x4179))+x4183+(((-1.0)*r22*x4169))+(((-1.0)*r20*x4167)));
evalcond[2]=((0.0001)+(((-0.02626)*x4181))+pz+(((-0.0718)*x4183))+(((-0.09746)*sj3))+(((-1.0)*r21*x4162))+((r20*x4178)));
evalcond[3]=((((-1.0)*r01*sj6*x4174))+(((-1.0)*x4171*x4172))+((cj3*x4182))+((sj6*x4168))+x4184+x4187);
evalcond[4]=((((-1.0)*x4171*x4175))+((sj6*x4163))+((sj6*x4161))+(((-1.0)*x4166*x4171))+x4185+(((-1.0)*x4173*x4186)));
evalcond[5]=(((cj5*r12*sj0))+((x4166*x4167))+((cj3*x4187))+x4182+((r02*x4164))+((x4161*x4165))+((x4167*x4175))+((x4163*x4165)));
evalcond[6]=(((x4165*x4168))+(((-1.0)*r00*x4167*x4174))+x4186+(((-1.0)*r02*sj0*x4169))+((r12*x4164))+(((-1.0)*r01*x4165*x4174))+(((-1.0)*x4173*x4185))+((x4167*x4172)));
evalcond[7]=((0.1255)+((r00*sj0*x4178))+(((0.1158)*cj2))+(((-1.0)*x4172*x4178))+((cj2*x4177))+(((-1.0)*py*x4180))+(((-1.0)*r01*sj0*x4162))+((x4170*x4182))+(((-0.0718)*x4186))+((px*sj0))+(((0.02626)*x4187))+((x4162*x4168))+(((0.0009)*sj2))+((x4176*x4185)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*px*x4180))+(((-1.0)*x4170*x4186))+(((-1.0)*py*x4174))+(((0.0009)*cj2))+(((-1.0)*x4175*x4178))+(((-1.0)*x4176*x4187))+(((-1.0)*x4166*x4178))+(((-0.0718)*x4182))+((x4161*x4162))+(((-1.0)*sj2*x4177))+(((0.02626)*x4185))+((x4162*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4188.value)))+(x4189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4190=IKsin(j4);
IkReal x4191=IKcos(j4);
IkReal x4192=(r11*sj0);
IkReal x4193=((0.026255)*sj6);
IkReal x4194=(cj0*r01);
IkReal x4195=(cj0*cj5);
IkReal x4196=(cj6*sj5);
IkReal x4197=(r10*sj0);
IkReal x4198=(sj5*sj6);
IkReal x4199=(cj0*r11);
IkReal x4200=((1.0)*cj5);
IkReal x4201=((0.02626)*cj3);
IkReal x4202=((1.0)*cj6);
IkReal x4203=(cj0*r10);
IkReal x4204=((1.0)*cj3);
IkReal x4205=((1.0)*sj0);
IkReal x4206=(cj0*r00);
IkReal x4207=((0.0718)*cj3);
IkReal x4208=((0.09746)*cj3);
IkReal x4209=((0.026255)*cj6);
IkReal x4210=((1.0)*r21);
IkReal x4211=((1.0)*cj0);
IkReal x4212=(sj3*x4190);
IkReal x4213=(cj2*x4190);
IkReal x4214=(sj3*x4191);
IkReal x4215=(cj6*r00*sj0);
IkReal x4216=(cj2*x4191);
IkReal x4217=(sj2*x4190);
IkReal x4218=(sj2*x4191);
evalcond[0]=(((cj6*r20))+(((-1.0)*x4212))+(((-1.0)*sj6*x4210)));
evalcond[1]=((((-1.0)*r20*x4198))+(((-1.0)*r22*x4200))+(((-1.0)*x4196*x4210))+x4214);
evalcond[2]=((0.0001)+(((-0.0718)*x4214))+(((-0.02626)*x4212))+(((-1.0)*r21*x4193))+((r20*x4209))+pz+(((-0.09746)*sj3)));
evalcond[3]=(((cj3*x4213))+((sj6*x4199))+x4215+x4218+(((-1.0)*x4202*x4203))+(((-1.0)*r01*sj6*x4205)));
evalcond[4]=(((sj6*x4192))+((sj6*x4194))+(((-1.0)*x4204*x4217))+(((-1.0)*x4197*x4202))+x4216+(((-1.0)*x4202*x4206)));
evalcond[5]=(((cj5*r12*sj0))+((cj3*x4218))+((x4198*x4206))+((r02*x4195))+((x4192*x4196))+((x4197*x4198))+x4213+((x4194*x4196)));
evalcond[6]=(((x4196*x4199))+(((-1.0)*r00*x4198*x4205))+((x4198*x4203))+((r12*x4195))+(((-1.0)*x4204*x4216))+(((-1.0)*r01*x4196*x4205))+(((-1.0)*r02*sj0*x4200))+x4217);
evalcond[7]=((0.1255)+(((-0.0718)*x4217))+(((0.02626)*x4218))+(((0.1158)*cj2))+((x4193*x4199))+((x4201*x4213))+((cj2*x4208))+(((-1.0)*r01*sj0*x4193))+((x4207*x4216))+((r00*sj0*x4209))+(((-1.0)*py*x4211))+((px*sj0))+(((-1.0)*x4203*x4209))+(((0.0009)*sj2)));
evalcond[8]=((-0.001)+(((-0.0718)*x4213))+(((-0.1158)*sj2))+(((0.02626)*x4216))+(((-1.0)*x4197*x4209))+((x4192*x4193))+((x4193*x4194))+(((-1.0)*x4206*x4209))+(((-1.0)*px*x4211))+(((-1.0)*x4207*x4218))+(((-1.0)*sj2*x4208))+(((0.0009)*cj2))+(((-1.0)*x4201*x4217))+(((-1.0)*py*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x4219=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x4219))+(((-1.0)*cj0*r00*sj6*x4219))+(((-1.0)*cj0*cj6*r01*x4219))+(((-1.0)*cj6*r11*sj0*x4219))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4220=(cj5*cj6);
IkReal x4221=((1.0)*sj5);
IkReal x4222=((1.0)*sj0);
IkReal x4223=(cj5*sj6);
if( IKabs(((((-1.0)*r22*x4221))+((r21*x4220))+((r20*x4223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj0*sj5))+(((-1.0)*r01*x4220*x4222))+((cj0*r11*x4220))+(((-1.0)*cj0*r12*x4221))+(((-1.0)*r00*x4222*x4223))+((cj0*r10*x4223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x4221))+((r21*x4220))+((r20*x4223))))+IKsqr((((r02*sj0*sj5))+(((-1.0)*r01*x4220*x4222))+((cj0*r11*x4220))+(((-1.0)*cj0*r12*x4221))+(((-1.0)*r00*x4222*x4223))+((cj0*r10*x4223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*x4221))+((r21*x4220))+((r20*x4223))), (((r02*sj0*sj5))+(((-1.0)*r01*x4220*x4222))+((cj0*r11*x4220))+(((-1.0)*cj0*r12*x4221))+(((-1.0)*r00*x4222*x4223))+((cj0*r10*x4223))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4224=(cj5*cj6);
IkReal x4225=((1.0)*cj0);
IkReal x4226=((1.0)*sj5);
IkReal x4227=(cj5*sj6);
evalcond[0]=((((-1.0)*r22*x4226))+(((-1.0)*(IKsin(j3))))+((r21*x4224))+((r20*x4227)));
evalcond[1]=(((r00*sj0*x4227))+(((-1.0)*r10*x4225*x4227))+((cj0*r12*sj5))+(IKcos(j3))+(((-1.0)*r11*x4224*x4225))+((r01*sj0*x4224))+(((-1.0)*r02*sj0*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4228=((1.0)*sj6);
CheckValue<IkReal> x4229=IKPowWithIntegerCheck(cj3,-1);
if(!x4229.valid){
continue;
}
if( IKabs(((x4229.value)*((((cj6*r20))+(((-1.0)*r21*x4228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4228))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4229.value)*((((cj6*r20))+(((-1.0)*r21*x4228))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4228))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4229.value)*((((cj6*r20))+(((-1.0)*r21*x4228))))), (((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4228))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4228))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4230=IKcos(j4);
IkReal x4231=IKsin(j4);
IkReal x4232=(r11*sj0);
IkReal x4233=(cj0*sj6);
IkReal x4234=((0.026255)*r01);
IkReal x4235=(cj6*sj5);
IkReal x4236=(r10*sj0);
IkReal x4237=(sj5*sj6);
IkReal x4238=((1.0)*cj5);
IkReal x4239=((1.0)*cj6);
IkReal x4240=((1.0)*sj0);
IkReal x4241=((0.026255)*sj6);
IkReal x4242=(cj5*r12);
IkReal x4243=(cj0*r10);
IkReal x4244=((0.026255)*cj6);
IkReal x4245=((1.0)*r21);
IkReal x4246=((1.0)*cj0);
IkReal x4247=(cj0*r00);
IkReal x4248=((1.0)*x4231);
IkReal x4249=((0.02626)*x4231);
IkReal x4250=(sj3*x4230);
IkReal x4251=(cj6*r00*sj0);
IkReal x4252=(cj3*x4230);
evalcond[0]=((((-1.0)*cj3*x4248))+(((-1.0)*sj6*x4245))+((cj6*r20)));
evalcond[1]=((((-1.0)*x4235*x4245))+(((-1.0)*r22*x4238))+x4252+(((-1.0)*r20*x4237)));
evalcond[2]=(((r01*x4233))+(((-1.0)*x4236*x4239))+x4230+(((-1.0)*x4239*x4247))+((sj6*x4232)));
evalcond[3]=((((-1.0)*sj3*x4248))+x4251+(((-1.0)*x4239*x4243))+(((-1.0)*r01*sj6*x4240))+((r11*x4233)));
evalcond[4]=((-0.2413)+((r20*x4244))+(((-1.0)*cj3*x4249))+(((-0.0718)*x4252))+(((-1.0)*r21*x4241))+pz+(((-0.09746)*cj3)));
evalcond[5]=(((r00*sj5*x4233))+((cj0*cj5*r02))+((x4236*x4237))+((x4232*x4235))+((sj0*x4242))+x4231+((cj0*r01*x4235)));
evalcond[6]=((((-1.0)*r00*x4237*x4240))+((cj0*r11*x4235))+((r10*sj5*x4233))+(((-1.0)*r01*x4235*x4240))+x4250+((cj0*x4242))+(((-1.0)*r02*sj0*x4238)));
evalcond[7]=((-0.0001)+((x4232*x4241))+(((-1.0)*x4244*x4247))+(((-1.0)*px*x4246))+(((0.02626)*x4230))+(((-1.0)*py*x4240))+(((-0.0718)*x4231))+(((-1.0)*x4236*x4244))+((x4233*x4234)));
evalcond[8]=((0.0001)+(((-1.0)*x4243*x4244))+(((-1.0)*py*x4246))+(((-1.0)*sj3*x4249))+(((-0.0718)*x4250))+((px*sj0))+(((-0.09746)*sj3))+((r00*sj0*x4244))+(((0.026255)*r11*x4233))+(((-1.0)*sj0*sj6*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4253 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4253.valid){
continue;
}
CheckValue<IkReal> x4254=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4253.value)+(((1.5707963267949)*(x4254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4255=IKcos(j4);
IkReal x4256=IKsin(j4);
IkReal x4257=(r11*sj0);
IkReal x4258=(cj0*sj6);
IkReal x4259=((0.026255)*r01);
IkReal x4260=(cj6*sj5);
IkReal x4261=(r10*sj0);
IkReal x4262=(sj5*sj6);
IkReal x4263=((1.0)*cj5);
IkReal x4264=((1.0)*cj6);
IkReal x4265=((1.0)*sj0);
IkReal x4266=((0.026255)*sj6);
IkReal x4267=(cj5*r12);
IkReal x4268=(cj0*r10);
IkReal x4269=((0.026255)*cj6);
IkReal x4270=((1.0)*r21);
IkReal x4271=((1.0)*cj0);
IkReal x4272=(cj0*r00);
IkReal x4273=((1.0)*x4256);
IkReal x4274=((0.02626)*x4256);
IkReal x4275=(sj3*x4255);
IkReal x4276=(cj6*r00*sj0);
IkReal x4277=(cj3*x4255);
evalcond[0]=((((-1.0)*cj3*x4273))+((cj6*r20))+(((-1.0)*sj6*x4270)));
evalcond[1]=((((-1.0)*r20*x4262))+(((-1.0)*r22*x4263))+(((-1.0)*x4260*x4270))+x4277);
evalcond[2]=((((-1.0)*x4264*x4272))+((r01*x4258))+(((-1.0)*x4261*x4264))+x4255+((sj6*x4257)));
evalcond[3]=((((-1.0)*sj3*x4273))+(((-1.0)*x4264*x4268))+(((-1.0)*r01*sj6*x4265))+((r11*x4258))+x4276);
evalcond[4]=((-0.2413)+(((-1.0)*r21*x4266))+(((-1.0)*cj3*x4274))+pz+(((-0.09746)*cj3))+((r20*x4269))+(((-0.0718)*x4277)));
evalcond[5]=(((cj0*r01*x4260))+((cj0*cj5*r02))+((x4257*x4260))+x4256+((sj0*x4267))+((x4261*x4262))+((r00*sj5*x4258)));
evalcond[6]=((((-1.0)*r02*sj0*x4263))+(((-1.0)*r00*x4262*x4265))+(((-1.0)*r01*x4260*x4265))+((cj0*r11*x4260))+((r10*sj5*x4258))+x4275+((cj0*x4267)));
evalcond[7]=((-0.0001)+(((-1.0)*px*x4271))+((x4258*x4259))+((x4257*x4266))+(((-0.0718)*x4256))+(((-1.0)*py*x4265))+(((-1.0)*x4261*x4269))+(((-1.0)*x4269*x4272))+(((0.02626)*x4255)));
evalcond[8]=((0.0001)+(((-1.0)*sj3*x4274))+(((0.026255)*r11*x4258))+(((-1.0)*sj0*sj6*x4259))+(((-1.0)*py*x4271))+((px*sj0))+((r00*sj0*x4269))+(((-0.09746)*sj3))+(((-1.0)*x4268*x4269))+(((-0.0718)*x4275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4278=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((r12*sj0*sj5))+(((-1.0)*cj0*r00*sj6*x4278))+(((-1.0)*cj6*r11*sj0*x4278))+(((-1.0)*cj0*cj6*r01*x4278))+(((-1.0)*r10*sj0*sj6*x4278))+((cj0*r02*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4279=((1.0)*cj5);
IkReal x4280=(cj0*cj5);
if( IKabs(((((-1.0)*r20*sj6*x4279))+((r22*sj5))+(((-1.0)*cj6*r21*x4279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj0*sj5))+((cj6*r11*x4280))+((r10*sj6*x4280))+(((-1.0)*r00*sj0*sj6*x4279))+(((-1.0)*cj6*r01*sj0*x4279))+(((-1.0)*cj0*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj6*x4279))+((r22*sj5))+(((-1.0)*cj6*r21*x4279))))+IKsqr((((r02*sj0*sj5))+((cj6*r11*x4280))+((r10*sj6*x4280))+(((-1.0)*r00*sj0*sj6*x4279))+(((-1.0)*cj6*r01*sj0*x4279))+(((-1.0)*cj0*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*sj6*x4279))+((r22*sj5))+(((-1.0)*cj6*r21*x4279))), (((r02*sj0*sj5))+((cj6*r11*x4280))+((r10*sj6*x4280))+(((-1.0)*r00*sj0*sj6*x4279))+(((-1.0)*cj6*r01*sj0*x4279))+(((-1.0)*cj0*r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x4281=(cj5*cj6);
IkReal x4282=((1.0)*cj0);
IkReal x4283=((1.0)*sj5);
IkReal x4284=(cj5*sj6);
evalcond[0]=((IKsin(j3))+(((-1.0)*r22*x4283))+((r20*x4284))+((r21*x4281)));
evalcond[1]=((((-1.0)*r11*x4281*x4282))+(((-1.0)*r10*x4282*x4284))+(((-1.0)*r02*sj0*x4283))+((cj0*r12*sj5))+(IKcos(j3))+((r00*sj0*x4284))+((r01*sj0*x4281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4285=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x4285))+(((-1.0)*r20*sj6*x4285))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4286=((1.0)*cj6);
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(cj3,-1);
if(!x4287.valid){
continue;
}
if( IKabs(((x4287.value)*(((((-1.0)*r20*x4286))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4286))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x4286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4287.value)*(((((-1.0)*r20*x4286))+((r21*sj6))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4286))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x4286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4287.value)*(((((-1.0)*r20*x4286))+((r21*sj6))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4286))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x4286))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4288=IKcos(j4);
IkReal x4289=IKsin(j4);
IkReal x4290=(sj0*sj6);
IkReal x4291=(cj0*sj6);
IkReal x4292=((0.026255)*r01);
IkReal x4293=(cj5*r12);
IkReal x4294=(r10*sj5);
IkReal x4295=(cj6*sj0);
IkReal x4296=((0.026255)*r00);
IkReal x4297=((1.0)*cj5);
IkReal x4298=((1.0)*r10);
IkReal x4299=((1.0)*r01);
IkReal x4300=(cj0*cj6);
IkReal x4301=(r00*sj5);
IkReal x4302=((0.026255)*r11);
IkReal x4303=((1.0)*py);
IkReal x4304=(cj6*r20);
IkReal x4305=((1.0)*sj5);
IkReal x4306=(r11*sj5);
IkReal x4307=((0.026255)*r10);
IkReal x4308=(r21*sj6);
IkReal x4309=((1.0)*x4288);
IkReal x4310=(sj3*x4289);
IkReal x4311=(sj3*x4288);
IkReal x4312=(cj3*x4289);
evalcond[0]=((((-1.0)*x4308))+x4312+x4304);
evalcond[1]=((((-1.0)*r22*x4297))+(((-1.0)*cj3*x4309))+(((-1.0)*r20*sj6*x4305))+(((-1.0)*cj6*r21*x4305)));
evalcond[2]=(((r01*x4291))+(((-1.0)*r00*x4300))+(((-1.0)*x4295*x4298))+((r11*x4290))+(((-1.0)*x4309)));
evalcond[3]=(((r00*x4295))+(((-1.0)*x4290*x4299))+(((-1.0)*x4310))+((r11*x4291))+(((-1.0)*x4298*x4300)));
evalcond[4]=((-0.0097)+(((0.02626)*x4312))+pz+(((0.09746)*cj3))+(((-0.026255)*x4308))+(((0.026255)*x4304))+(((0.0718)*cj3*x4288)));
evalcond[5]=(((sj0*x4293))+((x4295*x4306))+((cj0*cj5*r02))+((x4290*x4294))+(((-1.0)*x4289))+((r01*sj5*x4300))+((x4291*x4301)));
evalcond[6]=((((-1.0)*r02*sj0*x4297))+((x4300*x4306))+(((-1.0)*x4290*x4301))+((x4291*x4294))+x4311+(((-1.0)*sj5*x4295*x4299))+((cj0*x4293)));
evalcond[7]=((-0.0019)+((x4290*x4302))+(((-1.0)*x4296*x4300))+(((-0.02626)*x4288))+(((-1.0)*x4295*x4307))+(((0.0718)*x4289))+((x4291*x4292))+(((-1.0)*sj0*x4303))+(((-1.0)*cj0*px)));
evalcond[8]=((0.0001)+(((-0.0718)*x4311))+(((-1.0)*x4290*x4292))+(((-0.02626)*x4310))+((x4295*x4296))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*cj0*x4303))+(((-1.0)*x4300*x4307))+((x4291*x4302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4313=((1.0)*sj5);
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x4313))+(((-1.0)*cj6*r21*x4313))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4314.value)+(((1.5707963267949)*(x4315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4316=IKcos(j4);
IkReal x4317=IKsin(j4);
IkReal x4318=(sj0*sj6);
IkReal x4319=(cj0*sj6);
IkReal x4320=((0.026255)*r01);
IkReal x4321=(cj5*r12);
IkReal x4322=(r10*sj5);
IkReal x4323=(cj6*sj0);
IkReal x4324=((0.026255)*r00);
IkReal x4325=((1.0)*cj5);
IkReal x4326=((1.0)*r10);
IkReal x4327=((1.0)*r01);
IkReal x4328=(cj0*cj6);
IkReal x4329=(r00*sj5);
IkReal x4330=((0.026255)*r11);
IkReal x4331=((1.0)*py);
IkReal x4332=(cj6*r20);
IkReal x4333=((1.0)*sj5);
IkReal x4334=(r11*sj5);
IkReal x4335=((0.026255)*r10);
IkReal x4336=(r21*sj6);
IkReal x4337=((1.0)*x4316);
IkReal x4338=(sj3*x4317);
IkReal x4339=(sj3*x4316);
IkReal x4340=(cj3*x4317);
evalcond[0]=((((-1.0)*x4336))+x4332+x4340);
evalcond[1]=((((-1.0)*r20*sj6*x4333))+(((-1.0)*r22*x4325))+(((-1.0)*cj6*r21*x4333))+(((-1.0)*cj3*x4337)));
evalcond[2]=(((r11*x4318))+(((-1.0)*x4337))+((r01*x4319))+(((-1.0)*r00*x4328))+(((-1.0)*x4323*x4326)));
evalcond[3]=(((r00*x4323))+(((-1.0)*x4338))+((r11*x4319))+(((-1.0)*x4326*x4328))+(((-1.0)*x4318*x4327)));
evalcond[4]=((-0.0097)+(((-0.026255)*x4336))+(((0.0718)*cj3*x4316))+(((0.026255)*x4332))+pz+(((0.09746)*cj3))+(((0.02626)*x4340)));
evalcond[5]=(((cj0*cj5*r02))+((x4319*x4329))+((x4318*x4322))+((sj0*x4321))+((x4323*x4334))+(((-1.0)*x4317))+((r01*sj5*x4328)));
evalcond[6]=((((-1.0)*sj5*x4323*x4327))+((cj0*x4321))+((x4319*x4322))+(((-1.0)*x4318*x4329))+x4339+((x4328*x4334))+(((-1.0)*r02*sj0*x4325)));
evalcond[7]=((-0.0019)+(((0.0718)*x4317))+((x4319*x4320))+((x4318*x4330))+(((-1.0)*x4324*x4328))+(((-1.0)*sj0*x4331))+(((-0.02626)*x4316))+(((-1.0)*x4323*x4335))+(((-1.0)*cj0*px)));
evalcond[8]=((0.0001)+(((-0.02626)*x4338))+((x4319*x4330))+(((-1.0)*cj0*x4331))+(((-0.0718)*x4339))+((x4323*x4324))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*x4328*x4335))+(((-1.0)*x4318*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4341=(cj6*r20);
IkReal x4342=(r21*sj6);
if( IKabs(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x4341))+(((-6.96378830083565e-5)*x4342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4341+(((-1.0)*x4342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x4341))+(((-6.96378830083565e-5)*x4342))))+IKsqr((x4341+(((-1.0)*x4342))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x4341))+(((-6.96378830083565e-5)*x4342))), (x4341+(((-1.0)*x4342))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x4343=IKsin(j4);
IkReal x4344=IKcos(j4);
IkReal x4345=(cj6*r20);
IkReal x4346=((1.0)*r21);
evalcond[0]=((((-1.0)*sj6*x4346))+x4345+(((-1.0)*x4344)));
evalcond[1]=((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x4346))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*x4343)));
evalcond[2]=((-0.1264)+(((0.026255)*x4345))+(((-0.026255)*r21*sj6))+pz+(((-0.02626)*x4344))+(((0.0718)*x4343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x4347=(sj0*sj6);
IkReal x4348=(cj0*sj6);
IkReal x4349=(cj6*r00);
IkReal x4350=((1.0)*cj6*r10);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*cj0*x4350))+((sj0*x4349))+(((-1.0)*r01*x4347))+((r11*x4348)))))+(IKabs(((((-1.0)*sj0*x4350))+((r11*x4347))+(((-1.0)*cj0*x4349))+((r01*x4348))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4351=(sj0*sj6);
IkReal x4352=(cj0*sj6);
IkReal x4353=(cj6*sj0);
IkReal x4354=((1.0)*r10);
IkReal x4355=((1.0)*cj0*cj6);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(cj4,-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(sj4,-1);
if(!x4357.valid){
continue;
}
if( IKabs(((x4356.value)*(((((-1.0)*sj5*x4352*x4354))+(((-1.0)*r11*sj5*x4355))+(((-1.0)*cj0*cj5*r12))+((cj5*r02*sj0))+((r01*sj5*x4353))+((r00*sj5*x4351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4357.value)*(((((-1.0)*x4353*x4354))+((r11*x4351))+(((-1.0)*r00*x4355))+((r01*x4352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4356.value)*(((((-1.0)*sj5*x4352*x4354))+(((-1.0)*r11*sj5*x4355))+(((-1.0)*cj0*cj5*r12))+((cj5*r02*sj0))+((r01*sj5*x4353))+((r00*sj5*x4351))))))+IKsqr(((x4357.value)*(((((-1.0)*x4353*x4354))+((r11*x4351))+(((-1.0)*r00*x4355))+((r01*x4352))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4356.value)*(((((-1.0)*sj5*x4352*x4354))+(((-1.0)*r11*sj5*x4355))+(((-1.0)*cj0*cj5*r12))+((cj5*r02*sj0))+((r01*sj5*x4353))+((r00*sj5*x4351))))), ((x4357.value)*(((((-1.0)*x4353*x4354))+((r11*x4351))+(((-1.0)*r00*x4355))+((r01*x4352))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4358=IKcos(j3);
IkReal x4359=IKsin(j3);
IkReal x4360=(r11*sj0);
IkReal x4361=(cj0*sj6);
IkReal x4362=((0.026255)*r01);
IkReal x4363=(cj0*cj5);
IkReal x4364=(cj6*sj5);
IkReal x4365=((1.0)*cj6);
IkReal x4366=(sj0*sj6);
IkReal x4367=(r10*sj5);
IkReal x4368=((1.0)*cj5);
IkReal x4369=(r02*sj0);
IkReal x4370=(cj0*sj5);
IkReal x4371=(r10*sj0);
IkReal x4372=((1.0)*r01);
IkReal x4373=(r00*sj5);
IkReal x4374=((1.0)*py);
IkReal x4375=(cj5*sj0);
IkReal x4376=(cj0*r10);
IkReal x4377=((0.026255)*cj6);
IkReal x4378=(cj0*r00);
IkReal x4379=(cj4*x4359);
IkReal x4380=(sj4*x4358);
IkReal x4381=(cj6*r00*sj0);
IkReal x4382=((1.0)*x4359);
IkReal x4383=(cj4*x4358);
evalcond[0]=(((sj6*x4360))+(((-1.0)*x4380))+((r01*x4361))+(((-1.0)*x4365*x4371))+(((-1.0)*x4365*x4378)));
evalcond[1]=((((-1.0)*x4366*x4372))+((r11*x4361))+(((-1.0)*x4365*x4376))+x4381+(((-1.0)*sj4*x4382)));
evalcond[2]=(((r12*x4375))+((x4361*x4373))+((x4366*x4367))+((x4360*x4364))+x4383+((r02*x4363))+((cj0*r01*x4364)));
evalcond[3]=((((-1.0)*r11*x4363*x4365))+((r12*x4370))+((cj5*r00*x4366))+(((-1.0)*sj5*x4369))+((cj6*r01*x4375))+x4358+(((-1.0)*r10*x4361*x4368)));
evalcond[4]=((((-1.0)*x4366*x4373))+((r12*x4363))+((x4361*x4367))+((cj0*r11*x4364))+x4379+(((-1.0)*x4368*x4369))+(((-1.0)*sj0*x4364*x4372)));
evalcond[5]=(((r02*x4370))+(((-1.0)*cj5*x4360*x4365))+(((-1.0)*r01*x4363*x4365))+((r12*sj0*sj5))+(((-1.0)*r00*x4361*x4368))+(((-1.0)*x4382))+(((-1.0)*r10*x4366*x4368)));
evalcond[6]=((0.0001)+((r00*sj0*x4377))+(((-1.0)*x4376*x4377))+(((-0.0718)*x4379))+(((-1.0)*x4362*x4366))+(((-1.0)*cj0*x4374))+((px*sj0))+(((-0.02626)*sj4*x4359))+(((0.026255)*r11*x4361))+(((-0.09746)*x4359)));
evalcond[7]=((-0.1168)+(((-1.0)*sj0*x4374))+(((-1.0)*x4371*x4377))+(((-1.0)*x4377*x4378))+((x4361*x4362))+(((-0.0718)*x4383))+(((0.026255)*sj6*x4360))+(((-1.0)*cj0*px))+(((-0.02626)*x4380))+(((-0.09746)*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4384=(cj0*r10);
IkReal x4385=((1.0)*cj6);
IkReal x4386=(cj5*sj6);
IkReal x4387=((1.0)*sj0);
IkReal x4388=(cj0*r11);
CheckValue<IkReal> x4389=IKPowWithIntegerCheck(sj4,-1);
if(!x4389.valid){
continue;
}
if( IKabs(((x4389.value)*((((cj6*r00*sj0))+(((-1.0)*r01*sj6*x4387))+((sj6*x4388))+(((-1.0)*x4384*x4385)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r01*sj0*x4385))+((r02*sj0*sj5))+((cj5*cj6*x4388))+((x4384*x4386))+(((-1.0)*cj0*r12*sj5))+(((-1.0)*r00*x4386*x4387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4389.value)*((((cj6*r00*sj0))+(((-1.0)*r01*sj6*x4387))+((sj6*x4388))+(((-1.0)*x4384*x4385))))))+IKsqr(((((-1.0)*cj5*r01*sj0*x4385))+((r02*sj0*sj5))+((cj5*cj6*x4388))+((x4384*x4386))+(((-1.0)*cj0*r12*sj5))+(((-1.0)*r00*x4386*x4387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4389.value)*((((cj6*r00*sj0))+(((-1.0)*r01*sj6*x4387))+((sj6*x4388))+(((-1.0)*x4384*x4385))))), ((((-1.0)*cj5*r01*sj0*x4385))+((r02*sj0*sj5))+((cj5*cj6*x4388))+((x4384*x4386))+(((-1.0)*cj0*r12*sj5))+(((-1.0)*r00*x4386*x4387))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4390=IKcos(j3);
IkReal x4391=IKsin(j3);
IkReal x4392=(r11*sj0);
IkReal x4393=(cj0*sj6);
IkReal x4394=((0.026255)*r01);
IkReal x4395=(cj0*cj5);
IkReal x4396=(cj6*sj5);
IkReal x4397=((1.0)*cj6);
IkReal x4398=(sj0*sj6);
IkReal x4399=(r10*sj5);
IkReal x4400=((1.0)*cj5);
IkReal x4401=(r02*sj0);
IkReal x4402=(cj0*sj5);
IkReal x4403=(r10*sj0);
IkReal x4404=((1.0)*r01);
IkReal x4405=(r00*sj5);
IkReal x4406=((1.0)*py);
IkReal x4407=(cj5*sj0);
IkReal x4408=(cj0*r10);
IkReal x4409=((0.026255)*cj6);
IkReal x4410=(cj0*r00);
IkReal x4411=(cj4*x4391);
IkReal x4412=(sj4*x4390);
IkReal x4413=(cj6*r00*sj0);
IkReal x4414=((1.0)*x4391);
IkReal x4415=(cj4*x4390);
evalcond[0]=(((r01*x4393))+((sj6*x4392))+(((-1.0)*x4412))+(((-1.0)*x4397*x4403))+(((-1.0)*x4397*x4410)));
evalcond[1]=(x4413+(((-1.0)*x4398*x4404))+(((-1.0)*sj4*x4414))+((r11*x4393))+(((-1.0)*x4397*x4408)));
evalcond[2]=(((x4392*x4396))+x4415+((x4393*x4405))+((x4398*x4399))+((r12*x4407))+((cj0*r01*x4396))+((r02*x4395)));
evalcond[3]=(((r12*x4402))+(((-1.0)*r11*x4395*x4397))+x4390+((cj6*r01*x4407))+(((-1.0)*sj5*x4401))+((cj5*r00*x4398))+(((-1.0)*r10*x4393*x4400)));
evalcond[4]=(((cj0*r11*x4396))+x4411+(((-1.0)*x4398*x4405))+(((-1.0)*x4400*x4401))+(((-1.0)*sj0*x4396*x4404))+((x4393*x4399))+((r12*x4395)));
evalcond[5]=((((-1.0)*r10*x4398*x4400))+((r12*sj0*sj5))+(((-1.0)*x4414))+(((-1.0)*r01*x4395*x4397))+(((-1.0)*r00*x4393*x4400))+((r02*x4402))+(((-1.0)*cj5*x4392*x4397)));
evalcond[6]=((0.0001)+(((-1.0)*x4408*x4409))+(((-0.09746)*x4391))+(((0.026255)*r11*x4393))+(((-1.0)*cj0*x4406))+(((-0.0718)*x4411))+(((-0.02626)*sj4*x4391))+((px*sj0))+(((-1.0)*x4394*x4398))+((r00*sj0*x4409)));
evalcond[7]=((-0.1168)+(((-1.0)*x4409*x4410))+(((-0.02626)*x4412))+(((0.026255)*sj6*x4392))+(((-0.09746)*x4390))+(((-1.0)*x4403*x4409))+(((-0.0718)*x4415))+(((-1.0)*sj0*x4406))+(((-1.0)*cj0*px))+((x4393*x4394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4416=(sj0*sj6);
IkReal x4417=(cj0*sj6);
IkReal x4418=(cj6*r00);
IkReal x4419=((1.0)*cj6*r10);
CheckValue<IkReal> x4420 = IKatan2WithCheck(IkReal((((r11*x4417))+(((-1.0)*cj0*x4419))+(((-1.0)*r01*x4416))+((sj0*x4418)))),(((r11*x4416))+(((-1.0)*cj0*x4418))+((r01*x4417))+(((-1.0)*sj0*x4419))),IKFAST_ATAN2_MAGTHRESH);
if(!x4420.valid){
continue;
}
CheckValue<IkReal> x4421=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x4421.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x4420.value)+(((1.5707963267949)*(x4421.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4422=IKcos(j3);
IkReal x4423=IKsin(j3);
IkReal x4424=(r11*sj0);
IkReal x4425=(cj0*sj6);
IkReal x4426=((0.026255)*r01);
IkReal x4427=(cj0*cj5);
IkReal x4428=(cj6*sj5);
IkReal x4429=((1.0)*cj6);
IkReal x4430=(sj0*sj6);
IkReal x4431=(r10*sj5);
IkReal x4432=((1.0)*cj5);
IkReal x4433=(r02*sj0);
IkReal x4434=(cj0*sj5);
IkReal x4435=(r10*sj0);
IkReal x4436=((1.0)*r01);
IkReal x4437=(r00*sj5);
IkReal x4438=((1.0)*py);
IkReal x4439=(cj5*sj0);
IkReal x4440=(cj0*r10);
IkReal x4441=((0.026255)*cj6);
IkReal x4442=(cj0*r00);
IkReal x4443=(cj4*x4423);
IkReal x4444=(sj4*x4422);
IkReal x4445=(cj6*r00*sj0);
IkReal x4446=((1.0)*x4423);
IkReal x4447=(cj4*x4422);
evalcond[0]=((((-1.0)*x4429*x4442))+(((-1.0)*x4429*x4435))+((sj6*x4424))+(((-1.0)*x4444))+((r01*x4425)));
evalcond[1]=((((-1.0)*x4429*x4440))+x4445+(((-1.0)*x4430*x4436))+(((-1.0)*sj4*x4446))+((r11*x4425)));
evalcond[2]=(((cj0*r01*x4428))+x4447+((r02*x4427))+((x4430*x4431))+((x4425*x4437))+((x4424*x4428))+((r12*x4439)));
evalcond[3]=(x4422+(((-1.0)*r10*x4425*x4432))+((r12*x4434))+(((-1.0)*sj5*x4433))+((cj5*r00*x4430))+((cj6*r01*x4439))+(((-1.0)*r11*x4427*x4429)));
evalcond[4]=((((-1.0)*sj0*x4428*x4436))+x4443+(((-1.0)*x4432*x4433))+((cj0*r11*x4428))+((x4425*x4431))+(((-1.0)*x4430*x4437))+((r12*x4427)));
evalcond[5]=((((-1.0)*x4446))+(((-1.0)*r01*x4427*x4429))+((r12*sj0*sj5))+(((-1.0)*cj5*x4424*x4429))+(((-1.0)*r10*x4430*x4432))+((r02*x4434))+(((-1.0)*r00*x4425*x4432)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x4425))+(((-0.09746)*x4423))+((r00*sj0*x4441))+(((-0.02626)*sj4*x4423))+(((-0.0718)*x4443))+((px*sj0))+(((-1.0)*x4426*x4430))+(((-1.0)*x4440*x4441))+(((-1.0)*cj0*x4438)));
evalcond[7]=((-0.1168)+((x4425*x4426))+(((-1.0)*sj0*x4438))+(((-0.09746)*x4422))+(((0.026255)*sj6*x4424))+(((-0.02626)*x4444))+(((-1.0)*x4435*x4441))+(((-0.0718)*x4447))+(((-1.0)*x4441*x4442))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x4448=IKcos(j4);
IkReal x4449=IKsin(j4);
IkReal x4450=(cj6*r20);
IkReal x4451=((1.0)*r21);
evalcond[0]=(x4448+x4450+(((-1.0)*sj6*x4451)));
evalcond[1]=(x4449+(((-1.0)*cj6*sj5*x4451))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((-0.1246)+(((0.026255)*x4450))+(((-0.026255)*r21*sj6))+(((-0.0718)*x4449))+pz+(((0.02626)*x4448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x4452=(cj0*cj6);
IkReal x4453=(cj6*sj0);
IkReal x4454=(cj0*sj6);
IkReal x4455=((1.0)*sj0*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(((((-1.0)*r10*x4452))+((r00*x4453))+(((-1.0)*r01*x4455))+((r11*x4454)))))+(IKabs((((r00*x4452))+(((-1.0)*r11*x4455))+((r10*x4453))+(((-1.0)*r01*x4454))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4456=(cj0*cj6);
IkReal x4457=(sj0*sj5);
IkReal x4458=(cj0*sj6);
CheckValue<IkReal> x4459=IKPowWithIntegerCheck(sj4,-1);
if(!x4459.valid){
continue;
}
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(cj4,-1);
if(!x4460.valid){
continue;
}
if( IKabs(((x4459.value)*(((((-1.0)*r10*x4456))+((cj6*r00*sj0))+((r11*x4458))+(((-1.0)*r01*sj0*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4460.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r10*sj6*x4457))+((cj6*r11*x4457))+((r00*sj5*x4458))+((r01*sj5*x4456)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4459.value)*(((((-1.0)*r10*x4456))+((cj6*r00*sj0))+((r11*x4458))+(((-1.0)*r01*sj0*sj6))))))+IKsqr(((x4460.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r10*sj6*x4457))+((cj6*r11*x4457))+((r00*sj5*x4458))+((r01*sj5*x4456))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4459.value)*(((((-1.0)*r10*x4456))+((cj6*r00*sj0))+((r11*x4458))+(((-1.0)*r01*sj0*sj6))))), ((x4460.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r10*sj6*x4457))+((cj6*r11*x4457))+((r00*sj5*x4458))+((r01*sj5*x4456))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4461=IKcos(j3);
IkReal x4462=IKsin(j3);
IkReal x4463=(r11*sj0);
IkReal x4464=(cj0*sj6);
IkReal x4465=((0.026255)*r01);
IkReal x4466=(cj0*cj5);
IkReal x4467=(cj6*sj5);
IkReal x4468=((1.0)*cj6);
IkReal x4469=(sj0*sj6);
IkReal x4470=(r10*sj5);
IkReal x4471=((1.0)*cj5);
IkReal x4472=(r02*sj0);
IkReal x4473=(cj0*sj5);
IkReal x4474=(r10*sj0);
IkReal x4475=((1.0)*r01);
IkReal x4476=((1.0)*py);
IkReal x4477=(r00*sj5);
IkReal x4478=(cj5*sj0);
IkReal x4479=(cj0*r10);
IkReal x4480=((0.026255)*cj6);
IkReal x4481=(cj0*r00);
IkReal x4482=(cj4*x4462);
IkReal x4483=(sj4*x4461);
IkReal x4484=(cj6*r00*sj0);
IkReal x4485=(sj4*x4462);
IkReal x4486=(cj4*x4461);
evalcond[0]=(x4483+((r01*x4464))+((sj6*x4463))+(((-1.0)*x4468*x4481))+(((-1.0)*x4468*x4474)));
evalcond[1]=((((-1.0)*x4485))+x4484+((r11*x4464))+(((-1.0)*x4469*x4475))+(((-1.0)*x4468*x4479)));
evalcond[2]=((((-1.0)*x4486))+((x4464*x4477))+((cj0*r01*x4467))+((x4463*x4467))+((r12*x4478))+((r02*x4466))+((x4469*x4470)));
evalcond[3]=(x4461+((cj5*r00*x4469))+((cj6*r01*x4478))+(((-1.0)*sj5*x4472))+(((-1.0)*r11*x4466*x4468))+(((-1.0)*r10*x4464*x4471))+((r12*x4473)));
evalcond[4]=(x4462+(((-1.0)*r00*x4464*x4471))+((r12*sj0*sj5))+((r02*x4473))+(((-1.0)*r01*x4466*x4468))+(((-1.0)*r10*x4469*x4471))+(((-1.0)*cj5*x4463*x4468)));
evalcond[5]=(x4482+((x4464*x4470))+((r12*x4466))+((cj0*r11*x4467))+(((-1.0)*x4471*x4472))+(((-1.0)*x4469*x4477))+(((-1.0)*sj0*x4467*x4475)));
evalcond[6]=((0.0001)+(((-0.0718)*x4482))+(((-1.0)*x4465*x4469))+(((-1.0)*x4479*x4480))+(((0.026255)*r11*x4464))+((r00*sj0*x4480))+((px*sj0))+(((-0.09746)*x4462))+(((-1.0)*cj0*x4476))+(((-0.02626)*x4485)));
evalcond[7]=((0.1148)+(((0.09746)*x4461))+(((0.0718)*x4486))+(((-1.0)*x4474*x4480))+(((-1.0)*x4480*x4481))+(((-1.0)*sj0*x4476))+(((0.026255)*sj6*x4463))+(((0.02626)*x4483))+((x4464*x4465))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4487=(cj0*r00);
IkReal x4488=(cj5*sj6);
IkReal x4489=((1.0)*sj5);
IkReal x4490=(cj5*cj6);
IkReal x4491=(cj0*r01);
IkReal x4492=(r11*sj0);
IkReal x4493=((1.0)*sj6);
IkReal x4494=(r10*sj0);
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(sj4,-1);
if(!x4495.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r02*x4489))+((x4488*x4494))+((x4487*x4488))+((x4490*x4491))+((x4490*x4492))+(((-1.0)*r12*sj0*x4489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4495.value)*(((((-1.0)*x4492*x4493))+((cj6*x4487))+((cj6*x4494))+(((-1.0)*x4491*x4493)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r02*x4489))+((x4488*x4494))+((x4487*x4488))+((x4490*x4491))+((x4490*x4492))+(((-1.0)*r12*sj0*x4489))))+IKsqr(((x4495.value)*(((((-1.0)*x4492*x4493))+((cj6*x4487))+((cj6*x4494))+(((-1.0)*x4491*x4493))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r02*x4489))+((x4488*x4494))+((x4487*x4488))+((x4490*x4491))+((x4490*x4492))+(((-1.0)*r12*sj0*x4489))), ((x4495.value)*(((((-1.0)*x4492*x4493))+((cj6*x4487))+((cj6*x4494))+(((-1.0)*x4491*x4493))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4496=IKcos(j3);
IkReal x4497=IKsin(j3);
IkReal x4498=(r11*sj0);
IkReal x4499=(cj0*sj6);
IkReal x4500=((0.026255)*r01);
IkReal x4501=(cj0*cj5);
IkReal x4502=(cj6*sj5);
IkReal x4503=((1.0)*cj6);
IkReal x4504=(sj0*sj6);
IkReal x4505=(r10*sj5);
IkReal x4506=((1.0)*cj5);
IkReal x4507=(r02*sj0);
IkReal x4508=(cj0*sj5);
IkReal x4509=(r10*sj0);
IkReal x4510=((1.0)*r01);
IkReal x4511=((1.0)*py);
IkReal x4512=(r00*sj5);
IkReal x4513=(cj5*sj0);
IkReal x4514=(cj0*r10);
IkReal x4515=((0.026255)*cj6);
IkReal x4516=(cj0*r00);
IkReal x4517=(cj4*x4497);
IkReal x4518=(sj4*x4496);
IkReal x4519=(cj6*r00*sj0);
IkReal x4520=(sj4*x4497);
IkReal x4521=(cj4*x4496);
evalcond[0]=(x4518+(((-1.0)*x4503*x4509))+((r01*x4499))+(((-1.0)*x4503*x4516))+((sj6*x4498)));
evalcond[1]=((((-1.0)*x4520))+x4519+(((-1.0)*x4504*x4510))+((r11*x4499))+(((-1.0)*x4503*x4514)));
evalcond[2]=(((cj0*r01*x4502))+((x4498*x4502))+(((-1.0)*x4521))+((r02*x4501))+((x4499*x4512))+((r12*x4513))+((x4504*x4505)));
evalcond[3]=((((-1.0)*sj5*x4507))+((cj6*r01*x4513))+(((-1.0)*r11*x4501*x4503))+x4496+((r12*x4508))+((cj5*r00*x4504))+(((-1.0)*r10*x4499*x4506)));
evalcond[4]=((((-1.0)*r01*x4501*x4503))+x4497+(((-1.0)*cj5*x4498*x4503))+(((-1.0)*r00*x4499*x4506))+((r12*sj0*sj5))+((r02*x4508))+(((-1.0)*r10*x4504*x4506)));
evalcond[5]=(((cj0*r11*x4502))+(((-1.0)*x4506*x4507))+x4517+((r12*x4501))+(((-1.0)*x4504*x4512))+(((-1.0)*sj0*x4502*x4510))+((x4499*x4505)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x4499))+((r00*sj0*x4515))+(((-1.0)*cj0*x4511))+(((-0.09746)*x4497))+(((-0.02626)*x4520))+(((-0.0718)*x4517))+(((-1.0)*x4500*x4504))+((px*sj0))+(((-1.0)*x4514*x4515)));
evalcond[7]=((0.1148)+(((-1.0)*sj0*x4511))+(((-1.0)*x4515*x4516))+(((0.0718)*x4521))+(((0.02626)*x4518))+(((0.09746)*x4496))+(((-1.0)*cj0*px))+(((0.026255)*sj6*x4498))+(((-1.0)*x4509*x4515))+((x4499*x4500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4522=(cj0*cj6);
IkReal x4523=(cj6*sj0);
IkReal x4524=(cj0*sj6);
IkReal x4525=((1.0)*sj0*sj6);
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x4526.valid){
continue;
}
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal((((r11*x4524))+((r00*x4523))+(((-1.0)*r01*x4525))+(((-1.0)*r10*x4522)))),(((r00*x4522))+((r10*x4523))+(((-1.0)*r01*x4524))+(((-1.0)*r11*x4525))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4526.value)))+(x4527.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x4528=IKcos(j3);
IkReal x4529=IKsin(j3);
IkReal x4530=(r11*sj0);
IkReal x4531=(cj0*sj6);
IkReal x4532=((0.026255)*r01);
IkReal x4533=(cj0*cj5);
IkReal x4534=(cj6*sj5);
IkReal x4535=((1.0)*cj6);
IkReal x4536=(sj0*sj6);
IkReal x4537=(r10*sj5);
IkReal x4538=((1.0)*cj5);
IkReal x4539=(r02*sj0);
IkReal x4540=(cj0*sj5);
IkReal x4541=(r10*sj0);
IkReal x4542=((1.0)*r01);
IkReal x4543=((1.0)*py);
IkReal x4544=(r00*sj5);
IkReal x4545=(cj5*sj0);
IkReal x4546=(cj0*r10);
IkReal x4547=((0.026255)*cj6);
IkReal x4548=(cj0*r00);
IkReal x4549=(cj4*x4529);
IkReal x4550=(sj4*x4528);
IkReal x4551=(cj6*r00*sj0);
IkReal x4552=(sj4*x4529);
IkReal x4553=(cj4*x4528);
evalcond[0]=(((sj6*x4530))+((r01*x4531))+x4550+(((-1.0)*x4535*x4541))+(((-1.0)*x4535*x4548)));
evalcond[1]=(x4551+(((-1.0)*x4535*x4546))+(((-1.0)*x4536*x4542))+(((-1.0)*x4552))+((r11*x4531)));
evalcond[2]=(((x4530*x4534))+((cj0*r01*x4534))+((x4536*x4537))+((r12*x4545))+((x4531*x4544))+(((-1.0)*x4553))+((r02*x4533)));
evalcond[3]=(((cj6*r01*x4545))+x4528+(((-1.0)*sj5*x4539))+(((-1.0)*r10*x4531*x4538))+(((-1.0)*r11*x4533*x4535))+((cj5*r00*x4536))+((r12*x4540)));
evalcond[4]=(((r02*x4540))+x4529+(((-1.0)*r10*x4536*x4538))+(((-1.0)*cj5*x4530*x4535))+((r12*sj0*sj5))+(((-1.0)*r00*x4531*x4538))+(((-1.0)*r01*x4533*x4535)));
evalcond[5]=(((r12*x4533))+((x4531*x4537))+(((-1.0)*x4538*x4539))+x4549+(((-1.0)*sj0*x4534*x4542))+(((-1.0)*x4536*x4544))+((cj0*r11*x4534)));
evalcond[6]=((0.0001)+(((-1.0)*x4546*x4547))+(((0.026255)*r11*x4531))+((r00*sj0*x4547))+(((-1.0)*cj0*x4543))+(((-0.09746)*x4529))+(((-0.0718)*x4549))+((px*sj0))+(((-1.0)*x4532*x4536))+(((-0.02626)*x4552)));
evalcond[7]=((0.1148)+(((-1.0)*sj0*x4543))+((x4531*x4532))+(((-1.0)*x4547*x4548))+(((0.026255)*sj6*x4530))+(((0.09746)*x4528))+(((0.02626)*x4550))+(((-1.0)*x4541*x4547))+(((-1.0)*cj0*px))+(((0.0718)*x4553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x4554=((1.0)*cj5);
IkReal x4555=(sj0*sj6);
IkReal x4556=(r02*sj5);
IkReal x4557=(cj6*r01);
IkReal x4558=(cj6*r11);
IkReal x4559=(r12*sj5);
IkReal x4560=(cj0*sj6);
CheckValue<IkReal> x4561=IKPowWithIntegerCheck(sj2,-1);
if(!x4561.valid){
continue;
}
if( IKabs(((x4561.value)*(((((-1.0)*sj0*x4554*x4558))+(((-1.0)*r10*x4554*x4555))+(((-1.0)*cj0*x4554*x4557))+((sj0*x4559))+(((-1.0)*r00*x4554*x4560))+((cj0*x4556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*x4558))+(((-1.0)*sj0*x4554*x4557))+(((-1.0)*r00*x4554*x4555))+(((-1.0)*cj0*x4559))+((sj0*x4556))+((cj5*r10*x4560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4561.value)*(((((-1.0)*sj0*x4554*x4558))+(((-1.0)*r10*x4554*x4555))+(((-1.0)*cj0*x4554*x4557))+((sj0*x4559))+(((-1.0)*r00*x4554*x4560))+((cj0*x4556))))))+IKsqr((((cj0*cj5*x4558))+(((-1.0)*sj0*x4554*x4557))+(((-1.0)*r00*x4554*x4555))+(((-1.0)*cj0*x4559))+((sj0*x4556))+((cj5*r10*x4560))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x4561.value)*(((((-1.0)*sj0*x4554*x4558))+(((-1.0)*r10*x4554*x4555))+(((-1.0)*cj0*x4554*x4557))+((sj0*x4559))+(((-1.0)*r00*x4554*x4560))+((cj0*x4556))))), (((cj0*cj5*x4558))+(((-1.0)*sj0*x4554*x4557))+(((-1.0)*r00*x4554*x4555))+(((-1.0)*cj0*x4559))+((sj0*x4556))+((cj5*r10*x4560))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x4562=IKsin(j3);
IkReal x4563=(cj5*cj6);
IkReal x4564=((1.0)*sj5);
IkReal x4565=((1.0)*cj0);
IkReal x4566=(cj0*sj5);
IkReal x4567=(cj5*sj6);
IkReal x4568=(r10*x4567);
IkReal x4569=((1.0)*x4562);
IkReal x4570=((1.0)*r11*x4563);
evalcond[0]=((((-1.0)*cj2*x4569))+((r21*x4563))+(((-1.0)*r22*x4564))+((r20*x4567)));
evalcond[1]=((((-1.0)*r11*x4563*x4565))+((r12*x4566))+((r00*sj0*x4567))+(IKcos(j3))+((r01*sj0*x4563))+(((-1.0)*r02*sj0*x4564))+(((-1.0)*x4565*x4568)));
evalcond[2]=((((-1.0)*r00*x4565*x4567))+(((-1.0)*sj2*x4569))+(((-1.0)*r01*x4563*x4565))+((r02*x4566))+(((-1.0)*sj0*x4568))+((r12*sj0*sj5))+(((-1.0)*sj0*x4570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x4571=cj2*cj2;
IkReal x4572=(cj2*cj3);
IkReal x4573=(cj6*r20);
IkReal x4574=(cj6*r21);
IkReal x4575=(cj5*r22);
IkReal x4576=(r20*sj6);
IkReal x4577=((1.0)*sj2*sj5);
IkReal x4578=((1.0)*r21*sj6);
IkReal x4579=((1.0)+((x4571*(cj3*cj3)))+(((-1.0)*x4571)));
j4eval[0]=x4579;
j4eval[1]=IKsign(x4579);
j4eval[2]=((IKabs(((((-1.0)*x4576*x4577))+(((-1.0)*sj2*x4575))+(((-1.0)*x4572*x4578))+(((-1.0)*x4574*x4577))+((x4572*x4573)))))+(IKabs(((((-1.0)*sj2*x4578))+((sj5*x4572*x4576))+((sj5*x4572*x4574))+((sj2*x4573))+((x4572*x4575))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4580=(cj5*cj6);
IkReal x4581=(cj0*sj6);
IkReal x4582=(r01*sj0);
IkReal x4583=((1.0)*sj0);
IkReal x4584=((1.0)*cj5);
IkReal x4585=(cj0*r12);
IkReal x4586=(r02*sj5);
IkReal x4587=((1.0)*sj5);
IkReal x4588=(cj5*sj6);
IkReal x4589=((1.0)*cj0);
IkReal x4590=(cj6*r10);
IkReal x4591=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r21*x4580))+(((-1.0)*r22*x4587))+((r20*x4588)));
evalcond[2]=(x4591+(((-1.0)*x4589*x4590))+(((-1.0)*sj6*x4582))+((r11*x4581)));
evalcond[3]=((((-1.0)*r11*x4580*x4583))+(((-1.0)*r01*x4580*x4589))+((r12*sj0*sj5))+(((-1.0)*r00*x4581*x4584))+((cj0*x4586))+(((-1.0)*r10*x4583*x4588)));
evalcond[4]=((1.0)+(((-1.0)*x4583*x4586))+(((-1.0)*r11*x4580*x4589))+((r00*sj0*x4588))+(((-1.0)*r10*x4581*x4584))+((sj5*x4585))+((x4580*x4582)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x4583))+((cj5*x4585))+(((-1.0)*cj6*x4582*x4587))+((cj0*cj6*r11*sj5))+((r10*sj5*x4581))+(((-1.0)*cj5*r02*x4583)));
evalcond[6]=((0.0001)+(((-0.026255)*cj0*x4590))+(((-1.0)*py*x4589))+(((0.026255)*r11*x4581))+(((0.026255)*x4591))+((px*sj0))+(((-0.026255)*sj6*x4582)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4592=((1.0)*r21);
IkReal x4593=(cj2*sj6);
IkReal x4594=(cj5*r22);
IkReal x4595=(cj6*sj5);
IkReal x4596=(r20*sj2);
if( IKabs(((((-1.0)*sj2*x4592*x4595))+((cj2*cj6*r20))+(((-1.0)*sj2*x4594))+(((-1.0)*x4592*x4593))+(((-1.0)*sj5*sj6*x4596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x4593))+((cj2*r21*x4595))+((cj2*x4594))+(((-1.0)*sj2*sj6*x4592))+((cj6*x4596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x4592*x4595))+((cj2*cj6*r20))+(((-1.0)*sj2*x4594))+(((-1.0)*x4592*x4593))+(((-1.0)*sj5*sj6*x4596))))+IKsqr((((r20*sj5*x4593))+((cj2*r21*x4595))+((cj2*x4594))+(((-1.0)*sj2*sj6*x4592))+((cj6*x4596))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x4592*x4595))+((cj2*cj6*r20))+(((-1.0)*sj2*x4594))+(((-1.0)*x4592*x4593))+(((-1.0)*sj5*sj6*x4596))), (((r20*sj5*x4593))+((cj2*r21*x4595))+((cj2*x4594))+(((-1.0)*sj2*sj6*x4592))+((cj6*x4596))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4597=IKcos(j4);
IkReal x4598=IKsin(j4);
IkReal x4599=(r11*sj0);
IkReal x4600=((0.026255)*sj6);
IkReal x4601=(cj0*r01);
IkReal x4602=(cj6*sj5);
IkReal x4603=(r10*sj0);
IkReal x4604=(sj5*sj6);
IkReal x4605=(cj6*r20);
IkReal x4606=((1.0)*cj6);
IkReal x4607=(cj0*r00);
IkReal x4608=((0.026255)*cj6);
IkReal x4609=((1.0)*r21);
IkReal x4610=(cj2*x4597);
IkReal x4611=((0.02626)*x4598);
IkReal x4612=(cj2*x4598);
IkReal x4613=((0.0718)*x4597);
IkReal x4614=(sj2*x4597);
IkReal x4615=(sj2*x4598);
IkReal x4616=((1.0)*x4615);
evalcond[0]=((((-1.0)*x4614))+(((-1.0)*x4612))+x4605+(((-1.0)*sj6*x4609)));
evalcond[1]=((((-1.0)*r20*x4604))+x4610+(((-1.0)*x4602*x4609))+(((-1.0)*x4616))+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x4603*x4606))+((sj6*x4599))+(((-1.0)*x4606*x4607))+x4610+(((-1.0)*x4616))+((sj6*x4601)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x4599*x4602))+((x4601*x4602))+x4612+x4614+((x4604*x4607))+((x4603*x4604)));
evalcond[4]=((-0.1255)+(((0.026255)*x4605))+(((0.0718)*x4615))+(((-0.21326)*cj2))+(((-1.0)*r21*x4600))+(((-0.02626)*x4614))+(((-0.0009)*sj2))+pz+(((-0.0718)*x4610))+(((-1.0)*cj2*x4611)));
evalcond[5]=((-0.001)+(((-1.0)*sj2*x4613))+(((-1.0)*sj2*x4611))+(((-1.0)*x4603*x4608))+((x4599*x4600))+(((0.02626)*x4610))+(((0.0009)*cj2))+((x4600*x4601))+(((-0.21326)*sj2))+(((-0.0718)*x4612))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((-1.0)*x4607*x4608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4617=(cj5*cj6);
IkReal x4618=(cj0*sj6);
IkReal x4619=(r01*sj0);
IkReal x4620=((1.0)*sj0);
IkReal x4621=((1.0)*cj5);
IkReal x4622=(cj0*r12);
IkReal x4623=(r02*sj5);
IkReal x4624=((1.0)*sj5);
IkReal x4625=(cj5*sj6);
IkReal x4626=((1.0)*cj0);
IkReal x4627=(cj6*r10);
IkReal x4628=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x4617))+((r20*x4625))+(((-1.0)*r22*x4624)));
evalcond[2]=((((-1.0)*x4626*x4627))+x4628+((r11*x4618))+(((-1.0)*sj6*x4619)));
evalcond[3]=((((-1.0)*r11*x4617*x4620))+(((-1.0)*r10*x4620*x4625))+((cj0*x4623))+(((-1.0)*r01*x4617*x4626))+((r12*sj0*sj5))+(((-1.0)*r00*x4618*x4621)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4617*x4626))+((sj5*x4622))+((r00*sj0*x4625))+(((-1.0)*r10*x4618*x4621))+((x4617*x4619))+(((-1.0)*x4620*x4623)));
evalcond[5]=(((r10*sj5*x4618))+(((-1.0)*cj5*r02*x4620))+(((-1.0)*r00*sj5*sj6*x4620))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x4619*x4624))+((cj5*x4622)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x4618))+(((-0.026255)*cj0*x4627))+(((-0.026255)*sj6*x4619))+((px*sj0))+(((0.026255)*x4628))+(((-1.0)*py*x4626)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4629=(cj2*r21);
IkReal x4630=((1.0)*cj6);
IkReal x4631=((1.0)*cj2);
IkReal x4632=(cj5*r22);
IkReal x4633=(r20*sj2);
IkReal x4634=(sj5*sj6);
IkReal x4635=(r21*sj2);
if( IKabs((((sj6*x4629))+(((-1.0)*sj5*x4630*x4635))+(((-1.0)*cj2*r20*x4630))+(((-1.0)*sj2*x4632))+(((-1.0)*x4633*x4634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x4629*x4630))+(((-1.0)*r20*x4631*x4634))+(((-1.0)*sj6*x4635))+(((-1.0)*x4631*x4632))+((cj6*x4633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*x4629))+(((-1.0)*sj5*x4630*x4635))+(((-1.0)*cj2*r20*x4630))+(((-1.0)*sj2*x4632))+(((-1.0)*x4633*x4634))))+IKsqr(((((-1.0)*sj5*x4629*x4630))+(((-1.0)*r20*x4631*x4634))+(((-1.0)*sj6*x4635))+(((-1.0)*x4631*x4632))+((cj6*x4633))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*x4629))+(((-1.0)*sj5*x4630*x4635))+(((-1.0)*cj2*r20*x4630))+(((-1.0)*sj2*x4632))+(((-1.0)*x4633*x4634))), ((((-1.0)*sj5*x4629*x4630))+(((-1.0)*r20*x4631*x4634))+(((-1.0)*sj6*x4635))+(((-1.0)*x4631*x4632))+((cj6*x4633))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4636=IKcos(j4);
IkReal x4637=IKsin(j4);
IkReal x4638=(r11*sj0);
IkReal x4639=(cj0*sj6);
IkReal x4640=(cj6*sj5);
IkReal x4641=(r10*sj0);
IkReal x4642=(sj5*sj6);
IkReal x4643=((1.0)*cj6);
IkReal x4644=((0.026255)*sj6);
IkReal x4645=((0.026255)*cj6);
IkReal x4646=(cj0*r00);
IkReal x4647=((1.0)*r21);
IkReal x4648=(cj2*x4637);
IkReal x4649=((0.02626)*x4637);
IkReal x4650=(cj2*x4636);
IkReal x4651=(sj2*x4637);
IkReal x4652=(sj2*x4636);
IkReal x4653=((1.0)*x4652);
evalcond[0]=((((-1.0)*x4653))+x4648+((cj6*r20))+(((-1.0)*sj6*x4647)));
evalcond[1]=((((-1.0)*x4640*x4647))+(((-1.0)*x4651))+(((-1.0)*x4650))+(((-1.0)*r20*x4642))+(((-1.0)*cj5*r22)));
evalcond[2]=(((sj6*x4638))+((r01*x4639))+x4651+x4650+(((-1.0)*x4641*x4643))+(((-1.0)*x4643*x4646)));
evalcond[3]=(((cj5*r12*sj0))+(((-1.0)*x4653))+((cj0*cj5*r02))+((r00*sj5*x4639))+((x4641*x4642))+((x4638*x4640))+((cj0*r01*x4640))+x4648);
evalcond[4]=((-0.1255)+(((0.02626)*x4648))+(((-1.0)*r21*x4644))+(((-0.0009)*sj2))+pz+(((-0.02626)*x4652))+(((-0.01834)*cj2))+((r20*x4645))+(((0.0718)*x4650))+(((0.0718)*x4651)));
evalcond[5]=((-0.001)+(((-1.0)*x4645*x4646))+(((-0.01834)*sj2))+((x4638*x4644))+(((-0.0718)*x4648))+(((0.0009)*cj2))+(((0.026255)*r01*x4639))+(((-1.0)*x4641*x4645))+(((0.02626)*x4650))+(((-1.0)*py*sj0))+(((0.0718)*x4652))+((sj2*x4649))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4654=(cj0*sj5);
IkReal x4655=(cj5*cj6);
IkReal x4656=((1.0)*sj5);
IkReal x4657=((1.0)*cj0);
IkReal x4658=((1.0)*sj0);
IkReal x4659=(cj5*sj6);
IkReal x4660=(r10*x4659);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj3))+((r20*x4659))+(((-1.0)*r22*x4656))+((r21*x4655)));
evalcond[2]=((((-1.0)*x4658*x4660))+((r12*sj0*sj5))+((r02*x4654))+(((-1.0)*r01*x4655*x4657))+(((-1.0)*r00*x4657*x4659))+(((-1.0)*r11*x4655*x4658)));
evalcond[3]=(((r12*x4654))+cj3+((r00*sj0*x4659))+(((-1.0)*r02*sj0*x4656))+((r01*sj0*x4655))+(((-1.0)*r11*x4655*x4657))+(((-1.0)*x4657*x4660)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4661=(cj5*cj6);
IkReal x4662=((1.0)*sj0);
IkReal x4663=((1.0)*r22);
IkReal x4664=(cj0*sj5);
IkReal x4665=(cj5*sj6);
IkReal x4666=((1.0)*cj0);
IkReal x4667=(cj6*r20);
IkReal x4668=((1.0)*sj5);
IkReal x4669=(r21*sj6);
IkReal x4670=(x4665*x4666);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x4661))+((r20*x4665))+(((-1.0)*sj5*x4663)));
evalcond[2]=((((-1.0)*x4669))+x4667);
evalcond[3]=((((-1.0)*cj5*x4663))+(((-1.0)*cj6*r21*x4668))+(((-1.0)*r20*sj6*x4668)));
evalcond[4]=(((r02*x4664))+((r12*sj0*sj5))+(((-1.0)*r10*x4662*x4665))+(((-1.0)*r01*x4661*x4666))+(((-1.0)*r00*x4670))+(((-1.0)*r11*x4661*x4662)));
evalcond[5]=(((r12*x4664))+(((-1.0)*r10*x4670))+((r01*sj0*x4661))+(((-1.0)*r02*sj5*x4662))+(((-1.0)*r11*x4661*x4666))+((r00*sj0*x4665)));
evalcond[6]=((-0.2413)+(((-0.026255)*x4669))+pz+(((0.026255)*x4667)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4671=(cj0*cj6);
IkReal x4672=(cj6*sj0);
IkReal x4673=(cj0*sj6);
IkReal x4674=((1.0)*sj0*sj6);
if( IKabs((((r11*x4673))+(((-1.0)*r10*x4671))+((r00*x4672))+(((-1.0)*r01*x4674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4673))+((r10*x4672))+(((-1.0)*r11*x4674))+((r00*x4671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x4673))+(((-1.0)*r10*x4671))+((r00*x4672))+(((-1.0)*r01*x4674))))+IKsqr(((((-1.0)*r01*x4673))+((r10*x4672))+(((-1.0)*r11*x4674))+((r00*x4671))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x4673))+(((-1.0)*r10*x4671))+((r00*x4672))+(((-1.0)*r01*x4674))), ((((-1.0)*r01*x4673))+((r10*x4672))+(((-1.0)*r11*x4674))+((r00*x4671))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4675=IKsin(j4);
IkReal x4676=IKcos(j4);
IkReal x4677=(r11*sj6);
IkReal x4678=((0.026255)*cj0);
IkReal x4679=(r01*sj6);
IkReal x4680=(sj0*sj5);
IkReal x4681=(cj6*r11);
IkReal x4682=(r10*sj6);
IkReal x4683=(cj5*r12);
IkReal x4684=(cj6*sj0);
IkReal x4685=((1.0)*sj0);
IkReal x4686=(cj5*r02);
IkReal x4687=((1.0)*r10);
IkReal x4688=(cj0*sj5);
IkReal x4689=(r00*sj6);
IkReal x4690=((0.026255)*sj0);
IkReal x4691=(cj0*cj6);
IkReal x4692=((1.0)*cj0);
IkReal x4693=(cj6*r01);
evalcond[0]=(((cj0*x4679))+(((-1.0)*x4684*x4687))+((sj0*x4677))+x4676+(((-1.0)*r00*x4691)));
evalcond[1]=(((cj0*x4677))+(((-1.0)*x4679*x4685))+(((-1.0)*x4687*x4691))+(((-1.0)*x4675))+((r00*x4684)));
evalcond[2]=(((x4680*x4681))+((x4680*x4682))+x4675+((cj0*x4686))+((sj0*x4683))+((x4688*x4693))+((x4688*x4689)));
evalcond[3]=(((x4682*x4688))+x4676+((x4681*x4688))+((cj0*x4683))+(((-1.0)*x4685*x4686))+(((-1.0)*x4680*x4689))+(((-1.0)*x4680*x4693)));
evalcond[4]=((-0.09736)+(((-1.0)*x4679*x4690))+(((-0.02626)*x4675))+(((-0.0718)*x4676))+(((-1.0)*cj6*r10*x4678))+((x4677*x4678))+(((0.026255)*r00*x4684))+((px*sj0))+(((-1.0)*py*x4692)));
evalcond[5]=((-0.0001)+(((0.02626)*x4676))+((x4677*x4690))+(((-1.0)*px*x4692))+(((-0.0718)*x4675))+(((-0.026255)*r10*x4684))+((x4678*x4679))+(((-1.0)*cj6*r00*x4678))+(((-1.0)*py*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4694=(cj5*cj6);
IkReal x4695=((1.0)*sj0);
IkReal x4696=((1.0)*r22);
IkReal x4697=(cj0*sj5);
IkReal x4698=(cj5*sj6);
IkReal x4699=((1.0)*cj0);
IkReal x4700=(cj6*r20);
IkReal x4701=((1.0)*sj5);
IkReal x4702=(r21*sj6);
IkReal x4703=(x4698*x4699);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x4694))+(((-1.0)*sj5*x4696))+((r20*x4698)));
evalcond[2]=((((-1.0)*x4702))+x4700);
evalcond[3]=((((-1.0)*r20*sj6*x4701))+(((-1.0)*cj5*x4696))+(((-1.0)*cj6*r21*x4701)));
evalcond[4]=((((-1.0)*r00*x4703))+((r02*x4697))+(((-1.0)*r11*x4694*x4695))+((r12*sj0*sj5))+(((-1.0)*r10*x4695*x4698))+(((-1.0)*r01*x4694*x4699)));
evalcond[5]=((((-1.0)*r02*sj5*x4695))+((r00*sj0*x4698))+(((-1.0)*r11*x4694*x4699))+((r12*x4697))+(((-1.0)*r10*x4703))+((r01*sj0*x4694)));
evalcond[6]=((-0.2413)+(((-0.026255)*x4702))+pz+(((0.026255)*x4700)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4704=(cj0*cj6);
IkReal x4705=(sj0*sj6);
IkReal x4706=((1.0)*r11);
IkReal x4707=(cj6*sj0);
IkReal x4708=(cj0*sj6);
if( IKabs((((r10*x4704))+((r01*x4705))+(((-1.0)*x4706*x4708))+(((-1.0)*r00*x4707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4707))+((r00*x4704))+(((-1.0)*r01*x4708))+(((-1.0)*x4705*x4706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x4704))+((r01*x4705))+(((-1.0)*x4706*x4708))+(((-1.0)*r00*x4707))))+IKsqr((((r10*x4707))+((r00*x4704))+(((-1.0)*r01*x4708))+(((-1.0)*x4705*x4706))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x4704))+((r01*x4705))+(((-1.0)*x4706*x4708))+(((-1.0)*r00*x4707))), (((r10*x4707))+((r00*x4704))+(((-1.0)*r01*x4708))+(((-1.0)*x4705*x4706))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4709=IKsin(j4);
IkReal x4710=IKcos(j4);
IkReal x4711=(r11*sj6);
IkReal x4712=((0.026255)*cj0);
IkReal x4713=(r01*sj6);
IkReal x4714=(sj0*sj5);
IkReal x4715=(cj6*r11);
IkReal x4716=(r10*sj6);
IkReal x4717=(cj5*r12);
IkReal x4718=(cj6*sj0);
IkReal x4719=((1.0)*sj0);
IkReal x4720=(cj5*r02);
IkReal x4721=((1.0)*r10);
IkReal x4722=(cj0*sj5);
IkReal x4723=(r00*sj6);
IkReal x4724=((0.026255)*sj0);
IkReal x4725=(cj0*cj6);
IkReal x4726=((1.0)*cj0);
IkReal x4727=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x4725))+((cj0*x4713))+((sj0*x4711))+x4710+(((-1.0)*x4718*x4721)));
evalcond[1]=(((cj0*x4711))+x4709+((r00*x4718))+(((-1.0)*x4721*x4725))+(((-1.0)*x4713*x4719)));
evalcond[2]=(((cj0*x4720))+((x4714*x4715))+((x4714*x4716))+((sj0*x4717))+((x4722*x4727))+((x4722*x4723))+x4709);
evalcond[3]=((((-1.0)*x4710))+((cj0*x4717))+(((-1.0)*x4714*x4727))+(((-1.0)*x4714*x4723))+((x4716*x4722))+((x4715*x4722))+(((-1.0)*x4719*x4720)));
evalcond[4]=((0.09756)+(((-1.0)*py*x4726))+(((0.026255)*r00*x4718))+(((0.0718)*x4710))+((x4711*x4712))+((px*sj0))+(((-1.0)*cj6*r10*x4712))+(((0.02626)*x4709))+(((-1.0)*x4713*x4724)));
evalcond[5]=((-0.0001)+((x4711*x4724))+(((-0.026255)*r10*x4718))+(((-1.0)*px*x4726))+(((-1.0)*cj6*r00*x4712))+(((-0.0718)*x4709))+((x4712*x4713))+(((-1.0)*py*x4719))+(((0.02626)*x4710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4728=((1.0)*sj6);
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(cj3,-1);
if(!x4729.valid){
continue;
}
if( IKabs(((x4729.value)*(((((-1.0)*r21*x4728))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj0*x4728))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4728))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4729.value)*(((((-1.0)*r21*x4728))+((cj6*r20))))))+IKsqr(((((-1.0)*r11*sj0*x4728))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4728))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4729.value)*(((((-1.0)*r21*x4728))+((cj6*r20))))), ((((-1.0)*r11*sj0*x4728))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4728))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4730=IKcos(j4);
IkReal x4731=IKsin(j4);
IkReal x4732=(r11*sj0);
IkReal x4733=(cj0*sj6);
IkReal x4734=((0.026255)*r01);
IkReal x4735=(cj6*sj5);
IkReal x4736=(r10*sj0);
IkReal x4737=(sj5*sj6);
IkReal x4738=((1.0)*cj5);
IkReal x4739=((1.0)*cj6);
IkReal x4740=((1.0)*sj0);
IkReal x4741=((0.026255)*sj6);
IkReal x4742=(cj5*r12);
IkReal x4743=(cj0*r10);
IkReal x4744=((0.026255)*cj6);
IkReal x4745=((1.0)*r21);
IkReal x4746=((1.0)*cj0);
IkReal x4747=(cj0*r00);
IkReal x4748=((1.0)*x4731);
IkReal x4749=((0.02626)*x4731);
IkReal x4750=(sj3*x4730);
IkReal x4751=(cj6*r00*sj0);
IkReal x4752=(cj3*x4730);
evalcond[0]=((((-1.0)*sj6*x4745))+(((-1.0)*cj3*x4748))+((cj6*r20)));
evalcond[1]=(x4752+(((-1.0)*r20*x4737))+(((-1.0)*x4735*x4745))+(((-1.0)*r22*x4738)));
evalcond[2]=((((-1.0)*x4736*x4739))+x4730+((r01*x4733))+(((-1.0)*x4739*x4747))+((sj6*x4732)));
evalcond[3]=(((r11*x4733))+(((-1.0)*sj3*x4748))+x4751+(((-1.0)*x4739*x4743))+(((-1.0)*r01*sj6*x4740)));
evalcond[4]=((-0.2413)+(((-1.0)*cj3*x4749))+(((-0.0718)*x4752))+((r20*x4744))+(((-1.0)*r21*x4741))+pz+(((-0.09746)*cj3)));
evalcond[5]=(((cj0*cj5*r02))+((x4736*x4737))+x4731+((x4732*x4735))+((r00*sj5*x4733))+((cj0*r01*x4735))+((sj0*x4742)));
evalcond[6]=((((-1.0)*r00*x4737*x4740))+((cj0*x4742))+((cj0*r11*x4735))+(((-1.0)*r01*x4735*x4740))+x4750+(((-1.0)*r02*sj0*x4738))+((r10*sj5*x4733)));
evalcond[7]=((-0.0001)+(((-1.0)*py*x4740))+(((-0.0718)*x4731))+(((-1.0)*x4736*x4744))+(((-1.0)*x4744*x4747))+((x4733*x4734))+(((-1.0)*px*x4746))+(((0.02626)*x4730))+((x4732*x4741)));
evalcond[8]=((0.0001)+(((-1.0)*py*x4746))+(((-0.0718)*x4750))+(((-1.0)*sj3*x4749))+((px*sj0))+(((0.026255)*r11*x4733))+(((-0.09746)*sj3))+(((-1.0)*sj0*sj6*x4734))+((r00*sj0*x4744))+(((-1.0)*x4743*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4753 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4753.value)+(((1.5707963267949)*(x4754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4755=IKcos(j4);
IkReal x4756=IKsin(j4);
IkReal x4757=(r11*sj0);
IkReal x4758=(cj0*sj6);
IkReal x4759=((0.026255)*r01);
IkReal x4760=(cj6*sj5);
IkReal x4761=(r10*sj0);
IkReal x4762=(sj5*sj6);
IkReal x4763=((1.0)*cj5);
IkReal x4764=((1.0)*cj6);
IkReal x4765=((1.0)*sj0);
IkReal x4766=((0.026255)*sj6);
IkReal x4767=(cj5*r12);
IkReal x4768=(cj0*r10);
IkReal x4769=((0.026255)*cj6);
IkReal x4770=((1.0)*r21);
IkReal x4771=((1.0)*cj0);
IkReal x4772=(cj0*r00);
IkReal x4773=((1.0)*x4756);
IkReal x4774=((0.02626)*x4756);
IkReal x4775=(sj3*x4755);
IkReal x4776=(cj6*r00*sj0);
IkReal x4777=(cj3*x4755);
evalcond[0]=((((-1.0)*cj3*x4773))+(((-1.0)*sj6*x4770))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x4762))+(((-1.0)*r22*x4763))+x4777+(((-1.0)*x4760*x4770)));
evalcond[2]=(((r01*x4758))+(((-1.0)*x4761*x4764))+((sj6*x4757))+x4755+(((-1.0)*x4764*x4772)));
evalcond[3]=(((r11*x4758))+(((-1.0)*sj3*x4773))+x4776+(((-1.0)*r01*sj6*x4765))+(((-1.0)*x4764*x4768)));
evalcond[4]=((-0.2413)+(((-1.0)*cj3*x4774))+(((-1.0)*r21*x4766))+pz+(((-0.09746)*cj3))+((r20*x4769))+(((-0.0718)*x4777)));
evalcond[5]=(((cj0*cj5*r02))+((cj0*r01*x4760))+x4756+((sj0*x4767))+((x4761*x4762))+((r00*sj5*x4758))+((x4757*x4760)));
evalcond[6]=((((-1.0)*r00*x4762*x4765))+((r10*sj5*x4758))+((cj0*x4767))+x4775+((cj0*r11*x4760))+(((-1.0)*r02*sj0*x4763))+(((-1.0)*r01*x4760*x4765)));
evalcond[7]=((-0.0001)+((x4758*x4759))+(((-0.0718)*x4756))+(((-1.0)*x4769*x4772))+(((-1.0)*x4761*x4769))+(((-1.0)*px*x4771))+(((0.02626)*x4755))+(((-1.0)*py*x4765))+((x4757*x4766)));
evalcond[8]=((0.0001)+(((0.026255)*r11*x4758))+(((-1.0)*sj3*x4774))+(((-1.0)*sj0*sj6*x4759))+(((-1.0)*x4768*x4769))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*py*x4771))+((r00*sj0*x4769))+(((-0.0718)*x4775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4778=(cj0*sj5);
IkReal x4779=(cj5*cj6);
IkReal x4780=((1.0)*sj5);
IkReal x4781=((1.0)*cj0);
IkReal x4782=((1.0)*sj0);
IkReal x4783=(cj5*sj6);
IkReal x4784=(r10*x4783);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(sj3+(((-1.0)*r22*x4780))+((r20*x4783))+((r21*x4779)));
evalcond[2]=((((-1.0)*r00*x4781*x4783))+(((-1.0)*r11*x4779*x4782))+((r12*sj0*sj5))+(((-1.0)*x4782*x4784))+((r02*x4778))+(((-1.0)*r01*x4779*x4781)));
evalcond[3]=(cj3+(((-1.0)*r11*x4779*x4781))+((r12*x4778))+((r01*sj0*x4779))+(((-1.0)*x4781*x4784))+(((-1.0)*r02*sj0*x4780))+((r00*sj0*x4783)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4785=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x4785))+(((-1.0)*cj6*r21*x4785))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=((1.0)*cj6);
CheckValue<IkReal> x4787=IKPowWithIntegerCheck(cj3,-1);
if(!x4787.valid){
continue;
}
if( IKabs(((x4787.value)*(((((-1.0)*r20*x4786))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4786))+(((-1.0)*cj0*r00*x4786))+((cj0*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4787.value)*(((((-1.0)*r20*x4786))+((r21*sj6))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4786))+(((-1.0)*cj0*r00*x4786))+((cj0*r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4787.value)*(((((-1.0)*r20*x4786))+((r21*sj6))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x4786))+(((-1.0)*cj0*r00*x4786))+((cj0*r01*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4788=IKcos(j4);
IkReal x4789=IKsin(j4);
IkReal x4790=(sj0*sj6);
IkReal x4791=(cj0*sj6);
IkReal x4792=((0.026255)*r01);
IkReal x4793=(cj5*r12);
IkReal x4794=(r10*sj5);
IkReal x4795=(cj6*sj0);
IkReal x4796=((0.026255)*r00);
IkReal x4797=((1.0)*cj5);
IkReal x4798=((1.0)*r10);
IkReal x4799=((1.0)*r01);
IkReal x4800=(cj0*cj6);
IkReal x4801=(r00*sj5);
IkReal x4802=((0.026255)*r11);
IkReal x4803=((1.0)*py);
IkReal x4804=(cj6*r20);
IkReal x4805=((1.0)*sj5);
IkReal x4806=(r11*sj5);
IkReal x4807=((0.026255)*r10);
IkReal x4808=(r21*sj6);
IkReal x4809=((1.0)*x4788);
IkReal x4810=(sj3*x4789);
IkReal x4811=(sj3*x4788);
IkReal x4812=(cj3*x4789);
evalcond[0]=((((-1.0)*x4808))+x4812+x4804);
evalcond[1]=((((-1.0)*cj3*x4809))+(((-1.0)*r20*sj6*x4805))+(((-1.0)*r22*x4797))+(((-1.0)*cj6*r21*x4805)));
evalcond[2]=(((r01*x4791))+(((-1.0)*r00*x4800))+(((-1.0)*x4795*x4798))+((r11*x4790))+(((-1.0)*x4809)));
evalcond[3]=(((r00*x4795))+(((-1.0)*x4810))+(((-1.0)*x4790*x4799))+(((-1.0)*x4798*x4800))+((r11*x4791)));
evalcond[4]=((-0.0097)+(((0.0718)*cj3*x4788))+(((0.026255)*x4804))+pz+(((0.02626)*x4812))+(((-0.026255)*x4808))+(((0.09746)*cj3)));
evalcond[5]=(((x4790*x4794))+((cj0*cj5*r02))+((sj0*x4793))+((x4791*x4801))+((x4795*x4806))+(((-1.0)*x4789))+((r01*sj5*x4800)));
evalcond[6]=((((-1.0)*x4790*x4801))+((x4800*x4806))+((cj0*x4793))+(((-1.0)*r02*sj0*x4797))+((x4791*x4794))+x4811+(((-1.0)*sj5*x4795*x4799)));
evalcond[7]=((-0.0019)+(((0.0718)*x4789))+(((-1.0)*x4796*x4800))+(((-0.02626)*x4788))+((x4791*x4792))+(((-1.0)*sj0*x4803))+(((-1.0)*x4795*x4807))+((x4790*x4802))+(((-1.0)*cj0*px)));
evalcond[8]=((0.0001)+(((-0.0718)*x4811))+((x4795*x4796))+(((-0.02626)*x4810))+(((-1.0)*x4800*x4807))+((x4791*x4802))+(((-1.0)*x4790*x4792))+(((-1.0)*cj0*x4803))+((px*sj0))+(((-0.09746)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4813=((1.0)*sj5);
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x4813))+(((-1.0)*r20*sj6*x4813))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4814.value)))+(x4815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4816=IKcos(j4);
IkReal x4817=IKsin(j4);
IkReal x4818=(sj0*sj6);
IkReal x4819=(cj0*sj6);
IkReal x4820=((0.026255)*r01);
IkReal x4821=(cj5*r12);
IkReal x4822=(r10*sj5);
IkReal x4823=(cj6*sj0);
IkReal x4824=((0.026255)*r00);
IkReal x4825=((1.0)*cj5);
IkReal x4826=((1.0)*r10);
IkReal x4827=((1.0)*r01);
IkReal x4828=(cj0*cj6);
IkReal x4829=(r00*sj5);
IkReal x4830=((0.026255)*r11);
IkReal x4831=((1.0)*py);
IkReal x4832=(cj6*r20);
IkReal x4833=((1.0)*sj5);
IkReal x4834=(r11*sj5);
IkReal x4835=((0.026255)*r10);
IkReal x4836=(r21*sj6);
IkReal x4837=((1.0)*x4816);
IkReal x4838=(sj3*x4817);
IkReal x4839=(sj3*x4816);
IkReal x4840=(cj3*x4817);
evalcond[0]=((((-1.0)*x4836))+x4832+x4840);
evalcond[1]=((((-1.0)*r20*sj6*x4833))+(((-1.0)*r22*x4825))+(((-1.0)*cj3*x4837))+(((-1.0)*cj6*r21*x4833)));
evalcond[2]=((((-1.0)*r00*x4828))+((r11*x4818))+(((-1.0)*x4823*x4826))+(((-1.0)*x4837))+((r01*x4819)));
evalcond[3]=((((-1.0)*x4826*x4828))+((r11*x4819))+(((-1.0)*x4838))+(((-1.0)*x4818*x4827))+((r00*x4823)));
evalcond[4]=((-0.0097)+(((-0.026255)*x4836))+(((0.026255)*x4832))+(((0.0718)*cj3*x4816))+(((0.02626)*x4840))+pz+(((0.09746)*cj3)));
evalcond[5]=(((x4818*x4822))+((cj0*cj5*r02))+((x4819*x4829))+((x4823*x4834))+(((-1.0)*x4817))+((r01*sj5*x4828))+((sj0*x4821)));
evalcond[6]=(((x4819*x4822))+(((-1.0)*sj5*x4823*x4827))+(((-1.0)*r02*sj0*x4825))+(((-1.0)*x4818*x4829))+((x4828*x4834))+x4839+((cj0*x4821)));
evalcond[7]=((-0.0019)+(((0.0718)*x4817))+((x4819*x4820))+((x4818*x4830))+(((-0.02626)*x4816))+(((-1.0)*x4824*x4828))+(((-1.0)*x4823*x4835))+(((-1.0)*cj0*px))+(((-1.0)*sj0*x4831)));
evalcond[8]=((0.0001)+(((-1.0)*cj0*x4831))+((x4819*x4830))+((x4823*x4824))+(((-0.02626)*x4838))+((px*sj0))+(((-1.0)*x4828*x4835))+(((-0.09746)*sj3))+(((-1.0)*x4818*x4820))+(((-0.0718)*x4839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4841=(cj0*sj5);
IkReal x4842=(cj5*cj6);
IkReal x4843=((1.0)*sj5);
IkReal x4844=((1.0)*cj0);
IkReal x4845=((1.0)*sj0);
IkReal x4846=(cj5*sj6);
IkReal x4847=(r10*x4846);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x4846))+((r21*x4842))+(((-1.0)*cj2))+(((-1.0)*r22*x4843)));
evalcond[2]=(((r02*x4841))+(((-1.0)*sj2))+(((-1.0)*r01*x4842*x4844))+(((-1.0)*r11*x4842*x4845))+((r12*sj0*sj5))+(((-1.0)*x4845*x4847))+(((-1.0)*r00*x4844*x4846)));
evalcond[3]=(((r01*sj0*x4842))+(((-1.0)*r02*sj0*x4843))+((r00*sj0*x4846))+(((-1.0)*r11*x4842*x4844))+(((-1.0)*x4844*x4847))+((r12*x4841)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4848=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*sj6*x4848)))))+(IKabs(((((-1.0)*cj6*sj5*x4848))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4849=((1.0)*sj5);
IkReal x4850=((1.0)*sj6);
CheckValue<IkReal> x4851=IKPowWithIntegerCheck(sj2,-1);
if(!x4851.valid){
continue;
}
CheckValue<IkReal> x4852=IKPowWithIntegerCheck(cj2,-1);
if(!x4852.valid){
continue;
}
if( IKabs(((x4851.value)*(((((-1.0)*cj6*r21*x4849))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x4849)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4852.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4850))+(((-1.0)*r11*sj0*x4850))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4851.value)*(((((-1.0)*cj6*r21*x4849))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x4849))))))+IKsqr(((x4852.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4850))+(((-1.0)*r11*sj0*x4850))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4851.value)*(((((-1.0)*cj6*r21*x4849))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x4849))))), ((x4852.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x4850))+(((-1.0)*r11*sj0*x4850))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4853=IKcos(j4);
IkReal x4854=IKsin(j4);
IkReal x4855=(r11*sj0);
IkReal x4856=(cj0*sj6);
IkReal x4857=((0.026255)*r01);
IkReal x4858=(cj5*r12);
IkReal x4859=(cj6*sj5);
IkReal x4860=(r10*sj5);
IkReal x4861=(sj0*sj6);
IkReal x4862=((1.0)*cj5);
IkReal x4863=((1.0)*r01);
IkReal x4864=(r00*sj5);
IkReal x4865=((0.026255)*sj6);
IkReal x4866=((1.0)*py);
IkReal x4867=((0.026255)*cj6);
IkReal x4868=((1.0)*r21);
IkReal x4869=((1.0)*cj0);
IkReal x4870=((1.0)*cj6*r10);
IkReal x4871=(cj2*x4854);
IkReal x4872=(cj6*r00*sj0);
IkReal x4873=(cj2*x4853);
IkReal x4874=((1.0)*x4854);
IkReal x4875=(sj2*x4853);
evalcond[0]=((((-1.0)*sj6*x4868))+((cj6*r20))+(((-1.0)*x4875)));
evalcond[1]=((((-1.0)*sj2*x4874))+(((-1.0)*r22*x4862))+(((-1.0)*x4859*x4868))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(((r01*x4856))+(((-1.0)*cj6*r00*x4869))+((sj6*x4855))+(((-1.0)*sj0*x4870))+x4873);
evalcond[3]=((((-1.0)*x4861*x4863))+(((-1.0)*x4874))+x4872+(((-1.0)*cj6*r10*x4869))+((r11*x4856)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x4865))+(((-0.1158)*cj2))+(((0.0718)*sj2*x4854))+(((-0.0009)*sj2))+((r20*x4867))+pz+(((-0.02626)*x4875)));
evalcond[5]=(((cj0*cj5*r02))+((cj0*r01*x4859))+((x4860*x4861))+((x4855*x4859))+((x4856*x4864))+((sj0*x4858))+x4871);
evalcond[6]=(((cj0*x4858))+((cj0*r11*x4859))+(((-1.0)*x4861*x4864))+(((-1.0)*sj0*x4859*x4863))+(((-1.0)*r02*sj0*x4862))+((x4856*x4860))+x4853);
evalcond[7]=((-0.09736)+(((-1.0)*cj0*x4866))+(((-1.0)*cj0*r10*x4867))+(((-1.0)*x4857*x4861))+(((-0.02626)*x4854))+((r00*sj0*x4867))+((px*sj0))+(((-0.0718)*x4853))+(((0.026255)*r11*x4856)));
evalcond[8]=((-0.001)+(((-1.0)*sj0*x4866))+(((-1.0)*cj0*r00*x4867))+(((-0.1158)*sj2))+(((0.02626)*x4873))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x4867))+((x4855*x4865))+(((-0.0718)*x4871))+(((-1.0)*px*x4869))+((x4856*x4857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4876=((1.0)*sj6);
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(sj2,-1);
if(!x4877.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x4876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4877.value)*(((((-1.0)*r21*x4876))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x4876))))+IKsqr(((x4877.value)*(((((-1.0)*r21*x4876))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x4876))), ((x4877.value)*(((((-1.0)*r21*x4876))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4878=IKcos(j4);
IkReal x4879=IKsin(j4);
IkReal x4880=(r11*sj0);
IkReal x4881=(cj0*sj6);
IkReal x4882=((0.026255)*r01);
IkReal x4883=(cj5*r12);
IkReal x4884=(cj6*sj5);
IkReal x4885=(r10*sj5);
IkReal x4886=(sj0*sj6);
IkReal x4887=((1.0)*cj5);
IkReal x4888=((1.0)*r01);
IkReal x4889=(r00*sj5);
IkReal x4890=((0.026255)*sj6);
IkReal x4891=((1.0)*py);
IkReal x4892=((0.026255)*cj6);
IkReal x4893=((1.0)*r21);
IkReal x4894=((1.0)*cj0);
IkReal x4895=((1.0)*cj6*r10);
IkReal x4896=(cj2*x4879);
IkReal x4897=(cj6*r00*sj0);
IkReal x4898=(cj2*x4878);
IkReal x4899=((1.0)*x4879);
IkReal x4900=(sj2*x4878);
evalcond[0]=((((-1.0)*x4900))+(((-1.0)*sj6*x4893))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj2*x4899))+(((-1.0)*x4884*x4893))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r22*x4887)));
evalcond[2]=((((-1.0)*sj0*x4895))+(((-1.0)*cj6*r00*x4894))+((r01*x4881))+((sj6*x4880))+x4898);
evalcond[3]=((((-1.0)*x4899))+((r11*x4881))+(((-1.0)*cj6*r10*x4894))+(((-1.0)*x4886*x4888))+x4897);
evalcond[4]=((-0.1255)+(((-0.02626)*x4900))+(((-0.1158)*cj2))+((r20*x4892))+(((0.0718)*sj2*x4879))+(((-1.0)*r21*x4890))+(((-0.0009)*sj2))+pz);
evalcond[5]=(((x4885*x4886))+((cj0*cj5*r02))+((cj0*r01*x4884))+((x4880*x4884))+((x4881*x4889))+((sj0*x4883))+x4896);
evalcond[6]=(((cj0*x4883))+(((-1.0)*x4886*x4889))+(((-1.0)*sj0*x4884*x4888))+(((-1.0)*r02*sj0*x4887))+((x4881*x4885))+((cj0*r11*x4884))+x4878);
evalcond[7]=((-0.09736)+((r00*sj0*x4892))+(((-1.0)*cj0*r10*x4892))+(((-1.0)*x4882*x4886))+(((-0.02626)*x4879))+(((-0.0718)*x4878))+((px*sj0))+(((-1.0)*cj0*x4891))+(((0.026255)*r11*x4881)));
evalcond[8]=((-0.001)+(((-1.0)*sj0*x4891))+(((-1.0)*r10*sj0*x4892))+(((0.02626)*x4898))+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x4892))+(((0.0009)*cj2))+(((-0.0718)*x4896))+(((-1.0)*px*x4894))+((x4881*x4882))+((x4880*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4901=((1.0)*r21);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x4901))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x4901))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4904=IKcos(j4);
IkReal x4905=IKsin(j4);
IkReal x4906=(r11*sj0);
IkReal x4907=(cj0*sj6);
IkReal x4908=((0.026255)*r01);
IkReal x4909=(cj5*r12);
IkReal x4910=(cj6*sj5);
IkReal x4911=(r10*sj5);
IkReal x4912=(sj0*sj6);
IkReal x4913=((1.0)*cj5);
IkReal x4914=((1.0)*r01);
IkReal x4915=(r00*sj5);
IkReal x4916=((0.026255)*sj6);
IkReal x4917=((1.0)*py);
IkReal x4918=((0.026255)*cj6);
IkReal x4919=((1.0)*r21);
IkReal x4920=((1.0)*cj0);
IkReal x4921=((1.0)*cj6*r10);
IkReal x4922=(cj2*x4905);
IkReal x4923=(cj6*r00*sj0);
IkReal x4924=(cj2*x4904);
IkReal x4925=((1.0)*x4905);
IkReal x4926=(sj2*x4904);
evalcond[0]=((((-1.0)*x4926))+(((-1.0)*sj6*x4919))+((cj6*r20)));
evalcond[1]=((((-1.0)*x4910*x4919))+(((-1.0)*r22*x4913))+(((-1.0)*sj2*x4925))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x4924+(((-1.0)*sj0*x4921))+((sj6*x4906))+(((-1.0)*cj6*r00*x4920))+((r01*x4907)));
evalcond[3]=((((-1.0)*x4912*x4914))+x4923+(((-1.0)*cj6*r10*x4920))+((r11*x4907))+(((-1.0)*x4925)));
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((-0.0009)*sj2))+((r20*x4918))+pz+(((-1.0)*r21*x4916))+(((-0.02626)*x4926))+(((0.0718)*sj2*x4905)));
evalcond[5]=(x4922+((cj0*cj5*r02))+((x4911*x4912))+((x4906*x4910))+((x4907*x4915))+((sj0*x4909))+((cj0*r01*x4910)));
evalcond[6]=(x4904+(((-1.0)*sj0*x4910*x4914))+(((-1.0)*r02*sj0*x4913))+((x4907*x4911))+((cj0*r11*x4910))+(((-1.0)*x4912*x4915))+((cj0*x4909)));
evalcond[7]=((-0.09736)+(((-1.0)*cj0*r10*x4918))+(((-0.02626)*x4905))+(((-1.0)*cj0*x4917))+(((-1.0)*x4908*x4912))+(((0.026255)*r11*x4907))+((r00*sj0*x4918))+((px*sj0))+(((-0.0718)*x4904)));
evalcond[8]=((-0.001)+(((-0.0718)*x4922))+(((-0.1158)*sj2))+((x4906*x4916))+((x4907*x4908))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x4918))+(((-1.0)*px*x4920))+(((-1.0)*sj0*x4917))+(((-1.0)*r10*sj0*x4918))+(((0.02626)*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4927=(cj0*sj5);
IkReal x4928=(cj5*cj6);
IkReal x4929=((1.0)*sj5);
IkReal x4930=((1.0)*cj0);
IkReal x4931=((1.0)*sj0);
IkReal x4932=(cj5*sj6);
IkReal x4933=(r10*x4932);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x4932))+cj2+((r21*x4928))+(((-1.0)*r22*x4929)));
evalcond[2]=(sj2+(((-1.0)*x4931*x4933))+((r12*sj0*sj5))+(((-1.0)*r01*x4928*x4930))+(((-1.0)*r11*x4928*x4931))+((r02*x4927))+(((-1.0)*r00*x4930*x4932)));
evalcond[3]=((((-1.0)*x4930*x4933))+(((-1.0)*r11*x4928*x4930))+((r01*sj0*x4928))+((r00*sj0*x4932))+(((-1.0)*r02*sj0*x4929))+((r12*x4927)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4934=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x4934))+(((-1.0)*r20*sj5*sj6)))))+(IKabs(((((-1.0)*sj6*x4934))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4935=((1.0)*sj5);
IkReal x4936=((1.0)*sj6);
CheckValue<IkReal> x4937=IKPowWithIntegerCheck(sj2,-1);
if(!x4937.valid){
continue;
}
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(cj2,-1);
if(!x4938.valid){
continue;
}
if( IKabs(((x4937.value)*(((((-1.0)*cj6*r21*x4935))+(((-1.0)*r20*sj6*x4935))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4938.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4936))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4936)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4937.value)*(((((-1.0)*cj6*r21*x4935))+(((-1.0)*r20*sj6*x4935))+(((-1.0)*cj5*r22))))))+IKsqr(((x4938.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4936))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4936))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4937.value)*(((((-1.0)*cj6*r21*x4935))+(((-1.0)*r20*sj6*x4935))+(((-1.0)*cj5*r22))))), ((x4938.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x4936))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x4936))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4939=IKsin(j4);
IkReal x4940=IKcos(j4);
IkReal x4941=(r11*sj0);
IkReal x4942=(cj0*sj6);
IkReal x4943=((0.026255)*r01);
IkReal x4944=(cj5*r12);
IkReal x4945=(cj6*sj5);
IkReal x4946=(r10*sj5);
IkReal x4947=(sj0*sj6);
IkReal x4948=((1.0)*cj5);
IkReal x4949=((1.0)*r01);
IkReal x4950=(r00*sj5);
IkReal x4951=((0.026255)*sj6);
IkReal x4952=((1.0)*py);
IkReal x4953=((1.0)*sj2);
IkReal x4954=((0.026255)*cj6);
IkReal x4955=((1.0)*r21);
IkReal x4956=((1.0)*cj0);
IkReal x4957=((1.0)*cj6*r10);
IkReal x4958=(cj2*x4939);
IkReal x4959=(cj6*r00*sj0);
IkReal x4960=(cj2*x4940);
evalcond[0]=((((-1.0)*x4940*x4953))+(((-1.0)*sj6*x4955))+((cj6*r20)));
evalcond[1]=((((-1.0)*x4939*x4953))+(((-1.0)*r22*x4948))+(((-1.0)*x4945*x4955))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*x4947*x4949))+x4939+x4959+((r11*x4942))+(((-1.0)*cj6*r10*x4956)));
evalcond[3]=(x4960+((r01*x4942))+(((-1.0)*cj6*r00*x4956))+((sj6*x4941))+(((-1.0)*sj0*x4957)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x4951))+(((0.0718)*sj2*x4939))+(((-0.1158)*cj2))+(((-0.02626)*sj2*x4940))+(((-0.0009)*sj2))+pz+((r20*x4954)));
evalcond[5]=(x4958+((cj0*cj5*r02))+((x4946*x4947))+((x4942*x4950))+((sj0*x4944))+((x4941*x4945))+((cj0*r01*x4945)));
evalcond[6]=(((cj0*x4944))+(((-1.0)*sj0*x4945*x4949))+(((-1.0)*r02*sj0*x4948))+((cj0*r11*x4945))+(((-1.0)*x4947*x4950))+((x4942*x4946))+(((-1.0)*x4940)));
evalcond[7]=((0.09756)+(((0.02626)*x4939))+(((-1.0)*x4943*x4947))+(((0.026255)*r11*x4942))+(((-1.0)*cj0*r10*x4954))+(((-1.0)*cj0*x4952))+(((0.0718)*x4940))+((px*sj0))+((r00*sj0*x4954)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*px*x4956))+((x4942*x4943))+(((-1.0)*sj0*x4952))+(((0.0009)*cj2))+(((0.02626)*x4960))+((x4941*x4951))+(((-1.0)*cj0*r00*x4954))+(((-0.0718)*x4958))+(((-1.0)*r10*sj0*x4954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4961=((1.0)*sj6);
CheckValue<IkReal> x4962=IKPowWithIntegerCheck(sj2,-1);
if(!x4962.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r11*x4961))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4962.value)*(((((-1.0)*r21*x4961))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r11*x4961))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))+IKsqr(((x4962.value)*(((((-1.0)*r21*x4961))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r11*x4961))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))), ((x4962.value)*(((((-1.0)*r21*x4961))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4963=IKsin(j4);
IkReal x4964=IKcos(j4);
IkReal x4965=(r11*sj0);
IkReal x4966=(cj0*sj6);
IkReal x4967=((0.026255)*r01);
IkReal x4968=(cj5*r12);
IkReal x4969=(cj6*sj5);
IkReal x4970=(r10*sj5);
IkReal x4971=(sj0*sj6);
IkReal x4972=((1.0)*cj5);
IkReal x4973=((1.0)*r01);
IkReal x4974=(r00*sj5);
IkReal x4975=((0.026255)*sj6);
IkReal x4976=((1.0)*py);
IkReal x4977=((1.0)*sj2);
IkReal x4978=((0.026255)*cj6);
IkReal x4979=((1.0)*r21);
IkReal x4980=((1.0)*cj0);
IkReal x4981=((1.0)*cj6*r10);
IkReal x4982=(cj2*x4963);
IkReal x4983=(cj6*r00*sj0);
IkReal x4984=(cj2*x4964);
evalcond[0]=((((-1.0)*sj6*x4979))+((cj6*r20))+(((-1.0)*x4964*x4977)));
evalcond[1]=((((-1.0)*x4963*x4977))+(((-1.0)*r22*x4972))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*x4969*x4979)));
evalcond[2]=(x4983+x4963+(((-1.0)*cj6*r10*x4980))+((r11*x4966))+(((-1.0)*x4971*x4973)));
evalcond[3]=(x4984+(((-1.0)*cj6*r00*x4980))+((sj6*x4965))+(((-1.0)*sj0*x4981))+((r01*x4966)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x4975))+(((-0.1158)*cj2))+(((-0.02626)*sj2*x4964))+(((-0.0009)*sj2))+pz+((r20*x4978))+(((0.0718)*sj2*x4963)));
evalcond[5]=(x4982+((cj0*cj5*r02))+((cj0*r01*x4969))+((sj0*x4968))+((x4970*x4971))+((x4966*x4974))+((x4965*x4969)));
evalcond[6]=(((x4966*x4970))+(((-1.0)*sj0*x4969*x4973))+((cj0*r11*x4969))+(((-1.0)*r02*sj0*x4972))+(((-1.0)*x4964))+(((-1.0)*x4971*x4974))+((cj0*x4968)));
evalcond[7]=((0.09756)+((r00*sj0*x4978))+(((0.026255)*r11*x4966))+(((-1.0)*cj0*r10*x4978))+(((-1.0)*cj0*x4976))+(((0.02626)*x4963))+(((-1.0)*x4967*x4971))+((px*sj0))+(((0.0718)*x4964)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+((x4966*x4967))+((x4965*x4975))+(((0.0009)*cj2))+(((-1.0)*sj0*x4976))+(((-0.0718)*x4982))+(((-1.0)*cj0*r00*x4978))+(((0.02626)*x4984))+(((-1.0)*px*x4980))+(((-1.0)*r10*sj0*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4985=((1.0)*r21);
CheckValue<IkReal> x4986 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x4985))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x4985))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x4987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4986.value)+(((1.5707963267949)*(x4987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x4988=IKsin(j4);
IkReal x4989=IKcos(j4);
IkReal x4990=(r11*sj0);
IkReal x4991=(cj0*sj6);
IkReal x4992=((0.026255)*r01);
IkReal x4993=(cj5*r12);
IkReal x4994=(cj6*sj5);
IkReal x4995=(r10*sj5);
IkReal x4996=(sj0*sj6);
IkReal x4997=((1.0)*cj5);
IkReal x4998=((1.0)*r01);
IkReal x4999=(r00*sj5);
IkReal x5000=((0.026255)*sj6);
IkReal x5001=((1.0)*py);
IkReal x5002=((1.0)*sj2);
IkReal x5003=((0.026255)*cj6);
IkReal x5004=((1.0)*r21);
IkReal x5005=((1.0)*cj0);
IkReal x5006=((1.0)*cj6*r10);
IkReal x5007=(cj2*x4988);
IkReal x5008=(cj6*r00*sj0);
IkReal x5009=(cj2*x4989);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x5004))+(((-1.0)*x4989*x5002)));
evalcond[1]=((((-1.0)*x4988*x5002))+(((-1.0)*r22*x4997))+(((-1.0)*x4994*x5004))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x4988+((r11*x4991))+x5008+(((-1.0)*cj6*r10*x5005))+(((-1.0)*x4996*x4998)));
evalcond[3]=((((-1.0)*cj6*r00*x5005))+(((-1.0)*sj0*x5006))+((sj6*x4990))+x5009+((r01*x4991)));
evalcond[4]=((-0.1255)+((r20*x5003))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((-0.02626)*sj2*x4989))+(((0.0718)*sj2*x4988))+(((-1.0)*r21*x5000)));
evalcond[5]=(((x4995*x4996))+((cj0*cj5*r02))+((cj0*r01*x4994))+((sj0*x4993))+x5007+((x4991*x4999))+((x4990*x4994)));
evalcond[6]=(((cj0*r11*x4994))+(((-1.0)*sj0*x4994*x4998))+(((-1.0)*x4996*x4999))+(((-1.0)*r02*sj0*x4997))+(((-1.0)*x4989))+((cj0*x4993))+((x4991*x4995)));
evalcond[7]=((0.09756)+(((0.026255)*r11*x4991))+((r00*sj0*x5003))+(((-1.0)*cj0*r10*x5003))+(((0.0718)*x4989))+((px*sj0))+(((0.02626)*x4988))+(((-1.0)*cj0*x5001))+(((-1.0)*x4992*x4996)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*px*x5005))+(((-1.0)*sj0*x5001))+(((0.0009)*cj2))+(((0.02626)*x5009))+((x4990*x5000))+(((-1.0)*r10*sj0*x5003))+(((-0.0718)*x5007))+((x4991*x4992))+(((-1.0)*cj0*r00*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5018=IKPowWithIntegerCheck(sj3,-1);
if(!x5018.valid){
continue;
}
IkReal x5010=x5018.value;
IkReal x5011=((1.0)*cj0);
IkReal x5012=(cj6*r10);
IkReal x5013=((1.0)*sj6);
IkReal x5014=(r01*sj0);
IkReal x5015=(cj2*cj3);
IkReal x5016=(sj6*x5015);
IkReal x5017=(cj6*r00*sj0);
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(sj2,-1);
if(!x5019.valid){
continue;
}
if( IKabs((x5010*((((cj0*r11*sj6))+x5017+(((-1.0)*x5013*x5014))+(((-1.0)*x5011*x5012)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5010*(x5019.value)*((((x5014*x5016))+(((-1.0)*x5015*x5017))+(((-1.0)*r21*sj3*x5013))+((cj0*x5012*x5015))+(((-1.0)*r11*x5011*x5016))+((cj6*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5010*((((cj0*r11*sj6))+x5017+(((-1.0)*x5013*x5014))+(((-1.0)*x5011*x5012))))))+IKsqr((x5010*(x5019.value)*((((x5014*x5016))+(((-1.0)*x5015*x5017))+(((-1.0)*r21*sj3*x5013))+((cj0*x5012*x5015))+(((-1.0)*r11*x5011*x5016))+((cj6*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x5010*((((cj0*r11*sj6))+x5017+(((-1.0)*x5013*x5014))+(((-1.0)*x5011*x5012))))), (x5010*(x5019.value)*((((x5014*x5016))+(((-1.0)*x5015*x5017))+(((-1.0)*r21*sj3*x5013))+((cj0*x5012*x5015))+(((-1.0)*r11*x5011*x5016))+((cj6*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5020=IKsin(j4);
IkReal x5021=IKcos(j4);
IkReal x5022=(r11*sj6);
IkReal x5023=((0.026255)*cj0);
IkReal x5024=(r01*sj6);
IkReal x5025=(cj6*sj0);
IkReal x5026=(r11*sj5);
IkReal x5027=(cj6*r20);
IkReal x5028=((0.026255)*sj0);
IkReal x5029=(cj5*r12);
IkReal x5030=((1.0)*cj5);
IkReal x5031=(cj2*cj3);
IkReal x5032=((1.0)*r10);
IkReal x5033=(cj3*sj2);
IkReal x5034=((1.0)*sj0);
IkReal x5035=(cj0*cj6);
IkReal x5036=(r01*sj5);
IkReal x5037=((1.0)*sj5);
IkReal x5038=((1.0)*cj0);
IkReal x5039=(sj5*sj6);
IkReal x5040=(r21*sj6);
IkReal x5041=((1.0)*x5020);
IkReal x5042=((0.02626)*x5020);
IkReal x5043=(cj2*x5020);
IkReal x5044=(sj3*x5021);
IkReal x5045=(cj0*x5039);
IkReal x5046=((0.0718)*x5021);
IkReal x5047=(cj2*x5021);
IkReal x5048=(sj2*x5021);
evalcond[0]=(x5027+(((-1.0)*x5048))+(((-1.0)*x5040))+(((-1.0)*x5031*x5041)));
evalcond[1]=(((cj0*x5022))+(((-1.0)*x5024*x5034))+(((-1.0)*x5032*x5035))+((r00*x5025))+(((-1.0)*sj3*x5041)));
evalcond[2]=(((x5021*x5031))+(((-1.0)*cj6*r21*x5037))+(((-1.0)*sj2*x5041))+(((-1.0)*r22*x5030))+(((-1.0)*r20*sj6*x5037)));
evalcond[3]=(((cj0*x5024))+(((-1.0)*x5033*x5041))+(((-1.0)*r00*x5035))+x5047+((sj0*x5022))+(((-1.0)*x5025*x5032)));
evalcond[4]=(((cj0*x5029))+(((-1.0)*r02*sj0*x5030))+(((-1.0)*r00*x5034*x5039))+(((-1.0)*x5025*x5036))+((x5026*x5035))+x5044+((r10*x5045)));
evalcond[5]=(((x5021*x5033))+((cj0*cj5*r02))+((x5035*x5036))+x5043+((x5025*x5026))+((sj0*x5029))+((r00*x5045))+((r10*sj0*x5039)));
evalcond[6]=((0.0001)+((x5022*x5023))+(((0.026255)*r00*x5025))+(((-0.0718)*x5044))+(((-1.0)*cj6*r10*x5023))+(((-1.0)*py*x5038))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*sj3*x5042))+(((-1.0)*x5024*x5028)));
evalcond[7]=((-0.1255)+(((-0.09746)*x5031))+(((0.026255)*x5027))+(((-0.1158)*cj2))+(((-0.02626)*x5048))+(((-0.0009)*sj2))+(((-1.0)*x5031*x5046))+(((-1.0)*x5031*x5042))+pz+(((0.0718)*sj2*x5020))+(((-0.026255)*x5040)));
evalcond[8]=((-0.001)+((x5023*x5024))+((x5022*x5028))+(((-0.09746)*x5033))+(((-0.1158)*sj2))+(((-1.0)*x5033*x5046))+(((-1.0)*x5033*x5042))+(((-1.0)*px*x5038))+(((0.0009)*cj2))+(((-0.0718)*x5043))+(((0.02626)*x5047))+(((-1.0)*py*x5034))+(((-1.0)*cj6*r00*x5023))+(((-0.026255)*r10*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5049=(sj2*sj6);
IkReal x5050=(cj0*r01);
IkReal x5051=((1.0)*sj0);
IkReal x5052=(cj6*sj2);
IkReal x5053=(cj2*sj6);
IkReal x5054=((1.0)*r21);
IkReal x5055=(cj0*r00);
IkReal x5056=(cj2*cj6);
CheckValue<IkReal> x5057=IKPowWithIntegerCheck(cj3,-1);
if(!x5057.valid){
continue;
}
if( IKabs(((x5057.value)*((((r20*x5056))+((x5049*x5050))+(((-1.0)*r10*x5051*x5052))+(((-1.0)*x5053*x5054))+((r11*sj0*x5049))+(((-1.0)*x5052*x5055)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5055*x5056))+((r20*x5052))+(((-1.0)*x5050*x5053))+((r10*sj0*x5056))+(((-1.0)*r11*x5051*x5053))+(((-1.0)*x5049*x5054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5057.value)*((((r20*x5056))+((x5049*x5050))+(((-1.0)*r10*x5051*x5052))+(((-1.0)*x5053*x5054))+((r11*sj0*x5049))+(((-1.0)*x5052*x5055))))))+IKsqr((((x5055*x5056))+((r20*x5052))+(((-1.0)*x5050*x5053))+((r10*sj0*x5056))+(((-1.0)*r11*x5051*x5053))+(((-1.0)*x5049*x5054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5057.value)*((((r20*x5056))+((x5049*x5050))+(((-1.0)*r10*x5051*x5052))+(((-1.0)*x5053*x5054))+((r11*sj0*x5049))+(((-1.0)*x5052*x5055))))), (((x5055*x5056))+((r20*x5052))+(((-1.0)*x5050*x5053))+((r10*sj0*x5056))+(((-1.0)*r11*x5051*x5053))+(((-1.0)*x5049*x5054))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5058=IKsin(j4);
IkReal x5059=IKcos(j4);
IkReal x5060=(r11*sj6);
IkReal x5061=((0.026255)*cj0);
IkReal x5062=(r01*sj6);
IkReal x5063=(cj6*sj0);
IkReal x5064=(r11*sj5);
IkReal x5065=(cj6*r20);
IkReal x5066=((0.026255)*sj0);
IkReal x5067=(cj5*r12);
IkReal x5068=((1.0)*cj5);
IkReal x5069=(cj2*cj3);
IkReal x5070=((1.0)*r10);
IkReal x5071=(cj3*sj2);
IkReal x5072=((1.0)*sj0);
IkReal x5073=(cj0*cj6);
IkReal x5074=(r01*sj5);
IkReal x5075=((1.0)*sj5);
IkReal x5076=((1.0)*cj0);
IkReal x5077=(sj5*sj6);
IkReal x5078=(r21*sj6);
IkReal x5079=((1.0)*x5058);
IkReal x5080=((0.02626)*x5058);
IkReal x5081=(cj2*x5058);
IkReal x5082=(sj3*x5059);
IkReal x5083=(cj0*x5077);
IkReal x5084=((0.0718)*x5059);
IkReal x5085=(cj2*x5059);
IkReal x5086=(sj2*x5059);
evalcond[0]=((((-1.0)*x5086))+(((-1.0)*x5069*x5079))+x5065+(((-1.0)*x5078)));
evalcond[1]=((((-1.0)*x5062*x5072))+((cj0*x5060))+(((-1.0)*x5070*x5073))+((r00*x5063))+(((-1.0)*sj3*x5079)));
evalcond[2]=((((-1.0)*cj6*r21*x5075))+(((-1.0)*r20*sj6*x5075))+(((-1.0)*r22*x5068))+((x5059*x5069))+(((-1.0)*sj2*x5079)));
evalcond[3]=(((cj0*x5062))+(((-1.0)*r00*x5073))+x5085+((sj0*x5060))+(((-1.0)*x5071*x5079))+(((-1.0)*x5063*x5070)));
evalcond[4]=((((-1.0)*x5063*x5074))+((cj0*x5067))+((x5064*x5073))+((r10*x5083))+(((-1.0)*r00*x5072*x5077))+x5082+(((-1.0)*r02*sj0*x5068)));
evalcond[5]=(((r10*sj0*x5077))+((cj0*cj5*r02))+((x5063*x5064))+((x5073*x5074))+((r00*x5083))+x5081+((sj0*x5067))+((x5059*x5071)));
evalcond[6]=((0.0001)+(((-0.0718)*x5082))+((x5060*x5061))+(((-1.0)*sj3*x5080))+(((-1.0)*cj6*r10*x5061))+(((0.026255)*r00*x5063))+(((-1.0)*py*x5076))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*x5062*x5066)));
evalcond[7]=((-0.1255)+(((-0.1158)*cj2))+(((-0.09746)*x5069))+(((-0.0009)*sj2))+(((0.026255)*x5065))+pz+(((-1.0)*x5069*x5084))+(((-1.0)*x5069*x5080))+(((-0.026255)*x5078))+(((0.0718)*sj2*x5058))+(((-0.02626)*x5086)));
evalcond[8]=((-0.001)+(((0.02626)*x5085))+(((-0.0718)*x5081))+((x5060*x5066))+(((-0.1158)*sj2))+(((-0.026255)*r10*x5063))+(((-0.09746)*x5071))+(((0.0009)*cj2))+(((-1.0)*x5071*x5080))+(((-1.0)*x5071*x5084))+(((-1.0)*cj6*r00*x5061))+(((-1.0)*py*x5072))+((x5061*x5062))+(((-1.0)*px*x5076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5087=cj2*cj2;
IkReal x5088=(cj2*cj3);
IkReal x5089=(cj6*r20);
IkReal x5090=(cj5*r22);
IkReal x5091=(r20*sj5);
IkReal x5092=((1.0)*sj2);
IkReal x5093=(sj6*x5092);
IkReal x5094=(cj6*r21*sj5);
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x5087))+((x5087*(cj3*cj3))))),-1);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj6*x5088))+(((-1.0)*x5091*x5093))+(((-1.0)*x5090*x5092))+((x5088*x5089))+(((-1.0)*x5092*x5094)))),(((sj6*x5088*x5091))+((sj2*x5089))+((x5088*x5094))+((x5088*x5090))+(((-1.0)*r21*x5093))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5095.value)))+(x5096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5097=IKsin(j4);
IkReal x5098=IKcos(j4);
IkReal x5099=(r11*sj6);
IkReal x5100=((0.026255)*cj0);
IkReal x5101=(r01*sj6);
IkReal x5102=(cj6*sj0);
IkReal x5103=(r11*sj5);
IkReal x5104=(cj6*r20);
IkReal x5105=((0.026255)*sj0);
IkReal x5106=(cj5*r12);
IkReal x5107=((1.0)*cj5);
IkReal x5108=(cj2*cj3);
IkReal x5109=((1.0)*r10);
IkReal x5110=(cj3*sj2);
IkReal x5111=((1.0)*sj0);
IkReal x5112=(cj0*cj6);
IkReal x5113=(r01*sj5);
IkReal x5114=((1.0)*sj5);
IkReal x5115=((1.0)*cj0);
IkReal x5116=(sj5*sj6);
IkReal x5117=(r21*sj6);
IkReal x5118=((1.0)*x5097);
IkReal x5119=((0.02626)*x5097);
IkReal x5120=(cj2*x5097);
IkReal x5121=(sj3*x5098);
IkReal x5122=(cj0*x5116);
IkReal x5123=((0.0718)*x5098);
IkReal x5124=(cj2*x5098);
IkReal x5125=(sj2*x5098);
evalcond[0]=((((-1.0)*x5117))+x5104+(((-1.0)*x5108*x5118))+(((-1.0)*x5125)));
evalcond[1]=(((r00*x5102))+(((-1.0)*x5101*x5111))+(((-1.0)*sj3*x5118))+(((-1.0)*x5109*x5112))+((cj0*x5099)));
evalcond[2]=((((-1.0)*cj6*r21*x5114))+(((-1.0)*sj2*x5118))+((x5098*x5108))+(((-1.0)*r22*x5107))+(((-1.0)*r20*sj6*x5114)));
evalcond[3]=((((-1.0)*r00*x5112))+(((-1.0)*x5110*x5118))+((cj0*x5101))+x5124+(((-1.0)*x5102*x5109))+((sj0*x5099)));
evalcond[4]=((((-1.0)*x5102*x5113))+((cj0*x5106))+((r10*x5122))+x5121+(((-1.0)*r02*sj0*x5107))+((x5103*x5112))+(((-1.0)*r00*x5111*x5116)));
evalcond[5]=(((x5112*x5113))+((x5098*x5110))+((x5102*x5103))+((cj0*cj5*r02))+((r00*x5122))+((sj0*x5106))+x5120+((r10*sj0*x5116)));
evalcond[6]=((0.0001)+(((-1.0)*x5101*x5105))+(((0.026255)*r00*x5102))+(((-1.0)*sj3*x5119))+(((-1.0)*cj6*r10*x5100))+((x5099*x5100))+(((-0.0718)*x5121))+(((-1.0)*py*x5115))+((px*sj0))+(((-0.09746)*sj3)));
evalcond[7]=((-0.1255)+(((-1.0)*x5108*x5123))+(((-0.1158)*cj2))+(((-0.026255)*x5117))+(((-0.0009)*sj2))+pz+(((-0.09746)*x5108))+(((-1.0)*x5108*x5119))+(((0.026255)*x5104))+(((-0.02626)*x5125))+(((0.0718)*sj2*x5097)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*x5110*x5119))+((x5099*x5105))+(((-0.0718)*x5120))+(((0.0009)*cj2))+(((-0.026255)*r10*x5102))+(((-1.0)*px*x5115))+(((-1.0)*x5110*x5123))+(((-1.0)*py*x5111))+(((-0.09746)*x5110))+(((-1.0)*cj6*r00*x5100))+((x5100*x5101))+(((0.02626)*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5126=(cj5*cj6);
IkReal x5127=((1.0)*sj5);
IkReal x5128=((1.0)*sj0);
IkReal x5129=(cj5*sj6);
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(cj2,-1);
if(!x5130.valid){
continue;
}
if( IKabs(((x5130.value)*((((r20*x5129))+((r21*x5126))+(((-1.0)*r22*x5127)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj0*sj5))+((cj0*r11*x5126))+(((-1.0)*cj0*r12*x5127))+(((-1.0)*r01*x5126*x5128))+((cj0*r10*x5129))+(((-1.0)*r00*x5128*x5129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5130.value)*((((r20*x5129))+((r21*x5126))+(((-1.0)*r22*x5127))))))+IKsqr((((r02*sj0*sj5))+((cj0*r11*x5126))+(((-1.0)*cj0*r12*x5127))+(((-1.0)*r01*x5126*x5128))+((cj0*r10*x5129))+(((-1.0)*r00*x5128*x5129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5130.value)*((((r20*x5129))+((r21*x5126))+(((-1.0)*r22*x5127))))), (((r02*sj0*sj5))+((cj0*r11*x5126))+(((-1.0)*cj0*r12*x5127))+(((-1.0)*r01*x5126*x5128))+((cj0*r10*x5129))+(((-1.0)*r00*x5128*x5129))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x5131=IKsin(j3);
IkReal x5132=(cj5*cj6);
IkReal x5133=((1.0)*sj5);
IkReal x5134=((1.0)*cj0);
IkReal x5135=(cj0*sj5);
IkReal x5136=(cj5*sj6);
IkReal x5137=(r10*x5136);
IkReal x5138=((1.0)*x5131);
IkReal x5139=((1.0)*r11*x5132);
evalcond[0]=(((r20*x5136))+((r21*x5132))+(((-1.0)*cj2*x5138))+(((-1.0)*r22*x5133)));
evalcond[1]=(((r01*sj0*x5132))+((r12*x5135))+((r00*sj0*x5136))+(IKcos(j3))+(((-1.0)*r11*x5132*x5134))+(((-1.0)*r02*sj0*x5133))+(((-1.0)*x5134*x5137)));
evalcond[2]=((((-1.0)*sj0*x5137))+((r12*sj0*sj5))+(((-1.0)*sj2*x5138))+(((-1.0)*sj0*x5139))+(((-1.0)*r01*x5132*x5134))+((r02*x5135))+(((-1.0)*r00*x5134*x5136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x5140=cj2*cj2;
IkReal x5141=(cj2*cj3);
IkReal x5142=(cj6*r20);
IkReal x5143=(cj6*r21);
IkReal x5144=(cj5*r22);
IkReal x5145=(r20*sj6);
IkReal x5146=((1.0)*sj2*sj5);
IkReal x5147=((1.0)*r21*sj6);
IkReal x5148=((1.0)+(((-1.0)*x5140))+((x5140*(cj3*cj3))));
j4eval[0]=x5148;
j4eval[1]=IKsign(x5148);
j4eval[2]=((IKabs((((sj2*x5142))+(((-1.0)*sj2*x5147))+((x5141*x5144))+((sj5*x5141*x5143))+((sj5*x5141*x5145)))))+(IKabs(((((-1.0)*sj2*x5144))+(((-1.0)*x5143*x5146))+(((-1.0)*x5141*x5147))+((x5141*x5142))+(((-1.0)*x5145*x5146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5149=(cj5*cj6);
IkReal x5150=(cj0*sj6);
IkReal x5151=(r01*sj0);
IkReal x5152=((1.0)*sj0);
IkReal x5153=((1.0)*cj5);
IkReal x5154=(cj0*r12);
IkReal x5155=(r02*sj5);
IkReal x5156=((1.0)*sj5);
IkReal x5157=(cj5*sj6);
IkReal x5158=((1.0)*cj0);
IkReal x5159=(cj6*r10);
IkReal x5160=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r21*x5149))+((r20*x5157))+(((-1.0)*r22*x5156)));
evalcond[2]=(((r11*x5150))+x5160+(((-1.0)*sj6*x5151))+(((-1.0)*x5158*x5159)));
evalcond[3]=((((-1.0)*r11*x5149*x5152))+((cj0*x5155))+((r12*sj0*sj5))+(((-1.0)*r10*x5152*x5157))+(((-1.0)*r00*x5150*x5153))+(((-1.0)*r01*x5149*x5158)));
evalcond[4]=((1.0)+((sj5*x5154))+(((-1.0)*r11*x5149*x5158))+((x5149*x5151))+(((-1.0)*x5152*x5155))+(((-1.0)*r10*x5150*x5153))+((r00*sj0*x5157)));
evalcond[5]=(((r10*sj5*x5150))+(((-1.0)*r00*sj5*sj6*x5152))+(((-1.0)*cj5*r02*x5152))+(((-1.0)*cj6*x5151*x5156))+((cj5*x5154))+((cj0*cj6*r11*sj5)));
evalcond[6]=((0.0001)+(((-0.026255)*sj6*x5151))+(((-1.0)*py*x5158))+(((0.026255)*r11*x5150))+(((-0.026255)*cj0*x5159))+((px*sj0))+(((0.026255)*x5160)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5161=((1.0)*r21);
IkReal x5162=(cj2*sj6);
IkReal x5163=(cj5*r22);
IkReal x5164=(cj6*sj5);
IkReal x5165=(r20*sj2);
if( IKabs(((((-1.0)*sj2*x5161*x5164))+(((-1.0)*sj2*x5163))+((cj2*cj6*r20))+(((-1.0)*x5161*x5162))+(((-1.0)*sj5*sj6*x5165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x5165))+((cj2*x5163))+((cj2*r21*x5164))+((r20*sj5*x5162))+(((-1.0)*sj2*sj6*x5161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x5161*x5164))+(((-1.0)*sj2*x5163))+((cj2*cj6*r20))+(((-1.0)*x5161*x5162))+(((-1.0)*sj5*sj6*x5165))))+IKsqr((((cj6*x5165))+((cj2*x5163))+((cj2*r21*x5164))+((r20*sj5*x5162))+(((-1.0)*sj2*sj6*x5161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x5161*x5164))+(((-1.0)*sj2*x5163))+((cj2*cj6*r20))+(((-1.0)*x5161*x5162))+(((-1.0)*sj5*sj6*x5165))), (((cj6*x5165))+((cj2*x5163))+((cj2*r21*x5164))+((r20*sj5*x5162))+(((-1.0)*sj2*sj6*x5161))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5166=IKcos(j4);
IkReal x5167=IKsin(j4);
IkReal x5168=(r11*sj0);
IkReal x5169=((0.026255)*sj6);
IkReal x5170=(cj0*r01);
IkReal x5171=(cj6*sj5);
IkReal x5172=(r10*sj0);
IkReal x5173=(sj5*sj6);
IkReal x5174=(cj6*r20);
IkReal x5175=((1.0)*cj6);
IkReal x5176=(cj0*r00);
IkReal x5177=((0.026255)*cj6);
IkReal x5178=((1.0)*r21);
IkReal x5179=(cj2*x5166);
IkReal x5180=((0.02626)*x5167);
IkReal x5181=(cj2*x5167);
IkReal x5182=((0.0718)*x5166);
IkReal x5183=(sj2*x5166);
IkReal x5184=(sj2*x5167);
IkReal x5185=((1.0)*x5184);
evalcond[0]=(x5174+(((-1.0)*sj6*x5178))+(((-1.0)*x5183))+(((-1.0)*x5181)));
evalcond[1]=((((-1.0)*r20*x5173))+x5179+(((-1.0)*cj5*r22))+(((-1.0)*x5185))+(((-1.0)*x5171*x5178)));
evalcond[2]=((((-1.0)*x5175*x5176))+((sj6*x5170))+(((-1.0)*x5172*x5175))+((sj6*x5168))+x5179+(((-1.0)*x5185)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+x5183+x5181+((x5170*x5171))+((x5173*x5176))+((x5172*x5173))+((x5168*x5171)));
evalcond[4]=((-0.1255)+(((-1.0)*cj2*x5180))+(((-1.0)*r21*x5169))+(((-0.21326)*cj2))+(((-0.0009)*sj2))+pz+(((-0.02626)*x5183))+(((0.0718)*x5184))+(((-0.0718)*x5179))+(((0.026255)*x5174)));
evalcond[5]=((-0.001)+(((-1.0)*x5176*x5177))+(((-0.0718)*x5181))+(((-1.0)*x5172*x5177))+(((-1.0)*sj2*x5182))+(((-1.0)*sj2*x5180))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+(((0.02626)*x5179))+((x5168*x5169))+((x5169*x5170))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5186=(cj5*cj6);
IkReal x5187=(cj0*sj6);
IkReal x5188=(r01*sj0);
IkReal x5189=((1.0)*sj0);
IkReal x5190=((1.0)*cj5);
IkReal x5191=(cj0*r12);
IkReal x5192=(r02*sj5);
IkReal x5193=((1.0)*sj5);
IkReal x5194=(cj5*sj6);
IkReal x5195=((1.0)*cj0);
IkReal x5196=(cj6*r10);
IkReal x5197=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x5193))+((r21*x5186))+((r20*x5194)));
evalcond[2]=(x5197+((r11*x5187))+(((-1.0)*x5195*x5196))+(((-1.0)*sj6*x5188)));
evalcond[3]=(((cj0*x5192))+(((-1.0)*r11*x5186*x5189))+(((-1.0)*r00*x5187*x5190))+((r12*sj0*sj5))+(((-1.0)*r10*x5189*x5194))+(((-1.0)*r01*x5186*x5195)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x5187*x5190))+((x5186*x5188))+(((-1.0)*x5189*x5192))+(((-1.0)*r11*x5186*x5195))+((r00*sj0*x5194))+((sj5*x5191)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x5189))+((cj0*cj6*r11*sj5))+((cj5*x5191))+(((-1.0)*cj5*r02*x5189))+(((-1.0)*cj6*x5188*x5193))+((r10*sj5*x5187)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x5187))+(((-1.0)*py*x5195))+(((-0.026255)*sj6*x5188))+((px*sj0))+(((0.026255)*x5197))+(((-0.026255)*cj0*x5196)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5198=(cj2*r21);
IkReal x5199=((1.0)*cj6);
IkReal x5200=((1.0)*cj2);
IkReal x5201=(cj5*r22);
IkReal x5202=(r20*sj2);
IkReal x5203=(sj5*sj6);
IkReal x5204=(r21*sj2);
if( IKabs(((((-1.0)*x5202*x5203))+((sj6*x5198))+(((-1.0)*sj5*x5199*x5204))+(((-1.0)*cj2*r20*x5199))+(((-1.0)*sj2*x5201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5200*x5201))+(((-1.0)*sj5*x5198*x5199))+(((-1.0)*r20*x5200*x5203))+((cj6*x5202))+(((-1.0)*sj6*x5204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5202*x5203))+((sj6*x5198))+(((-1.0)*sj5*x5199*x5204))+(((-1.0)*cj2*r20*x5199))+(((-1.0)*sj2*x5201))))+IKsqr(((((-1.0)*x5200*x5201))+(((-1.0)*sj5*x5198*x5199))+(((-1.0)*r20*x5200*x5203))+((cj6*x5202))+(((-1.0)*sj6*x5204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x5202*x5203))+((sj6*x5198))+(((-1.0)*sj5*x5199*x5204))+(((-1.0)*cj2*r20*x5199))+(((-1.0)*sj2*x5201))), ((((-1.0)*x5200*x5201))+(((-1.0)*sj5*x5198*x5199))+(((-1.0)*r20*x5200*x5203))+((cj6*x5202))+(((-1.0)*sj6*x5204))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5205=IKcos(j4);
IkReal x5206=IKsin(j4);
IkReal x5207=(r11*sj0);
IkReal x5208=(cj0*sj6);
IkReal x5209=(cj6*sj5);
IkReal x5210=(r10*sj0);
IkReal x5211=(sj5*sj6);
IkReal x5212=((1.0)*cj6);
IkReal x5213=((0.026255)*sj6);
IkReal x5214=((0.026255)*cj6);
IkReal x5215=(cj0*r00);
IkReal x5216=((1.0)*r21);
IkReal x5217=(cj2*x5206);
IkReal x5218=((0.02626)*x5206);
IkReal x5219=(cj2*x5205);
IkReal x5220=(sj2*x5206);
IkReal x5221=(sj2*x5205);
IkReal x5222=((1.0)*x5221);
evalcond[0]=((((-1.0)*sj6*x5216))+x5217+((cj6*r20))+(((-1.0)*x5222)));
evalcond[1]=((((-1.0)*r20*x5211))+(((-1.0)*cj5*r22))+(((-1.0)*x5209*x5216))+(((-1.0)*x5220))+(((-1.0)*x5219)));
evalcond[2]=((((-1.0)*x5212*x5215))+((r01*x5208))+x5220+x5219+((sj6*x5207))+(((-1.0)*x5210*x5212)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*r01*x5209))+((r00*sj5*x5208))+((cj0*cj5*r02))+x5217+((x5210*x5211))+(((-1.0)*x5222))+((x5207*x5209)));
evalcond[4]=((-0.1255)+((r20*x5214))+(((-0.02626)*x5221))+(((0.0718)*x5219))+(((0.0718)*x5220))+(((-0.0009)*sj2))+pz+(((-0.01834)*cj2))+(((-1.0)*r21*x5213))+(((0.02626)*x5217)));
evalcond[5]=((-0.001)+((x5207*x5213))+(((-0.0718)*x5217))+(((0.026255)*r01*x5208))+(((-0.01834)*sj2))+(((0.0718)*x5221))+(((0.0009)*cj2))+(((-1.0)*x5214*x5215))+(((-1.0)*py*sj0))+(((0.02626)*x5219))+(((-1.0)*cj0*px))+((sj2*x5218))+(((-1.0)*x5210*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5223=(cj0*sj5);
IkReal x5224=(cj5*cj6);
IkReal x5225=((1.0)*sj5);
IkReal x5226=((1.0)*cj0);
IkReal x5227=((1.0)*sj0);
IkReal x5228=(cj5*sj6);
IkReal x5229=(r10*x5228);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj3))+((r21*x5224))+(((-1.0)*r22*x5225))+((r20*x5228)));
evalcond[2]=((((-1.0)*x5227*x5229))+(((-1.0)*r01*x5224*x5226))+((r02*x5223))+(((-1.0)*r11*x5224*x5227))+(((-1.0)*r00*x5226*x5228))+((r12*sj0*sj5)));
evalcond[3]=(((r00*sj0*x5228))+cj3+(((-1.0)*r11*x5224*x5226))+(((-1.0)*r02*sj0*x5225))+((r01*sj0*x5224))+(((-1.0)*x5226*x5229))+((r12*x5223)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5230=(cj5*cj6);
IkReal x5231=((1.0)*sj0);
IkReal x5232=((1.0)*r22);
IkReal x5233=(cj0*sj5);
IkReal x5234=(cj5*sj6);
IkReal x5235=((1.0)*cj0);
IkReal x5236=(cj6*r20);
IkReal x5237=((1.0)*sj5);
IkReal x5238=(r21*sj6);
IkReal x5239=(x5234*x5235);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x5232))+((r20*x5234))+((r21*x5230)));
evalcond[2]=((((-1.0)*x5238))+x5236);
evalcond[3]=((((-1.0)*cj5*x5232))+(((-1.0)*cj6*r21*x5237))+(((-1.0)*r20*sj6*x5237)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r00*x5239))+(((-1.0)*r10*x5231*x5234))+(((-1.0)*r01*x5230*x5235))+((r02*x5233))+(((-1.0)*r11*x5230*x5231)));
evalcond[5]=((((-1.0)*r10*x5239))+(((-1.0)*r02*sj5*x5231))+((r01*sj0*x5230))+((r12*x5233))+((r00*sj0*x5234))+(((-1.0)*r11*x5230*x5235)));
evalcond[6]=((-0.2413)+(((0.026255)*x5236))+(((-0.026255)*x5238))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5240=(cj0*cj6);
IkReal x5241=(cj6*sj0);
IkReal x5242=(cj0*sj6);
IkReal x5243=((1.0)*sj0*sj6);
if( IKabs((((r11*x5242))+((r00*x5241))+(((-1.0)*r10*x5240))+(((-1.0)*r01*x5243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5241))+(((-1.0)*r01*x5242))+(((-1.0)*r11*x5243))+((r00*x5240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x5242))+((r00*x5241))+(((-1.0)*r10*x5240))+(((-1.0)*r01*x5243))))+IKsqr((((r10*x5241))+(((-1.0)*r01*x5242))+(((-1.0)*r11*x5243))+((r00*x5240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x5242))+((r00*x5241))+(((-1.0)*r10*x5240))+(((-1.0)*r01*x5243))), (((r10*x5241))+(((-1.0)*r01*x5242))+(((-1.0)*r11*x5243))+((r00*x5240))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKsin(j4);
IkReal x5245=IKcos(j4);
IkReal x5246=(r11*sj6);
IkReal x5247=((0.026255)*cj0);
IkReal x5248=(r01*sj6);
IkReal x5249=(sj0*sj5);
IkReal x5250=(cj6*r11);
IkReal x5251=(r10*sj6);
IkReal x5252=(cj5*r12);
IkReal x5253=(cj6*sj0);
IkReal x5254=((1.0)*sj0);
IkReal x5255=(cj5*r02);
IkReal x5256=((1.0)*r10);
IkReal x5257=(cj0*sj5);
IkReal x5258=(r00*sj6);
IkReal x5259=((0.026255)*sj0);
IkReal x5260=(cj0*cj6);
IkReal x5261=((1.0)*cj0);
IkReal x5262=(cj6*r01);
evalcond[0]=(((cj0*x5248))+(((-1.0)*r00*x5260))+x5245+((sj0*x5246))+(((-1.0)*x5253*x5256)));
evalcond[1]=((((-1.0)*x5248*x5254))+((cj0*x5246))+((r00*x5253))+(((-1.0)*x5244))+(((-1.0)*x5256*x5260)));
evalcond[2]=(((sj0*x5252))+x5244+((x5257*x5258))+((x5257*x5262))+((x5249*x5251))+((x5249*x5250))+((cj0*x5255)));
evalcond[3]=((((-1.0)*x5254*x5255))+((x5250*x5257))+x5245+((x5251*x5257))+(((-1.0)*x5249*x5262))+(((-1.0)*x5249*x5258))+((cj0*x5252)));
evalcond[4]=((-0.09736)+(((-1.0)*x5248*x5259))+((x5246*x5247))+(((-1.0)*cj6*r10*x5247))+(((-1.0)*py*x5261))+(((0.026255)*r00*x5253))+((px*sj0))+(((-0.0718)*x5245))+(((-0.02626)*x5244)));
evalcond[5]=((-0.0001)+((x5246*x5259))+(((-1.0)*py*x5254))+((x5247*x5248))+(((-0.026255)*r10*x5253))+(((-1.0)*px*x5261))+(((-1.0)*cj6*r00*x5247))+(((-0.0718)*x5244))+(((0.02626)*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5263=(cj5*cj6);
IkReal x5264=((1.0)*sj0);
IkReal x5265=((1.0)*r22);
IkReal x5266=(cj0*sj5);
IkReal x5267=(cj5*sj6);
IkReal x5268=((1.0)*cj0);
IkReal x5269=(cj6*r20);
IkReal x5270=((1.0)*sj5);
IkReal x5271=(r21*sj6);
IkReal x5272=(x5267*x5268);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x5265))+((r20*x5267))+((r21*x5263)));
evalcond[2]=(x5269+(((-1.0)*x5271)));
evalcond[3]=((((-1.0)*cj5*x5265))+(((-1.0)*r20*sj6*x5270))+(((-1.0)*cj6*r21*x5270)));
evalcond[4]=(((r02*x5266))+(((-1.0)*r00*x5272))+(((-1.0)*r11*x5263*x5264))+((r12*sj0*sj5))+(((-1.0)*r10*x5264*x5267))+(((-1.0)*r01*x5263*x5268)));
evalcond[5]=(((r12*x5266))+(((-1.0)*r02*sj5*x5264))+(((-1.0)*r11*x5263*x5268))+((r00*sj0*x5267))+(((-1.0)*r10*x5272))+((r01*sj0*x5263)));
evalcond[6]=((-0.2413)+pz+(((0.026255)*x5269))+(((-0.026255)*x5271)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5273=(cj0*cj6);
IkReal x5274=(sj0*sj6);
IkReal x5275=((1.0)*r11);
IkReal x5276=(cj6*sj0);
IkReal x5277=(cj0*sj6);
if( IKabs((((r10*x5273))+(((-1.0)*x5275*x5277))+((r01*x5274))+(((-1.0)*r00*x5276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5274*x5275))+((r10*x5276))+(((-1.0)*r01*x5277))+((r00*x5273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5273))+(((-1.0)*x5275*x5277))+((r01*x5274))+(((-1.0)*r00*x5276))))+IKsqr(((((-1.0)*x5274*x5275))+((r10*x5276))+(((-1.0)*r01*x5277))+((r00*x5273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x5273))+(((-1.0)*x5275*x5277))+((r01*x5274))+(((-1.0)*r00*x5276))), ((((-1.0)*x5274*x5275))+((r10*x5276))+(((-1.0)*r01*x5277))+((r00*x5273))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5278=IKsin(j4);
IkReal x5279=IKcos(j4);
IkReal x5280=(r11*sj6);
IkReal x5281=((0.026255)*cj0);
IkReal x5282=(r01*sj6);
IkReal x5283=(sj0*sj5);
IkReal x5284=(cj6*r11);
IkReal x5285=(r10*sj6);
IkReal x5286=(cj5*r12);
IkReal x5287=(cj6*sj0);
IkReal x5288=((1.0)*sj0);
IkReal x5289=(cj5*r02);
IkReal x5290=((1.0)*r10);
IkReal x5291=(cj0*sj5);
IkReal x5292=(r00*sj6);
IkReal x5293=((0.026255)*sj0);
IkReal x5294=(cj0*cj6);
IkReal x5295=((1.0)*cj0);
IkReal x5296=(cj6*r01);
evalcond[0]=((((-1.0)*x5287*x5290))+((sj0*x5280))+x5279+((cj0*x5282))+(((-1.0)*r00*x5294)));
evalcond[1]=(x5278+((cj0*x5280))+((r00*x5287))+(((-1.0)*x5282*x5288))+(((-1.0)*x5290*x5294)));
evalcond[2]=(((sj0*x5286))+((x5291*x5296))+((x5291*x5292))+x5278+((cj0*x5289))+((x5283*x5285))+((x5283*x5284)));
evalcond[3]=((((-1.0)*x5283*x5292))+(((-1.0)*x5283*x5296))+(((-1.0)*x5288*x5289))+((cj0*x5286))+(((-1.0)*x5279))+((x5284*x5291))+((x5285*x5291)));
evalcond[4]=((0.09756)+(((0.0718)*x5279))+((x5280*x5281))+((px*sj0))+(((-1.0)*cj6*r10*x5281))+(((-1.0)*x5282*x5293))+(((-1.0)*py*x5295))+(((0.026255)*r00*x5287))+(((0.02626)*x5278)));
evalcond[5]=((-0.0001)+(((-1.0)*px*x5295))+(((-1.0)*cj6*r00*x5281))+(((-0.0718)*x5278))+((x5280*x5293))+((x5281*x5282))+(((-1.0)*py*x5288))+(((-0.026255)*r10*x5287))+(((0.02626)*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5297=((1.0)*sj6);
CheckValue<IkReal> x5298=IKPowWithIntegerCheck(cj3,-1);
if(!x5298.valid){
continue;
}
if( IKabs(((x5298.value)*(((((-1.0)*r21*x5297))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r01*x5297))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5298.value)*(((((-1.0)*r21*x5297))+((cj6*r20))))))+IKsqr(((((-1.0)*cj0*r01*x5297))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5298.value)*(((((-1.0)*r21*x5297))+((cj6*r20))))), ((((-1.0)*cj0*r01*x5297))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5297))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5299=IKcos(j4);
IkReal x5300=IKsin(j4);
IkReal x5301=(r11*sj0);
IkReal x5302=(cj0*sj6);
IkReal x5303=((0.026255)*r01);
IkReal x5304=(cj6*sj5);
IkReal x5305=(r10*sj0);
IkReal x5306=(sj5*sj6);
IkReal x5307=((1.0)*cj5);
IkReal x5308=((1.0)*cj6);
IkReal x5309=((1.0)*sj0);
IkReal x5310=((0.026255)*sj6);
IkReal x5311=(cj5*r12);
IkReal x5312=(cj0*r10);
IkReal x5313=((0.026255)*cj6);
IkReal x5314=((1.0)*r21);
IkReal x5315=((1.0)*cj0);
IkReal x5316=(cj0*r00);
IkReal x5317=((1.0)*x5300);
IkReal x5318=((0.02626)*x5300);
IkReal x5319=(sj3*x5299);
IkReal x5320=(cj6*r00*sj0);
IkReal x5321=(cj3*x5299);
evalcond[0]=((((-1.0)*cj3*x5317))+(((-1.0)*sj6*x5314))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x5307))+(((-1.0)*r20*x5306))+(((-1.0)*x5304*x5314))+x5321);
evalcond[2]=((((-1.0)*x5305*x5308))+x5299+((sj6*x5301))+(((-1.0)*x5308*x5316))+((r01*x5302)));
evalcond[3]=(x5320+(((-1.0)*x5308*x5312))+(((-1.0)*sj3*x5317))+((r11*x5302))+(((-1.0)*r01*sj6*x5309)));
evalcond[4]=((-0.2413)+(((-1.0)*cj3*x5318))+pz+(((-0.09746)*cj3))+(((-0.0718)*x5321))+((r20*x5313))+(((-1.0)*r21*x5310)));
evalcond[5]=(((x5301*x5304))+((cj0*cj5*r02))+x5300+((cj0*r01*x5304))+((r00*sj5*x5302))+((sj0*x5311))+((x5305*x5306)));
evalcond[6]=(((r10*sj5*x5302))+((cj0*x5311))+x5319+(((-1.0)*r00*x5306*x5309))+((cj0*r11*x5304))+(((-1.0)*r02*sj0*x5307))+(((-1.0)*r01*x5304*x5309)));
evalcond[7]=((-0.0001)+(((0.02626)*x5299))+((x5302*x5303))+(((-1.0)*px*x5315))+(((-1.0)*x5313*x5316))+(((-0.0718)*x5300))+(((-1.0)*py*x5309))+(((-1.0)*x5305*x5313))+((x5301*x5310)));
evalcond[8]=((0.0001)+(((-1.0)*x5312*x5313))+(((-0.0718)*x5319))+(((0.026255)*r11*x5302))+((r00*sj0*x5313))+(((-1.0)*sj0*sj6*x5303))+(((-1.0)*sj3*x5318))+(((-1.0)*py*x5315))+((px*sj0))+(((-0.09746)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5322.value)+(((1.5707963267949)*(x5323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5324=IKcos(j4);
IkReal x5325=IKsin(j4);
IkReal x5326=(r11*sj0);
IkReal x5327=(cj0*sj6);
IkReal x5328=((0.026255)*r01);
IkReal x5329=(cj6*sj5);
IkReal x5330=(r10*sj0);
IkReal x5331=(sj5*sj6);
IkReal x5332=((1.0)*cj5);
IkReal x5333=((1.0)*cj6);
IkReal x5334=((1.0)*sj0);
IkReal x5335=((0.026255)*sj6);
IkReal x5336=(cj5*r12);
IkReal x5337=(cj0*r10);
IkReal x5338=((0.026255)*cj6);
IkReal x5339=((1.0)*r21);
IkReal x5340=((1.0)*cj0);
IkReal x5341=(cj0*r00);
IkReal x5342=((1.0)*x5325);
IkReal x5343=((0.02626)*x5325);
IkReal x5344=(sj3*x5324);
IkReal x5345=(cj6*r00*sj0);
IkReal x5346=(cj3*x5324);
evalcond[0]=((((-1.0)*sj6*x5339))+(((-1.0)*cj3*x5342))+((cj6*r20)));
evalcond[1]=(x5346+(((-1.0)*r20*x5331))+(((-1.0)*r22*x5332))+(((-1.0)*x5329*x5339)));
evalcond[2]=(((sj6*x5326))+(((-1.0)*x5330*x5333))+(((-1.0)*x5333*x5341))+x5324+((r01*x5327)));
evalcond[3]=(((r11*x5327))+(((-1.0)*sj3*x5342))+x5345+(((-1.0)*r01*sj6*x5334))+(((-1.0)*x5333*x5337)));
evalcond[4]=((-0.2413)+(((-1.0)*r21*x5335))+(((-0.0718)*x5346))+((r20*x5338))+(((-1.0)*cj3*x5343))+pz+(((-0.09746)*cj3)));
evalcond[5]=(((r00*sj5*x5327))+((cj0*cj5*r02))+x5325+((x5326*x5329))+((cj0*r01*x5329))+((sj0*x5336))+((x5330*x5331)));
evalcond[6]=((((-1.0)*r02*sj0*x5332))+(((-1.0)*r00*x5331*x5334))+x5344+((r10*sj5*x5327))+((cj0*x5336))+(((-1.0)*r01*x5329*x5334))+((cj0*r11*x5329)));
evalcond[7]=((-0.0001)+(((-1.0)*px*x5340))+(((-1.0)*x5330*x5338))+(((0.02626)*x5324))+((x5327*x5328))+(((-1.0)*x5338*x5341))+((x5326*x5335))+(((-0.0718)*x5325))+(((-1.0)*py*x5334)));
evalcond[8]=((0.0001)+(((-1.0)*sj3*x5343))+(((-0.0718)*x5344))+(((-1.0)*py*x5340))+(((0.026255)*r11*x5327))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*x5337*x5338))+((r00*sj0*x5338))+(((-1.0)*sj0*sj6*x5328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5347=(cj0*sj5);
IkReal x5348=(cj5*cj6);
IkReal x5349=((1.0)*sj5);
IkReal x5350=((1.0)*cj0);
IkReal x5351=((1.0)*sj0);
IkReal x5352=(cj5*sj6);
IkReal x5353=(r10*x5352);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x5352))+sj3+(((-1.0)*r22*x5349))+((r21*x5348)));
evalcond[2]=((((-1.0)*r00*x5350*x5352))+(((-1.0)*x5351*x5353))+((r12*sj0*sj5))+(((-1.0)*r11*x5348*x5351))+(((-1.0)*r01*x5348*x5350))+((r02*x5347)));
evalcond[3]=(cj3+((r12*x5347))+(((-1.0)*x5350*x5353))+(((-1.0)*r11*x5348*x5350))+((r00*sj0*x5352))+((r01*sj0*x5348))+(((-1.0)*r02*sj0*x5349)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5354=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*r20*sj6*x5354))+(((-1.0)*cj6*r21*x5354))+(((-1.0)*cj5*r22)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5355=((1.0)*cj6);
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(cj3,-1);
if(!x5356.valid){
continue;
}
if( IKabs(((x5356.value)*(((((-1.0)*r20*x5355))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x5355))+(((-1.0)*cj0*r00*x5355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5356.value)*(((((-1.0)*r20*x5355))+((r21*sj6))))))+IKsqr((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x5355))+(((-1.0)*cj0*r00*x5355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5356.value)*(((((-1.0)*r20*x5355))+((r21*sj6))))), (((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x5355))+(((-1.0)*cj0*r00*x5355))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5357=IKcos(j4);
IkReal x5358=IKsin(j4);
IkReal x5359=(sj0*sj6);
IkReal x5360=(cj0*sj6);
IkReal x5361=((0.026255)*r01);
IkReal x5362=(cj5*r12);
IkReal x5363=(r10*sj5);
IkReal x5364=(cj6*sj0);
IkReal x5365=((0.026255)*r00);
IkReal x5366=((1.0)*cj5);
IkReal x5367=((1.0)*r10);
IkReal x5368=((1.0)*r01);
IkReal x5369=(cj0*cj6);
IkReal x5370=(r00*sj5);
IkReal x5371=((0.026255)*r11);
IkReal x5372=((1.0)*py);
IkReal x5373=(cj6*r20);
IkReal x5374=((1.0)*sj5);
IkReal x5375=(r11*sj5);
IkReal x5376=((0.026255)*r10);
IkReal x5377=(r21*sj6);
IkReal x5378=((1.0)*x5357);
IkReal x5379=(sj3*x5358);
IkReal x5380=(sj3*x5357);
IkReal x5381=(cj3*x5358);
evalcond[0]=(x5373+x5381+(((-1.0)*x5377)));
evalcond[1]=((((-1.0)*r22*x5366))+(((-1.0)*r20*sj6*x5374))+(((-1.0)*cj3*x5378))+(((-1.0)*cj6*r21*x5374)));
evalcond[2]=((((-1.0)*x5378))+((r11*x5359))+(((-1.0)*r00*x5369))+(((-1.0)*x5364*x5367))+((r01*x5360)));
evalcond[3]=((((-1.0)*x5379))+(((-1.0)*x5359*x5368))+(((-1.0)*x5367*x5369))+((r00*x5364))+((r11*x5360)));
evalcond[4]=((-0.0097)+(((0.026255)*x5373))+pz+(((0.0718)*cj3*x5357))+(((0.09746)*cj3))+(((0.02626)*x5381))+(((-0.026255)*x5377)));
evalcond[5]=(((r01*sj5*x5369))+((cj0*cj5*r02))+((x5364*x5375))+((sj0*x5362))+((x5359*x5363))+((x5360*x5370))+(((-1.0)*x5358)));
evalcond[6]=(x5380+(((-1.0)*x5359*x5370))+((x5369*x5375))+(((-1.0)*sj5*x5364*x5368))+((x5360*x5363))+(((-1.0)*r02*sj0*x5366))+((cj0*x5362)));
evalcond[7]=((-0.0019)+(((-1.0)*sj0*x5372))+(((-0.02626)*x5357))+(((0.0718)*x5358))+((x5360*x5361))+(((-1.0)*x5365*x5369))+((x5359*x5371))+(((-1.0)*x5364*x5376))+(((-1.0)*cj0*px)));
evalcond[8]=((0.0001)+(((-0.0718)*x5380))+((x5364*x5365))+(((-1.0)*cj0*x5372))+(((-1.0)*x5359*x5361))+((px*sj0))+(((-0.02626)*x5379))+(((-0.09746)*sj3))+((x5360*x5371))+(((-1.0)*x5369*x5376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5382=((1.0)*sj5);
CheckValue<IkReal> x5383=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5383.valid){
continue;
}
CheckValue<IkReal> x5384 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x5382))+(((-1.0)*r20*sj6*x5382))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x5384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5383.value)))+(x5384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5385=IKcos(j4);
IkReal x5386=IKsin(j4);
IkReal x5387=(sj0*sj6);
IkReal x5388=(cj0*sj6);
IkReal x5389=((0.026255)*r01);
IkReal x5390=(cj5*r12);
IkReal x5391=(r10*sj5);
IkReal x5392=(cj6*sj0);
IkReal x5393=((0.026255)*r00);
IkReal x5394=((1.0)*cj5);
IkReal x5395=((1.0)*r10);
IkReal x5396=((1.0)*r01);
IkReal x5397=(cj0*cj6);
IkReal x5398=(r00*sj5);
IkReal x5399=((0.026255)*r11);
IkReal x5400=((1.0)*py);
IkReal x5401=(cj6*r20);
IkReal x5402=((1.0)*sj5);
IkReal x5403=(r11*sj5);
IkReal x5404=((0.026255)*r10);
IkReal x5405=(r21*sj6);
IkReal x5406=((1.0)*x5385);
IkReal x5407=(sj3*x5386);
IkReal x5408=(sj3*x5385);
IkReal x5409=(cj3*x5386);
evalcond[0]=((((-1.0)*x5405))+x5401+x5409);
evalcond[1]=((((-1.0)*cj6*r21*x5402))+(((-1.0)*cj3*x5406))+(((-1.0)*r22*x5394))+(((-1.0)*r20*sj6*x5402)));
evalcond[2]=((((-1.0)*x5392*x5395))+(((-1.0)*r00*x5397))+((r11*x5387))+(((-1.0)*x5406))+((r01*x5388)));
evalcond[3]=((((-1.0)*x5407))+((r11*x5388))+(((-1.0)*x5387*x5396))+((r00*x5392))+(((-1.0)*x5395*x5397)));
evalcond[4]=((-0.0097)+(((0.02626)*x5409))+(((-0.026255)*x5405))+pz+(((0.0718)*cj3*x5385))+(((0.09746)*cj3))+(((0.026255)*x5401)));
evalcond[5]=(((cj0*cj5*r02))+((r01*sj5*x5397))+((x5392*x5403))+((x5388*x5398))+(((-1.0)*x5386))+((x5387*x5391))+((sj0*x5390)));
evalcond[6]=(x5408+((x5388*x5391))+((cj0*x5390))+(((-1.0)*x5387*x5398))+(((-1.0)*sj5*x5392*x5396))+(((-1.0)*r02*sj0*x5394))+((x5397*x5403)));
evalcond[7]=((-0.0019)+((x5388*x5389))+(((-0.02626)*x5385))+(((-1.0)*x5393*x5397))+(((0.0718)*x5386))+(((-1.0)*sj0*x5400))+(((-1.0)*cj0*px))+(((-1.0)*x5392*x5404))+((x5387*x5399)));
evalcond[8]=((0.0001)+((x5392*x5393))+((x5388*x5399))+(((-0.02626)*x5407))+(((-1.0)*x5397*x5404))+(((-1.0)*cj0*x5400))+(((-1.0)*x5387*x5389))+((px*sj0))+(((-0.09746)*sj3))+(((-0.0718)*x5408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5410=(cj0*sj5);
IkReal x5411=(cj5*cj6);
IkReal x5412=((1.0)*sj5);
IkReal x5413=((1.0)*cj0);
IkReal x5414=((1.0)*sj0);
IkReal x5415=(cj5*sj6);
IkReal x5416=(r10*x5415);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x5415))+(((-1.0)*r22*x5412))+((r21*x5411))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r11*x5411*x5414))+(((-1.0)*sj2))+(((-1.0)*r01*x5411*x5413))+(((-1.0)*x5414*x5416))+((r12*sj0*sj5))+((r02*x5410))+(((-1.0)*r00*x5413*x5415)));
evalcond[3]=((((-1.0)*r11*x5411*x5413))+(((-1.0)*r02*sj0*x5412))+((r00*sj0*x5415))+((r01*sj0*x5411))+((r12*x5410))+(((-1.0)*x5413*x5416)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5417=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x5417))+(((-1.0)*r20*sj5*sj6)))))+(IKabs(((((-1.0)*sj6*x5417))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5418=((1.0)*sj5);
IkReal x5419=((1.0)*sj6);
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(sj2,-1);
if(!x5420.valid){
continue;
}
CheckValue<IkReal> x5421=IKPowWithIntegerCheck(cj2,-1);
if(!x5421.valid){
continue;
}
if( IKabs(((x5420.value)*(((((-1.0)*r20*sj6*x5418))+(((-1.0)*cj6*r21*x5418))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5421.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5419))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5419)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5420.value)*(((((-1.0)*r20*sj6*x5418))+(((-1.0)*cj6*r21*x5418))+(((-1.0)*cj5*r22))))))+IKsqr(((x5421.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5419))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5419))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5420.value)*(((((-1.0)*r20*sj6*x5418))+(((-1.0)*cj6*r21*x5418))+(((-1.0)*cj5*r22))))), ((x5421.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5419))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5419))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5422=IKcos(j4);
IkReal x5423=IKsin(j4);
IkReal x5424=(r11*sj0);
IkReal x5425=(cj0*sj6);
IkReal x5426=((0.026255)*r01);
IkReal x5427=(cj5*r12);
IkReal x5428=(cj6*sj5);
IkReal x5429=(r10*sj5);
IkReal x5430=(sj0*sj6);
IkReal x5431=((1.0)*cj5);
IkReal x5432=((1.0)*r01);
IkReal x5433=(r00*sj5);
IkReal x5434=((0.026255)*sj6);
IkReal x5435=((1.0)*py);
IkReal x5436=((0.026255)*cj6);
IkReal x5437=((1.0)*r21);
IkReal x5438=((1.0)*cj0);
IkReal x5439=((1.0)*cj6*r10);
IkReal x5440=(cj2*x5423);
IkReal x5441=(cj6*r00*sj0);
IkReal x5442=(cj2*x5422);
IkReal x5443=((1.0)*x5423);
IkReal x5444=(sj2*x5422);
evalcond[0]=((((-1.0)*x5444))+(((-1.0)*sj6*x5437))+((cj6*r20)));
evalcond[1]=((((-1.0)*x5428*x5437))+(((-1.0)*r22*x5431))+(((-1.0)*sj2*x5443))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*cj6*r00*x5438))+x5442+((r01*x5425))+((sj6*x5424))+(((-1.0)*sj0*x5439)));
evalcond[3]=(x5441+(((-1.0)*x5443))+(((-1.0)*cj6*r10*x5438))+(((-1.0)*x5430*x5432))+((r11*x5425)));
evalcond[4]=((-0.1255)+(((-0.02626)*x5444))+(((-0.1158)*cj2))+(((0.0718)*sj2*x5423))+(((-1.0)*r21*x5434))+(((-0.0009)*sj2))+((r20*x5436))+pz);
evalcond[5]=(((cj0*cj5*r02))+x5440+((cj0*r01*x5428))+((x5425*x5433))+((x5424*x5428))+((x5429*x5430))+((sj0*x5427)));
evalcond[6]=((((-1.0)*r02*sj0*x5431))+x5422+((cj0*r11*x5428))+((cj0*x5427))+((x5425*x5429))+(((-1.0)*x5430*x5433))+(((-1.0)*sj0*x5428*x5432)));
evalcond[7]=((-0.09736)+(((-1.0)*x5426*x5430))+(((-1.0)*cj0*r10*x5436))+(((-1.0)*cj0*x5435))+((r00*sj0*x5436))+(((0.026255)*r11*x5425))+((px*sj0))+(((-0.0718)*x5422))+(((-0.02626)*x5423)));
evalcond[8]=((-0.001)+(((-1.0)*r10*sj0*x5436))+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x5436))+(((0.02626)*x5442))+((x5424*x5434))+(((0.0009)*cj2))+(((-1.0)*px*x5438))+((x5425*x5426))+(((-1.0)*sj0*x5435))+(((-0.0718)*x5440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5445=((1.0)*sj6);
CheckValue<IkReal> x5446=IKPowWithIntegerCheck(sj2,-1);
if(!x5446.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0*x5445))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5446.value)*((((cj6*r20))+(((-1.0)*r21*x5445)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0*x5445))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))))+IKsqr(((x5446.value)*((((cj6*r20))+(((-1.0)*r21*x5445))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0*x5445))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))), ((x5446.value)*((((cj6*r20))+(((-1.0)*r21*x5445))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5447=IKcos(j4);
IkReal x5448=IKsin(j4);
IkReal x5449=(r11*sj0);
IkReal x5450=(cj0*sj6);
IkReal x5451=((0.026255)*r01);
IkReal x5452=(cj5*r12);
IkReal x5453=(cj6*sj5);
IkReal x5454=(r10*sj5);
IkReal x5455=(sj0*sj6);
IkReal x5456=((1.0)*cj5);
IkReal x5457=((1.0)*r01);
IkReal x5458=(r00*sj5);
IkReal x5459=((0.026255)*sj6);
IkReal x5460=((1.0)*py);
IkReal x5461=((0.026255)*cj6);
IkReal x5462=((1.0)*r21);
IkReal x5463=((1.0)*cj0);
IkReal x5464=((1.0)*cj6*r10);
IkReal x5465=(cj2*x5448);
IkReal x5466=(cj6*r00*sj0);
IkReal x5467=(cj2*x5447);
IkReal x5468=((1.0)*x5448);
IkReal x5469=(sj2*x5447);
evalcond[0]=((((-1.0)*sj6*x5462))+(((-1.0)*x5469))+((cj6*r20)));
evalcond[1]=((((-1.0)*sj2*x5468))+(((-1.0)*x5453*x5462))+(((-1.0)*r22*x5456))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*cj6*r00*x5463))+x5467+((r01*x5450))+((sj6*x5449))+(((-1.0)*sj0*x5464)));
evalcond[3]=((((-1.0)*x5455*x5457))+(((-1.0)*cj6*r10*x5463))+x5466+(((-1.0)*x5468))+((r11*x5450)));
evalcond[4]=((-0.1255)+(((0.0718)*sj2*x5448))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((-1.0)*r21*x5459))+(((-0.02626)*x5469))+((r20*x5461)));
evalcond[5]=(((cj0*cj5*r02))+x5465+((x5454*x5455))+((cj0*r01*x5453))+((x5450*x5458))+((sj0*x5452))+((x5449*x5453)));
evalcond[6]=(((cj0*r11*x5453))+x5447+(((-1.0)*x5455*x5458))+((cj0*x5452))+((x5450*x5454))+(((-1.0)*r02*sj0*x5456))+(((-1.0)*sj0*x5453*x5457)));
evalcond[7]=((-0.09736)+(((-0.02626)*x5448))+(((-1.0)*x5451*x5455))+(((-1.0)*cj0*x5460))+(((0.026255)*r11*x5450))+((px*sj0))+((r00*sj0*x5461))+(((-1.0)*cj0*r10*x5461))+(((-0.0718)*x5447)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*px*x5463))+(((-0.0718)*x5465))+(((-1.0)*r10*sj0*x5461))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x5461))+((x5450*x5451))+(((0.02626)*x5467))+((x5449*x5459))+(((-1.0)*sj0*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5470=((1.0)*r21);
CheckValue<IkReal> x5471=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5471.valid){
continue;
}
CheckValue<IkReal> x5472 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x5470))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),(((cj6*r20))+(((-1.0)*sj6*x5470))),IKFAST_ATAN2_MAGTHRESH);
if(!x5472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5471.value)))+(x5472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5473=IKcos(j4);
IkReal x5474=IKsin(j4);
IkReal x5475=(r11*sj0);
IkReal x5476=(cj0*sj6);
IkReal x5477=((0.026255)*r01);
IkReal x5478=(cj5*r12);
IkReal x5479=(cj6*sj5);
IkReal x5480=(r10*sj5);
IkReal x5481=(sj0*sj6);
IkReal x5482=((1.0)*cj5);
IkReal x5483=((1.0)*r01);
IkReal x5484=(r00*sj5);
IkReal x5485=((0.026255)*sj6);
IkReal x5486=((1.0)*py);
IkReal x5487=((0.026255)*cj6);
IkReal x5488=((1.0)*r21);
IkReal x5489=((1.0)*cj0);
IkReal x5490=((1.0)*cj6*r10);
IkReal x5491=(cj2*x5474);
IkReal x5492=(cj6*r00*sj0);
IkReal x5493=(cj2*x5473);
IkReal x5494=((1.0)*x5474);
IkReal x5495=(sj2*x5473);
evalcond[0]=((((-1.0)*sj6*x5488))+(((-1.0)*x5495))+((cj6*r20)));
evalcond[1]=((((-1.0)*x5479*x5488))+(((-1.0)*r22*x5482))+(((-1.0)*sj2*x5494))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*sj0*x5490))+x5493+((r01*x5476))+((sj6*x5475))+(((-1.0)*cj6*r00*x5489)));
evalcond[3]=((((-1.0)*x5481*x5483))+(((-1.0)*cj6*r10*x5489))+x5492+(((-1.0)*x5494))+((r11*x5476)));
evalcond[4]=((-0.1255)+((r20*x5487))+(((-1.0)*r21*x5485))+(((0.0718)*sj2*x5474))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((-0.02626)*x5495)));
evalcond[5]=(((x5480*x5481))+((cj0*cj5*r02))+x5491+((x5476*x5484))+((x5475*x5479))+((sj0*x5478))+((cj0*r01*x5479)));
evalcond[6]=(((cj0*r11*x5479))+(((-1.0)*sj0*x5479*x5483))+(((-1.0)*x5481*x5484))+x5473+((x5476*x5480))+(((-1.0)*r02*sj0*x5482))+((cj0*x5478)));
evalcond[7]=((-0.09736)+(((-0.02626)*x5474))+((r00*sj0*x5487))+(((-1.0)*cj0*x5486))+(((0.026255)*r11*x5476))+(((-1.0)*x5477*x5481))+((px*sj0))+(((-0.0718)*x5473))+(((-1.0)*cj0*r10*x5487)));
evalcond[8]=((-0.001)+(((-1.0)*px*x5489))+(((-0.1158)*sj2))+(((-1.0)*sj0*x5486))+(((0.0009)*cj2))+(((-0.0718)*x5491))+(((0.02626)*x5493))+(((-1.0)*r10*sj0*x5487))+(((-1.0)*cj0*r00*x5487))+((x5476*x5477))+((x5475*x5485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5496=(cj0*sj5);
IkReal x5497=(cj5*cj6);
IkReal x5498=((1.0)*sj5);
IkReal x5499=((1.0)*cj0);
IkReal x5500=((1.0)*sj0);
IkReal x5501=(cj5*sj6);
IkReal x5502=(r10*x5501);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(cj2+((r20*x5501))+((r21*x5497))+(((-1.0)*r22*x5498)));
evalcond[2]=((((-1.0)*r00*x5499*x5501))+sj2+(((-1.0)*x5500*x5502))+((r12*sj0*sj5))+((r02*x5496))+(((-1.0)*r01*x5497*x5499))+(((-1.0)*r11*x5497*x5500)));
evalcond[3]=((((-1.0)*r11*x5497*x5499))+((r00*sj0*x5501))+((r01*sj0*x5497))+((r12*x5496))+(((-1.0)*r02*sj0*x5498))+(((-1.0)*x5499*x5502)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x5503=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x5503))+(((-1.0)*r20*sj5*sj6)))))+(IKabs(((((-1.0)*sj6*x5503))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5504=((1.0)*sj5);
IkReal x5505=((1.0)*sj6);
CheckValue<IkReal> x5506=IKPowWithIntegerCheck(sj2,-1);
if(!x5506.valid){
continue;
}
CheckValue<IkReal> x5507=IKPowWithIntegerCheck(cj2,-1);
if(!x5507.valid){
continue;
}
if( IKabs(((x5506.value)*(((((-1.0)*r20*sj6*x5504))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x5504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5507.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5505))+(((-1.0)*r11*sj0*x5505))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5506.value)*(((((-1.0)*r20*sj6*x5504))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x5504))))))+IKsqr(((x5507.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5505))+(((-1.0)*r11*sj0*x5505))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5506.value)*(((((-1.0)*r20*sj6*x5504))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x5504))))), ((x5507.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5505))+(((-1.0)*r11*sj0*x5505))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5508=IKsin(j4);
IkReal x5509=IKcos(j4);
IkReal x5510=(r11*sj0);
IkReal x5511=(cj0*sj6);
IkReal x5512=((0.026255)*r01);
IkReal x5513=(cj5*r12);
IkReal x5514=(cj6*sj5);
IkReal x5515=(r10*sj5);
IkReal x5516=(sj0*sj6);
IkReal x5517=((1.0)*cj5);
IkReal x5518=((1.0)*r01);
IkReal x5519=(r00*sj5);
IkReal x5520=((0.026255)*sj6);
IkReal x5521=((1.0)*py);
IkReal x5522=((1.0)*sj2);
IkReal x5523=((0.026255)*cj6);
IkReal x5524=((1.0)*r21);
IkReal x5525=((1.0)*cj0);
IkReal x5526=((1.0)*cj6*r10);
IkReal x5527=(cj2*x5508);
IkReal x5528=(cj6*r00*sj0);
IkReal x5529=(cj2*x5509);
evalcond[0]=(((cj6*r20))+(((-1.0)*x5509*x5522))+(((-1.0)*sj6*x5524)));
evalcond[1]=((((-1.0)*r22*x5517))+(((-1.0)*x5508*x5522))+(((-1.0)*x5514*x5524))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x5528+x5508+(((-1.0)*cj6*r10*x5525))+((r11*x5511))+(((-1.0)*x5516*x5518)));
evalcond[3]=(x5529+((sj6*x5510))+(((-1.0)*cj6*r00*x5525))+(((-1.0)*sj0*x5526))+((r01*x5511)));
evalcond[4]=((-0.1255)+(((0.0718)*sj2*x5508))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+(((-1.0)*r21*x5520))+pz+((r20*x5523))+(((-0.02626)*sj2*x5509)));
evalcond[5]=(x5527+((cj0*cj5*r02))+((x5515*x5516))+((sj0*x5513))+((cj0*r01*x5514))+((x5511*x5519))+((x5510*x5514)));
evalcond[6]=(((cj0*r11*x5514))+((x5511*x5515))+(((-1.0)*x5509))+(((-1.0)*r02*sj0*x5517))+(((-1.0)*sj0*x5514*x5518))+((cj0*x5513))+(((-1.0)*x5516*x5519)));
evalcond[7]=((0.09756)+(((-1.0)*cj0*x5521))+(((-1.0)*x5512*x5516))+(((-1.0)*cj0*r10*x5523))+(((0.0718)*x5509))+((px*sj0))+(((0.02626)*x5508))+(((0.026255)*r11*x5511))+((r00*sj0*x5523)));
evalcond[8]=((-0.001)+(((-1.0)*r10*sj0*x5523))+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x5523))+(((0.02626)*x5529))+(((0.0009)*cj2))+((x5511*x5512))+(((-1.0)*sj0*x5521))+((x5510*x5520))+(((-1.0)*px*x5525))+(((-0.0718)*x5527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5530=((1.0)*sj6);
CheckValue<IkReal> x5531=IKPowWithIntegerCheck(sj2,-1);
if(!x5531.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r11*x5530))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5531.value)*(((((-1.0)*r21*x5530))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r11*x5530))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))+IKsqr(((x5531.value)*(((((-1.0)*r21*x5530))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r11*x5530))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))), ((x5531.value)*(((((-1.0)*r21*x5530))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5532=IKsin(j4);
IkReal x5533=IKcos(j4);
IkReal x5534=(r11*sj0);
IkReal x5535=(cj0*sj6);
IkReal x5536=((0.026255)*r01);
IkReal x5537=(cj5*r12);
IkReal x5538=(cj6*sj5);
IkReal x5539=(r10*sj5);
IkReal x5540=(sj0*sj6);
IkReal x5541=((1.0)*cj5);
IkReal x5542=((1.0)*r01);
IkReal x5543=(r00*sj5);
IkReal x5544=((0.026255)*sj6);
IkReal x5545=((1.0)*py);
IkReal x5546=((1.0)*sj2);
IkReal x5547=((0.026255)*cj6);
IkReal x5548=((1.0)*r21);
IkReal x5549=((1.0)*cj0);
IkReal x5550=((1.0)*cj6*r10);
IkReal x5551=(cj2*x5532);
IkReal x5552=(cj6*r00*sj0);
IkReal x5553=(cj2*x5533);
evalcond[0]=((((-1.0)*x5533*x5546))+(((-1.0)*sj6*x5548))+((cj6*r20)));
evalcond[1]=((((-1.0)*x5538*x5548))+(((-1.0)*x5532*x5546))+(((-1.0)*r22*x5541))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x5532+x5552+(((-1.0)*cj6*r10*x5549))+(((-1.0)*x5540*x5542))+((r11*x5535)));
evalcond[3]=((((-1.0)*sj0*x5550))+x5553+((sj6*x5534))+((r01*x5535))+(((-1.0)*cj6*r00*x5549)));
evalcond[4]=((-0.1255)+(((-0.02626)*sj2*x5533))+(((-0.1158)*cj2))+((r20*x5547))+(((-0.0009)*sj2))+(((0.0718)*sj2*x5532))+pz+(((-1.0)*r21*x5544)));
evalcond[5]=(((x5539*x5540))+((x5535*x5543))+x5551+((cj0*cj5*r02))+((x5534*x5538))+((cj0*r01*x5538))+((sj0*x5537)));
evalcond[6]=((((-1.0)*r02*sj0*x5541))+((cj0*r11*x5538))+((x5535*x5539))+((cj0*x5537))+(((-1.0)*x5540*x5543))+(((-1.0)*x5533))+(((-1.0)*sj0*x5538*x5542)));
evalcond[7]=((0.09756)+(((0.026255)*r11*x5535))+(((-1.0)*cj0*r10*x5547))+(((0.02626)*x5532))+((r00*sj0*x5547))+(((-1.0)*cj0*x5545))+(((-1.0)*x5536*x5540))+(((0.0718)*x5533))+((px*sj0)));
evalcond[8]=((-0.001)+(((0.02626)*x5553))+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x5547))+(((-0.0718)*x5551))+(((0.0009)*cj2))+((x5535*x5536))+(((-1.0)*r10*sj0*x5547))+(((-1.0)*sj0*x5545))+(((-1.0)*px*x5549))+((x5534*x5544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5554=((1.0)*r21);
CheckValue<IkReal> x5555=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5555.valid){
continue;
}
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x5554))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x5554))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5555.value)))+(x5556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5557=IKsin(j4);
IkReal x5558=IKcos(j4);
IkReal x5559=(r11*sj0);
IkReal x5560=(cj0*sj6);
IkReal x5561=((0.026255)*r01);
IkReal x5562=(cj5*r12);
IkReal x5563=(cj6*sj5);
IkReal x5564=(r10*sj5);
IkReal x5565=(sj0*sj6);
IkReal x5566=((1.0)*cj5);
IkReal x5567=((1.0)*r01);
IkReal x5568=(r00*sj5);
IkReal x5569=((0.026255)*sj6);
IkReal x5570=((1.0)*py);
IkReal x5571=((1.0)*sj2);
IkReal x5572=((0.026255)*cj6);
IkReal x5573=((1.0)*r21);
IkReal x5574=((1.0)*cj0);
IkReal x5575=((1.0)*cj6*r10);
IkReal x5576=(cj2*x5557);
IkReal x5577=(cj6*r00*sj0);
IkReal x5578=(cj2*x5558);
evalcond[0]=((((-1.0)*sj6*x5573))+((cj6*r20))+(((-1.0)*x5558*x5571)));
evalcond[1]=((((-1.0)*r22*x5566))+(((-1.0)*x5557*x5571))+(((-1.0)*x5563*x5573))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x5577+x5557+(((-1.0)*cj6*r10*x5574))+((r11*x5560))+(((-1.0)*x5565*x5567)));
evalcond[3]=(x5578+(((-1.0)*sj0*x5575))+((r01*x5560))+((sj6*x5559))+(((-1.0)*cj6*r00*x5574)));
evalcond[4]=((-0.1255)+(((-0.02626)*sj2*x5558))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((0.0718)*sj2*x5557))+(((-1.0)*r21*x5569))+((r20*x5572)));
evalcond[5]=(((x5560*x5568))+x5576+((cj0*cj5*r02))+((x5564*x5565))+((cj0*r01*x5563))+((sj0*x5562))+((x5559*x5563)));
evalcond[6]=((((-1.0)*x5558))+((x5560*x5564))+((cj0*x5562))+((cj0*r11*x5563))+(((-1.0)*sj0*x5563*x5567))+(((-1.0)*r02*sj0*x5566))+(((-1.0)*x5565*x5568)));
evalcond[7]=((0.09756)+(((0.02626)*x5557))+((r00*sj0*x5572))+(((-1.0)*cj0*r10*x5572))+(((0.0718)*x5558))+(((-1.0)*cj0*x5570))+((px*sj0))+(((-1.0)*x5561*x5565))+(((0.026255)*r11*x5560)));
evalcond[8]=((-0.001)+((x5560*x5561))+(((-0.1158)*sj2))+(((-1.0)*sj0*x5570))+(((-1.0)*cj0*r00*x5572))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x5572))+(((0.02626)*x5578))+(((-0.0718)*x5576))+((x5559*x5569))+(((-1.0)*px*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(sj3,-1);
if(!x5587.valid){
continue;
}
IkReal x5579=x5587.value;
IkReal x5580=((1.0)*cj0);
IkReal x5581=(cj6*r10);
IkReal x5582=((1.0)*sj6);
IkReal x5583=(r01*sj0);
IkReal x5584=(cj2*cj3);
IkReal x5585=(sj6*x5584);
IkReal x5586=(cj6*r00*sj0);
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(sj2,-1);
if(!x5588.valid){
continue;
}
if( IKabs((x5579*((x5586+((cj0*r11*sj6))+(((-1.0)*x5582*x5583))+(((-1.0)*x5580*x5581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5579*(x5588.value)*(((((-1.0)*r11*x5580*x5585))+(((-1.0)*x5584*x5586))+((x5583*x5585))+((cj6*r20*sj3))+((cj0*x5581*x5584))+(((-1.0)*r21*sj3*x5582)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5579*((x5586+((cj0*r11*sj6))+(((-1.0)*x5582*x5583))+(((-1.0)*x5580*x5581))))))+IKsqr((x5579*(x5588.value)*(((((-1.0)*r11*x5580*x5585))+(((-1.0)*x5584*x5586))+((x5583*x5585))+((cj6*r20*sj3))+((cj0*x5581*x5584))+(((-1.0)*r21*sj3*x5582))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x5579*((x5586+((cj0*r11*sj6))+(((-1.0)*x5582*x5583))+(((-1.0)*x5580*x5581))))), (x5579*(x5588.value)*(((((-1.0)*r11*x5580*x5585))+(((-1.0)*x5584*x5586))+((x5583*x5585))+((cj6*r20*sj3))+((cj0*x5581*x5584))+(((-1.0)*r21*sj3*x5582))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5589=IKsin(j4);
IkReal x5590=IKcos(j4);
IkReal x5591=(r11*sj6);
IkReal x5592=((0.026255)*cj0);
IkReal x5593=(r01*sj6);
IkReal x5594=(cj6*sj0);
IkReal x5595=(r11*sj5);
IkReal x5596=(cj6*r20);
IkReal x5597=((0.026255)*sj0);
IkReal x5598=(cj5*r12);
IkReal x5599=((1.0)*cj5);
IkReal x5600=(cj2*cj3);
IkReal x5601=((1.0)*r10);
IkReal x5602=(cj3*sj2);
IkReal x5603=((1.0)*sj0);
IkReal x5604=(cj0*cj6);
IkReal x5605=(r01*sj5);
IkReal x5606=((1.0)*sj5);
IkReal x5607=((1.0)*cj0);
IkReal x5608=(sj5*sj6);
IkReal x5609=(r21*sj6);
IkReal x5610=((1.0)*x5589);
IkReal x5611=((0.02626)*x5589);
IkReal x5612=(cj2*x5589);
IkReal x5613=(sj3*x5590);
IkReal x5614=(cj0*x5608);
IkReal x5615=((0.0718)*x5590);
IkReal x5616=(cj2*x5590);
IkReal x5617=(sj2*x5590);
evalcond[0]=((((-1.0)*x5617))+(((-1.0)*x5609))+x5596+(((-1.0)*x5600*x5610)));
evalcond[1]=(((cj0*x5591))+(((-1.0)*x5601*x5604))+(((-1.0)*sj3*x5610))+(((-1.0)*x5593*x5603))+((r00*x5594)));
evalcond[2]=(((x5590*x5600))+(((-1.0)*r20*sj6*x5606))+(((-1.0)*sj2*x5610))+(((-1.0)*r22*x5599))+(((-1.0)*cj6*r21*x5606)));
evalcond[3]=(x5616+((sj0*x5591))+((cj0*x5593))+(((-1.0)*x5602*x5610))+(((-1.0)*r00*x5604))+(((-1.0)*x5594*x5601)));
evalcond[4]=((((-1.0)*r00*x5603*x5608))+x5613+((cj0*x5598))+(((-1.0)*x5594*x5605))+((x5595*x5604))+(((-1.0)*r02*sj0*x5599))+((r10*x5614)));
evalcond[5]=(x5612+((cj0*cj5*r02))+((x5590*x5602))+((x5604*x5605))+((sj0*x5598))+((r10*sj0*x5608))+((r00*x5614))+((x5594*x5595)));
evalcond[6]=((0.0001)+(((-1.0)*cj6*r10*x5592))+(((0.026255)*r00*x5594))+(((-0.0718)*x5613))+(((-1.0)*x5593*x5597))+(((-1.0)*sj3*x5611))+(((-1.0)*py*x5607))+((px*sj0))+(((-0.09746)*sj3))+((x5591*x5592)));
evalcond[7]=((-0.1255)+(((-0.02626)*x5617))+(((-0.1158)*cj2))+(((0.026255)*x5596))+(((0.0718)*sj2*x5589))+(((-0.0009)*sj2))+(((-0.09746)*x5600))+(((-0.026255)*x5609))+pz+(((-1.0)*x5600*x5615))+(((-1.0)*x5600*x5611)));
evalcond[8]=((-0.001)+(((-1.0)*px*x5607))+(((-0.1158)*sj2))+((x5592*x5593))+(((-0.0718)*x5612))+(((-1.0)*cj6*r00*x5592))+(((-1.0)*x5602*x5615))+(((-1.0)*x5602*x5611))+(((0.0009)*cj2))+(((-0.09746)*x5602))+(((-0.026255)*r10*x5594))+(((0.02626)*x5616))+(((-1.0)*py*x5603))+((x5591*x5597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5618=(sj2*sj6);
IkReal x5619=(cj0*r01);
IkReal x5620=((1.0)*sj0);
IkReal x5621=(cj6*sj2);
IkReal x5622=(cj2*sj6);
IkReal x5623=((1.0)*r21);
IkReal x5624=(cj0*r00);
IkReal x5625=(cj2*cj6);
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(cj3,-1);
if(!x5626.valid){
continue;
}
if( IKabs(((x5626.value)*(((((-1.0)*x5621*x5624))+((x5618*x5619))+((r20*x5625))+(((-1.0)*r10*x5620*x5621))+(((-1.0)*x5622*x5623))+((r11*sj0*x5618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5624*x5625))+(((-1.0)*r11*x5620*x5622))+(((-1.0)*x5618*x5623))+((r20*x5621))+((r10*sj0*x5625))+(((-1.0)*x5619*x5622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5626.value)*(((((-1.0)*x5621*x5624))+((x5618*x5619))+((r20*x5625))+(((-1.0)*r10*x5620*x5621))+(((-1.0)*x5622*x5623))+((r11*sj0*x5618))))))+IKsqr((((x5624*x5625))+(((-1.0)*r11*x5620*x5622))+(((-1.0)*x5618*x5623))+((r20*x5621))+((r10*sj0*x5625))+(((-1.0)*x5619*x5622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5626.value)*(((((-1.0)*x5621*x5624))+((x5618*x5619))+((r20*x5625))+(((-1.0)*r10*x5620*x5621))+(((-1.0)*x5622*x5623))+((r11*sj0*x5618))))), (((x5624*x5625))+(((-1.0)*r11*x5620*x5622))+(((-1.0)*x5618*x5623))+((r20*x5621))+((r10*sj0*x5625))+(((-1.0)*x5619*x5622))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5627=IKsin(j4);
IkReal x5628=IKcos(j4);
IkReal x5629=(r11*sj6);
IkReal x5630=((0.026255)*cj0);
IkReal x5631=(r01*sj6);
IkReal x5632=(cj6*sj0);
IkReal x5633=(r11*sj5);
IkReal x5634=(cj6*r20);
IkReal x5635=((0.026255)*sj0);
IkReal x5636=(cj5*r12);
IkReal x5637=((1.0)*cj5);
IkReal x5638=(cj2*cj3);
IkReal x5639=((1.0)*r10);
IkReal x5640=(cj3*sj2);
IkReal x5641=((1.0)*sj0);
IkReal x5642=(cj0*cj6);
IkReal x5643=(r01*sj5);
IkReal x5644=((1.0)*sj5);
IkReal x5645=((1.0)*cj0);
IkReal x5646=(sj5*sj6);
IkReal x5647=(r21*sj6);
IkReal x5648=((1.0)*x5627);
IkReal x5649=((0.02626)*x5627);
IkReal x5650=(cj2*x5627);
IkReal x5651=(sj3*x5628);
IkReal x5652=(cj0*x5646);
IkReal x5653=((0.0718)*x5628);
IkReal x5654=(cj2*x5628);
IkReal x5655=(sj2*x5628);
evalcond[0]=(x5634+(((-1.0)*x5638*x5648))+(((-1.0)*x5655))+(((-1.0)*x5647)));
evalcond[1]=(((cj0*x5629))+(((-1.0)*sj3*x5648))+(((-1.0)*x5631*x5641))+(((-1.0)*x5639*x5642))+((r00*x5632)));
evalcond[2]=((((-1.0)*cj6*r21*x5644))+((x5628*x5638))+(((-1.0)*r20*sj6*x5644))+(((-1.0)*sj2*x5648))+(((-1.0)*r22*x5637)));
evalcond[3]=((((-1.0)*x5632*x5639))+x5654+((sj0*x5629))+((cj0*x5631))+(((-1.0)*x5640*x5648))+(((-1.0)*r00*x5642)));
evalcond[4]=((((-1.0)*x5632*x5643))+x5651+(((-1.0)*r02*sj0*x5637))+((cj0*x5636))+((x5633*x5642))+((r10*x5652))+(((-1.0)*r00*x5641*x5646)));
evalcond[5]=(x5650+((r00*x5652))+((cj0*cj5*r02))+((x5642*x5643))+((x5632*x5633))+((r10*sj0*x5646))+((sj0*x5636))+((x5628*x5640)));
evalcond[6]=((0.0001)+(((0.026255)*r00*x5632))+((x5629*x5630))+(((-1.0)*py*x5645))+(((-1.0)*cj6*r10*x5630))+(((-1.0)*sj3*x5649))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*x5631*x5635))+(((-0.0718)*x5651)));
evalcond[7]=((-0.1255)+(((-0.02626)*x5655))+(((-0.09746)*x5638))+(((-0.1158)*cj2))+(((-1.0)*x5638*x5649))+(((-1.0)*x5638*x5653))+(((0.0718)*sj2*x5627))+(((-0.0009)*sj2))+pz+(((-0.026255)*x5647))+(((0.026255)*x5634)));
evalcond[8]=((-0.001)+(((-0.09746)*x5640))+(((-0.1158)*sj2))+((x5629*x5635))+(((-1.0)*py*x5641))+((x5630*x5631))+(((0.0009)*cj2))+(((-1.0)*x5640*x5653))+(((-1.0)*x5640*x5649))+(((0.02626)*x5654))+(((-1.0)*cj6*r00*x5630))+(((-1.0)*px*x5645))+(((-0.026255)*r10*x5632))+(((-0.0718)*x5650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5656=cj2*cj2;
IkReal x5657=(cj2*cj3);
IkReal x5658=(cj6*r20);
IkReal x5659=(cj5*r22);
IkReal x5660=(r20*sj5);
IkReal x5661=((1.0)*sj2);
IkReal x5662=(sj6*x5661);
IkReal x5663=(cj6*r21*sj5);
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign(((1.0)+((x5656*(cj3*cj3)))+(((-1.0)*x5656)))),-1);
if(!x5664.valid){
continue;
}
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal((((x5657*x5658))+(((-1.0)*x5659*x5661))+(((-1.0)*x5660*x5662))+(((-1.0)*x5661*x5663))+(((-1.0)*r21*sj6*x5657)))),((((-1.0)*r21*x5662))+((x5657*x5659))+((sj2*x5658))+((sj6*x5657*x5660))+((x5657*x5663))),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5664.value)))+(x5665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5666=IKsin(j4);
IkReal x5667=IKcos(j4);
IkReal x5668=(r11*sj6);
IkReal x5669=((0.026255)*cj0);
IkReal x5670=(r01*sj6);
IkReal x5671=(cj6*sj0);
IkReal x5672=(r11*sj5);
IkReal x5673=(cj6*r20);
IkReal x5674=((0.026255)*sj0);
IkReal x5675=(cj5*r12);
IkReal x5676=((1.0)*cj5);
IkReal x5677=(cj2*cj3);
IkReal x5678=((1.0)*r10);
IkReal x5679=(cj3*sj2);
IkReal x5680=((1.0)*sj0);
IkReal x5681=(cj0*cj6);
IkReal x5682=(r01*sj5);
IkReal x5683=((1.0)*sj5);
IkReal x5684=((1.0)*cj0);
IkReal x5685=(sj5*sj6);
IkReal x5686=(r21*sj6);
IkReal x5687=((1.0)*x5666);
IkReal x5688=((0.02626)*x5666);
IkReal x5689=(cj2*x5666);
IkReal x5690=(sj3*x5667);
IkReal x5691=(cj0*x5685);
IkReal x5692=((0.0718)*x5667);
IkReal x5693=(cj2*x5667);
IkReal x5694=(sj2*x5667);
evalcond[0]=(x5673+(((-1.0)*x5694))+(((-1.0)*x5686))+(((-1.0)*x5677*x5687)));
evalcond[1]=((((-1.0)*x5678*x5681))+(((-1.0)*sj3*x5687))+(((-1.0)*x5670*x5680))+((r00*x5671))+((cj0*x5668)));
evalcond[2]=((((-1.0)*r22*x5676))+(((-1.0)*r20*sj6*x5683))+(((-1.0)*sj2*x5687))+(((-1.0)*cj6*r21*x5683))+((x5667*x5677)));
evalcond[3]=(x5693+((cj0*x5670))+(((-1.0)*x5671*x5678))+(((-1.0)*x5679*x5687))+(((-1.0)*r00*x5681))+((sj0*x5668)));
evalcond[4]=((((-1.0)*x5671*x5682))+x5690+((x5672*x5681))+((cj0*x5675))+((r10*x5691))+(((-1.0)*r00*x5680*x5685))+(((-1.0)*r02*sj0*x5676)));
evalcond[5]=(x5689+((x5681*x5682))+((cj0*cj5*r02))+((sj0*x5675))+((r10*sj0*x5685))+((x5667*x5679))+((x5671*x5672))+((r00*x5691)));
evalcond[6]=((0.0001)+(((-1.0)*x5670*x5674))+(((-0.0718)*x5690))+((x5668*x5669))+(((-1.0)*sj3*x5688))+(((-1.0)*py*x5684))+(((0.026255)*r00*x5671))+((px*sj0))+(((-0.09746)*sj3))+(((-1.0)*cj6*r10*x5669)));
evalcond[7]=((-0.1255)+(((-0.1158)*cj2))+(((-0.0009)*sj2))+(((0.026255)*x5673))+pz+(((-0.09746)*x5677))+(((-0.02626)*x5694))+(((-1.0)*x5677*x5688))+(((-1.0)*x5677*x5692))+(((0.0718)*sj2*x5666))+(((-0.026255)*x5686)));
evalcond[8]=((-0.001)+((x5668*x5674))+(((-0.1158)*sj2))+(((-1.0)*px*x5684))+(((-0.0718)*x5689))+(((-1.0)*x5679*x5692))+(((-1.0)*x5679*x5688))+(((0.02626)*x5693))+(((0.0009)*cj2))+(((-0.026255)*r10*x5671))+(((-0.09746)*x5679))+(((-1.0)*py*x5680))+((x5669*x5670))+(((-1.0)*cj6*r00*x5669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x5695=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*sj6*x5695))+(((-1.0)*cj0*cj6*r01*x5695))+((r12*sj0*sj5))+(((-1.0)*cj6*r11*sj0*x5695))+((cj0*r02*sj5))+(((-1.0)*r10*sj0*sj6*x5695)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5696=(cj5*sj0);
IkReal x5697=((1.0)*cj5*cj6);
IkReal x5698=((1.0)*cj5*sj6);
if( IKabs((((r22*sj5))+(((-1.0)*r20*x5698))+(((-1.0)*r21*x5697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*cj0*r11*x5697))+((r00*sj6*x5696))+(((-1.0)*cj0*r10*x5698))+((cj6*r01*x5696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+(((-1.0)*r20*x5698))+(((-1.0)*r21*x5697))))+IKsqr((((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*cj0*r11*x5697))+((r00*sj6*x5696))+(((-1.0)*cj0*r10*x5698))+((cj6*r01*x5696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*sj5))+(((-1.0)*r20*x5698))+(((-1.0)*r21*x5697))), (((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*cj0*r11*x5697))+((r00*sj6*x5696))+(((-1.0)*cj0*r10*x5698))+((cj6*r01*x5696))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x5699=(cj5*cj6);
IkReal x5700=((1.0)*cj0);
IkReal x5701=((1.0)*sj5);
IkReal x5702=(cj5*sj6);
evalcond[0]=(((r20*x5702))+(((-1.0)*r22*x5701))+(IKsin(j3))+((r21*x5699)));
evalcond[1]=(((r00*sj0*x5702))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x5701))+((r01*sj0*x5699))+(((-1.0)*(IKcos(j3))))+(((-1.0)*r10*x5700*x5702))+(((-1.0)*r11*x5699*x5700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5703=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x5703))+(((-1.0)*cj6*r21*x5703))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5704=((1.0)*sj5);
CheckValue<IkReal> x5705=IKPowWithIntegerCheck(sj3,-1);
if(!x5705.valid){
continue;
}
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(cj3,-1);
if(!x5706.valid){
continue;
}
if( IKabs(((x5705.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5706.value)*(((((-1.0)*r20*sj6*x5704))+(((-1.0)*cj6*r21*x5704))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5705.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x5706.value)*(((((-1.0)*r20*sj6*x5704))+(((-1.0)*cj6*r21*x5704))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5705.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x5706.value)*(((((-1.0)*r20*sj6*x5704))+(((-1.0)*cj6*r21*x5704))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5707=IKcos(j4);
IkReal x5708=IKsin(j4);
IkReal x5709=(sj0*sj6);
IkReal x5710=(cj0*sj6);
IkReal x5711=((0.026255)*r01);
IkReal x5712=(cj5*r12);
IkReal x5713=(r10*sj5);
IkReal x5714=(cj6*sj0);
IkReal x5715=((0.026255)*r00);
IkReal x5716=((1.0)*cj5);
IkReal x5717=((1.0)*r10);
IkReal x5718=((1.0)*r01);
IkReal x5719=(cj0*cj6);
IkReal x5720=(r00*sj5);
IkReal x5721=((0.026255)*r11);
IkReal x5722=((1.0)*py);
IkReal x5723=(cj6*r20);
IkReal x5724=((1.0)*sj5);
IkReal x5725=(r11*sj5);
IkReal x5726=((0.026255)*r10);
IkReal x5727=(r21*sj6);
IkReal x5728=((1.0)*x5707);
IkReal x5729=((0.02626)*x5708);
IkReal x5730=((0.0718)*x5707);
evalcond[0]=((((-1.0)*x5727))+x5723+((cj3*x5708)));
evalcond[1]=((((-1.0)*cj6*r21*x5724))+(((-1.0)*r22*x5716))+(((-1.0)*cj3*x5728))+(((-1.0)*r20*sj6*x5724)));
evalcond[2]=((((-1.0)*x5714*x5717))+(((-1.0)*r00*x5719))+((r11*x5709))+((r01*x5710))+x5707);
evalcond[3]=((((-1.0)*x5709*x5718))+((r11*x5710))+((r00*x5714))+((sj3*x5708))+(((-1.0)*x5717*x5719)));
evalcond[4]=((0.2413)+((cj3*x5729))+((cj3*x5730))+pz+(((0.09746)*cj3))+(((0.026255)*x5723))+(((-0.026255)*x5727)));
evalcond[5]=(((cj0*cj5*r02))+((r01*sj5*x5719))+((x5714*x5725))+((sj0*x5712))+((x5710*x5720))+x5708+((x5709*x5713)));
evalcond[6]=(((cj0*x5712))+(((-1.0)*x5709*x5720))+((x5710*x5713))+((x5719*x5725))+(((-1.0)*r02*sj0*x5716))+(((-1.0)*sj3*x5728))+(((-1.0)*sj5*x5714*x5718)));
evalcond[7]=((-0.0001)+(((-1.0)*x5715*x5719))+((x5709*x5721))+(((-0.0718)*x5708))+((x5710*x5711))+(((-1.0)*x5714*x5726))+(((-1.0)*sj0*x5722))+(((0.02626)*x5707))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+((sj3*x5729))+((sj3*x5730))+(((-1.0)*x5709*x5711))+(((-1.0)*x5719*x5726))+(((-1.0)*cj0*x5722))+((x5710*x5721))+((px*sj0))+(((0.09746)*sj3))+((x5714*x5715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5731=((1.0)*sj6);
CheckValue<IkReal> x5732=IKPowWithIntegerCheck(cj3,-1);
if(!x5732.valid){
continue;
}
if( IKabs(((x5732.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5731))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5732.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5731))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5732.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))), (((cj6*r10*sj0))+(((-1.0)*cj0*r01*x5731))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x5731))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5733=IKcos(j4);
IkReal x5734=IKsin(j4);
IkReal x5735=(sj0*sj6);
IkReal x5736=(cj0*sj6);
IkReal x5737=((0.026255)*r01);
IkReal x5738=(cj5*r12);
IkReal x5739=(r10*sj5);
IkReal x5740=(cj6*sj0);
IkReal x5741=((0.026255)*r00);
IkReal x5742=((1.0)*cj5);
IkReal x5743=((1.0)*r10);
IkReal x5744=((1.0)*r01);
IkReal x5745=(cj0*cj6);
IkReal x5746=(r00*sj5);
IkReal x5747=((0.026255)*r11);
IkReal x5748=((1.0)*py);
IkReal x5749=(cj6*r20);
IkReal x5750=((1.0)*sj5);
IkReal x5751=(r11*sj5);
IkReal x5752=((0.026255)*r10);
IkReal x5753=(r21*sj6);
IkReal x5754=((1.0)*x5733);
IkReal x5755=((0.02626)*x5734);
IkReal x5756=((0.0718)*x5733);
evalcond[0]=(((cj3*x5734))+(((-1.0)*x5753))+x5749);
evalcond[1]=((((-1.0)*r22*x5742))+(((-1.0)*r20*sj6*x5750))+(((-1.0)*cj3*x5754))+(((-1.0)*cj6*r21*x5750)));
evalcond[2]=(((r11*x5735))+((r01*x5736))+(((-1.0)*r00*x5745))+(((-1.0)*x5740*x5743))+x5733);
evalcond[3]=((((-1.0)*x5735*x5744))+((r11*x5736))+((sj3*x5734))+((r00*x5740))+(((-1.0)*x5743*x5745)));
evalcond[4]=((0.2413)+((cj3*x5756))+((cj3*x5755))+pz+(((0.09746)*cj3))+(((-0.026255)*x5753))+(((0.026255)*x5749)));
evalcond[5]=(((x5736*x5746))+((cj0*cj5*r02))+((x5735*x5739))+((r01*sj5*x5745))+((x5740*x5751))+((sj0*x5738))+x5734);
evalcond[6]=((((-1.0)*x5735*x5746))+(((-1.0)*r02*sj0*x5742))+((cj0*x5738))+((x5736*x5739))+(((-1.0)*sj3*x5754))+(((-1.0)*sj5*x5740*x5744))+((x5745*x5751)));
evalcond[7]=((-0.0001)+(((-1.0)*x5740*x5752))+((x5735*x5747))+((x5736*x5737))+(((-1.0)*x5741*x5745))+(((-0.0718)*x5734))+(((0.02626)*x5733))+(((-1.0)*cj0*px))+(((-1.0)*sj0*x5748)));
evalcond[8]=((-0.0001)+((x5736*x5747))+((sj3*x5755))+((sj3*x5756))+(((-1.0)*x5735*x5737))+(((-1.0)*x5745*x5752))+(((-1.0)*cj0*x5748))+((x5740*x5741))+((px*sj0))+(((0.09746)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5757=((1.0)*sj5);
CheckValue<IkReal> x5758=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x5757))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x5757))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5758.value)))+(x5759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5760=IKcos(j4);
IkReal x5761=IKsin(j4);
IkReal x5762=(sj0*sj6);
IkReal x5763=(cj0*sj6);
IkReal x5764=((0.026255)*r01);
IkReal x5765=(cj5*r12);
IkReal x5766=(r10*sj5);
IkReal x5767=(cj6*sj0);
IkReal x5768=((0.026255)*r00);
IkReal x5769=((1.0)*cj5);
IkReal x5770=((1.0)*r10);
IkReal x5771=((1.0)*r01);
IkReal x5772=(cj0*cj6);
IkReal x5773=(r00*sj5);
IkReal x5774=((0.026255)*r11);
IkReal x5775=((1.0)*py);
IkReal x5776=(cj6*r20);
IkReal x5777=((1.0)*sj5);
IkReal x5778=(r11*sj5);
IkReal x5779=((0.026255)*r10);
IkReal x5780=(r21*sj6);
IkReal x5781=((1.0)*x5760);
IkReal x5782=((0.02626)*x5761);
IkReal x5783=((0.0718)*x5760);
evalcond[0]=(((cj3*x5761))+(((-1.0)*x5780))+x5776);
evalcond[1]=((((-1.0)*cj3*x5781))+(((-1.0)*r20*sj6*x5777))+(((-1.0)*r22*x5769))+(((-1.0)*cj6*r21*x5777)));
evalcond[2]=((((-1.0)*x5767*x5770))+((r01*x5763))+(((-1.0)*r00*x5772))+((r11*x5762))+x5760);
evalcond[3]=(((sj3*x5761))+((r00*x5767))+(((-1.0)*x5770*x5772))+((r11*x5763))+(((-1.0)*x5762*x5771)));
evalcond[4]=((0.2413)+((cj3*x5783))+((cj3*x5782))+(((-0.026255)*x5780))+pz+(((0.026255)*x5776))+(((0.09746)*cj3)));
evalcond[5]=(((x5767*x5778))+((cj0*cj5*r02))+((r01*sj5*x5772))+((x5762*x5766))+((x5763*x5773))+x5761+((sj0*x5765)));
evalcond[6]=((((-1.0)*sj5*x5767*x5771))+(((-1.0)*x5762*x5773))+(((-1.0)*sj3*x5781))+((cj0*x5765))+(((-1.0)*r02*sj0*x5769))+((x5763*x5766))+((x5772*x5778)));
evalcond[7]=((-0.0001)+(((-0.0718)*x5761))+(((-1.0)*x5767*x5779))+(((-1.0)*sj0*x5775))+(((-1.0)*x5768*x5772))+(((-1.0)*cj0*px))+((x5763*x5764))+(((0.02626)*x5760))+((x5762*x5774)));
evalcond[8]=((-0.0001)+((x5767*x5768))+((sj3*x5783))+((sj3*x5782))+(((-1.0)*cj0*x5775))+(((-1.0)*x5762*x5764))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*x5772*x5779))+((x5763*x5774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5784=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((r12*sj0*sj5))+(((-1.0)*cj0*cj6*r01*x5784))+(((-1.0)*cj0*r00*sj6*x5784))+((cj0*r02*sj5))+(((-1.0)*r10*sj0*sj6*x5784))+(((-1.0)*cj6*r11*sj0*x5784)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5785=(cj5*cj6);
IkReal x5786=((1.0)*cj0);
IkReal x5787=((1.0)*sj5);
IkReal x5788=(cj5*sj6);
if( IKabs((((r20*x5788))+((r21*x5785))+(((-1.0)*r22*x5787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj0*x5787))+((cj0*r12*sj5))+(((-1.0)*r10*x5786*x5788))+((r00*sj0*x5788))+((r01*sj0*x5785))+(((-1.0)*r11*x5785*x5786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x5788))+((r21*x5785))+(((-1.0)*r22*x5787))))+IKsqr(((((-1.0)*r02*sj0*x5787))+((cj0*r12*sj5))+(((-1.0)*r10*x5786*x5788))+((r00*sj0*x5788))+((r01*sj0*x5785))+(((-1.0)*r11*x5785*x5786))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r20*x5788))+((r21*x5785))+(((-1.0)*r22*x5787))), ((((-1.0)*r02*sj0*x5787))+((cj0*r12*sj5))+(((-1.0)*r10*x5786*x5788))+((r00*sj0*x5788))+((r01*sj0*x5785))+(((-1.0)*r11*x5785*x5786))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x5789=(cj5*cj6);
IkReal x5790=((1.0)*cj0);
IkReal x5791=((1.0)*sj5);
IkReal x5792=(cj5*sj6);
evalcond[0]=(((r20*x5792))+((r21*x5789))+(((-1.0)*(IKsin(j3))))+(((-1.0)*r22*x5791)));
evalcond[1]=(((cj0*r12*sj5))+((r00*sj0*x5792))+(((-1.0)*(IKcos(j3))))+(((-1.0)*r10*x5790*x5792))+((r01*sj0*x5789))+(((-1.0)*r02*sj0*x5791))+(((-1.0)*r11*x5789*x5790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(sj3,-1);
if(!x5793.valid){
continue;
}
CheckValue<IkReal> x5794=IKPowWithIntegerCheck(cj3,-1);
if(!x5794.valid){
continue;
}
if( IKabs(((x5793.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5794.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5793.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x5794.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5793.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x5794.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5795=IKcos(j4);
IkReal x5796=IKsin(j4);
IkReal x5797=(r11*sj0);
IkReal x5798=(cj0*sj6);
IkReal x5799=((0.026255)*r01);
IkReal x5800=(cj6*sj5);
IkReal x5801=(r10*sj0);
IkReal x5802=(sj5*sj6);
IkReal x5803=((1.0)*cj5);
IkReal x5804=((1.0)*cj6);
IkReal x5805=((1.0)*sj0);
IkReal x5806=((0.026255)*sj6);
IkReal x5807=(cj5*r12);
IkReal x5808=(cj0*r10);
IkReal x5809=((0.026255)*cj6);
IkReal x5810=((1.0)*r21);
IkReal x5811=((1.0)*cj0);
IkReal x5812=(cj0*r00);
IkReal x5813=(cj3*x5796);
IkReal x5814=(sj3*x5796);
IkReal x5815=(cj6*r00*sj0);
IkReal x5816=((1.0)*x5795);
IkReal x5817=(cj3*x5795);
evalcond[0]=((((-1.0)*x5813))+(((-1.0)*sj6*x5810))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x5803))+(((-1.0)*r20*x5802))+(((-1.0)*x5800*x5810))+x5817);
evalcond[2]=((((-1.0)*x5804*x5812))+(((-1.0)*x5816))+((r01*x5798))+((sj6*x5797))+(((-1.0)*x5801*x5804)));
evalcond[3]=((((-1.0)*x5804*x5808))+((r11*x5798))+(((-1.0)*r01*sj6*x5805))+x5814+x5815);
evalcond[4]=((0.0097)+(((-0.0718)*x5817))+(((-0.02626)*x5813))+pz+(((-0.09746)*cj3))+(((-1.0)*r21*x5806))+((r20*x5809)));
evalcond[5]=(((cj0*cj5*r02))+((cj0*r01*x5800))+((x5797*x5800))+((sj0*x5807))+((x5801*x5802))+(((-1.0)*x5796))+((r00*sj5*x5798)));
evalcond[6]=((((-1.0)*r01*x5800*x5805))+((cj0*r11*x5800))+((cj0*x5807))+(((-1.0)*sj3*x5816))+(((-1.0)*r02*sj0*x5803))+(((-1.0)*r00*x5802*x5805))+((r10*sj5*x5798)));
evalcond[7]=((-0.0019)+(((-1.0)*px*x5811))+(((-0.02626)*x5795))+(((0.0718)*x5796))+((x5798*x5799))+((x5797*x5806))+(((-1.0)*x5809*x5812))+(((-1.0)*py*x5805))+(((-1.0)*x5801*x5809)));
evalcond[8]=((-0.0001)+(((0.026255)*r11*x5798))+(((-1.0)*x5808*x5809))+(((-1.0)*py*x5811))+(((-1.0)*sj0*sj6*x5799))+(((0.02626)*x5814))+(((0.0718)*sj3*x5795))+((px*sj0))+(((0.09746)*sj3))+((r00*sj0*x5809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5818=((1.0)*cj6);
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(cj3,-1);
if(!x5819.valid){
continue;
}
if( IKabs(((x5819.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x5818))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x5818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5819.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x5818))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x5818))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5819.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x5818))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x5818))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5820=IKcos(j4);
IkReal x5821=IKsin(j4);
IkReal x5822=(r11*sj0);
IkReal x5823=(cj0*sj6);
IkReal x5824=((0.026255)*r01);
IkReal x5825=(cj6*sj5);
IkReal x5826=(r10*sj0);
IkReal x5827=(sj5*sj6);
IkReal x5828=((1.0)*cj5);
IkReal x5829=((1.0)*cj6);
IkReal x5830=((1.0)*sj0);
IkReal x5831=((0.026255)*sj6);
IkReal x5832=(cj5*r12);
IkReal x5833=(cj0*r10);
IkReal x5834=((0.026255)*cj6);
IkReal x5835=((1.0)*r21);
IkReal x5836=((1.0)*cj0);
IkReal x5837=(cj0*r00);
IkReal x5838=(cj3*x5821);
IkReal x5839=(sj3*x5821);
IkReal x5840=(cj6*r00*sj0);
IkReal x5841=((1.0)*x5820);
IkReal x5842=(cj3*x5820);
evalcond[0]=((((-1.0)*sj6*x5835))+((cj6*r20))+(((-1.0)*x5838)));
evalcond[1]=((((-1.0)*r22*x5828))+(((-1.0)*x5825*x5835))+x5842+(((-1.0)*r20*x5827)));
evalcond[2]=(((r01*x5823))+((sj6*x5822))+(((-1.0)*x5826*x5829))+(((-1.0)*x5829*x5837))+(((-1.0)*x5841)));
evalcond[3]=((((-1.0)*r01*sj6*x5830))+((r11*x5823))+(((-1.0)*x5829*x5833))+x5839+x5840);
evalcond[4]=((0.0097)+(((-1.0)*r21*x5831))+(((-0.02626)*x5838))+((r20*x5834))+pz+(((-0.09746)*cj3))+(((-0.0718)*x5842)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x5832))+((x5822*x5825))+((cj0*r01*x5825))+((r00*sj5*x5823))+((x5826*x5827))+(((-1.0)*x5821)));
evalcond[6]=(((r10*sj5*x5823))+((cj0*r11*x5825))+(((-1.0)*r02*sj0*x5828))+(((-1.0)*r01*x5825*x5830))+((cj0*x5832))+(((-1.0)*sj3*x5841))+(((-1.0)*r00*x5827*x5830)));
evalcond[7]=((-0.0019)+(((-1.0)*px*x5836))+((x5822*x5831))+(((-0.02626)*x5820))+(((-1.0)*py*x5830))+(((0.0718)*x5821))+(((-1.0)*x5826*x5834))+((x5823*x5824))+(((-1.0)*x5834*x5837)));
evalcond[8]=((-0.0001)+(((0.02626)*x5839))+((r00*sj0*x5834))+(((-1.0)*x5833*x5834))+(((0.0718)*sj3*x5820))+(((-1.0)*py*x5836))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*sj0*sj6*x5824))+(((0.026255)*r11*x5823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5843 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5843.valid){
continue;
}
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5843.value)+(((1.5707963267949)*(x5844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x5845=IKcos(j4);
IkReal x5846=IKsin(j4);
IkReal x5847=(r11*sj0);
IkReal x5848=(cj0*sj6);
IkReal x5849=((0.026255)*r01);
IkReal x5850=(cj6*sj5);
IkReal x5851=(r10*sj0);
IkReal x5852=(sj5*sj6);
IkReal x5853=((1.0)*cj5);
IkReal x5854=((1.0)*cj6);
IkReal x5855=((1.0)*sj0);
IkReal x5856=((0.026255)*sj6);
IkReal x5857=(cj5*r12);
IkReal x5858=(cj0*r10);
IkReal x5859=((0.026255)*cj6);
IkReal x5860=((1.0)*r21);
IkReal x5861=((1.0)*cj0);
IkReal x5862=(cj0*r00);
IkReal x5863=(cj3*x5846);
IkReal x5864=(sj3*x5846);
IkReal x5865=(cj6*r00*sj0);
IkReal x5866=((1.0)*x5845);
IkReal x5867=(cj3*x5845);
evalcond[0]=((((-1.0)*x5863))+(((-1.0)*sj6*x5860))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x5852))+(((-1.0)*x5850*x5860))+(((-1.0)*r22*x5853))+x5867);
evalcond[2]=((((-1.0)*x5854*x5862))+(((-1.0)*x5866))+((sj6*x5847))+((r01*x5848))+(((-1.0)*x5851*x5854)));
evalcond[3]=((((-1.0)*r01*sj6*x5855))+((r11*x5848))+(((-1.0)*x5854*x5858))+x5865+x5864);
evalcond[4]=((0.0097)+(((-1.0)*r21*x5856))+(((-0.0718)*x5867))+pz+(((-0.09746)*cj3))+(((-0.02626)*x5863))+((r20*x5859)));
evalcond[5]=(((cj0*cj5*r02))+(((-1.0)*x5846))+((x5851*x5852))+((cj0*r01*x5850))+((x5847*x5850))+((r00*sj5*x5848))+((sj0*x5857)));
evalcond[6]=((((-1.0)*r00*x5852*x5855))+(((-1.0)*r01*x5850*x5855))+(((-1.0)*r02*sj0*x5853))+(((-1.0)*sj3*x5866))+((cj0*r11*x5850))+((r10*sj5*x5848))+((cj0*x5857)));
evalcond[7]=((-0.0019)+((x5848*x5849))+(((-1.0)*px*x5861))+(((-1.0)*py*x5855))+(((0.0718)*x5846))+(((-1.0)*x5859*x5862))+((x5847*x5856))+(((-0.02626)*x5845))+(((-1.0)*x5851*x5859)));
evalcond[8]=((-0.0001)+(((0.0718)*sj3*x5845))+(((-1.0)*x5858*x5859))+((r00*sj0*x5859))+(((-1.0)*py*x5861))+((px*sj0))+(((0.09746)*sj3))+(((0.026255)*r11*x5848))+(((0.02626)*x5864))+(((-1.0)*sj0*sj6*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x5868=IKcos(j4);
IkReal x5869=IKsin(j4);
IkReal x5870=(cj6*r20);
IkReal x5871=((1.0)*r21);
evalcond[0]=((((-1.0)*sj6*x5871))+x5870+x5868);
evalcond[1]=((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x5871))+x5869+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((0.1264)+(((-0.0718)*x5869))+(((-0.026255)*r21*sj6))+pz+(((0.026255)*x5870))+(((0.02626)*x5868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x5872=(sj0*sj6);
IkReal x5873=(cj6*r10);
IkReal x5874=((1.0)*sj0);
IkReal x5875=(cj6*r00);
IkReal x5876=(cj0*sj6);
j3eval[0]=sj4;
j3eval[1]=((IKabs(((((-1.0)*r11*x5876))+(((-1.0)*x5874*x5875))+((cj0*x5873))+((r01*x5872)))))+(IKabs(((((-1.0)*x5873*x5874))+((r11*x5872))+((r01*x5876))+(((-1.0)*cj0*x5875))))));
j3eval[2]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5877=(sj0*sj6);
IkReal x5878=((1.0)*cj5);
IkReal x5879=((1.0)*sj5);
IkReal x5880=(cj6*sj0);
IkReal x5881=(cj0*x5879);
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(sj4,-1);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883=IKPowWithIntegerCheck(cj4,-1);
if(!x5883.valid){
continue;
}
if( IKabs(((x5882.value)*((((cj0*cj6*r10))+((r01*x5877))+(((-1.0)*r00*x5880))+(((-1.0)*cj0*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5883.value)*(((((-1.0)*cj6*r01*x5881))+(((-1.0)*r00*sj6*x5881))+(((-1.0)*r12*sj0*x5878))+(((-1.0)*r10*x5877*x5879))+(((-1.0)*cj0*r02*x5878))+(((-1.0)*r11*x5879*x5880)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5882.value)*((((cj0*cj6*r10))+((r01*x5877))+(((-1.0)*r00*x5880))+(((-1.0)*cj0*r11*sj6))))))+IKsqr(((x5883.value)*(((((-1.0)*cj6*r01*x5881))+(((-1.0)*r00*sj6*x5881))+(((-1.0)*r12*sj0*x5878))+(((-1.0)*r10*x5877*x5879))+(((-1.0)*cj0*r02*x5878))+(((-1.0)*r11*x5879*x5880))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5882.value)*((((cj0*cj6*r10))+((r01*x5877))+(((-1.0)*r00*x5880))+(((-1.0)*cj0*r11*sj6))))), ((x5883.value)*(((((-1.0)*cj6*r01*x5881))+(((-1.0)*r00*sj6*x5881))+(((-1.0)*r12*sj0*x5878))+(((-1.0)*r10*x5877*x5879))+(((-1.0)*cj0*r02*x5878))+(((-1.0)*r11*x5879*x5880))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x5884=IKcos(j3);
IkReal x5885=IKsin(j3);
IkReal x5886=(r11*sj0);
IkReal x5887=(cj0*sj6);
IkReal x5888=((0.026255)*r01);
IkReal x5889=(cj0*cj5);
IkReal x5890=(cj6*sj5);
IkReal x5891=((1.0)*cj6);
IkReal x5892=(sj0*sj6);
IkReal x5893=(r10*sj5);
IkReal x5894=((1.0)*cj5);
IkReal x5895=(r02*sj0);
IkReal x5896=(cj0*sj5);
IkReal x5897=(r10*sj0);
IkReal x5898=((1.0)*r01);
IkReal x5899=(r00*sj5);
IkReal x5900=((1.0)*py);
IkReal x5901=(cj6*sj0);
IkReal x5902=(r12*sj0);
IkReal x5903=(cj0*r10);
IkReal x5904=((0.026255)*cj6);
IkReal x5905=(sj4*x5885);
IkReal x5906=(cj4*x5885);
IkReal x5907=(sj4*x5884);
IkReal x5908=(r00*x5904);
IkReal x5909=(cj4*x5884);
evalcond[0]=(((r00*x5901))+(((-1.0)*x5892*x5898))+((r11*x5887))+(((-1.0)*x5891*x5903))+x5905);
evalcond[1]=(((sj6*x5886))+((r01*x5887))+(((-1.0)*x5891*x5897))+(((-1.0)*cj0*r00*x5891))+(((-1.0)*x5907)));
evalcond[2]=(((x5887*x5899))+((x5886*x5890))+((cj0*r01*x5890))+((cj5*x5902))+((r02*x5889))+x5909+((x5892*x5893)));
evalcond[3]=(((cj5*r00*x5892))+((cj5*r01*x5901))+(((-1.0)*x5884))+(((-1.0)*sj5*x5895))+(((-1.0)*r10*x5887*x5894))+(((-1.0)*r11*x5889*x5891))+((r12*x5896)));
evalcond[4]=((((-1.0)*cj5*x5886*x5891))+(((-1.0)*x5885))+((r02*x5896))+(((-1.0)*r10*x5892*x5894))+(((-1.0)*r01*x5889*x5891))+(((-1.0)*r00*x5887*x5894))+((sj5*x5902)));
evalcond[5]=((((-1.0)*sj0*x5890*x5898))+(((-1.0)*x5892*x5899))+((r12*x5889))+((cj0*r11*x5890))+(((-1.0)*x5894*x5895))+((x5887*x5893))+(((-1.0)*x5906)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x5887))+(((-1.0)*cj0*x5900))+(((-1.0)*x5903*x5904))+(((0.09746)*x5885))+(((0.02626)*x5905))+(((0.0718)*x5906))+((px*sj0))+(((-1.0)*x5888*x5892))+(((0.026255)*r00*x5901)));
evalcond[7]=((-0.1168)+(((-1.0)*cj0*x5908))+(((-1.0)*x5897*x5904))+((x5887*x5888))+(((0.026255)*sj6*x5886))+(((-1.0)*sj0*x5900))+(((-0.09746)*x5884))+(((-1.0)*cj0*px))+(((-0.0718)*x5909))+(((-0.02626)*x5907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5910=(cj0*cj6);
IkReal x5911=((1.0)*cj5);
IkReal x5912=(r01*sj0);
IkReal x5913=(cj0*sj6);
IkReal x5914=(r00*sj0);
CheckValue<IkReal> x5915=IKPowWithIntegerCheck(sj4,-1);
if(!x5915.valid){
continue;
}
if( IKabs(((x5915.value)*(((((-1.0)*cj6*x5914))+(((-1.0)*r11*x5913))+((r10*x5910))+((sj6*x5912)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*cj6*x5912))+(((-1.0)*r11*x5910*x5911))+((cj0*r12*sj5))+((cj5*sj6*x5914))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*r10*x5911*x5913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5915.value)*(((((-1.0)*cj6*x5914))+(((-1.0)*r11*x5913))+((r10*x5910))+((sj6*x5912))))))+IKsqr((((cj5*cj6*x5912))+(((-1.0)*r11*x5910*x5911))+((cj0*r12*sj5))+((cj5*sj6*x5914))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*r10*x5911*x5913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5915.value)*(((((-1.0)*cj6*x5914))+(((-1.0)*r11*x5913))+((r10*x5910))+((sj6*x5912))))), (((cj5*cj6*x5912))+(((-1.0)*r11*x5910*x5911))+((cj0*r12*sj5))+((cj5*sj6*x5914))+(((-1.0)*r02*sj0*sj5))+(((-1.0)*r10*x5911*x5913))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x5916=IKcos(j3);
IkReal x5917=IKsin(j3);
IkReal x5918=(r11*sj0);
IkReal x5919=(cj0*sj6);
IkReal x5920=((0.026255)*r01);
IkReal x5921=(cj0*cj5);
IkReal x5922=(cj6*sj5);
IkReal x5923=((1.0)*cj6);
IkReal x5924=(sj0*sj6);
IkReal x5925=(r10*sj5);
IkReal x5926=((1.0)*cj5);
IkReal x5927=(r02*sj0);
IkReal x5928=(cj0*sj5);
IkReal x5929=(r10*sj0);
IkReal x5930=((1.0)*r01);
IkReal x5931=(r00*sj5);
IkReal x5932=((1.0)*py);
IkReal x5933=(cj6*sj0);
IkReal x5934=(r12*sj0);
IkReal x5935=(cj0*r10);
IkReal x5936=((0.026255)*cj6);
IkReal x5937=(sj4*x5917);
IkReal x5938=(cj4*x5917);
IkReal x5939=(sj4*x5916);
IkReal x5940=(r00*x5936);
IkReal x5941=(cj4*x5916);
evalcond[0]=((((-1.0)*x5924*x5930))+((r00*x5933))+(((-1.0)*x5923*x5935))+x5937+((r11*x5919)));
evalcond[1]=(((r01*x5919))+(((-1.0)*cj0*r00*x5923))+(((-1.0)*x5939))+(((-1.0)*x5923*x5929))+((sj6*x5918)));
evalcond[2]=(((x5924*x5925))+((cj5*x5934))+((x5918*x5922))+((x5919*x5931))+x5941+((r02*x5921))+((cj0*r01*x5922)));
evalcond[3]=(((cj5*r00*x5924))+((cj5*r01*x5933))+((r12*x5928))+(((-1.0)*r10*x5919*x5926))+(((-1.0)*sj5*x5927))+(((-1.0)*r11*x5921*x5923))+(((-1.0)*x5916)));
evalcond[4]=((((-1.0)*r01*x5921*x5923))+(((-1.0)*cj5*x5918*x5923))+((sj5*x5934))+(((-1.0)*r10*x5924*x5926))+(((-1.0)*r00*x5919*x5926))+((r02*x5928))+(((-1.0)*x5917)));
evalcond[5]=(((x5919*x5925))+(((-1.0)*x5938))+((cj0*r11*x5922))+((r12*x5921))+(((-1.0)*x5924*x5931))+(((-1.0)*x5926*x5927))+(((-1.0)*sj0*x5922*x5930)));
evalcond[6]=((-0.0001)+(((0.026255)*r00*x5933))+(((0.02626)*x5937))+(((-1.0)*x5920*x5924))+(((0.09746)*x5917))+(((-1.0)*x5935*x5936))+(((-1.0)*cj0*x5932))+((px*sj0))+(((0.026255)*r11*x5919))+(((0.0718)*x5938)));
evalcond[7]=((-0.1168)+(((-1.0)*sj0*x5932))+((x5919*x5920))+(((-1.0)*x5929*x5936))+(((-0.02626)*x5939))+(((-1.0)*cj0*x5940))+(((0.026255)*sj6*x5918))+(((-0.0718)*x5941))+(((-0.09746)*x5916))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5942=(sj0*sj6);
IkReal x5943=(cj6*r10);
IkReal x5944=((1.0)*sj0);
IkReal x5945=(cj6*r00);
IkReal x5946=(cj0*sj6);
CheckValue<IkReal> x5947 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5946))+(((-1.0)*x5944*x5945))+((cj0*x5943))+((r01*x5942)))),(((r01*x5946))+(((-1.0)*cj0*x5945))+((r11*x5942))+(((-1.0)*x5943*x5944))),IKFAST_ATAN2_MAGTHRESH);
if(!x5947.valid){
continue;
}
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x5948.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x5947.value)+(((1.5707963267949)*(x5948.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x5949=IKcos(j3);
IkReal x5950=IKsin(j3);
IkReal x5951=(r11*sj0);
IkReal x5952=(cj0*sj6);
IkReal x5953=((0.026255)*r01);
IkReal x5954=(cj0*cj5);
IkReal x5955=(cj6*sj5);
IkReal x5956=((1.0)*cj6);
IkReal x5957=(sj0*sj6);
IkReal x5958=(r10*sj5);
IkReal x5959=((1.0)*cj5);
IkReal x5960=(r02*sj0);
IkReal x5961=(cj0*sj5);
IkReal x5962=(r10*sj0);
IkReal x5963=((1.0)*r01);
IkReal x5964=(r00*sj5);
IkReal x5965=((1.0)*py);
IkReal x5966=(cj6*sj0);
IkReal x5967=(r12*sj0);
IkReal x5968=(cj0*r10);
IkReal x5969=((0.026255)*cj6);
IkReal x5970=(sj4*x5950);
IkReal x5971=(cj4*x5950);
IkReal x5972=(sj4*x5949);
IkReal x5973=(r00*x5969);
IkReal x5974=(cj4*x5949);
evalcond[0]=(((r00*x5966))+(((-1.0)*x5957*x5963))+((r11*x5952))+(((-1.0)*x5956*x5968))+x5970);
evalcond[1]=(((sj6*x5951))+(((-1.0)*x5972))+(((-1.0)*x5956*x5962))+(((-1.0)*cj0*r00*x5956))+((r01*x5952)));
evalcond[2]=(((x5957*x5958))+((r02*x5954))+((x5951*x5955))+((cj0*r01*x5955))+((x5952*x5964))+((cj5*x5967))+x5974);
evalcond[3]=(((cj5*r00*x5957))+(((-1.0)*x5949))+(((-1.0)*sj5*x5960))+(((-1.0)*r10*x5952*x5959))+((r12*x5961))+((cj5*r01*x5966))+(((-1.0)*r11*x5954*x5956)));
evalcond[4]=(((r02*x5961))+((sj5*x5967))+(((-1.0)*r00*x5952*x5959))+(((-1.0)*x5950))+(((-1.0)*r10*x5957*x5959))+(((-1.0)*r01*x5954*x5956))+(((-1.0)*cj5*x5951*x5956)));
evalcond[5]=(((x5952*x5958))+(((-1.0)*x5971))+(((-1.0)*x5957*x5964))+((r12*x5954))+(((-1.0)*sj0*x5955*x5963))+((cj0*r11*x5955))+(((-1.0)*x5959*x5960)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x5952))+(((0.09746)*x5950))+(((0.0718)*x5971))+(((-1.0)*cj0*x5965))+((px*sj0))+(((-1.0)*x5968*x5969))+(((-1.0)*x5953*x5957))+(((0.02626)*x5970))+(((0.026255)*r00*x5966)));
evalcond[7]=((-0.1168)+((x5952*x5953))+(((-0.09746)*x5949))+(((-0.02626)*x5972))+(((-1.0)*sj0*x5965))+(((-1.0)*cj0*x5973))+(((0.026255)*sj6*x5951))+(((-0.0718)*x5974))+(((-1.0)*cj0*px))+(((-1.0)*x5962*x5969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5975=(cj6*r20);
IkReal x5976=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x5975))+(((-6.96378830083565e-5)*x5976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5976))+x5975)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x5975))+(((-6.96378830083565e-5)*x5976))))+IKsqr(((((-1.0)*x5976))+x5975))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x5975))+(((-6.96378830083565e-5)*x5976))), ((((-1.0)*x5976))+x5975));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x5977=IKsin(j4);
IkReal x5978=IKcos(j4);
IkReal x5979=(cj6*r20);
IkReal x5980=((1.0)*r21);
evalcond[0]=((((-1.0)*x5978))+(((-1.0)*sj6*x5980))+x5979);
evalcond[1]=((((-1.0)*x5977))+(((-1.0)*cj6*sj5*x5980))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((0.1246)+(((0.0718)*x5977))+(((-0.02626)*x5978))+(((-0.026255)*r21*sj6))+(((0.026255)*x5979))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x5981=(cj0*cj6);
IkReal x5982=(sj0*sj6);
IkReal x5983=((1.0)*r11);
IkReal x5984=(cj6*sj0);
IkReal x5985=(cj0*sj6);
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs((((r10*x5984))+(((-1.0)*r01*x5985))+((r00*x5981))+(((-1.0)*x5982*x5983)))))+(IKabs((((r10*x5981))+(((-1.0)*r00*x5984))+((r01*x5982))+(((-1.0)*x5983*x5985))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x5986=(sj0*sj6);
IkReal x5987=(cj0*cj6);
IkReal x5988=(cj6*sj0);
IkReal x5989=(cj0*sj6);
CheckValue<IkReal> x5990=IKPowWithIntegerCheck(sj4,-1);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(cj4,-1);
if(!x5991.valid){
continue;
}
if( IKabs(((x5990.value)*((((r10*x5987))+(((-1.0)*r00*x5988))+((r01*x5986))+(((-1.0)*r11*x5989)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5991.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x5989))+((r10*sj5*x5986))+((r11*sj5*x5988))+((r01*sj5*x5987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5990.value)*((((r10*x5987))+(((-1.0)*r00*x5988))+((r01*x5986))+(((-1.0)*r11*x5989))))))+IKsqr(((x5991.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x5989))+((r10*sj5*x5986))+((r11*sj5*x5988))+((r01*sj5*x5987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x5990.value)*((((r10*x5987))+(((-1.0)*r00*x5988))+((r01*x5986))+(((-1.0)*r11*x5989))))), ((x5991.value)*((((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x5989))+((r10*sj5*x5986))+((r11*sj5*x5988))+((r01*sj5*x5987))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x5992=IKcos(j3);
IkReal x5993=IKsin(j3);
IkReal x5994=(r11*sj0);
IkReal x5995=(cj0*sj6);
IkReal x5996=((0.026255)*r01);
IkReal x5997=(cj0*cj5);
IkReal x5998=(cj6*sj5);
IkReal x5999=((1.0)*cj6);
IkReal x6000=(sj0*sj6);
IkReal x6001=(r10*sj5);
IkReal x6002=((1.0)*cj5);
IkReal x6003=(r02*sj0);
IkReal x6004=(cj0*sj5);
IkReal x6005=(r10*sj0);
IkReal x6006=((1.0)*r01);
IkReal x6007=((1.0)*py);
IkReal x6008=(r00*sj5);
IkReal x6009=(cj6*sj0);
IkReal x6010=(r12*sj0);
IkReal x6011=(cj0*r10);
IkReal x6012=((0.026255)*cj6);
IkReal x6013=(sj4*x5993);
IkReal x6014=(cj4*x5993);
IkReal x6015=(sj4*x5992);
IkReal x6016=(r00*x6012);
IkReal x6017=((1.0)*x5992);
evalcond[0]=(((sj6*x5994))+x6015+(((-1.0)*x5999*x6005))+((r01*x5995))+(((-1.0)*cj0*r00*x5999)));
evalcond[1]=(x6013+((r11*x5995))+(((-1.0)*x5999*x6011))+(((-1.0)*x6000*x6006))+((r00*x6009)));
evalcond[2]=(((cj5*x6010))+((r02*x5997))+((x5995*x6008))+((x5994*x5998))+((cj0*r01*x5998))+((x6000*x6001))+(((-1.0)*cj4*x6017)));
evalcond[3]=((((-1.0)*r01*x5997*x5999))+((r02*x6004))+(((-1.0)*cj5*x5994*x5999))+x5993+(((-1.0)*r00*x5995*x6002))+(((-1.0)*r10*x6000*x6002))+((sj5*x6010)));
evalcond[4]=(((r12*x6004))+(((-1.0)*sj5*x6003))+((cj5*r01*x6009))+(((-1.0)*r11*x5997*x5999))+((cj5*r00*x6000))+(((-1.0)*r10*x5995*x6002))+(((-1.0)*x6017)));
evalcond[5]=((((-1.0)*x6014))+((r12*x5997))+(((-1.0)*x6000*x6008))+(((-1.0)*sj0*x5998*x6006))+((cj0*r11*x5998))+((x5995*x6001))+(((-1.0)*x6002*x6003)));
evalcond[6]=((-0.0001)+(((0.09746)*x5993))+(((0.026255)*r00*x6009))+(((0.02626)*x6013))+(((-1.0)*x5996*x6000))+(((-1.0)*x6011*x6012))+(((0.0718)*x6014))+(((-1.0)*cj0*x6007))+((px*sj0))+(((0.026255)*r11*x5995)));
evalcond[7]=((0.1148)+(((0.09746)*x5992))+(((-1.0)*sj0*x6007))+(((0.0718)*cj4*x5992))+(((0.02626)*x6015))+((x5995*x5996))+(((-1.0)*x6005*x6012))+(((-1.0)*cj0*x6016))+(((0.026255)*sj6*x5994))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6018=(cj0*r00);
IkReal x6019=(cj5*sj6);
IkReal x6020=((1.0)*sj5);
IkReal x6021=(cj5*cj6);
IkReal x6022=(cj0*r01);
IkReal x6023=(r11*sj0);
IkReal x6024=((1.0)*sj6);
IkReal x6025=(r10*sj0);
CheckValue<IkReal> x6026=IKPowWithIntegerCheck(sj4,-1);
if(!x6026.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r02*x6020))+((x6021*x6023))+((x6021*x6022))+((x6019*x6025))+((x6018*x6019))+(((-1.0)*r12*sj0*x6020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6026.value)*(((((-1.0)*x6023*x6024))+((cj6*x6025))+(((-1.0)*x6022*x6024))+((cj6*x6018)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r02*x6020))+((x6021*x6023))+((x6021*x6022))+((x6019*x6025))+((x6018*x6019))+(((-1.0)*r12*sj0*x6020))))+IKsqr(((x6026.value)*(((((-1.0)*x6023*x6024))+((cj6*x6025))+(((-1.0)*x6022*x6024))+((cj6*x6018))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r02*x6020))+((x6021*x6023))+((x6021*x6022))+((x6019*x6025))+((x6018*x6019))+(((-1.0)*r12*sj0*x6020))), ((x6026.value)*(((((-1.0)*x6023*x6024))+((cj6*x6025))+(((-1.0)*x6022*x6024))+((cj6*x6018))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x6027=IKcos(j3);
IkReal x6028=IKsin(j3);
IkReal x6029=(r11*sj0);
IkReal x6030=(cj0*sj6);
IkReal x6031=((0.026255)*r01);
IkReal x6032=(cj0*cj5);
IkReal x6033=(cj6*sj5);
IkReal x6034=((1.0)*cj6);
IkReal x6035=(sj0*sj6);
IkReal x6036=(r10*sj5);
IkReal x6037=((1.0)*cj5);
IkReal x6038=(r02*sj0);
IkReal x6039=(cj0*sj5);
IkReal x6040=(r10*sj0);
IkReal x6041=((1.0)*r01);
IkReal x6042=((1.0)*py);
IkReal x6043=(r00*sj5);
IkReal x6044=(cj6*sj0);
IkReal x6045=(r12*sj0);
IkReal x6046=(cj0*r10);
IkReal x6047=((0.026255)*cj6);
IkReal x6048=(sj4*x6028);
IkReal x6049=(cj4*x6028);
IkReal x6050=(sj4*x6027);
IkReal x6051=(r00*x6047);
IkReal x6052=((1.0)*x6027);
evalcond[0]=((((-1.0)*cj0*r00*x6034))+x6050+((sj6*x6029))+(((-1.0)*x6034*x6040))+((r01*x6030)));
evalcond[1]=(((r00*x6044))+x6048+((r11*x6030))+(((-1.0)*x6035*x6041))+(((-1.0)*x6034*x6046)));
evalcond[2]=(((x6030*x6043))+((x6029*x6033))+((x6035*x6036))+((cj5*x6045))+(((-1.0)*cj4*x6052))+((r02*x6032))+((cj0*r01*x6033)));
evalcond[3]=((((-1.0)*r10*x6035*x6037))+((sj5*x6045))+x6028+(((-1.0)*r00*x6030*x6037))+(((-1.0)*r01*x6032*x6034))+((r02*x6039))+(((-1.0)*cj5*x6029*x6034)));
evalcond[4]=((((-1.0)*x6052))+((r12*x6039))+((cj5*r00*x6035))+(((-1.0)*sj5*x6038))+((cj5*r01*x6044))+(((-1.0)*r11*x6032*x6034))+(((-1.0)*r10*x6030*x6037)));
evalcond[5]=(((r12*x6032))+(((-1.0)*x6049))+((cj0*r11*x6033))+((x6030*x6036))+(((-1.0)*x6037*x6038))+(((-1.0)*sj0*x6033*x6041))+(((-1.0)*x6035*x6043)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x6030))+(((-1.0)*x6031*x6035))+(((-1.0)*x6046*x6047))+(((0.0718)*x6049))+(((0.026255)*r00*x6044))+(((0.02626)*x6048))+((px*sj0))+(((-1.0)*cj0*x6042))+(((0.09746)*x6028)));
evalcond[7]=((0.1148)+(((-1.0)*cj0*x6051))+(((0.02626)*x6050))+(((0.0718)*cj4*x6027))+(((-1.0)*x6040*x6047))+(((0.026255)*sj6*x6029))+((x6030*x6031))+(((-1.0)*sj0*x6042))+(((-1.0)*cj0*px))+(((0.09746)*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6053=(cj0*cj6);
IkReal x6054=(sj0*sj6);
IkReal x6055=((1.0)*r11);
IkReal x6056=(cj6*sj0);
IkReal x6057=(cj0*sj6);
CheckValue<IkReal> x6058=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x6058.valid){
continue;
}
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal((((r01*x6054))+(((-1.0)*x6055*x6057))+(((-1.0)*r00*x6056))+((r10*x6053)))),(((r00*x6053))+(((-1.0)*x6054*x6055))+(((-1.0)*r01*x6057))+((r10*x6056))),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6058.value)))+(x6059.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x6060=IKcos(j3);
IkReal x6061=IKsin(j3);
IkReal x6062=(r11*sj0);
IkReal x6063=(cj0*sj6);
IkReal x6064=((0.026255)*r01);
IkReal x6065=(cj0*cj5);
IkReal x6066=(cj6*sj5);
IkReal x6067=((1.0)*cj6);
IkReal x6068=(sj0*sj6);
IkReal x6069=(r10*sj5);
IkReal x6070=((1.0)*cj5);
IkReal x6071=(r02*sj0);
IkReal x6072=(cj0*sj5);
IkReal x6073=(r10*sj0);
IkReal x6074=((1.0)*r01);
IkReal x6075=((1.0)*py);
IkReal x6076=(r00*sj5);
IkReal x6077=(cj6*sj0);
IkReal x6078=(r12*sj0);
IkReal x6079=(cj0*r10);
IkReal x6080=((0.026255)*cj6);
IkReal x6081=(sj4*x6061);
IkReal x6082=(cj4*x6061);
IkReal x6083=(sj4*x6060);
IkReal x6084=(r00*x6080);
IkReal x6085=((1.0)*x6060);
evalcond[0]=((((-1.0)*x6067*x6073))+x6083+((r01*x6063))+((sj6*x6062))+(((-1.0)*cj0*r00*x6067)));
evalcond[1]=((((-1.0)*x6067*x6079))+x6081+((r11*x6063))+(((-1.0)*x6068*x6074))+((r00*x6077)));
evalcond[2]=(((cj0*r01*x6066))+((cj5*x6078))+(((-1.0)*cj4*x6085))+((x6063*x6076))+((x6062*x6066))+((r02*x6065))+((x6068*x6069)));
evalcond[3]=((((-1.0)*r00*x6063*x6070))+((sj5*x6078))+(((-1.0)*r01*x6065*x6067))+x6061+(((-1.0)*r10*x6068*x6070))+(((-1.0)*cj5*x6062*x6067))+((r02*x6072)));
evalcond[4]=((((-1.0)*x6085))+(((-1.0)*r11*x6065*x6067))+(((-1.0)*sj5*x6071))+((cj5*r01*x6077))+((r12*x6072))+((cj5*r00*x6068))+(((-1.0)*r10*x6063*x6070)));
evalcond[5]=((((-1.0)*x6068*x6076))+((x6063*x6069))+(((-1.0)*x6082))+((cj0*r11*x6066))+((r12*x6065))+(((-1.0)*sj0*x6066*x6074))+(((-1.0)*x6070*x6071)));
evalcond[6]=((-0.0001)+(((-1.0)*x6064*x6068))+(((0.09746)*x6061))+(((0.026255)*r11*x6063))+(((0.026255)*r00*x6077))+((px*sj0))+(((-1.0)*x6079*x6080))+(((0.02626)*x6081))+(((-1.0)*cj0*x6075))+(((0.0718)*x6082)));
evalcond[7]=((0.1148)+(((-1.0)*cj0*x6084))+(((-1.0)*x6073*x6080))+(((0.09746)*x6060))+(((0.0718)*cj4*x6060))+((x6063*x6064))+(((0.026255)*sj6*x6062))+(((0.02626)*x6083))+(((-1.0)*sj0*x6075))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6086=(cj0*sj5);
IkReal x6087=((1.0)*cj5);
IkReal x6088=(cj0*cj6);
IkReal x6089=(r10*sj6);
IkReal x6090=(cj6*sj0);
IkReal x6091=(r00*sj6);
IkReal x6092=(sj0*sj5);
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(sj2,-1);
if(!x6093.valid){
continue;
}
if( IKabs(((x6093.value)*(((((-1.0)*r01*x6087*x6088))+(((-1.0)*r11*x6087*x6090))+((r12*x6092))+(((-1.0)*cj0*x6087*x6091))+(((-1.0)*sj0*x6087*x6089))+((r02*x6086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6087*x6088))+((r12*x6086))+(((-1.0)*r02*x6092))+((cj5*sj0*x6091))+(((-1.0)*cj0*x6087*x6089))+((cj5*r01*x6090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6093.value)*(((((-1.0)*r01*x6087*x6088))+(((-1.0)*r11*x6087*x6090))+((r12*x6092))+(((-1.0)*cj0*x6087*x6091))+(((-1.0)*sj0*x6087*x6089))+((r02*x6086))))))+IKsqr(((((-1.0)*r11*x6087*x6088))+((r12*x6086))+(((-1.0)*r02*x6092))+((cj5*sj0*x6091))+(((-1.0)*cj0*x6087*x6089))+((cj5*r01*x6090))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x6093.value)*(((((-1.0)*r01*x6087*x6088))+(((-1.0)*r11*x6087*x6090))+((r12*x6092))+(((-1.0)*cj0*x6087*x6091))+(((-1.0)*sj0*x6087*x6089))+((r02*x6086))))), ((((-1.0)*r11*x6087*x6088))+((r12*x6086))+(((-1.0)*r02*x6092))+((cj5*sj0*x6091))+(((-1.0)*cj0*x6087*x6089))+((cj5*r01*x6090))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x6094=IKsin(j3);
IkReal x6095=(cj5*cj6);
IkReal x6096=((1.0)*sj5);
IkReal x6097=((1.0)*cj0);
IkReal x6098=(cj0*sj5);
IkReal x6099=(cj5*sj6);
IkReal x6100=(r10*x6099);
IkReal x6101=((1.0)*r11*x6095);
evalcond[0]=((((-1.0)*r22*x6096))+((cj2*x6094))+((r21*x6095))+((r20*x6099)));
evalcond[1]=((((-1.0)*r02*sj0*x6096))+(((-1.0)*r11*x6095*x6097))+((r01*sj0*x6095))+((r00*sj0*x6099))+(((-1.0)*(IKcos(j3))))+((r12*x6098))+(((-1.0)*x6097*x6100)));
evalcond[2]=((((-1.0)*r01*x6095*x6097))+(((-1.0)*sj0*x6100))+(((-1.0)*sj2*x6094))+((r12*sj0*sj5))+(((-1.0)*r00*x6097*x6099))+(((-1.0)*sj0*x6101))+((r02*x6098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6102=cj2*cj2;
IkReal x6103=(cj2*cj3);
IkReal x6104=(cj6*r20);
IkReal x6105=(cj6*r21);
IkReal x6106=(cj5*r22);
IkReal x6107=(r20*sj6);
IkReal x6108=((1.0)*sj2*sj5);
IkReal x6109=((1.0)*r21*sj6);
IkReal x6110=((-1.0)+x6102+(((-1.0)*x6102*(cj3*cj3))));
j4eval[0]=x6110;
j4eval[1]=((IKabs(((((-1.0)*x6105*x6108))+((x6103*x6104))+(((-1.0)*x6103*x6109))+(((-1.0)*sj2*x6106))+(((-1.0)*x6107*x6108)))))+(IKabs((((x6103*x6106))+(((-1.0)*sj2*x6109))+((sj2*x6104))+((sj5*x6103*x6107))+((sj5*x6103*x6105))))));
j4eval[2]=IKsign(x6110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6111=(cj5*cj6);
IkReal x6112=(cj0*sj6);
IkReal x6113=(r01*sj0);
IkReal x6114=((1.0)*sj0);
IkReal x6115=((1.0)*cj5);
IkReal x6116=(cj0*r12);
IkReal x6117=(r02*sj5);
IkReal x6118=((1.0)*sj5);
IkReal x6119=(cj5*sj6);
IkReal x6120=((1.0)*cj0);
IkReal x6121=(cj6*r10);
IkReal x6122=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x6118))+((r20*x6119))+((r21*x6111)));
evalcond[2]=(x6122+((r11*x6112))+(((-1.0)*sj6*x6113))+(((-1.0)*x6120*x6121)));
evalcond[3]=((((-1.0)*r00*x6112*x6115))+(((-1.0)*r01*x6111*x6120))+((r12*sj0*sj5))+(((-1.0)*r11*x6111*x6114))+(((-1.0)*r10*x6114*x6119))+((cj0*x6117)));
evalcond[4]=((-1.0)+((x6111*x6113))+(((-1.0)*r10*x6112*x6115))+(((-1.0)*x6114*x6117))+(((-1.0)*r11*x6111*x6120))+((sj5*x6116))+((r00*sj0*x6119)));
evalcond[5]=((((-1.0)*cj6*x6113*x6118))+(((-1.0)*cj5*r02*x6114))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x6114))+((cj5*x6116))+((r10*sj5*x6112)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x6112))+(((-1.0)*py*x6120))+(((-0.026255)*sj6*x6113))+((px*sj0))+(((0.026255)*x6122))+(((-0.026255)*cj0*x6121)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6123=(cj2*r21);
IkReal x6124=(cj6*sj5);
IkReal x6125=(cj5*r22);
IkReal x6126=(r21*sj2);
IkReal x6127=((1.0)*cj2);
IkReal x6128=(cj6*r20);
IkReal x6129=(r20*sj5*sj6);
if( IKabs((((x6124*x6126))+((sj2*x6125))+((sj2*x6129))+((sj6*x6123))+(((-1.0)*x6127*x6128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6125*x6127))+(((-1.0)*sj2*x6128))+((sj6*x6126))+(((-1.0)*x6123*x6124))+(((-1.0)*x6127*x6129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6124*x6126))+((sj2*x6125))+((sj2*x6129))+((sj6*x6123))+(((-1.0)*x6127*x6128))))+IKsqr(((((-1.0)*x6125*x6127))+(((-1.0)*sj2*x6128))+((sj6*x6126))+(((-1.0)*x6123*x6124))+(((-1.0)*x6127*x6129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x6124*x6126))+((sj2*x6125))+((sj2*x6129))+((sj6*x6123))+(((-1.0)*x6127*x6128))), ((((-1.0)*x6125*x6127))+(((-1.0)*sj2*x6128))+((sj6*x6126))+(((-1.0)*x6123*x6124))+(((-1.0)*x6127*x6129))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6130=IKsin(j4);
IkReal x6131=IKcos(j4);
IkReal x6132=(r11*sj0);
IkReal x6133=((0.026255)*sj6);
IkReal x6134=(cj0*r01);
IkReal x6135=(cj6*sj5);
IkReal x6136=(r10*sj0);
IkReal x6137=(sj5*sj6);
IkReal x6138=((1.0)*cj6);
IkReal x6139=(cj0*r00);
IkReal x6140=((0.026255)*cj6);
IkReal x6141=((1.0)*r21);
IkReal x6142=(sj2*x6131);
IkReal x6143=(cj2*x6130);
IkReal x6144=((0.02626)*x6130);
IkReal x6145=(cj2*x6131);
IkReal x6146=(sj2*x6130);
IkReal x6147=(x6143+x6142);
evalcond[0]=(x6147+((cj6*r20))+(((-1.0)*sj6*x6141)));
evalcond[1]=((((-1.0)*r20*x6137))+x6146+(((-1.0)*x6145))+(((-1.0)*x6135*x6141))+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x6136*x6138))+x6145+(((-1.0)*x6146))+((sj6*x6132))+((sj6*x6134))+(((-1.0)*x6138*x6139)));
evalcond[3]=(((cj5*r12*sj0))+((x6136*x6137))+((x6137*x6139))+((cj0*cj5*r02))+x6147+((x6134*x6135))+((x6132*x6135)));
evalcond[4]=((0.1255)+(((0.02626)*x6143))+(((0.02626)*x6142))+(((-0.0718)*x6146))+(((0.0718)*x6145))+(((-1.0)*r21*x6133))+pz+(((0.21326)*cj2))+(((0.0009)*sj2))+((r20*x6140)));
evalcond[5]=((-0.001)+(((-1.0)*x6139*x6140))+(((0.02626)*x6145))+(((-0.0718)*x6143))+(((-0.0718)*x6142))+(((-1.0)*x6136*x6140))+((x6133*x6134))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+(((-1.0)*sj2*x6144))+((x6132*x6133))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6148=(cj5*cj6);
IkReal x6149=(cj0*sj6);
IkReal x6150=(r01*sj0);
IkReal x6151=((1.0)*sj0);
IkReal x6152=((1.0)*cj5);
IkReal x6153=(cj0*r12);
IkReal x6154=(r02*sj5);
IkReal x6155=((1.0)*sj5);
IkReal x6156=(cj5*sj6);
IkReal x6157=((1.0)*cj0);
IkReal x6158=(cj6*r10);
IkReal x6159=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x6155))+((r20*x6156))+((r21*x6148)));
evalcond[2]=((((-1.0)*sj6*x6150))+x6159+((r11*x6149))+(((-1.0)*x6157*x6158)));
evalcond[3]=((((-1.0)*r01*x6148*x6157))+((cj0*x6154))+((r12*sj0*sj5))+(((-1.0)*r00*x6149*x6152))+(((-1.0)*r11*x6148*x6151))+(((-1.0)*r10*x6151*x6156)));
evalcond[4]=((1.0)+((x6148*x6150))+(((-1.0)*x6151*x6154))+((r00*sj0*x6156))+((sj5*x6153))+(((-1.0)*r10*x6149*x6152))+(((-1.0)*r11*x6148*x6157)));
evalcond[5]=((((-1.0)*cj6*x6150*x6155))+((cj5*x6153))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x6151))+(((-1.0)*r00*sj5*sj6*x6151))+((r10*sj5*x6149)));
evalcond[6]=((-0.0001)+(((0.026255)*x6159))+(((0.026255)*r11*x6149))+(((-1.0)*py*x6157))+((px*sj0))+(((-0.026255)*cj0*x6158))+(((-0.026255)*sj6*x6150)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6160=(cj5*r22);
IkReal x6161=(cj6*sj2);
IkReal x6162=(r21*sj5);
IkReal x6163=(r21*sj6);
IkReal x6164=(cj2*cj6);
IkReal x6165=(r20*sj5*sj6);
if( IKabs((((sj2*x6160))+((sj2*x6165))+((r20*x6164))+(((-1.0)*cj2*x6163))+((x6161*x6162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x6163))+((cj2*x6165))+((cj2*x6160))+(((-1.0)*r20*x6161))+((x6162*x6164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x6160))+((sj2*x6165))+((r20*x6164))+(((-1.0)*cj2*x6163))+((x6161*x6162))))+IKsqr((((sj2*x6163))+((cj2*x6165))+((cj2*x6160))+(((-1.0)*r20*x6161))+((x6162*x6164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x6160))+((sj2*x6165))+((r20*x6164))+(((-1.0)*cj2*x6163))+((x6161*x6162))), (((sj2*x6163))+((cj2*x6165))+((cj2*x6160))+(((-1.0)*r20*x6161))+((x6162*x6164))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6166=IKcos(j4);
IkReal x6167=IKsin(j4);
IkReal x6168=(r11*sj0);
IkReal x6169=(cj0*sj6);
IkReal x6170=(cj6*sj5);
IkReal x6171=(r10*sj0);
IkReal x6172=(sj5*sj6);
IkReal x6173=(cj6*r20);
IkReal x6174=((1.0)*cj6);
IkReal x6175=((0.026255)*sj6);
IkReal x6176=((0.026255)*cj6);
IkReal x6177=(cj0*r00);
IkReal x6178=((1.0)*r21);
IkReal x6179=(cj2*x6166);
IkReal x6180=(sj2*x6167);
IkReal x6181=((0.02626)*x6167);
IkReal x6182=(cj2*x6167);
IkReal x6183=((0.0718)*x6166);
IkReal x6184=(sj2*x6166);
IkReal x6185=(x6180+x6179);
evalcond[0]=((((-1.0)*x6182))+x6184+x6173+(((-1.0)*sj6*x6178)));
evalcond[1]=(x6185+(((-1.0)*r20*x6172))+(((-1.0)*x6170*x6178))+(((-1.0)*cj5*r22)));
evalcond[2]=(x6185+(((-1.0)*x6174*x6177))+((r01*x6169))+(((-1.0)*x6171*x6174))+((sj6*x6168)));
evalcond[3]=(((cj5*r12*sj0))+(((-1.0)*x6184))+((cj0*cj5*r02))+((r00*sj5*x6169))+x6182+((cj0*r01*x6170))+((x6168*x6170))+((x6171*x6172)));
evalcond[4]=((0.1255)+(((-0.0718)*x6180))+(((-1.0)*r21*x6175))+(((0.026255)*x6173))+pz+(((0.01834)*cj2))+(((0.0009)*sj2))+(((-0.0718)*x6179))+(((0.02626)*x6184))+(((-1.0)*cj2*x6181)));
evalcond[5]=((-0.001)+(((-1.0)*x6176*x6177))+(((-0.01834)*sj2))+(((0.026255)*r01*x6169))+(((-0.0718)*x6182))+(((0.02626)*x6179))+((sj2*x6183))+(((0.0009)*cj2))+(((-1.0)*x6171*x6176))+(((-1.0)*py*sj0))+((x6168*x6175))+(((0.02626)*x6180))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6186=(cj0*sj5);
IkReal x6187=(cj5*cj6);
IkReal x6188=((1.0)*sj5);
IkReal x6189=((1.0)*cj0);
IkReal x6190=((1.0)*sj0);
IkReal x6191=(cj5*sj6);
IkReal x6192=(r10*x6191);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x6188))+((r21*x6187))+((r20*x6191))+sj3);
evalcond[2]=(((r12*sj0*sj5))+(((-1.0)*r00*x6189*x6191))+(((-1.0)*r11*x6187*x6190))+(((-1.0)*x6190*x6192))+((r02*x6186))+(((-1.0)*r01*x6187*x6189)));
evalcond[3]=((((-1.0)*r11*x6187*x6189))+((r00*sj0*x6191))+(((-1.0)*r02*sj0*x6188))+(((-1.0)*x6189*x6192))+((r01*sj0*x6187))+(((-1.0)*cj3))+((r12*x6186)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x6193=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x6193))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x6193))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6194=((1.0)*sj5);
CheckValue<IkReal> x6195=IKPowWithIntegerCheck(sj3,-1);
if(!x6195.valid){
continue;
}
CheckValue<IkReal> x6196=IKPowWithIntegerCheck(cj3,-1);
if(!x6196.valid){
continue;
}
if( IKabs(((x6195.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6196.value)*(((((-1.0)*r20*sj6*x6194))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x6194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6195.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x6196.value)*(((((-1.0)*r20*sj6*x6194))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x6194))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6195.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x6196.value)*(((((-1.0)*r20*sj6*x6194))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x6194))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6197=IKcos(j4);
IkReal x6198=IKsin(j4);
IkReal x6199=(sj0*sj6);
IkReal x6200=(cj0*sj6);
IkReal x6201=((0.026255)*r01);
IkReal x6202=(cj5*r12);
IkReal x6203=(r10*sj5);
IkReal x6204=(cj6*sj0);
IkReal x6205=((0.026255)*r00);
IkReal x6206=((1.0)*cj5);
IkReal x6207=((1.0)*r10);
IkReal x6208=((1.0)*r01);
IkReal x6209=(cj0*cj6);
IkReal x6210=(r00*sj5);
IkReal x6211=((0.026255)*r11);
IkReal x6212=((1.0)*py);
IkReal x6213=(cj6*r20);
IkReal x6214=((1.0)*sj5);
IkReal x6215=(r11*sj5);
IkReal x6216=((0.026255)*r10);
IkReal x6217=(r21*sj6);
IkReal x6218=((1.0)*x6197);
IkReal x6219=((0.02626)*x6198);
IkReal x6220=((0.0718)*x6197);
evalcond[0]=(((cj3*x6198))+x6213+(((-1.0)*x6217)));
evalcond[1]=((((-1.0)*r20*sj6*x6214))+(((-1.0)*cj3*x6218))+(((-1.0)*r22*x6206))+(((-1.0)*cj6*r21*x6214)));
evalcond[2]=(((r11*x6199))+((r01*x6200))+x6197+(((-1.0)*r00*x6209))+(((-1.0)*x6204*x6207)));
evalcond[3]=((((-1.0)*x6207*x6209))+(((-1.0)*x6199*x6208))+((r00*x6204))+((r11*x6200))+((sj3*x6198)));
evalcond[4]=((0.2413)+((cj3*x6219))+((cj3*x6220))+(((-0.026255)*x6217))+pz+(((0.09746)*cj3))+(((0.026255)*x6213)));
evalcond[5]=(((x6199*x6203))+((cj0*cj5*r02))+x6198+((sj0*x6202))+((x6200*x6210))+((r01*sj5*x6209))+((x6204*x6215)));
evalcond[6]=((((-1.0)*sj3*x6218))+(((-1.0)*x6199*x6210))+(((-1.0)*sj5*x6204*x6208))+((x6209*x6215))+(((-1.0)*r02*sj0*x6206))+((cj0*x6202))+((x6200*x6203)));
evalcond[7]=((-0.0001)+(((0.02626)*x6197))+(((-1.0)*sj0*x6212))+(((-1.0)*x6205*x6209))+(((-0.0718)*x6198))+((x6199*x6211))+(((-1.0)*x6204*x6216))+((x6200*x6201))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+(((-1.0)*cj0*x6212))+(((-1.0)*x6199*x6201))+(((-1.0)*x6209*x6216))+((x6200*x6211))+((px*sj0))+((x6204*x6205))+(((0.09746)*sj3))+((sj3*x6219))+((sj3*x6220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6221=((1.0)*sj6);
CheckValue<IkReal> x6222=IKPowWithIntegerCheck(cj3,-1);
if(!x6222.valid){
continue;
}
if( IKabs(((x6222.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x6221))+(((-1.0)*cj0*r01*x6221))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6222.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))+IKsqr((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x6221))+(((-1.0)*cj0*r01*x6221))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6222.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))), (((cj6*r10*sj0))+(((-1.0)*r11*sj0*x6221))+(((-1.0)*cj0*r01*x6221))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6223=IKcos(j4);
IkReal x6224=IKsin(j4);
IkReal x6225=(sj0*sj6);
IkReal x6226=(cj0*sj6);
IkReal x6227=((0.026255)*r01);
IkReal x6228=(cj5*r12);
IkReal x6229=(r10*sj5);
IkReal x6230=(cj6*sj0);
IkReal x6231=((0.026255)*r00);
IkReal x6232=((1.0)*cj5);
IkReal x6233=((1.0)*r10);
IkReal x6234=((1.0)*r01);
IkReal x6235=(cj0*cj6);
IkReal x6236=(r00*sj5);
IkReal x6237=((0.026255)*r11);
IkReal x6238=((1.0)*py);
IkReal x6239=(cj6*r20);
IkReal x6240=((1.0)*sj5);
IkReal x6241=(r11*sj5);
IkReal x6242=((0.026255)*r10);
IkReal x6243=(r21*sj6);
IkReal x6244=((1.0)*x6223);
IkReal x6245=((0.02626)*x6224);
IkReal x6246=((0.0718)*x6223);
evalcond[0]=(x6239+((cj3*x6224))+(((-1.0)*x6243)));
evalcond[1]=((((-1.0)*cj3*x6244))+(((-1.0)*cj6*r21*x6240))+(((-1.0)*r22*x6232))+(((-1.0)*r20*sj6*x6240)));
evalcond[2]=(x6223+((r11*x6225))+((r01*x6226))+(((-1.0)*x6230*x6233))+(((-1.0)*r00*x6235)));
evalcond[3]=((((-1.0)*x6225*x6234))+((r11*x6226))+((r00*x6230))+(((-1.0)*x6233*x6235))+((sj3*x6224)));
evalcond[4]=((0.2413)+(((0.026255)*x6239))+(((-0.026255)*x6243))+pz+(((0.09746)*cj3))+((cj3*x6245))+((cj3*x6246)));
evalcond[5]=(((x6226*x6236))+((x6225*x6229))+x6224+((cj0*cj5*r02))+((x6230*x6241))+((r01*sj5*x6235))+((sj0*x6228)));
evalcond[6]=((((-1.0)*x6225*x6236))+(((-1.0)*sj5*x6230*x6234))+((x6235*x6241))+((cj0*x6228))+(((-1.0)*r02*sj0*x6232))+(((-1.0)*sj3*x6244))+((x6226*x6229)));
evalcond[7]=((-0.0001)+((x6225*x6237))+(((-1.0)*x6231*x6235))+(((-1.0)*sj0*x6238))+(((-0.0718)*x6224))+(((0.02626)*x6223))+(((-1.0)*x6230*x6242))+(((-1.0)*cj0*px))+((x6226*x6227)));
evalcond[8]=((-0.0001)+((x6230*x6231))+((x6226*x6237))+((sj3*x6246))+((sj3*x6245))+(((-1.0)*cj0*x6238))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*x6235*x6242))+(((-1.0)*x6225*x6227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6247=((1.0)*sj5);
CheckValue<IkReal> x6248=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x6248.valid){
continue;
}
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x6247))+(((-1.0)*r20*sj6*x6247))),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6248.value)))+(x6249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6250=IKcos(j4);
IkReal x6251=IKsin(j4);
IkReal x6252=(sj0*sj6);
IkReal x6253=(cj0*sj6);
IkReal x6254=((0.026255)*r01);
IkReal x6255=(cj5*r12);
IkReal x6256=(r10*sj5);
IkReal x6257=(cj6*sj0);
IkReal x6258=((0.026255)*r00);
IkReal x6259=((1.0)*cj5);
IkReal x6260=((1.0)*r10);
IkReal x6261=((1.0)*r01);
IkReal x6262=(cj0*cj6);
IkReal x6263=(r00*sj5);
IkReal x6264=((0.026255)*r11);
IkReal x6265=((1.0)*py);
IkReal x6266=(cj6*r20);
IkReal x6267=((1.0)*sj5);
IkReal x6268=(r11*sj5);
IkReal x6269=((0.026255)*r10);
IkReal x6270=(r21*sj6);
IkReal x6271=((1.0)*x6250);
IkReal x6272=((0.02626)*x6251);
IkReal x6273=((0.0718)*x6250);
evalcond[0]=(x6266+(((-1.0)*x6270))+((cj3*x6251)));
evalcond[1]=((((-1.0)*cj3*x6271))+(((-1.0)*cj6*r21*x6267))+(((-1.0)*r20*sj6*x6267))+(((-1.0)*r22*x6259)));
evalcond[2]=(x6250+((r01*x6253))+(((-1.0)*r00*x6262))+(((-1.0)*x6257*x6260))+((r11*x6252)));
evalcond[3]=((((-1.0)*x6252*x6261))+((r00*x6257))+((sj3*x6251))+(((-1.0)*x6260*x6262))+((r11*x6253)));
evalcond[4]=((0.2413)+(((-0.026255)*x6270))+(((0.026255)*x6266))+((cj3*x6272))+((cj3*x6273))+pz+(((0.09746)*cj3)));
evalcond[5]=(x6251+((cj0*cj5*r02))+((x6253*x6263))+((sj0*x6255))+((x6252*x6256))+((r01*sj5*x6262))+((x6257*x6268)));
evalcond[6]=((((-1.0)*sj3*x6271))+((x6253*x6256))+((x6262*x6268))+(((-1.0)*sj5*x6257*x6261))+((cj0*x6255))+(((-1.0)*r02*sj0*x6259))+(((-1.0)*x6252*x6263)));
evalcond[7]=((-0.0001)+((x6253*x6254))+((x6252*x6264))+(((-0.0718)*x6251))+(((-1.0)*x6258*x6262))+(((-1.0)*x6257*x6269))+(((0.02626)*x6250))+(((-1.0)*sj0*x6265))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+(((-1.0)*x6252*x6254))+((x6253*x6264))+((sj3*x6272))+((sj3*x6273))+(((-1.0)*cj0*x6265))+(((-1.0)*x6262*x6269))+((px*sj0))+(((0.09746)*sj3))+((x6257*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6274=(cj0*sj5);
IkReal x6275=(cj5*cj6);
IkReal x6276=((1.0)*sj5);
IkReal x6277=((1.0)*cj0);
IkReal x6278=((1.0)*sj0);
IkReal x6279=(cj5*sj6);
IkReal x6280=(r10*x6279);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj3))+((r21*x6275))+(((-1.0)*r22*x6276))+((r20*x6279)));
evalcond[2]=(((r12*sj0*sj5))+(((-1.0)*r11*x6275*x6278))+((r02*x6274))+(((-1.0)*r00*x6277*x6279))+(((-1.0)*r01*x6275*x6277))+(((-1.0)*x6278*x6280)));
evalcond[3]=(((r12*x6274))+(((-1.0)*r11*x6275*x6277))+(((-1.0)*r02*sj0*x6276))+((r00*sj0*x6279))+((r01*sj0*x6275))+(((-1.0)*x6277*x6280))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(sj3,-1);
if(!x6281.valid){
continue;
}
CheckValue<IkReal> x6282=IKPowWithIntegerCheck(cj3,-1);
if(!x6282.valid){
continue;
}
if( IKabs(((x6281.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6282.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6281.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x6282.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6281.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x6282.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6283=IKcos(j4);
IkReal x6284=IKsin(j4);
IkReal x6285=(r11*sj0);
IkReal x6286=(cj0*sj6);
IkReal x6287=((0.026255)*r01);
IkReal x6288=(cj6*sj5);
IkReal x6289=(r10*sj0);
IkReal x6290=(sj5*sj6);
IkReal x6291=((1.0)*cj5);
IkReal x6292=((1.0)*cj6);
IkReal x6293=((1.0)*sj0);
IkReal x6294=((0.026255)*sj6);
IkReal x6295=(cj5*r12);
IkReal x6296=(cj0*r10);
IkReal x6297=((0.026255)*cj6);
IkReal x6298=((1.0)*r21);
IkReal x6299=((1.0)*cj0);
IkReal x6300=(cj0*r00);
IkReal x6301=(cj3*x6284);
IkReal x6302=(sj3*x6284);
IkReal x6303=(cj6*r00*sj0);
IkReal x6304=((1.0)*x6283);
IkReal x6305=(cj3*x6283);
evalcond[0]=((((-1.0)*sj6*x6298))+(((-1.0)*x6301))+((cj6*r20)));
evalcond[1]=(x6305+(((-1.0)*r22*x6291))+(((-1.0)*x6288*x6298))+(((-1.0)*r20*x6290)));
evalcond[2]=((((-1.0)*x6304))+(((-1.0)*x6292*x6300))+(((-1.0)*x6289*x6292))+((sj6*x6285))+((r01*x6286)));
evalcond[3]=(x6303+x6302+(((-1.0)*r01*sj6*x6293))+((r11*x6286))+(((-1.0)*x6292*x6296)));
evalcond[4]=((0.0097)+(((-0.0718)*x6305))+(((-0.02626)*x6301))+(((-1.0)*r21*x6294))+((r20*x6297))+pz+(((-0.09746)*cj3)));
evalcond[5]=(((x6285*x6288))+((cj0*cj5*r02))+((cj0*r01*x6288))+((sj0*x6295))+((r00*sj5*x6286))+((x6289*x6290))+(((-1.0)*x6284)));
evalcond[6]=((((-1.0)*r02*sj0*x6291))+(((-1.0)*sj3*x6304))+((cj0*x6295))+((cj0*r11*x6288))+(((-1.0)*r01*x6288*x6293))+((r10*sj5*x6286))+(((-1.0)*r00*x6290*x6293)));
evalcond[7]=((-0.0019)+(((-0.02626)*x6283))+(((-1.0)*py*x6293))+(((-1.0)*px*x6299))+(((-1.0)*x6289*x6297))+(((0.0718)*x6284))+(((-1.0)*x6297*x6300))+((x6286*x6287))+((x6285*x6294)));
evalcond[8]=((-0.0001)+(((0.0718)*sj3*x6283))+(((-1.0)*x6296*x6297))+(((-1.0)*py*x6299))+(((0.026255)*r11*x6286))+(((-1.0)*sj0*sj6*x6287))+((r00*sj0*x6297))+((px*sj0))+(((0.09746)*sj3))+(((0.02626)*x6302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6306=((1.0)*cj6);
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(cj3,-1);
if(!x6307.valid){
continue;
}
if( IKabs(((x6307.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x6306))+(((-1.0)*cj0*r00*x6306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6307.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x6306))+(((-1.0)*cj0*r00*x6306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6307.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x6306))+(((-1.0)*cj0*r00*x6306))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6308=IKcos(j4);
IkReal x6309=IKsin(j4);
IkReal x6310=(r11*sj0);
IkReal x6311=(cj0*sj6);
IkReal x6312=((0.026255)*r01);
IkReal x6313=(cj6*sj5);
IkReal x6314=(r10*sj0);
IkReal x6315=(sj5*sj6);
IkReal x6316=((1.0)*cj5);
IkReal x6317=((1.0)*cj6);
IkReal x6318=((1.0)*sj0);
IkReal x6319=((0.026255)*sj6);
IkReal x6320=(cj5*r12);
IkReal x6321=(cj0*r10);
IkReal x6322=((0.026255)*cj6);
IkReal x6323=((1.0)*r21);
IkReal x6324=((1.0)*cj0);
IkReal x6325=(cj0*r00);
IkReal x6326=(cj3*x6309);
IkReal x6327=(sj3*x6309);
IkReal x6328=(cj6*r00*sj0);
IkReal x6329=((1.0)*x6308);
IkReal x6330=(cj3*x6308);
evalcond[0]=((((-1.0)*x6326))+(((-1.0)*sj6*x6323))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x6316))+x6330+(((-1.0)*x6313*x6323))+(((-1.0)*r20*x6315)));
evalcond[2]=(((r01*x6311))+(((-1.0)*x6317*x6325))+(((-1.0)*x6329))+((sj6*x6310))+(((-1.0)*x6314*x6317)));
evalcond[3]=(x6327+x6328+(((-1.0)*r01*sj6*x6318))+(((-1.0)*x6317*x6321))+((r11*x6311)));
evalcond[4]=((0.0097)+((r20*x6322))+pz+(((-0.09746)*cj3))+(((-0.0718)*x6330))+(((-0.02626)*x6326))+(((-1.0)*r21*x6319)));
evalcond[5]=(((cj0*cj5*r02))+((x6310*x6313))+((sj0*x6320))+(((-1.0)*x6309))+((r00*sj5*x6311))+((x6314*x6315))+((cj0*r01*x6313)));
evalcond[6]=(((cj0*x6320))+((r10*sj5*x6311))+((cj0*r11*x6313))+(((-1.0)*r02*sj0*x6316))+(((-1.0)*r00*x6315*x6318))+(((-1.0)*sj3*x6329))+(((-1.0)*r01*x6313*x6318)));
evalcond[7]=((-0.0019)+((x6310*x6319))+(((-0.02626)*x6308))+(((-1.0)*py*x6318))+((x6311*x6312))+(((-1.0)*px*x6324))+(((0.0718)*x6309))+(((-1.0)*x6314*x6322))+(((-1.0)*x6322*x6325)));
evalcond[8]=((-0.0001)+(((0.0718)*sj3*x6308))+(((0.02626)*x6327))+(((-1.0)*x6321*x6322))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*py*x6324))+(((0.026255)*r11*x6311))+(((-1.0)*sj0*sj6*x6312))+((r00*sj0*x6322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
CheckValue<IkReal> x6332=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x6332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6331.value)+(((1.5707963267949)*(x6332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6333=IKcos(j4);
IkReal x6334=IKsin(j4);
IkReal x6335=(r11*sj0);
IkReal x6336=(cj0*sj6);
IkReal x6337=((0.026255)*r01);
IkReal x6338=(cj6*sj5);
IkReal x6339=(r10*sj0);
IkReal x6340=(sj5*sj6);
IkReal x6341=((1.0)*cj5);
IkReal x6342=((1.0)*cj6);
IkReal x6343=((1.0)*sj0);
IkReal x6344=((0.026255)*sj6);
IkReal x6345=(cj5*r12);
IkReal x6346=(cj0*r10);
IkReal x6347=((0.026255)*cj6);
IkReal x6348=((1.0)*r21);
IkReal x6349=((1.0)*cj0);
IkReal x6350=(cj0*r00);
IkReal x6351=(cj3*x6334);
IkReal x6352=(sj3*x6334);
IkReal x6353=(cj6*r00*sj0);
IkReal x6354=((1.0)*x6333);
IkReal x6355=(cj3*x6333);
evalcond[0]=((((-1.0)*sj6*x6348))+((cj6*r20))+(((-1.0)*x6351)));
evalcond[1]=((((-1.0)*r22*x6341))+x6355+(((-1.0)*x6338*x6348))+(((-1.0)*r20*x6340)));
evalcond[2]=((((-1.0)*x6339*x6342))+((sj6*x6335))+((r01*x6336))+(((-1.0)*x6354))+(((-1.0)*x6342*x6350)));
evalcond[3]=(x6352+x6353+((r11*x6336))+(((-1.0)*r01*sj6*x6343))+(((-1.0)*x6342*x6346)));
evalcond[4]=((0.0097)+(((-0.02626)*x6351))+(((-1.0)*r21*x6344))+pz+(((-0.09746)*cj3))+((r20*x6347))+(((-0.0718)*x6355)));
evalcond[5]=(((r00*sj5*x6336))+((sj0*x6345))+((cj0*cj5*r02))+((x6339*x6340))+((x6335*x6338))+((cj0*r01*x6338))+(((-1.0)*x6334)));
evalcond[6]=((((-1.0)*r01*x6338*x6343))+((cj0*x6345))+(((-1.0)*r02*sj0*x6341))+(((-1.0)*sj3*x6354))+((r10*sj5*x6336))+(((-1.0)*r00*x6340*x6343))+((cj0*r11*x6338)));
evalcond[7]=((-0.0019)+(((-1.0)*x6347*x6350))+(((0.0718)*x6334))+(((-1.0)*x6339*x6347))+((x6335*x6344))+(((-0.02626)*x6333))+((x6336*x6337))+(((-1.0)*py*x6343))+(((-1.0)*px*x6349)));
evalcond[8]=((-0.0001)+((r00*sj0*x6347))+(((-1.0)*x6346*x6347))+(((0.02626)*x6352))+(((0.026255)*r11*x6336))+(((-1.0)*sj0*sj6*x6337))+(((-1.0)*py*x6349))+((px*sj0))+(((0.09746)*sj3))+(((0.0718)*sj3*x6333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6356=(cj0*sj5);
IkReal x6357=(cj5*cj6);
IkReal x6358=((1.0)*sj5);
IkReal x6359=((1.0)*cj0);
IkReal x6360=((1.0)*sj0);
IkReal x6361=(cj5*sj6);
IkReal x6362=(r10*x6361);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x6357))+cj2+((r20*x6361))+(((-1.0)*r22*x6358)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*r01*x6357*x6359))+(((-1.0)*x6360*x6362))+((r12*sj0*sj5))+(((-1.0)*r11*x6357*x6360))+(((-1.0)*r00*x6359*x6361))+((r02*x6356)));
evalcond[3]=(((r00*sj0*x6361))+((r12*x6356))+(((-1.0)*r02*sj0*x6358))+(((-1.0)*r11*x6357*x6359))+(((-1.0)*x6359*x6362))+((r01*sj0*x6357)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6363=((1.0)*sj6);
CheckValue<IkReal> x6364=IKPowWithIntegerCheck(sj2,-1);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(cj2,-1);
if(!x6365.valid){
continue;
}
if( IKabs(((x6364.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6365.value)*(((((-1.0)*r11*sj0*x6363))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6363))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6364.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x6365.value)*(((((-1.0)*r11*sj0*x6363))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6363))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6364.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x6365.value)*(((((-1.0)*r11*sj0*x6363))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6363))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6366=IKsin(j4);
IkReal x6367=IKcos(j4);
IkReal x6368=(r11*sj0);
IkReal x6369=(cj0*sj6);
IkReal x6370=((0.026255)*r01);
IkReal x6371=(cj0*cj5);
IkReal x6372=(cj6*sj5);
IkReal x6373=(r10*sj0);
IkReal x6374=(sj5*sj6);
IkReal x6375=((1.0)*cj5);
IkReal x6376=((1.0)*cj6);
IkReal x6377=((1.0)*sj0);
IkReal x6378=((0.026255)*sj6);
IkReal x6379=(cj0*r10);
IkReal x6380=((0.026255)*cj6);
IkReal x6381=((1.0)*r21);
IkReal x6382=((1.0)*cj0);
IkReal x6383=(cj0*r00);
IkReal x6384=(cj2*x6366);
IkReal x6385=(cj6*r00*sj0);
IkReal x6386=(cj2*x6367);
IkReal x6387=(sj2*x6366);
IkReal x6388=(sj2*x6367);
evalcond[0]=(x6388+(((-1.0)*sj6*x6381))+((cj6*r20)));
evalcond[1]=(x6387+(((-1.0)*r20*x6374))+(((-1.0)*x6372*x6381))+(((-1.0)*r22*x6375)));
evalcond[2]=(x6366+x6385+((r11*x6369))+(((-1.0)*x6376*x6379))+(((-1.0)*r01*sj6*x6377)));
evalcond[3]=(x6386+(((-1.0)*x6376*x6383))+((r01*x6369))+(((-1.0)*x6373*x6376))+((sj6*x6368)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-0.0718)*x6387))+pz+(((0.02626)*x6388))+(((0.0009)*sj2))+((r20*x6380))+(((-1.0)*r21*x6378)));
evalcond[5]=(((cj5*r12*sj0))+x6384+((r00*sj5*x6369))+((cj0*r01*x6372))+((x6373*x6374))+((x6368*x6372))+((r02*x6371)));
evalcond[6]=(((r10*sj5*x6369))+((cj0*r11*x6372))+((r12*x6371))+(((-1.0)*x6367))+(((-1.0)*r02*sj0*x6375))+(((-1.0)*r00*x6374*x6377))+(((-1.0)*r01*x6372*x6377)));
evalcond[7]=((0.09736)+((r00*sj0*x6380))+(((-1.0)*x6379*x6380))+(((0.02626)*x6366))+(((0.0718)*x6367))+(((-1.0)*sj0*sj6*x6370))+(((0.026255)*r11*x6369))+(((-1.0)*py*x6382))+((px*sj0)));
evalcond[8]=((-0.001)+((x6369*x6370))+(((-1.0)*py*x6377))+(((-0.1158)*sj2))+(((-1.0)*x6380*x6383))+(((-1.0)*x6373*x6380))+(((-1.0)*px*x6382))+(((-0.0718)*x6384))+(((0.0009)*cj2))+((x6368*x6378))+(((0.02626)*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6389=((1.0)*cj6);
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(sj2,-1);
if(!x6390.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0*x6389))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6390.value)*((((r21*sj6))+(((-1.0)*r20*x6389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0*x6389))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))+IKsqr(((x6390.value)*((((r21*sj6))+(((-1.0)*r20*x6389))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0*x6389))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))), ((x6390.value)*((((r21*sj6))+(((-1.0)*r20*x6389))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6391=IKsin(j4);
IkReal x6392=IKcos(j4);
IkReal x6393=(r11*sj0);
IkReal x6394=(cj0*sj6);
IkReal x6395=((0.026255)*r01);
IkReal x6396=(cj0*cj5);
IkReal x6397=(cj6*sj5);
IkReal x6398=(r10*sj0);
IkReal x6399=(sj5*sj6);
IkReal x6400=((1.0)*cj5);
IkReal x6401=((1.0)*cj6);
IkReal x6402=((1.0)*sj0);
IkReal x6403=((0.026255)*sj6);
IkReal x6404=(cj0*r10);
IkReal x6405=((0.026255)*cj6);
IkReal x6406=((1.0)*r21);
IkReal x6407=((1.0)*cj0);
IkReal x6408=(cj0*r00);
IkReal x6409=(cj2*x6391);
IkReal x6410=(cj6*r00*sj0);
IkReal x6411=(cj2*x6392);
IkReal x6412=(sj2*x6391);
IkReal x6413=(sj2*x6392);
evalcond[0]=(x6413+(((-1.0)*sj6*x6406))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x6399))+x6412+(((-1.0)*r22*x6400))+(((-1.0)*x6397*x6406)));
evalcond[2]=(((r11*x6394))+x6391+(((-1.0)*x6401*x6404))+(((-1.0)*r01*sj6*x6402))+x6410);
evalcond[3]=((((-1.0)*x6401*x6408))+((sj6*x6393))+x6411+((r01*x6394))+(((-1.0)*x6398*x6401)));
evalcond[4]=((0.1255)+((r20*x6405))+(((0.1158)*cj2))+(((-1.0)*r21*x6403))+pz+(((-0.0718)*x6412))+(((0.0009)*sj2))+(((0.02626)*x6413)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x6394))+x6409+((cj0*r01*x6397))+((x6393*x6397))+((x6398*x6399))+((r02*x6396)));
evalcond[6]=((((-1.0)*x6392))+((r12*x6396))+(((-1.0)*r00*x6399*x6402))+(((-1.0)*r01*x6397*x6402))+((r10*sj5*x6394))+((cj0*r11*x6397))+(((-1.0)*r02*sj0*x6400)));
evalcond[7]=((0.09736)+(((0.0718)*x6392))+(((-1.0)*py*x6407))+(((0.026255)*r11*x6394))+(((0.02626)*x6391))+(((-1.0)*sj0*sj6*x6395))+((px*sj0))+((r00*sj0*x6405))+(((-1.0)*x6404*x6405)));
evalcond[8]=((-0.001)+(((-1.0)*py*x6402))+((x6393*x6403))+(((-0.1158)*sj2))+(((-1.0)*px*x6407))+(((0.0009)*cj2))+(((-0.0718)*x6409))+((x6394*x6395))+(((-1.0)*x6398*x6405))+(((-1.0)*x6405*x6408))+(((0.02626)*x6411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6414=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6414.value)))+(x6415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6416=IKsin(j4);
IkReal x6417=IKcos(j4);
IkReal x6418=(r11*sj0);
IkReal x6419=(cj0*sj6);
IkReal x6420=((0.026255)*r01);
IkReal x6421=(cj0*cj5);
IkReal x6422=(cj6*sj5);
IkReal x6423=(r10*sj0);
IkReal x6424=(sj5*sj6);
IkReal x6425=((1.0)*cj5);
IkReal x6426=((1.0)*cj6);
IkReal x6427=((1.0)*sj0);
IkReal x6428=((0.026255)*sj6);
IkReal x6429=(cj0*r10);
IkReal x6430=((0.026255)*cj6);
IkReal x6431=((1.0)*r21);
IkReal x6432=((1.0)*cj0);
IkReal x6433=(cj0*r00);
IkReal x6434=(cj2*x6416);
IkReal x6435=(cj6*r00*sj0);
IkReal x6436=(cj2*x6417);
IkReal x6437=(sj2*x6416);
IkReal x6438=(sj2*x6417);
evalcond[0]=(x6438+((cj6*r20))+(((-1.0)*sj6*x6431)));
evalcond[1]=((((-1.0)*r22*x6425))+x6437+(((-1.0)*r20*x6424))+(((-1.0)*x6422*x6431)));
evalcond[2]=((((-1.0)*r01*sj6*x6427))+x6416+x6435+(((-1.0)*x6426*x6429))+((r11*x6419)));
evalcond[3]=(((sj6*x6418))+((r01*x6419))+(((-1.0)*x6426*x6433))+x6436+(((-1.0)*x6423*x6426)));
evalcond[4]=((0.1255)+(((-0.0718)*x6437))+(((0.1158)*cj2))+pz+(((-1.0)*r21*x6428))+(((0.02626)*x6438))+((r20*x6430))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x6421))+((cj0*r01*x6422))+x6434+((x6423*x6424))+((x6418*x6422))+((r00*sj5*x6419)));
evalcond[6]=((((-1.0)*r00*x6424*x6427))+((r12*x6421))+((r10*sj5*x6419))+(((-1.0)*x6417))+(((-1.0)*r01*x6422*x6427))+((cj0*r11*x6422))+(((-1.0)*r02*sj0*x6425)));
evalcond[7]=((0.09736)+(((-1.0)*sj0*sj6*x6420))+(((-1.0)*py*x6432))+(((0.026255)*r11*x6419))+((r00*sj0*x6430))+(((-1.0)*x6429*x6430))+((px*sj0))+(((0.0718)*x6417))+(((0.02626)*x6416)));
evalcond[8]=((-0.001)+(((-0.0718)*x6434))+(((-1.0)*x6423*x6430))+(((-0.1158)*sj2))+(((-1.0)*px*x6432))+(((-1.0)*x6430*x6433))+(((0.0009)*cj2))+(((-1.0)*py*x6427))+((x6418*x6428))+(((0.02626)*x6436))+((x6419*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6439=(cj0*sj5);
IkReal x6440=(cj5*cj6);
IkReal x6441=((1.0)*sj5);
IkReal x6442=((1.0)*cj0);
IkReal x6443=((1.0)*sj0);
IkReal x6444=(cj5*sj6);
IkReal x6445=(r10*x6444);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x6440))+(((-1.0)*r22*x6441))+(((-1.0)*cj2))+((r20*x6444)));
evalcond[2]=((((-1.0)*r00*x6442*x6444))+(((-1.0)*r11*x6440*x6443))+sj2+((r12*sj0*sj5))+((r02*x6439))+(((-1.0)*r01*x6440*x6442))+(((-1.0)*x6443*x6445)));
evalcond[3]=((((-1.0)*r11*x6440*x6442))+((r12*x6439))+((r01*sj0*x6440))+((r00*sj0*x6444))+(((-1.0)*x6442*x6445))+(((-1.0)*r02*sj0*x6441)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6446=((1.0)*sj6);
CheckValue<IkReal> x6447=IKPowWithIntegerCheck(sj2,-1);
if(!x6447.valid){
continue;
}
CheckValue<IkReal> x6448=IKPowWithIntegerCheck(cj2,-1);
if(!x6448.valid){
continue;
}
if( IKabs(((x6447.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6448.value)*(((((-1.0)*r11*sj0*x6446))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6446))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6447.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x6448.value)*(((((-1.0)*r11*sj0*x6446))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6446))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6447.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x6448.value)*(((((-1.0)*r11*sj0*x6446))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6446))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6449=IKcos(j4);
IkReal x6450=IKsin(j4);
IkReal x6451=(r11*sj0);
IkReal x6452=(cj0*sj6);
IkReal x6453=((0.026255)*r01);
IkReal x6454=(cj0*cj5);
IkReal x6455=(cj6*sj5);
IkReal x6456=(r10*sj0);
IkReal x6457=(sj5*sj6);
IkReal x6458=((1.0)*cj5);
IkReal x6459=((1.0)*cj6);
IkReal x6460=((1.0)*sj0);
IkReal x6461=((0.026255)*sj6);
IkReal x6462=(cj0*r10);
IkReal x6463=((0.026255)*cj6);
IkReal x6464=((1.0)*r21);
IkReal x6465=((1.0)*cj0);
IkReal x6466=(cj0*r00);
IkReal x6467=(cj2*x6450);
IkReal x6468=(cj6*r00*sj0);
IkReal x6469=(cj2*x6449);
IkReal x6470=(sj2*x6450);
IkReal x6471=(sj2*x6449);
evalcond[0]=(x6471+(((-1.0)*sj6*x6464))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x6457))+x6470+(((-1.0)*x6455*x6464))+(((-1.0)*r22*x6458)));
evalcond[2]=(((r01*x6452))+(((-1.0)*x6456*x6459))+((sj6*x6451))+x6469+(((-1.0)*x6459*x6466)));
evalcond[3]=(((r11*x6452))+(((-1.0)*x6450))+x6468+(((-1.0)*r01*sj6*x6460))+(((-1.0)*x6459*x6462)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-0.0718)*x6470))+(((0.02626)*x6471))+(((-1.0)*r21*x6461))+pz+(((0.0009)*sj2))+((r20*x6463)));
evalcond[5]=(((cj5*r12*sj0))+((x6451*x6455))+((x6456*x6457))+((r00*sj5*x6452))+x6467+((r02*x6454))+((cj0*r01*x6455)));
evalcond[6]=((((-1.0)*r01*x6455*x6460))+((cj0*r11*x6455))+(((-1.0)*r00*x6457*x6460))+x6449+((r10*sj5*x6452))+(((-1.0)*r02*sj0*x6458))+((r12*x6454)));
evalcond[7]=((-0.09756)+(((-1.0)*sj0*sj6*x6453))+(((-0.02626)*x6450))+(((0.026255)*r11*x6452))+((px*sj0))+((r00*sj0*x6463))+(((-1.0)*py*x6465))+(((-1.0)*x6462*x6463))+(((-0.0718)*x6449)));
evalcond[8]=((-0.001)+(((-1.0)*px*x6465))+(((-0.1158)*sj2))+((x6452*x6453))+(((0.0009)*cj2))+(((-1.0)*x6463*x6466))+(((-0.0718)*x6467))+(((-1.0)*x6456*x6463))+((x6451*x6461))+(((0.02626)*x6469))+(((-1.0)*py*x6460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6472=((1.0)*cj6);
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(sj2,-1);
if(!x6473.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x6472))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6473.value)*((((r21*sj6))+(((-1.0)*r20*x6472)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x6472))+(((-1.0)*r01*sj0*sj6))))+IKsqr(((x6473.value)*((((r21*sj6))+(((-1.0)*r20*x6472))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x6472))+(((-1.0)*r01*sj0*sj6))), ((x6473.value)*((((r21*sj6))+(((-1.0)*r20*x6472))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6474=IKcos(j4);
IkReal x6475=IKsin(j4);
IkReal x6476=(r11*sj0);
IkReal x6477=(cj0*sj6);
IkReal x6478=((0.026255)*r01);
IkReal x6479=(cj0*cj5);
IkReal x6480=(cj6*sj5);
IkReal x6481=(r10*sj0);
IkReal x6482=(sj5*sj6);
IkReal x6483=((1.0)*cj5);
IkReal x6484=((1.0)*cj6);
IkReal x6485=((1.0)*sj0);
IkReal x6486=((0.026255)*sj6);
IkReal x6487=(cj0*r10);
IkReal x6488=((0.026255)*cj6);
IkReal x6489=((1.0)*r21);
IkReal x6490=((1.0)*cj0);
IkReal x6491=(cj0*r00);
IkReal x6492=(cj2*x6475);
IkReal x6493=(cj6*r00*sj0);
IkReal x6494=(cj2*x6474);
IkReal x6495=(sj2*x6475);
IkReal x6496=(sj2*x6474);
evalcond[0]=(x6496+(((-1.0)*sj6*x6489))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x6482))+(((-1.0)*r22*x6483))+x6495+(((-1.0)*x6480*x6489)));
evalcond[2]=((((-1.0)*x6481*x6484))+x6494+((r01*x6477))+((sj6*x6476))+(((-1.0)*x6484*x6491)));
evalcond[3]=((((-1.0)*r01*sj6*x6485))+x6493+((r11*x6477))+(((-1.0)*x6475))+(((-1.0)*x6484*x6487)));
evalcond[4]=((0.1255)+(((-0.0718)*x6495))+(((-1.0)*r21*x6486))+(((0.1158)*cj2))+(((0.02626)*x6496))+pz+((r20*x6488))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x6480))+x6492+((r02*x6479))+((r00*sj5*x6477))+((x6476*x6480))+((x6481*x6482)));
evalcond[6]=((((-1.0)*r02*sj0*x6483))+((r10*sj5*x6477))+x6474+(((-1.0)*r00*x6482*x6485))+((r12*x6479))+(((-1.0)*r01*x6480*x6485))+((cj0*r11*x6480)));
evalcond[7]=((-0.09756)+(((-1.0)*py*x6490))+(((-1.0)*x6487*x6488))+(((0.026255)*r11*x6477))+(((-0.0718)*x6474))+(((-1.0)*sj0*sj6*x6478))+((r00*sj0*x6488))+((px*sj0))+(((-0.02626)*x6475)));
evalcond[8]=((-0.001)+(((-0.0718)*x6492))+(((-0.1158)*sj2))+(((-1.0)*py*x6485))+(((-1.0)*x6488*x6491))+(((-1.0)*x6481*x6488))+(((0.0009)*cj2))+(((0.02626)*x6494))+((x6476*x6486))+(((-1.0)*px*x6490))+((x6477*x6478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6497=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x6497.valid){
continue;
}
CheckValue<IkReal> x6498 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x6498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6497.value)))+(x6498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6499=IKcos(j4);
IkReal x6500=IKsin(j4);
IkReal x6501=(r11*sj0);
IkReal x6502=(cj0*sj6);
IkReal x6503=((0.026255)*r01);
IkReal x6504=(cj0*cj5);
IkReal x6505=(cj6*sj5);
IkReal x6506=(r10*sj0);
IkReal x6507=(sj5*sj6);
IkReal x6508=((1.0)*cj5);
IkReal x6509=((1.0)*cj6);
IkReal x6510=((1.0)*sj0);
IkReal x6511=((0.026255)*sj6);
IkReal x6512=(cj0*r10);
IkReal x6513=((0.026255)*cj6);
IkReal x6514=((1.0)*r21);
IkReal x6515=((1.0)*cj0);
IkReal x6516=(cj0*r00);
IkReal x6517=(cj2*x6500);
IkReal x6518=(cj6*r00*sj0);
IkReal x6519=(cj2*x6499);
IkReal x6520=(sj2*x6500);
IkReal x6521=(sj2*x6499);
evalcond[0]=((((-1.0)*sj6*x6514))+x6521+((cj6*r20)));
evalcond[1]=((((-1.0)*x6505*x6514))+x6520+(((-1.0)*r22*x6508))+(((-1.0)*r20*x6507)));
evalcond[2]=(x6519+(((-1.0)*x6506*x6509))+((r01*x6502))+(((-1.0)*x6509*x6516))+((sj6*x6501)));
evalcond[3]=((((-1.0)*r01*sj6*x6510))+(((-1.0)*x6500))+x6518+(((-1.0)*x6509*x6512))+((r11*x6502)));
evalcond[4]=((0.1255)+(((-1.0)*r21*x6511))+(((0.1158)*cj2))+((r20*x6513))+(((0.02626)*x6521))+(((-0.0718)*x6520))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x6502))+((r02*x6504))+((cj0*r01*x6505))+x6517+((x6506*x6507))+((x6501*x6505)));
evalcond[6]=(((r12*x6504))+((r10*sj5*x6502))+(((-1.0)*r01*x6505*x6510))+x6499+(((-1.0)*r02*sj0*x6508))+(((-1.0)*r00*x6507*x6510))+((cj0*r11*x6505)));
evalcond[7]=((-0.09756)+(((-0.0718)*x6499))+(((-1.0)*x6512*x6513))+((r00*sj0*x6513))+(((-1.0)*sj0*sj6*x6503))+(((-0.02626)*x6500))+(((0.026255)*r11*x6502))+((px*sj0))+(((-1.0)*py*x6515)));
evalcond[8]=((-0.001)+(((-1.0)*px*x6515))+(((-0.1158)*sj2))+(((-1.0)*x6506*x6513))+((x6502*x6503))+(((0.02626)*x6519))+(((0.0009)*cj2))+((x6501*x6511))+(((-1.0)*x6513*x6516))+(((-1.0)*py*x6510))+(((-0.0718)*x6517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6529=IKPowWithIntegerCheck(sj3,-1);
if(!x6529.valid){
continue;
}
IkReal x6522=x6529.value;
IkReal x6523=((1.0)*cj6);
IkReal x6524=(cj0*r10);
IkReal x6525=(cj2*cj3);
IkReal x6526=(r00*sj0);
IkReal x6527=(r01*sj0*sj6);
IkReal x6528=(cj0*r11*sj6);
CheckValue<IkReal> x6530=IKPowWithIntegerCheck(sj2,-1);
if(!x6530.valid){
continue;
}
if( IKabs((x6522*((x6527+((cj6*x6524))+(((-1.0)*x6528))+(((-1.0)*x6523*x6526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6522*(x6530.value)*(((((-1.0)*r20*sj3*x6523))+(((-1.0)*x6525*x6527))+((x6525*x6528))+((cj6*x6525*x6526))+((r21*sj3*sj6))+(((-1.0)*x6523*x6524*x6525)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6522*((x6527+((cj6*x6524))+(((-1.0)*x6528))+(((-1.0)*x6523*x6526))))))+IKsqr((x6522*(x6530.value)*(((((-1.0)*r20*sj3*x6523))+(((-1.0)*x6525*x6527))+((x6525*x6528))+((cj6*x6525*x6526))+((r21*sj3*sj6))+(((-1.0)*x6523*x6524*x6525))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x6522*((x6527+((cj6*x6524))+(((-1.0)*x6528))+(((-1.0)*x6523*x6526))))), (x6522*(x6530.value)*(((((-1.0)*r20*sj3*x6523))+(((-1.0)*x6525*x6527))+((x6525*x6528))+((cj6*x6525*x6526))+((r21*sj3*sj6))+(((-1.0)*x6523*x6524*x6525))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6531=IKsin(j4);
IkReal x6532=IKcos(j4);
IkReal x6533=(r11*sj6);
IkReal x6534=((0.026255)*cj0);
IkReal x6535=(r01*sj6);
IkReal x6536=(sj0*sj5);
IkReal x6537=(cj6*r11);
IkReal x6538=(r10*sj6);
IkReal x6539=((0.026255)*sj0);
IkReal x6540=(cj0*cj5);
IkReal x6541=(cj6*r00);
IkReal x6542=((1.0)*cj5);
IkReal x6543=(cj2*cj3);
IkReal x6544=((1.0)*cj6);
IkReal x6545=((1.0)*cj3);
IkReal x6546=((1.0)*sj0);
IkReal x6547=(cj0*sj5);
IkReal x6548=(r00*sj6);
IkReal x6549=((0.0718)*cj3);
IkReal x6550=(cj3*sj2);
IkReal x6551=(cj6*r20);
IkReal x6552=((1.0)*cj0);
IkReal x6553=(cj6*r10);
IkReal x6554=((1.0)*sj6);
IkReal x6555=((0.02626)*x6531);
IkReal x6556=(cj2*x6531);
IkReal x6557=(cj2*x6532);
IkReal x6558=(sj2*x6531);
IkReal x6559=(sj3*x6532);
IkReal x6560=(sj2*x6532);
evalcond[0]=(x6551+x6560+(((-1.0)*r21*x6554))+((x6531*x6543)));
evalcond[1]=(((cj0*x6533))+((sj3*x6531))+((sj0*x6541))+(((-1.0)*x6535*x6546))+(((-1.0)*cj0*r10*x6544)));
evalcond[2]=((((-1.0)*r20*sj5*x6554))+(((-1.0)*r22*x6542))+(((-1.0)*r21*sj5*x6544))+x6558+(((-1.0)*x6532*x6543)));
evalcond[3]=((((-1.0)*r10*sj0*x6544))+(((-1.0)*x6545*x6558))+((sj0*x6533))+(((-1.0)*x6541*x6552))+x6557+((cj0*x6535)));
evalcond[4]=((((-1.0)*x6536*x6548))+((x6538*x6547))+((x6537*x6547))+((r12*x6540))+(((-1.0)*x6559))+(((-1.0)*r02*sj0*x6542))+(((-1.0)*r01*x6536*x6544)));
evalcond[5]=(((cj5*r12*sj0))+((x6536*x6538))+((x6536*x6537))+((cj6*r01*x6547))+((r02*x6540))+((x6532*x6550))+x6556+((x6547*x6548)));
evalcond[6]=((-0.0001)+((x6539*x6541))+((sj3*x6555))+(((-1.0)*x6535*x6539))+((x6533*x6534))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*x6534*x6553))+(((0.0718)*x6559))+(((-1.0)*py*x6552)));
evalcond[7]=((0.1255)+(((0.09746)*x6543))+(((0.026255)*x6551))+((x6543*x6555))+(((0.1158)*cj2))+(((-0.0718)*x6558))+(((-0.026255)*r21*sj6))+(((0.0718)*x6532*x6543))+(((0.02626)*x6560))+pz+(((0.0009)*sj2)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+((x6533*x6539))+(((0.02626)*x6557))+(((-0.09746)*x6550))+(((-1.0)*x6550*x6555))+(((-0.0718)*x6556))+(((-1.0)*px*x6552))+(((-1.0)*x6549*x6560))+(((0.0009)*cj2))+(((-1.0)*x6539*x6553))+(((-1.0)*x6534*x6541))+((x6534*x6535))+(((-1.0)*py*x6546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6561=(sj2*sj6);
IkReal x6562=(cj0*r01);
IkReal x6563=((1.0)*sj0);
IkReal x6564=(cj6*sj2);
IkReal x6565=(cj2*sj6);
IkReal x6566=((1.0)*r20);
IkReal x6567=(cj0*r00);
IkReal x6568=(cj2*cj6);
CheckValue<IkReal> x6569=IKPowWithIntegerCheck(cj3,-1);
if(!x6569.valid){
continue;
}
if( IKabs(((x6569.value)*(((((-1.0)*r10*x6563*x6564))+((x6561*x6562))+(((-1.0)*x6566*x6568))+(((-1.0)*x6564*x6567))+((r21*x6565))+((r11*sj0*x6561)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6567*x6568))+(((-1.0)*x6562*x6565))+((r21*x6561))+((r10*sj0*x6568))+(((-1.0)*r11*x6563*x6565))+(((-1.0)*x6564*x6566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6569.value)*(((((-1.0)*r10*x6563*x6564))+((x6561*x6562))+(((-1.0)*x6566*x6568))+(((-1.0)*x6564*x6567))+((r21*x6565))+((r11*sj0*x6561))))))+IKsqr((((x6567*x6568))+(((-1.0)*x6562*x6565))+((r21*x6561))+((r10*sj0*x6568))+(((-1.0)*r11*x6563*x6565))+(((-1.0)*x6564*x6566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6569.value)*(((((-1.0)*r10*x6563*x6564))+((x6561*x6562))+(((-1.0)*x6566*x6568))+(((-1.0)*x6564*x6567))+((r21*x6565))+((r11*sj0*x6561))))), (((x6567*x6568))+(((-1.0)*x6562*x6565))+((r21*x6561))+((r10*sj0*x6568))+(((-1.0)*r11*x6563*x6565))+(((-1.0)*x6564*x6566))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6570=IKsin(j4);
IkReal x6571=IKcos(j4);
IkReal x6572=(r11*sj6);
IkReal x6573=((0.026255)*cj0);
IkReal x6574=(r01*sj6);
IkReal x6575=(sj0*sj5);
IkReal x6576=(cj6*r11);
IkReal x6577=(r10*sj6);
IkReal x6578=((0.026255)*sj0);
IkReal x6579=(cj0*cj5);
IkReal x6580=(cj6*r00);
IkReal x6581=((1.0)*cj5);
IkReal x6582=(cj2*cj3);
IkReal x6583=((1.0)*cj6);
IkReal x6584=((1.0)*cj3);
IkReal x6585=((1.0)*sj0);
IkReal x6586=(cj0*sj5);
IkReal x6587=(r00*sj6);
IkReal x6588=((0.0718)*cj3);
IkReal x6589=(cj3*sj2);
IkReal x6590=(cj6*r20);
IkReal x6591=((1.0)*cj0);
IkReal x6592=(cj6*r10);
IkReal x6593=((1.0)*sj6);
IkReal x6594=((0.02626)*x6570);
IkReal x6595=(cj2*x6570);
IkReal x6596=(cj2*x6571);
IkReal x6597=(sj2*x6570);
IkReal x6598=(sj3*x6571);
IkReal x6599=(sj2*x6571);
evalcond[0]=(x6590+x6599+(((-1.0)*r21*x6593))+((x6570*x6582)));
evalcond[1]=(((cj0*x6572))+((sj0*x6580))+((sj3*x6570))+(((-1.0)*x6574*x6585))+(((-1.0)*cj0*r10*x6583)));
evalcond[2]=((((-1.0)*r20*sj5*x6593))+(((-1.0)*x6571*x6582))+x6597+(((-1.0)*r21*sj5*x6583))+(((-1.0)*r22*x6581)));
evalcond[3]=((((-1.0)*x6580*x6591))+((cj0*x6574))+x6596+((sj0*x6572))+(((-1.0)*r10*sj0*x6583))+(((-1.0)*x6584*x6597)));
evalcond[4]=((((-1.0)*r01*x6575*x6583))+((r12*x6579))+((x6576*x6586))+((x6577*x6586))+(((-1.0)*x6575*x6587))+(((-1.0)*r02*sj0*x6581))+(((-1.0)*x6598)));
evalcond[5]=(((cj5*r12*sj0))+((cj6*r01*x6586))+x6595+((x6571*x6589))+((x6586*x6587))+((x6575*x6577))+((x6575*x6576))+((r02*x6579)));
evalcond[6]=((-0.0001)+((x6572*x6573))+(((-1.0)*x6574*x6578))+(((-1.0)*py*x6591))+(((-1.0)*x6573*x6592))+((x6578*x6580))+((sj3*x6594))+(((0.0718)*x6598))+((px*sj0))+(((0.09746)*sj3)));
evalcond[7]=((0.1255)+(((0.1158)*cj2))+(((-0.026255)*r21*sj6))+(((0.026255)*x6590))+(((0.09746)*x6582))+((x6582*x6594))+(((0.0718)*x6571*x6582))+pz+(((0.0009)*sj2))+(((0.02626)*x6599))+(((-0.0718)*x6597)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*x6589*x6594))+((x6573*x6574))+((x6572*x6578))+(((-1.0)*py*x6585))+(((-1.0)*x6573*x6580))+(((0.0009)*cj2))+(((-1.0)*x6578*x6592))+(((-0.09746)*x6589))+(((-1.0)*x6588*x6599))+(((-1.0)*px*x6591))+(((0.02626)*x6596))+(((-0.0718)*x6595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=cj2*cj2;
IkReal x6601=(cj2*cj3);
IkReal x6602=(cj6*r20);
IkReal x6603=(cj5*r22);
IkReal x6604=(r20*sj5);
IkReal x6605=((1.0)*sj2);
IkReal x6606=(sj6*x6605);
IkReal x6607=(cj6*r21*sj5);
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal((((x6601*x6602))+(((-1.0)*x6604*x6606))+(((-1.0)*x6603*x6605))+(((-1.0)*r21*sj6*x6601))+(((-1.0)*x6605*x6607)))),(((sj6*x6601*x6604))+((sj2*x6602))+((x6601*x6603))+((x6601*x6607))+(((-1.0)*r21*x6606))),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
CheckValue<IkReal> x6609=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x6600*(cj3*cj3)))+x6600)),-1);
if(!x6609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6608.value)+(((1.5707963267949)*(x6609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6610=IKsin(j4);
IkReal x6611=IKcos(j4);
IkReal x6612=(r11*sj6);
IkReal x6613=((0.026255)*cj0);
IkReal x6614=(r01*sj6);
IkReal x6615=(sj0*sj5);
IkReal x6616=(cj6*r11);
IkReal x6617=(r10*sj6);
IkReal x6618=((0.026255)*sj0);
IkReal x6619=(cj0*cj5);
IkReal x6620=(cj6*r00);
IkReal x6621=((1.0)*cj5);
IkReal x6622=(cj2*cj3);
IkReal x6623=((1.0)*cj6);
IkReal x6624=((1.0)*cj3);
IkReal x6625=((1.0)*sj0);
IkReal x6626=(cj0*sj5);
IkReal x6627=(r00*sj6);
IkReal x6628=((0.0718)*cj3);
IkReal x6629=(cj3*sj2);
IkReal x6630=(cj6*r20);
IkReal x6631=((1.0)*cj0);
IkReal x6632=(cj6*r10);
IkReal x6633=((1.0)*sj6);
IkReal x6634=((0.02626)*x6610);
IkReal x6635=(cj2*x6610);
IkReal x6636=(cj2*x6611);
IkReal x6637=(sj2*x6610);
IkReal x6638=(sj3*x6611);
IkReal x6639=(sj2*x6611);
evalcond[0]=((((-1.0)*r21*x6633))+x6639+x6630+((x6610*x6622)));
evalcond[1]=((((-1.0)*cj0*r10*x6623))+(((-1.0)*x6614*x6625))+((sj3*x6610))+((cj0*x6612))+((sj0*x6620)));
evalcond[2]=((((-1.0)*x6611*x6622))+(((-1.0)*r21*sj5*x6623))+(((-1.0)*r22*x6621))+x6637+(((-1.0)*r20*sj5*x6633)));
evalcond[3]=((((-1.0)*x6620*x6631))+x6636+((cj0*x6614))+((sj0*x6612))+(((-1.0)*r10*sj0*x6623))+(((-1.0)*x6624*x6637)));
evalcond[4]=((((-1.0)*x6638))+(((-1.0)*r02*sj0*x6621))+(((-1.0)*r01*x6615*x6623))+(((-1.0)*x6615*x6627))+((r12*x6619))+((x6617*x6626))+((x6616*x6626)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x6619))+((x6626*x6627))+((x6611*x6629))+x6635+((cj6*r01*x6626))+((x6615*x6617))+((x6615*x6616)));
evalcond[6]=((-0.0001)+((x6612*x6613))+((x6618*x6620))+(((-1.0)*x6614*x6618))+((sj3*x6634))+(((0.0718)*x6638))+(((-1.0)*py*x6631))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*x6613*x6632)));
evalcond[7]=((0.1255)+(((0.1158)*cj2))+(((-0.0718)*x6637))+(((-0.026255)*r21*sj6))+(((0.026255)*x6630))+(((0.0718)*x6611*x6622))+pz+(((0.09746)*x6622))+(((0.0009)*sj2))+((x6622*x6634))+(((0.02626)*x6639)));
evalcond[8]=((-0.001)+(((-1.0)*x6628*x6639))+((x6613*x6614))+(((-0.1158)*sj2))+((x6612*x6618))+(((-0.0718)*x6635))+(((-1.0)*x6618*x6632))+(((0.0009)*cj2))+(((-1.0)*x6629*x6634))+(((-1.0)*py*x6625))+(((-1.0)*px*x6631))+(((-1.0)*x6613*x6620))+(((-0.09746)*x6629))+(((0.02626)*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x6640=(cj5*sj0);
IkReal x6641=((1.0)*cj5*cj6);
IkReal x6642=((1.0)*cj5*sj6);
CheckValue<IkReal> x6643=IKPowWithIntegerCheck(cj2,-1);
if(!x6643.valid){
continue;
}
if( IKabs(((x6643.value)*(((((-1.0)*r21*x6641))+((r22*sj5))+(((-1.0)*r20*x6642)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x6641))+((cj6*r01*x6640))+(((-1.0)*cj0*r10*x6642))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x6640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6643.value)*(((((-1.0)*r21*x6641))+((r22*sj5))+(((-1.0)*r20*x6642))))))+IKsqr(((((-1.0)*cj0*r11*x6641))+((cj6*r01*x6640))+(((-1.0)*cj0*r10*x6642))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x6640))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x6643.value)*(((((-1.0)*r21*x6641))+((r22*sj5))+(((-1.0)*r20*x6642))))), ((((-1.0)*cj0*r11*x6641))+((cj6*r01*x6640))+(((-1.0)*cj0*r10*x6642))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*sj5))+((r00*sj6*x6640))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x6644=IKsin(j3);
IkReal x6645=(cj5*cj6);
IkReal x6646=((1.0)*sj5);
IkReal x6647=((1.0)*cj0);
IkReal x6648=(cj0*sj5);
IkReal x6649=(cj5*sj6);
IkReal x6650=(r10*x6649);
IkReal x6651=((1.0)*r11*x6645);
evalcond[0]=((((-1.0)*r22*x6646))+((r21*x6645))+((r20*x6649))+((cj2*x6644)));
evalcond[1]=((((-1.0)*r02*sj0*x6646))+((r01*sj0*x6645))+(((-1.0)*x6647*x6650))+(((-1.0)*r11*x6645*x6647))+((r00*sj0*x6649))+((r12*x6648))+(((-1.0)*(IKcos(j3)))));
evalcond[2]=((((-1.0)*r00*x6647*x6649))+(((-1.0)*sj0*x6651))+((r12*sj0*sj5))+(((-1.0)*sj0*x6650))+(((-1.0)*r01*x6645*x6647))+(((-1.0)*sj2*x6644))+((r02*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6652=cj2*cj2;
IkReal x6653=(cj2*cj3);
IkReal x6654=(cj6*r20);
IkReal x6655=(cj6*r21);
IkReal x6656=(cj5*r22);
IkReal x6657=(r20*sj6);
IkReal x6658=((1.0)*sj2*sj5);
IkReal x6659=((1.0)*r21*sj6);
IkReal x6660=((-1.0)+x6652+(((-1.0)*x6652*(cj3*cj3))));
j4eval[0]=x6660;
j4eval[1]=((IKabs((((sj5*x6653*x6655))+((sj5*x6653*x6657))+((x6653*x6656))+(((-1.0)*sj2*x6659))+((sj2*x6654)))))+(IKabs(((((-1.0)*x6653*x6659))+(((-1.0)*x6657*x6658))+((x6653*x6654))+(((-1.0)*x6655*x6658))+(((-1.0)*sj2*x6656))))));
j4eval[2]=IKsign(x6660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6661=(cj5*cj6);
IkReal x6662=(cj0*sj6);
IkReal x6663=(r01*sj0);
IkReal x6664=((1.0)*sj0);
IkReal x6665=((1.0)*cj5);
IkReal x6666=(cj0*r12);
IkReal x6667=(r02*sj5);
IkReal x6668=((1.0)*sj5);
IkReal x6669=(cj5*sj6);
IkReal x6670=((1.0)*cj0);
IkReal x6671=(cj6*r10);
IkReal x6672=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r20*x6669))+((r21*x6661))+(((-1.0)*r22*x6668)));
evalcond[2]=((((-1.0)*x6670*x6671))+x6672+((r11*x6662))+(((-1.0)*sj6*x6663)));
evalcond[3]=((((-1.0)*r11*x6661*x6664))+(((-1.0)*r01*x6661*x6670))+((r12*sj0*sj5))+(((-1.0)*r10*x6664*x6669))+(((-1.0)*r00*x6662*x6665))+((cj0*x6667)));
evalcond[4]=((-1.0)+(((-1.0)*x6664*x6667))+(((-1.0)*r11*x6661*x6670))+(((-1.0)*r10*x6662*x6665))+((r00*sj0*x6669))+((sj5*x6666))+((x6661*x6663)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x6664))+(((-1.0)*cj6*x6663*x6668))+((r10*sj5*x6662))+(((-1.0)*cj5*r02*x6664))+((cj5*x6666))+((cj0*cj6*r11*sj5)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x6662))+(((-1.0)*py*x6670))+(((-0.026255)*sj6*x6663))+(((0.026255)*x6672))+((px*sj0))+(((-0.026255)*cj0*x6671)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6673=(cj2*r21);
IkReal x6674=(cj6*sj5);
IkReal x6675=(cj5*r22);
IkReal x6676=(r21*sj2);
IkReal x6677=((1.0)*cj2);
IkReal x6678=(cj6*r20);
IkReal x6679=(r20*sj5*sj6);
if( IKabs((((x6674*x6676))+(((-1.0)*x6677*x6678))+((sj2*x6675))+((sj2*x6679))+((sj6*x6673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x6678))+(((-1.0)*x6673*x6674))+(((-1.0)*x6677*x6679))+((sj6*x6676))+(((-1.0)*x6675*x6677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6674*x6676))+(((-1.0)*x6677*x6678))+((sj2*x6675))+((sj2*x6679))+((sj6*x6673))))+IKsqr(((((-1.0)*sj2*x6678))+(((-1.0)*x6673*x6674))+(((-1.0)*x6677*x6679))+((sj6*x6676))+(((-1.0)*x6675*x6677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x6674*x6676))+(((-1.0)*x6677*x6678))+((sj2*x6675))+((sj2*x6679))+((sj6*x6673))), ((((-1.0)*sj2*x6678))+(((-1.0)*x6673*x6674))+(((-1.0)*x6677*x6679))+((sj6*x6676))+(((-1.0)*x6675*x6677))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6680=IKsin(j4);
IkReal x6681=IKcos(j4);
IkReal x6682=(r11*sj0);
IkReal x6683=((0.026255)*sj6);
IkReal x6684=(cj0*r01);
IkReal x6685=(cj6*sj5);
IkReal x6686=(r10*sj0);
IkReal x6687=(sj5*sj6);
IkReal x6688=((1.0)*cj6);
IkReal x6689=(cj0*r00);
IkReal x6690=((0.026255)*cj6);
IkReal x6691=((1.0)*r21);
IkReal x6692=(sj2*x6681);
IkReal x6693=(cj2*x6680);
IkReal x6694=((0.02626)*x6680);
IkReal x6695=(cj2*x6681);
IkReal x6696=(sj2*x6680);
IkReal x6697=(x6693+x6692);
evalcond[0]=(x6697+((cj6*r20))+(((-1.0)*sj6*x6691)));
evalcond[1]=((((-1.0)*x6685*x6691))+(((-1.0)*x6695))+(((-1.0)*r20*x6687))+x6696+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x6696))+x6695+(((-1.0)*x6688*x6689))+((sj6*x6684))+((sj6*x6682))+(((-1.0)*x6686*x6688)));
evalcond[3]=(((cj5*r12*sj0))+((x6684*x6685))+((cj0*cj5*r02))+x6697+((x6687*x6689))+((x6682*x6685))+((x6686*x6687)));
evalcond[4]=((0.1255)+(((0.0718)*x6695))+(((-1.0)*r21*x6683))+(((0.02626)*x6693))+(((0.02626)*x6692))+pz+(((0.21326)*cj2))+((r20*x6690))+(((0.0009)*sj2))+(((-0.0718)*x6696)));
evalcond[5]=((-0.001)+(((-1.0)*x6686*x6690))+((x6683*x6684))+(((0.02626)*x6695))+(((-1.0)*x6689*x6690))+(((-1.0)*sj2*x6694))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+((x6682*x6683))+(((-0.0718)*x6692))+(((-0.0718)*x6693))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6698=(cj5*cj6);
IkReal x6699=(cj0*sj6);
IkReal x6700=(r01*sj0);
IkReal x6701=((1.0)*sj0);
IkReal x6702=((1.0)*cj5);
IkReal x6703=(cj0*r12);
IkReal x6704=(r02*sj5);
IkReal x6705=((1.0)*sj5);
IkReal x6706=(cj5*sj6);
IkReal x6707=((1.0)*cj0);
IkReal x6708=(cj6*r10);
IkReal x6709=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x6705))+((r20*x6706))+((r21*x6698)));
evalcond[2]=(((r11*x6699))+x6709+(((-1.0)*sj6*x6700))+(((-1.0)*x6707*x6708)));
evalcond[3]=(((r12*sj0*sj5))+((cj0*x6704))+(((-1.0)*r10*x6701*x6706))+(((-1.0)*r01*x6698*x6707))+(((-1.0)*r00*x6699*x6702))+(((-1.0)*r11*x6698*x6701)));
evalcond[4]=((1.0)+(((-1.0)*r10*x6699*x6702))+((x6698*x6700))+((r00*sj0*x6706))+(((-1.0)*x6701*x6704))+((sj5*x6703))+(((-1.0)*r11*x6698*x6707)));
evalcond[5]=((((-1.0)*cj5*r02*x6701))+(((-1.0)*r00*sj5*sj6*x6701))+((r10*sj5*x6699))+((cj0*cj6*r11*sj5))+((cj5*x6703))+(((-1.0)*cj6*x6700*x6705)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x6699))+(((-0.026255)*cj0*x6708))+(((-0.026255)*sj6*x6700))+(((-1.0)*py*x6707))+((px*sj0))+(((0.026255)*x6709)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6710=(cj5*r22);
IkReal x6711=(cj6*sj2);
IkReal x6712=(r21*sj5);
IkReal x6713=(r21*sj6);
IkReal x6714=(cj2*cj6);
IkReal x6715=(r20*sj5*sj6);
if( IKabs((((r20*x6714))+((x6711*x6712))+((sj2*x6715))+((sj2*x6710))+(((-1.0)*cj2*x6713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x6713))+((x6712*x6714))+(((-1.0)*r20*x6711))+((cj2*x6710))+((cj2*x6715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x6714))+((x6711*x6712))+((sj2*x6715))+((sj2*x6710))+(((-1.0)*cj2*x6713))))+IKsqr((((sj2*x6713))+((x6712*x6714))+(((-1.0)*r20*x6711))+((cj2*x6710))+((cj2*x6715))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r20*x6714))+((x6711*x6712))+((sj2*x6715))+((sj2*x6710))+(((-1.0)*cj2*x6713))), (((sj2*x6713))+((x6712*x6714))+(((-1.0)*r20*x6711))+((cj2*x6710))+((cj2*x6715))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6716=IKcos(j4);
IkReal x6717=IKsin(j4);
IkReal x6718=(r11*sj0);
IkReal x6719=(cj0*sj6);
IkReal x6720=(cj6*sj5);
IkReal x6721=(r10*sj0);
IkReal x6722=(sj5*sj6);
IkReal x6723=(cj6*r20);
IkReal x6724=((1.0)*cj6);
IkReal x6725=((0.026255)*sj6);
IkReal x6726=((0.026255)*cj6);
IkReal x6727=(cj0*r00);
IkReal x6728=((1.0)*r21);
IkReal x6729=(cj2*x6716);
IkReal x6730=(sj2*x6717);
IkReal x6731=((0.02626)*x6717);
IkReal x6732=(cj2*x6717);
IkReal x6733=((0.0718)*x6716);
IkReal x6734=(sj2*x6716);
IkReal x6735=(x6730+x6729);
evalcond[0]=((((-1.0)*x6732))+x6734+x6723+(((-1.0)*sj6*x6728)));
evalcond[1]=(x6735+(((-1.0)*r20*x6722))+(((-1.0)*cj5*r22))+(((-1.0)*x6720*x6728)));
evalcond[2]=((((-1.0)*x6724*x6727))+((sj6*x6718))+x6735+(((-1.0)*x6721*x6724))+((r01*x6719)));
evalcond[3]=(((cj5*r12*sj0))+(((-1.0)*x6734))+((cj0*cj5*r02))+((x6718*x6720))+x6732+((cj0*r01*x6720))+((r00*sj5*x6719))+((x6721*x6722)));
evalcond[4]=((0.1255)+(((-1.0)*r21*x6725))+(((0.026255)*x6723))+(((0.02626)*x6734))+(((-0.0718)*x6729))+(((-1.0)*cj2*x6731))+(((-0.0718)*x6730))+pz+(((0.01834)*cj2))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((0.026255)*r01*x6719))+(((-0.01834)*sj2))+((x6718*x6725))+(((0.02626)*x6730))+(((0.0009)*cj2))+(((-0.0718)*x6732))+(((-1.0)*x6721*x6726))+(((-1.0)*py*sj0))+(((0.02626)*x6729))+((sj2*x6733))+(((-1.0)*cj0*px))+(((-1.0)*x6726*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6736=(cj0*sj5);
IkReal x6737=(cj5*cj6);
IkReal x6738=((1.0)*sj5);
IkReal x6739=((1.0)*cj0);
IkReal x6740=((1.0)*sj0);
IkReal x6741=(cj5*sj6);
IkReal x6742=(r10*x6741);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r21*x6737))+(((-1.0)*r22*x6738))+sj3+((r20*x6741)));
evalcond[2]=(((r12*sj0*sj5))+(((-1.0)*r11*x6737*x6740))+(((-1.0)*r00*x6739*x6741))+(((-1.0)*x6740*x6742))+((r02*x6736))+(((-1.0)*r01*x6737*x6739)));
evalcond[3]=(((r12*x6736))+(((-1.0)*r02*sj0*x6738))+(((-1.0)*r11*x6737*x6739))+((r01*sj0*x6737))+((r00*sj0*x6741))+(((-1.0)*x6739*x6742))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x6743=((1.0)*sj5);
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x6743))+(((-1.0)*r20*sj6*x6743))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6744=((1.0)*sj5);
CheckValue<IkReal> x6745=IKPowWithIntegerCheck(sj3,-1);
if(!x6745.valid){
continue;
}
CheckValue<IkReal> x6746=IKPowWithIntegerCheck(cj3,-1);
if(!x6746.valid){
continue;
}
if( IKabs(((x6745.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6746.value)*(((((-1.0)*cj6*r21*x6744))+(((-1.0)*r20*sj6*x6744))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6745.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x6746.value)*(((((-1.0)*cj6*r21*x6744))+(((-1.0)*r20*sj6*x6744))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6745.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x6746.value)*(((((-1.0)*cj6*r21*x6744))+(((-1.0)*r20*sj6*x6744))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6747=IKcos(j4);
IkReal x6748=IKsin(j4);
IkReal x6749=(sj0*sj6);
IkReal x6750=(cj0*sj6);
IkReal x6751=((0.026255)*r01);
IkReal x6752=(cj5*r12);
IkReal x6753=(r10*sj5);
IkReal x6754=(cj6*sj0);
IkReal x6755=((0.026255)*r00);
IkReal x6756=((1.0)*cj5);
IkReal x6757=((1.0)*r10);
IkReal x6758=((1.0)*r01);
IkReal x6759=(cj0*cj6);
IkReal x6760=(r00*sj5);
IkReal x6761=((0.026255)*r11);
IkReal x6762=((1.0)*py);
IkReal x6763=(cj6*r20);
IkReal x6764=((1.0)*sj5);
IkReal x6765=(r11*sj5);
IkReal x6766=((0.026255)*r10);
IkReal x6767=(r21*sj6);
IkReal x6768=((1.0)*x6747);
IkReal x6769=((0.02626)*x6748);
IkReal x6770=((0.0718)*x6747);
evalcond[0]=(((cj3*x6748))+x6763+(((-1.0)*x6767)));
evalcond[1]=((((-1.0)*r20*sj6*x6764))+(((-1.0)*cj3*x6768))+(((-1.0)*r22*x6756))+(((-1.0)*cj6*r21*x6764)));
evalcond[2]=(((r01*x6750))+((r11*x6749))+x6747+(((-1.0)*x6754*x6757))+(((-1.0)*r00*x6759)));
evalcond[3]=(((r00*x6754))+((r11*x6750))+(((-1.0)*x6749*x6758))+((sj3*x6748))+(((-1.0)*x6757*x6759)));
evalcond[4]=((0.2413)+(((-0.026255)*x6767))+(((0.026255)*x6763))+((cj3*x6769))+pz+(((0.09746)*cj3))+((cj3*x6770)));
evalcond[5]=(((cj0*cj5*r02))+x6748+((r01*sj5*x6759))+((x6754*x6765))+((x6749*x6753))+((sj0*x6752))+((x6750*x6760)));
evalcond[6]=(((x6759*x6765))+(((-1.0)*sj3*x6768))+((cj0*x6752))+(((-1.0)*sj5*x6754*x6758))+(((-1.0)*x6749*x6760))+(((-1.0)*r02*sj0*x6756))+((x6750*x6753)));
evalcond[7]=((-0.0001)+(((-1.0)*x6755*x6759))+(((-1.0)*sj0*x6762))+(((0.02626)*x6747))+(((-0.0718)*x6748))+((x6749*x6761))+((x6750*x6751))+(((-1.0)*x6754*x6766))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+(((-1.0)*x6759*x6766))+((sj3*x6770))+((x6754*x6755))+(((-1.0)*x6749*x6751))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*cj0*x6762))+((sj3*x6769))+((x6750*x6761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6771=((1.0)*sj6);
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(cj3,-1);
if(!x6772.valid){
continue;
}
if( IKabs(((x6772.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj0*x6771))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6771))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6772.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))+IKsqr(((((-1.0)*r11*sj0*x6771))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6771))+((cj0*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6772.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))), ((((-1.0)*r11*sj0*x6771))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6771))+((cj0*cj6*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6773=IKcos(j4);
IkReal x6774=IKsin(j4);
IkReal x6775=(sj0*sj6);
IkReal x6776=(cj0*sj6);
IkReal x6777=((0.026255)*r01);
IkReal x6778=(cj5*r12);
IkReal x6779=(r10*sj5);
IkReal x6780=(cj6*sj0);
IkReal x6781=((0.026255)*r00);
IkReal x6782=((1.0)*cj5);
IkReal x6783=((1.0)*r10);
IkReal x6784=((1.0)*r01);
IkReal x6785=(cj0*cj6);
IkReal x6786=(r00*sj5);
IkReal x6787=((0.026255)*r11);
IkReal x6788=((1.0)*py);
IkReal x6789=(cj6*r20);
IkReal x6790=((1.0)*sj5);
IkReal x6791=(r11*sj5);
IkReal x6792=((0.026255)*r10);
IkReal x6793=(r21*sj6);
IkReal x6794=((1.0)*x6773);
IkReal x6795=((0.02626)*x6774);
IkReal x6796=((0.0718)*x6773);
evalcond[0]=(x6789+(((-1.0)*x6793))+((cj3*x6774)));
evalcond[1]=((((-1.0)*cj6*r21*x6790))+(((-1.0)*r20*sj6*x6790))+(((-1.0)*cj3*x6794))+(((-1.0)*r22*x6782)));
evalcond[2]=(((r11*x6775))+(((-1.0)*r00*x6785))+x6773+((r01*x6776))+(((-1.0)*x6780*x6783)));
evalcond[3]=(((r11*x6776))+((sj3*x6774))+((r00*x6780))+(((-1.0)*x6775*x6784))+(((-1.0)*x6783*x6785)));
evalcond[4]=((0.2413)+(((0.026255)*x6789))+((cj3*x6796))+((cj3*x6795))+(((-0.026255)*x6793))+pz+(((0.09746)*cj3)));
evalcond[5]=(((x6776*x6786))+((cj0*cj5*r02))+((sj0*x6778))+((x6775*x6779))+x6774+((x6780*x6791))+((r01*sj5*x6785)));
evalcond[6]=((((-1.0)*sj3*x6794))+(((-1.0)*sj5*x6780*x6784))+((x6785*x6791))+((x6776*x6779))+((cj0*x6778))+(((-1.0)*x6775*x6786))+(((-1.0)*r02*sj0*x6782)));
evalcond[7]=((-0.0001)+(((-0.0718)*x6774))+((x6776*x6777))+(((-1.0)*x6780*x6792))+(((-1.0)*sj0*x6788))+((x6775*x6787))+(((0.02626)*x6773))+(((-1.0)*x6781*x6785))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+((x6776*x6787))+(((-1.0)*cj0*x6788))+(((-1.0)*x6775*x6777))+(((-1.0)*x6785*x6792))+((px*sj0))+((sj3*x6796))+((sj3*x6795))+(((0.09746)*sj3))+((x6780*x6781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=((1.0)*sj5);
CheckValue<IkReal> x6798 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x6797))+(((-1.0)*r20*sj6*x6797))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6798.value)+(((1.5707963267949)*(x6799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6800=IKcos(j4);
IkReal x6801=IKsin(j4);
IkReal x6802=(sj0*sj6);
IkReal x6803=(cj0*sj6);
IkReal x6804=((0.026255)*r01);
IkReal x6805=(cj5*r12);
IkReal x6806=(r10*sj5);
IkReal x6807=(cj6*sj0);
IkReal x6808=((0.026255)*r00);
IkReal x6809=((1.0)*cj5);
IkReal x6810=((1.0)*r10);
IkReal x6811=((1.0)*r01);
IkReal x6812=(cj0*cj6);
IkReal x6813=(r00*sj5);
IkReal x6814=((0.026255)*r11);
IkReal x6815=((1.0)*py);
IkReal x6816=(cj6*r20);
IkReal x6817=((1.0)*sj5);
IkReal x6818=(r11*sj5);
IkReal x6819=((0.026255)*r10);
IkReal x6820=(r21*sj6);
IkReal x6821=((1.0)*x6800);
IkReal x6822=((0.02626)*x6801);
IkReal x6823=((0.0718)*x6800);
evalcond[0]=((((-1.0)*x6820))+((cj3*x6801))+x6816);
evalcond[1]=((((-1.0)*r20*sj6*x6817))+(((-1.0)*cj3*x6821))+(((-1.0)*cj6*r21*x6817))+(((-1.0)*r22*x6809)));
evalcond[2]=(((r01*x6803))+(((-1.0)*x6807*x6810))+((r11*x6802))+x6800+(((-1.0)*r00*x6812)));
evalcond[3]=((((-1.0)*x6802*x6811))+(((-1.0)*x6810*x6812))+((sj3*x6801))+((r00*x6807))+((r11*x6803)));
evalcond[4]=((0.2413)+(((-0.026255)*x6820))+(((0.026255)*x6816))+((cj3*x6822))+((cj3*x6823))+pz+(((0.09746)*cj3)));
evalcond[5]=(((x6807*x6818))+((cj0*cj5*r02))+((sj0*x6805))+((x6803*x6813))+((r01*sj5*x6812))+x6801+((x6802*x6806)));
evalcond[6]=((((-1.0)*sj3*x6821))+((x6812*x6818))+(((-1.0)*r02*sj0*x6809))+((x6803*x6806))+((cj0*x6805))+(((-1.0)*sj5*x6807*x6811))+(((-1.0)*x6802*x6813)));
evalcond[7]=((-0.0001)+(((0.02626)*x6800))+(((-1.0)*x6808*x6812))+(((-1.0)*x6807*x6819))+((x6802*x6814))+((x6803*x6804))+(((-1.0)*sj0*x6815))+(((-0.0718)*x6801))+(((-1.0)*cj0*px)));
evalcond[8]=((-0.0001)+((x6803*x6814))+((sj3*x6823))+((sj3*x6822))+(((-1.0)*x6802*x6804))+(((-1.0)*x6812*x6819))+((x6807*x6808))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*cj0*x6815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6824=(cj0*sj5);
IkReal x6825=(cj5*cj6);
IkReal x6826=((1.0)*sj5);
IkReal x6827=((1.0)*cj0);
IkReal x6828=((1.0)*sj0);
IkReal x6829=(cj5*sj6);
IkReal x6830=(r10*x6829);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj3))+((r21*x6825))+((r20*x6829))+(((-1.0)*r22*x6826)));
evalcond[2]=((((-1.0)*r01*x6825*x6827))+((r02*x6824))+((r12*sj0*sj5))+(((-1.0)*x6828*x6830))+(((-1.0)*r00*x6827*x6829))+(((-1.0)*r11*x6825*x6828)));
evalcond[3]=(((r01*sj0*x6825))+((r12*x6824))+(((-1.0)*x6827*x6830))+((r00*sj0*x6829))+(((-1.0)*r02*sj0*x6826))+(((-1.0)*cj3))+(((-1.0)*r11*x6825*x6827)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(sj3,-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832=IKPowWithIntegerCheck(cj3,-1);
if(!x6832.valid){
continue;
}
if( IKabs(((x6831.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6832.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6831.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))+IKsqr(((x6832.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6831.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))), ((x6832.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6833=IKcos(j4);
IkReal x6834=IKsin(j4);
IkReal x6835=(r11*sj0);
IkReal x6836=(cj0*sj6);
IkReal x6837=((0.026255)*r01);
IkReal x6838=(cj6*sj5);
IkReal x6839=(r10*sj0);
IkReal x6840=(sj5*sj6);
IkReal x6841=((1.0)*cj5);
IkReal x6842=((1.0)*cj6);
IkReal x6843=((1.0)*sj0);
IkReal x6844=((0.026255)*sj6);
IkReal x6845=(cj5*r12);
IkReal x6846=(cj0*r10);
IkReal x6847=((0.026255)*cj6);
IkReal x6848=((1.0)*r21);
IkReal x6849=((1.0)*cj0);
IkReal x6850=(cj0*r00);
IkReal x6851=(cj3*x6834);
IkReal x6852=(sj3*x6834);
IkReal x6853=(cj6*r00*sj0);
IkReal x6854=((1.0)*x6833);
IkReal x6855=(cj3*x6833);
evalcond[0]=((((-1.0)*sj6*x6848))+(((-1.0)*x6851))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x6841))+x6855+(((-1.0)*x6838*x6848))+(((-1.0)*r20*x6840)));
evalcond[2]=((((-1.0)*x6854))+(((-1.0)*x6839*x6842))+((r01*x6836))+((sj6*x6835))+(((-1.0)*x6842*x6850)));
evalcond[3]=(((r11*x6836))+x6853+x6852+(((-1.0)*x6842*x6846))+(((-1.0)*r01*sj6*x6843)));
evalcond[4]=((0.0097)+(((-1.0)*r21*x6844))+pz+(((-0.09746)*cj3))+((r20*x6847))+(((-0.02626)*x6851))+(((-0.0718)*x6855)));
evalcond[5]=(((cj0*r01*x6838))+((cj0*cj5*r02))+((x6839*x6840))+(((-1.0)*x6834))+((r00*sj5*x6836))+((x6835*x6838))+((sj0*x6845)));
evalcond[6]=(((cj0*r11*x6838))+((cj0*x6845))+(((-1.0)*r01*x6838*x6843))+((r10*sj5*x6836))+(((-1.0)*sj3*x6854))+(((-1.0)*r02*sj0*x6841))+(((-1.0)*r00*x6840*x6843)));
evalcond[7]=((-0.0019)+(((-0.02626)*x6833))+(((-1.0)*x6839*x6847))+(((-1.0)*x6847*x6850))+(((-1.0)*px*x6849))+((x6835*x6844))+(((-1.0)*py*x6843))+((x6836*x6837))+(((0.0718)*x6834)));
evalcond[8]=((-0.0001)+((r00*sj0*x6847))+(((0.0718)*sj3*x6833))+(((0.02626)*x6852))+(((-1.0)*x6846*x6847))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*py*x6849))+(((-1.0)*sj0*sj6*x6837))+(((0.026255)*r11*x6836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6856=((1.0)*cj6);
CheckValue<IkReal> x6857=IKPowWithIntegerCheck(cj3,-1);
if(!x6857.valid){
continue;
}
if( IKabs(((x6857.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x6856))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x6856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6857.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x6856))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x6856))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6857.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x6856))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x6856))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6858=IKcos(j4);
IkReal x6859=IKsin(j4);
IkReal x6860=(r11*sj0);
IkReal x6861=(cj0*sj6);
IkReal x6862=((0.026255)*r01);
IkReal x6863=(cj6*sj5);
IkReal x6864=(r10*sj0);
IkReal x6865=(sj5*sj6);
IkReal x6866=((1.0)*cj5);
IkReal x6867=((1.0)*cj6);
IkReal x6868=((1.0)*sj0);
IkReal x6869=((0.026255)*sj6);
IkReal x6870=(cj5*r12);
IkReal x6871=(cj0*r10);
IkReal x6872=((0.026255)*cj6);
IkReal x6873=((1.0)*r21);
IkReal x6874=((1.0)*cj0);
IkReal x6875=(cj0*r00);
IkReal x6876=(cj3*x6859);
IkReal x6877=(sj3*x6859);
IkReal x6878=(cj6*r00*sj0);
IkReal x6879=((1.0)*x6858);
IkReal x6880=(cj3*x6858);
evalcond[0]=((((-1.0)*sj6*x6873))+(((-1.0)*x6876))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x6866))+(((-1.0)*x6863*x6873))+x6880+(((-1.0)*r20*x6865)));
evalcond[2]=((((-1.0)*x6879))+(((-1.0)*x6864*x6867))+((sj6*x6860))+(((-1.0)*x6867*x6875))+((r01*x6861)));
evalcond[3]=(((r11*x6861))+x6878+x6877+(((-1.0)*x6867*x6871))+(((-1.0)*r01*sj6*x6868)));
evalcond[4]=((0.0097)+(((-0.02626)*x6876))+(((-1.0)*r21*x6869))+(((-0.0718)*x6880))+pz+(((-0.09746)*cj3))+((r20*x6872)));
evalcond[5]=(((cj0*r01*x6863))+((sj0*x6870))+((cj0*cj5*r02))+((x6864*x6865))+((x6860*x6863))+(((-1.0)*x6859))+((r00*sj5*x6861)));
evalcond[6]=(((cj0*r11*x6863))+(((-1.0)*r01*x6863*x6868))+((cj0*x6870))+(((-1.0)*sj3*x6879))+(((-1.0)*r00*x6865*x6868))+(((-1.0)*r02*sj0*x6866))+((r10*sj5*x6861)));
evalcond[7]=((-0.0019)+((x6860*x6869))+(((-1.0)*x6864*x6872))+(((-1.0)*px*x6874))+(((-1.0)*x6872*x6875))+((x6861*x6862))+(((-1.0)*py*x6868))+(((-0.02626)*x6858))+(((0.0718)*x6859)));
evalcond[8]=((-0.0001)+(((-1.0)*sj0*sj6*x6862))+(((-1.0)*x6871*x6872))+((r00*sj0*x6872))+(((0.0718)*sj3*x6858))+(((0.026255)*r11*x6861))+(((0.02626)*x6877))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*py*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6881 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6881.valid){
continue;
}
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x6882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6881.value)+(((1.5707963267949)*(x6882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6883=IKcos(j4);
IkReal x6884=IKsin(j4);
IkReal x6885=(r11*sj0);
IkReal x6886=(cj0*sj6);
IkReal x6887=((0.026255)*r01);
IkReal x6888=(cj6*sj5);
IkReal x6889=(r10*sj0);
IkReal x6890=(sj5*sj6);
IkReal x6891=((1.0)*cj5);
IkReal x6892=((1.0)*cj6);
IkReal x6893=((1.0)*sj0);
IkReal x6894=((0.026255)*sj6);
IkReal x6895=(cj5*r12);
IkReal x6896=(cj0*r10);
IkReal x6897=((0.026255)*cj6);
IkReal x6898=((1.0)*r21);
IkReal x6899=((1.0)*cj0);
IkReal x6900=(cj0*r00);
IkReal x6901=(cj3*x6884);
IkReal x6902=(sj3*x6884);
IkReal x6903=(cj6*r00*sj0);
IkReal x6904=((1.0)*x6883);
IkReal x6905=(cj3*x6883);
evalcond[0]=((((-1.0)*x6901))+((cj6*r20))+(((-1.0)*sj6*x6898)));
evalcond[1]=((((-1.0)*x6888*x6898))+x6905+(((-1.0)*r20*x6890))+(((-1.0)*r22*x6891)));
evalcond[2]=((((-1.0)*x6892*x6900))+(((-1.0)*x6889*x6892))+(((-1.0)*x6904))+((sj6*x6885))+((r01*x6886)));
evalcond[3]=(((r11*x6886))+(((-1.0)*r01*sj6*x6893))+(((-1.0)*x6892*x6896))+x6903+x6902);
evalcond[4]=((0.0097)+(((-0.02626)*x6901))+(((-1.0)*r21*x6894))+(((-0.0718)*x6905))+pz+(((-0.09746)*cj3))+((r20*x6897)));
evalcond[5]=(((cj0*cj5*r02))+((x6889*x6890))+((sj0*x6895))+((cj0*r01*x6888))+((r00*sj5*x6886))+((x6885*x6888))+(((-1.0)*x6884)));
evalcond[6]=((((-1.0)*r02*sj0*x6891))+(((-1.0)*r00*x6890*x6893))+((cj0*x6895))+((cj0*r11*x6888))+((r10*sj5*x6886))+(((-1.0)*sj3*x6904))+(((-1.0)*r01*x6888*x6893)));
evalcond[7]=((-0.0019)+(((-1.0)*x6889*x6897))+(((-1.0)*px*x6899))+(((-0.02626)*x6883))+(((0.0718)*x6884))+(((-1.0)*py*x6893))+(((-1.0)*x6897*x6900))+((x6886*x6887))+((x6885*x6894)));
evalcond[8]=((-0.0001)+(((-1.0)*x6896*x6897))+((r00*sj0*x6897))+(((0.02626)*x6902))+(((0.026255)*r11*x6886))+(((-1.0)*py*x6899))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*sj0*sj6*x6887))+(((0.0718)*sj3*x6883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6906=(cj0*sj5);
IkReal x6907=(cj5*cj6);
IkReal x6908=((1.0)*sj5);
IkReal x6909=((1.0)*cj0);
IkReal x6910=((1.0)*sj0);
IkReal x6911=(cj5*sj6);
IkReal x6912=(r10*x6911);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(cj2+(((-1.0)*r22*x6908))+((r21*x6907))+((r20*x6911)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*r01*x6907*x6909))+(((-1.0)*x6910*x6912))+((r12*sj0*sj5))+(((-1.0)*r11*x6907*x6910))+(((-1.0)*r00*x6909*x6911))+((r02*x6906)));
evalcond[3]=(((r00*sj0*x6911))+(((-1.0)*r02*sj0*x6908))+(((-1.0)*x6909*x6912))+((r01*sj0*x6907))+((r12*x6906))+(((-1.0)*r11*x6907*x6909)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6913=((1.0)*sj6);
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(sj2,-1);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(cj2,-1);
if(!x6915.valid){
continue;
}
if( IKabs(((x6914.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6915.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6913))+(((-1.0)*r11*sj0*x6913))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6914.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x6915.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6913))+(((-1.0)*r11*sj0*x6913))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6914.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x6915.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6913))+(((-1.0)*r11*sj0*x6913))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6916=IKsin(j4);
IkReal x6917=IKcos(j4);
IkReal x6918=(r11*sj0);
IkReal x6919=(cj0*sj6);
IkReal x6920=((0.026255)*r01);
IkReal x6921=(cj0*cj5);
IkReal x6922=(cj6*sj5);
IkReal x6923=(r10*sj0);
IkReal x6924=(sj5*sj6);
IkReal x6925=((1.0)*cj5);
IkReal x6926=((1.0)*cj6);
IkReal x6927=((1.0)*sj0);
IkReal x6928=((0.026255)*sj6);
IkReal x6929=(cj0*r10);
IkReal x6930=((0.026255)*cj6);
IkReal x6931=((1.0)*r21);
IkReal x6932=((1.0)*cj0);
IkReal x6933=(cj0*r00);
IkReal x6934=(cj2*x6916);
IkReal x6935=(cj6*r00*sj0);
IkReal x6936=(cj2*x6917);
IkReal x6937=(sj2*x6916);
IkReal x6938=(sj2*x6917);
evalcond[0]=(((cj6*r20))+x6938+(((-1.0)*sj6*x6931)));
evalcond[1]=((((-1.0)*r20*x6924))+(((-1.0)*r22*x6925))+x6937+(((-1.0)*x6922*x6931)));
evalcond[2]=((((-1.0)*r01*sj6*x6927))+((r11*x6919))+x6935+x6916+(((-1.0)*x6926*x6929)));
evalcond[3]=((((-1.0)*x6926*x6933))+x6936+((sj6*x6918))+(((-1.0)*x6923*x6926))+((r01*x6919)));
evalcond[4]=((0.1255)+((r20*x6930))+(((0.02626)*x6938))+(((0.1158)*cj2))+(((-0.0718)*x6937))+pz+(((-1.0)*r21*x6928))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x6923*x6924))+((cj0*r01*x6922))+((r02*x6921))+x6934+((r00*sj5*x6919))+((x6918*x6922)));
evalcond[6]=(((r10*sj5*x6919))+(((-1.0)*x6917))+(((-1.0)*r00*x6924*x6927))+(((-1.0)*r01*x6922*x6927))+((r12*x6921))+((cj0*r11*x6922))+(((-1.0)*r02*sj0*x6925)));
evalcond[7]=((0.09736)+(((-1.0)*sj0*sj6*x6920))+(((0.02626)*x6916))+(((-1.0)*py*x6932))+((px*sj0))+((r00*sj0*x6930))+(((0.0718)*x6917))+(((-1.0)*x6929*x6930))+(((0.026255)*r11*x6919)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((0.02626)*x6936))+(((-1.0)*px*x6932))+(((-1.0)*x6930*x6933))+((x6919*x6920))+(((0.0009)*cj2))+(((-0.0718)*x6934))+(((-1.0)*py*x6927))+((x6918*x6928))+(((-1.0)*x6923*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6939=((1.0)*cj6);
CheckValue<IkReal> x6940=IKPowWithIntegerCheck(sj2,-1);
if(!x6940.valid){
continue;
}
if( IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x6939))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6940.value)*((((r21*sj6))+(((-1.0)*r20*x6939)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x6939))+(((-1.0)*cj0*r11*sj6))))+IKsqr(((x6940.value)*((((r21*sj6))+(((-1.0)*r20*x6939))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x6939))+(((-1.0)*cj0*r11*sj6))), ((x6940.value)*((((r21*sj6))+(((-1.0)*r20*x6939))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6941=IKsin(j4);
IkReal x6942=IKcos(j4);
IkReal x6943=(r11*sj0);
IkReal x6944=(cj0*sj6);
IkReal x6945=((0.026255)*r01);
IkReal x6946=(cj0*cj5);
IkReal x6947=(cj6*sj5);
IkReal x6948=(r10*sj0);
IkReal x6949=(sj5*sj6);
IkReal x6950=((1.0)*cj5);
IkReal x6951=((1.0)*cj6);
IkReal x6952=((1.0)*sj0);
IkReal x6953=((0.026255)*sj6);
IkReal x6954=(cj0*r10);
IkReal x6955=((0.026255)*cj6);
IkReal x6956=((1.0)*r21);
IkReal x6957=((1.0)*cj0);
IkReal x6958=(cj0*r00);
IkReal x6959=(cj2*x6941);
IkReal x6960=(cj6*r00*sj0);
IkReal x6961=(cj2*x6942);
IkReal x6962=(sj2*x6941);
IkReal x6963=(sj2*x6942);
evalcond[0]=((((-1.0)*sj6*x6956))+((cj6*r20))+x6963);
evalcond[1]=((((-1.0)*r22*x6950))+(((-1.0)*x6947*x6956))+x6962+(((-1.0)*r20*x6949)));
evalcond[2]=((((-1.0)*r01*sj6*x6952))+(((-1.0)*x6951*x6954))+x6960+x6941+((r11*x6944)));
evalcond[3]=(((sj6*x6943))+(((-1.0)*x6951*x6958))+(((-1.0)*x6948*x6951))+((r01*x6944))+x6961);
evalcond[4]=((0.1255)+(((-1.0)*r21*x6953))+(((0.1158)*cj2))+((r20*x6955))+pz+(((0.02626)*x6963))+(((0.0009)*sj2))+(((-0.0718)*x6962)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x6944))+((r02*x6946))+((cj0*r01*x6947))+((x6943*x6947))+x6959+((x6948*x6949)));
evalcond[6]=(((cj0*r11*x6947))+(((-1.0)*r02*sj0*x6950))+(((-1.0)*x6942))+(((-1.0)*r00*x6949*x6952))+((r10*sj5*x6944))+((r12*x6946))+(((-1.0)*r01*x6947*x6952)));
evalcond[7]=((0.09736)+(((0.0718)*x6942))+(((0.02626)*x6941))+(((0.026255)*r11*x6944))+(((-1.0)*sj0*sj6*x6945))+((px*sj0))+((r00*sj0*x6955))+(((-1.0)*x6954*x6955))+(((-1.0)*py*x6957)));
evalcond[8]=((-0.001)+((x6944*x6945))+(((-0.1158)*sj2))+(((-1.0)*x6955*x6958))+(((-1.0)*x6948*x6955))+(((-1.0)*px*x6957))+(((0.0009)*cj2))+((x6943*x6953))+(((0.02626)*x6961))+(((-0.0718)*x6959))+(((-1.0)*py*x6952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x6964.valid){
continue;
}
CheckValue<IkReal> x6965 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x6965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6964.value)))+(x6965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6966=IKsin(j4);
IkReal x6967=IKcos(j4);
IkReal x6968=(r11*sj0);
IkReal x6969=(cj0*sj6);
IkReal x6970=((0.026255)*r01);
IkReal x6971=(cj0*cj5);
IkReal x6972=(cj6*sj5);
IkReal x6973=(r10*sj0);
IkReal x6974=(sj5*sj6);
IkReal x6975=((1.0)*cj5);
IkReal x6976=((1.0)*cj6);
IkReal x6977=((1.0)*sj0);
IkReal x6978=((0.026255)*sj6);
IkReal x6979=(cj0*r10);
IkReal x6980=((0.026255)*cj6);
IkReal x6981=((1.0)*r21);
IkReal x6982=((1.0)*cj0);
IkReal x6983=(cj0*r00);
IkReal x6984=(cj2*x6966);
IkReal x6985=(cj6*r00*sj0);
IkReal x6986=(cj2*x6967);
IkReal x6987=(sj2*x6966);
IkReal x6988=(sj2*x6967);
evalcond[0]=((((-1.0)*sj6*x6981))+((cj6*r20))+x6988);
evalcond[1]=((((-1.0)*r20*x6974))+(((-1.0)*x6972*x6981))+(((-1.0)*r22*x6975))+x6987);
evalcond[2]=((((-1.0)*x6976*x6979))+(((-1.0)*r01*sj6*x6977))+x6985+x6966+((r11*x6969)));
evalcond[3]=(((r01*x6969))+((sj6*x6968))+x6986+(((-1.0)*x6973*x6976))+(((-1.0)*x6976*x6983)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((0.02626)*x6988))+((r20*x6980))+(((-1.0)*r21*x6978))+(((-0.0718)*x6987))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x6968*x6972))+((cj0*r01*x6972))+((r02*x6971))+((r00*sj5*x6969))+x6984+((x6973*x6974)));
evalcond[6]=(((r12*x6971))+(((-1.0)*x6967))+(((-1.0)*r01*x6972*x6977))+((cj0*r11*x6972))+((r10*sj5*x6969))+(((-1.0)*r00*x6974*x6977))+(((-1.0)*r02*sj0*x6975)));
evalcond[7]=((0.09736)+(((0.0718)*x6967))+(((0.026255)*r11*x6969))+(((-1.0)*x6979*x6980))+((px*sj0))+((r00*sj0*x6980))+(((0.02626)*x6966))+(((-1.0)*py*x6982))+(((-1.0)*sj0*sj6*x6970)));
evalcond[8]=((-0.001)+((x6969*x6970))+((x6968*x6978))+(((-1.0)*px*x6982))+(((-0.1158)*sj2))+(((0.02626)*x6986))+(((0.0009)*cj2))+(((-1.0)*x6973*x6980))+(((-0.0718)*x6984))+(((-1.0)*x6980*x6983))+(((-1.0)*py*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6989=(cj0*sj5);
IkReal x6990=(cj5*cj6);
IkReal x6991=((1.0)*sj5);
IkReal x6992=((1.0)*cj0);
IkReal x6993=((1.0)*sj0);
IkReal x6994=(cj5*sj6);
IkReal x6995=(r10*x6994);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x6990))+((r20*x6994))+(((-1.0)*r22*x6991))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*x6993*x6995))+sj2+(((-1.0)*r11*x6990*x6993))+((r12*sj0*sj5))+((r02*x6989))+(((-1.0)*r01*x6990*x6992))+(((-1.0)*r00*x6992*x6994)));
evalcond[3]=((((-1.0)*r11*x6990*x6992))+((r00*sj0*x6994))+(((-1.0)*r02*sj0*x6991))+(((-1.0)*x6992*x6995))+((r12*x6989))+((r01*sj0*x6990)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6996=((1.0)*sj6);
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(sj2,-1);
if(!x6997.valid){
continue;
}
CheckValue<IkReal> x6998=IKPowWithIntegerCheck(cj2,-1);
if(!x6998.valid){
continue;
}
if( IKabs(((x6997.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6998.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6996))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x6996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6997.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x6998.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6996))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x6996))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6997.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x6998.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x6996))+((cj0*cj6*r00))+(((-1.0)*r11*sj0*x6996))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x6999=IKcos(j4);
IkReal x7000=IKsin(j4);
IkReal x7001=(r11*sj0);
IkReal x7002=(cj0*sj6);
IkReal x7003=((0.026255)*r01);
IkReal x7004=(cj0*cj5);
IkReal x7005=(cj6*sj5);
IkReal x7006=(r10*sj0);
IkReal x7007=(sj5*sj6);
IkReal x7008=((1.0)*cj5);
IkReal x7009=((1.0)*cj6);
IkReal x7010=((1.0)*sj0);
IkReal x7011=((0.026255)*sj6);
IkReal x7012=(cj0*r10);
IkReal x7013=((0.026255)*cj6);
IkReal x7014=((1.0)*r21);
IkReal x7015=((1.0)*cj0);
IkReal x7016=(cj0*r00);
IkReal x7017=(cj2*x7000);
IkReal x7018=(cj6*r00*sj0);
IkReal x7019=(cj2*x6999);
IkReal x7020=(sj2*x7000);
IkReal x7021=(sj2*x6999);
evalcond[0]=(x7021+((cj6*r20))+(((-1.0)*sj6*x7014)));
evalcond[1]=((((-1.0)*r22*x7008))+x7020+(((-1.0)*r20*x7007))+(((-1.0)*x7005*x7014)));
evalcond[2]=((((-1.0)*x7009*x7016))+x7019+(((-1.0)*x7006*x7009))+((sj6*x7001))+((r01*x7002)));
evalcond[3]=((((-1.0)*x7000))+(((-1.0)*x7009*x7012))+(((-1.0)*r01*sj6*x7010))+x7018+((r11*x7002)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((0.02626)*x7021))+pz+((r20*x7013))+(((-0.0718)*x7020))+(((0.0009)*sj2))+(((-1.0)*r21*x7011)));
evalcond[5]=(((cj5*r12*sj0))+x7017+((cj0*r01*x7005))+((x7001*x7005))+((r02*x7004))+((x7006*x7007))+((r00*sj5*x7002)));
evalcond[6]=((((-1.0)*r02*sj0*x7008))+((r10*sj5*x7002))+(((-1.0)*r00*x7007*x7010))+((r12*x7004))+((cj0*r11*x7005))+x6999+(((-1.0)*r01*x7005*x7010)));
evalcond[7]=((-0.09756)+(((-1.0)*x7012*x7013))+(((-1.0)*py*x7015))+(((0.026255)*r11*x7002))+(((-0.02626)*x7000))+((px*sj0))+((r00*sj0*x7013))+(((-0.0718)*x6999))+(((-1.0)*sj0*sj6*x7003)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*py*x7010))+((x7002*x7003))+(((0.0009)*cj2))+(((-0.0718)*x7017))+(((-1.0)*x7013*x7016))+(((0.02626)*x7019))+(((-1.0)*x7006*x7013))+(((-1.0)*px*x7015))+((x7001*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7022=((1.0)*cj6);
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(sj2,-1);
if(!x7023.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7022))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7023.value)*((((r21*sj6))+(((-1.0)*r20*x7022)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7022))+(((-1.0)*r01*sj0*sj6))))+IKsqr(((x7023.value)*((((r21*sj6))+(((-1.0)*r20*x7022))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7022))+(((-1.0)*r01*sj0*sj6))), ((x7023.value)*((((r21*sj6))+(((-1.0)*r20*x7022))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7024=IKcos(j4);
IkReal x7025=IKsin(j4);
IkReal x7026=(r11*sj0);
IkReal x7027=(cj0*sj6);
IkReal x7028=((0.026255)*r01);
IkReal x7029=(cj0*cj5);
IkReal x7030=(cj6*sj5);
IkReal x7031=(r10*sj0);
IkReal x7032=(sj5*sj6);
IkReal x7033=((1.0)*cj5);
IkReal x7034=((1.0)*cj6);
IkReal x7035=((1.0)*sj0);
IkReal x7036=((0.026255)*sj6);
IkReal x7037=(cj0*r10);
IkReal x7038=((0.026255)*cj6);
IkReal x7039=((1.0)*r21);
IkReal x7040=((1.0)*cj0);
IkReal x7041=(cj0*r00);
IkReal x7042=(cj2*x7025);
IkReal x7043=(cj6*r00*sj0);
IkReal x7044=(cj2*x7024);
IkReal x7045=(sj2*x7025);
IkReal x7046=(sj2*x7024);
evalcond[0]=(x7046+(((-1.0)*sj6*x7039))+((cj6*r20)));
evalcond[1]=(x7045+(((-1.0)*r22*x7033))+(((-1.0)*x7030*x7039))+(((-1.0)*r20*x7032)));
evalcond[2]=(x7044+(((-1.0)*x7031*x7034))+(((-1.0)*x7034*x7041))+((r01*x7027))+((sj6*x7026)));
evalcond[3]=(x7043+(((-1.0)*x7034*x7037))+((r11*x7027))+(((-1.0)*r01*sj6*x7035))+(((-1.0)*x7025)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+((r20*x7038))+(((0.02626)*x7046))+pz+(((-1.0)*r21*x7036))+(((0.0009)*sj2))+(((-0.0718)*x7045)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x7027))+x7042+((x7026*x7030))+((r02*x7029))+((x7031*x7032))+((cj0*r01*x7030)));
evalcond[6]=(x7024+((r12*x7029))+(((-1.0)*r01*x7030*x7035))+((r10*sj5*x7027))+(((-1.0)*r02*sj0*x7033))+((cj0*r11*x7030))+(((-1.0)*r00*x7032*x7035)));
evalcond[7]=((-0.09756)+(((-1.0)*sj0*sj6*x7028))+(((-1.0)*py*x7040))+(((-1.0)*x7037*x7038))+((r00*sj0*x7038))+(((0.026255)*r11*x7027))+((px*sj0))+(((-0.0718)*x7024))+(((-0.02626)*x7025)));
evalcond[8]=((-0.001)+(((-1.0)*x7031*x7038))+(((-1.0)*py*x7035))+(((-0.1158)*sj2))+((x7026*x7036))+((x7027*x7028))+(((0.0009)*cj2))+(((0.02626)*x7044))+(((-1.0)*x7038*x7041))+(((-0.0718)*x7042))+(((-1.0)*px*x7040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7047=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x7047.valid){
continue;
}
CheckValue<IkReal> x7048 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x7048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7047.value)))+(x7048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7049=IKcos(j4);
IkReal x7050=IKsin(j4);
IkReal x7051=(r11*sj0);
IkReal x7052=(cj0*sj6);
IkReal x7053=((0.026255)*r01);
IkReal x7054=(cj0*cj5);
IkReal x7055=(cj6*sj5);
IkReal x7056=(r10*sj0);
IkReal x7057=(sj5*sj6);
IkReal x7058=((1.0)*cj5);
IkReal x7059=((1.0)*cj6);
IkReal x7060=((1.0)*sj0);
IkReal x7061=((0.026255)*sj6);
IkReal x7062=(cj0*r10);
IkReal x7063=((0.026255)*cj6);
IkReal x7064=((1.0)*r21);
IkReal x7065=((1.0)*cj0);
IkReal x7066=(cj0*r00);
IkReal x7067=(cj2*x7050);
IkReal x7068=(cj6*r00*sj0);
IkReal x7069=(cj2*x7049);
IkReal x7070=(sj2*x7050);
IkReal x7071=(sj2*x7049);
evalcond[0]=(x7071+((cj6*r20))+(((-1.0)*sj6*x7064)));
evalcond[1]=(x7070+(((-1.0)*r22*x7058))+(((-1.0)*r20*x7057))+(((-1.0)*x7055*x7064)));
evalcond[2]=((((-1.0)*x7059*x7066))+x7069+((sj6*x7051))+(((-1.0)*x7056*x7059))+((r01*x7052)));
evalcond[3]=((((-1.0)*x7059*x7062))+x7068+(((-1.0)*r01*sj6*x7060))+(((-1.0)*x7050))+((r11*x7052)));
evalcond[4]=((0.1255)+(((-1.0)*r21*x7061))+(((0.1158)*cj2))+pz+((r20*x7063))+(((-0.0718)*x7070))+(((0.02626)*x7071))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x7056*x7057))+x7067+((x7051*x7055))+((r00*sj5*x7052))+((r02*x7054))+((cj0*r01*x7055)));
evalcond[6]=(x7049+(((-1.0)*r00*x7057*x7060))+(((-1.0)*r01*x7055*x7060))+(((-1.0)*r02*sj0*x7058))+((r12*x7054))+((cj0*r11*x7055))+((r10*sj5*x7052)));
evalcond[7]=((-0.09756)+((r00*sj0*x7063))+(((0.026255)*r11*x7052))+(((-1.0)*sj0*sj6*x7053))+(((-1.0)*x7062*x7063))+(((-1.0)*py*x7065))+((px*sj0))+(((-0.02626)*x7050))+(((-0.0718)*x7049)));
evalcond[8]=((-0.001)+(((-1.0)*x7056*x7063))+(((-0.1158)*sj2))+(((-1.0)*x7063*x7066))+((x7051*x7061))+(((0.0009)*cj2))+(((-1.0)*px*x7065))+(((-0.0718)*x7067))+(((-1.0)*py*x7060))+(((0.02626)*x7069))+((x7052*x7053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7079=IKPowWithIntegerCheck(sj3,-1);
if(!x7079.valid){
continue;
}
IkReal x7072=x7079.value;
IkReal x7073=((1.0)*cj6);
IkReal x7074=(cj0*r10);
IkReal x7075=(cj2*cj3);
IkReal x7076=(r00*sj0);
IkReal x7077=(r01*sj0*sj6);
IkReal x7078=(cj0*r11*sj6);
CheckValue<IkReal> x7080=IKPowWithIntegerCheck(sj2,-1);
if(!x7080.valid){
continue;
}
if( IKabs((x7072*((x7077+(((-1.0)*x7073*x7076))+(((-1.0)*x7078))+((cj6*x7074)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7072*(x7080.value)*((((cj6*x7075*x7076))+(((-1.0)*r20*sj3*x7073))+(((-1.0)*x7075*x7077))+((x7075*x7078))+(((-1.0)*x7073*x7074*x7075))+((r21*sj3*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7072*((x7077+(((-1.0)*x7073*x7076))+(((-1.0)*x7078))+((cj6*x7074))))))+IKsqr((x7072*(x7080.value)*((((cj6*x7075*x7076))+(((-1.0)*r20*sj3*x7073))+(((-1.0)*x7075*x7077))+((x7075*x7078))+(((-1.0)*x7073*x7074*x7075))+((r21*sj3*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x7072*((x7077+(((-1.0)*x7073*x7076))+(((-1.0)*x7078))+((cj6*x7074))))), (x7072*(x7080.value)*((((cj6*x7075*x7076))+(((-1.0)*r20*sj3*x7073))+(((-1.0)*x7075*x7077))+((x7075*x7078))+(((-1.0)*x7073*x7074*x7075))+((r21*sj3*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7081=IKsin(j4);
IkReal x7082=IKcos(j4);
IkReal x7083=(r11*sj6);
IkReal x7084=((0.026255)*cj0);
IkReal x7085=(r01*sj6);
IkReal x7086=(sj0*sj5);
IkReal x7087=(cj6*r11);
IkReal x7088=(r10*sj6);
IkReal x7089=((0.026255)*sj0);
IkReal x7090=(cj0*cj5);
IkReal x7091=(cj6*r00);
IkReal x7092=((1.0)*cj5);
IkReal x7093=(cj2*cj3);
IkReal x7094=((1.0)*cj6);
IkReal x7095=((1.0)*cj3);
IkReal x7096=((1.0)*sj0);
IkReal x7097=(cj0*sj5);
IkReal x7098=(r00*sj6);
IkReal x7099=((0.0718)*cj3);
IkReal x7100=(cj3*sj2);
IkReal x7101=(cj6*r20);
IkReal x7102=((1.0)*cj0);
IkReal x7103=(cj6*r10);
IkReal x7104=((1.0)*sj6);
IkReal x7105=((0.02626)*x7081);
IkReal x7106=(cj2*x7081);
IkReal x7107=(cj2*x7082);
IkReal x7108=(sj2*x7081);
IkReal x7109=(sj3*x7082);
IkReal x7110=(sj2*x7082);
evalcond[0]=(x7101+x7110+((x7081*x7093))+(((-1.0)*r21*x7104)));
evalcond[1]=(((sj3*x7081))+(((-1.0)*cj0*r10*x7094))+(((-1.0)*x7085*x7096))+((cj0*x7083))+((sj0*x7091)));
evalcond[2]=(x7108+(((-1.0)*x7082*x7093))+(((-1.0)*r22*x7092))+(((-1.0)*r21*sj5*x7094))+(((-1.0)*r20*sj5*x7104)));
evalcond[3]=(x7107+(((-1.0)*x7091*x7102))+(((-1.0)*r10*sj0*x7094))+(((-1.0)*x7095*x7108))+((sj0*x7083))+((cj0*x7085)));
evalcond[4]=((((-1.0)*r02*sj0*x7092))+(((-1.0)*x7109))+((r12*x7090))+((x7088*x7097))+(((-1.0)*x7086*x7098))+((x7087*x7097))+(((-1.0)*r01*x7086*x7094)));
evalcond[5]=(x7106+((cj5*r12*sj0))+((x7097*x7098))+((r02*x7090))+((x7082*x7100))+((cj6*r01*x7097))+((x7086*x7088))+((x7086*x7087)));
evalcond[6]=((-0.0001)+(((0.0718)*x7109))+(((-1.0)*py*x7102))+((px*sj0))+(((0.09746)*sj3))+((sj3*x7105))+(((-1.0)*x7085*x7089))+((x7083*x7084))+(((-1.0)*x7084*x7103))+((x7089*x7091)));
evalcond[7]=((0.1255)+(((0.026255)*x7101))+(((0.0718)*x7082*x7093))+(((0.1158)*cj2))+(((-0.026255)*r21*sj6))+(((0.02626)*x7110))+((x7093*x7105))+pz+(((-0.0718)*x7108))+(((0.09746)*x7093))+(((0.0009)*sj2)));
evalcond[8]=((-0.001)+(((-1.0)*x7089*x7103))+(((-0.1158)*sj2))+(((-1.0)*x7084*x7091))+(((-1.0)*x7100*x7105))+(((-0.09746)*x7100))+(((0.0009)*cj2))+(((0.02626)*x7107))+(((-1.0)*x7099*x7110))+(((-0.0718)*x7106))+(((-1.0)*py*x7096))+(((-1.0)*px*x7102))+((x7083*x7089))+((x7084*x7085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7111=(sj2*sj6);
IkReal x7112=(cj0*r01);
IkReal x7113=((1.0)*sj0);
IkReal x7114=(cj6*sj2);
IkReal x7115=(cj2*sj6);
IkReal x7116=((1.0)*r20);
IkReal x7117=(cj0*r00);
IkReal x7118=(cj2*cj6);
CheckValue<IkReal> x7119=IKPowWithIntegerCheck(cj3,-1);
if(!x7119.valid){
continue;
}
if( IKabs(((x7119.value)*(((((-1.0)*x7116*x7118))+((r21*x7115))+((x7111*x7112))+((r11*sj0*x7111))+(((-1.0)*x7114*x7117))+(((-1.0)*r10*x7113*x7114)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7117*x7118))+((r21*x7111))+(((-1.0)*x7112*x7115))+((r10*sj0*x7118))+(((-1.0)*r11*x7113*x7115))+(((-1.0)*x7114*x7116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7119.value)*(((((-1.0)*x7116*x7118))+((r21*x7115))+((x7111*x7112))+((r11*sj0*x7111))+(((-1.0)*x7114*x7117))+(((-1.0)*r10*x7113*x7114))))))+IKsqr((((x7117*x7118))+((r21*x7111))+(((-1.0)*x7112*x7115))+((r10*sj0*x7118))+(((-1.0)*r11*x7113*x7115))+(((-1.0)*x7114*x7116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7119.value)*(((((-1.0)*x7116*x7118))+((r21*x7115))+((x7111*x7112))+((r11*sj0*x7111))+(((-1.0)*x7114*x7117))+(((-1.0)*r10*x7113*x7114))))), (((x7117*x7118))+((r21*x7111))+(((-1.0)*x7112*x7115))+((r10*sj0*x7118))+(((-1.0)*r11*x7113*x7115))+(((-1.0)*x7114*x7116))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7120=IKsin(j4);
IkReal x7121=IKcos(j4);
IkReal x7122=(r11*sj6);
IkReal x7123=((0.026255)*cj0);
IkReal x7124=(r01*sj6);
IkReal x7125=(sj0*sj5);
IkReal x7126=(cj6*r11);
IkReal x7127=(r10*sj6);
IkReal x7128=((0.026255)*sj0);
IkReal x7129=(cj0*cj5);
IkReal x7130=(cj6*r00);
IkReal x7131=((1.0)*cj5);
IkReal x7132=(cj2*cj3);
IkReal x7133=((1.0)*cj6);
IkReal x7134=((1.0)*cj3);
IkReal x7135=((1.0)*sj0);
IkReal x7136=(cj0*sj5);
IkReal x7137=(r00*sj6);
IkReal x7138=((0.0718)*cj3);
IkReal x7139=(cj3*sj2);
IkReal x7140=(cj6*r20);
IkReal x7141=((1.0)*cj0);
IkReal x7142=(cj6*r10);
IkReal x7143=((1.0)*sj6);
IkReal x7144=((0.02626)*x7120);
IkReal x7145=(cj2*x7120);
IkReal x7146=(cj2*x7121);
IkReal x7147=(sj2*x7120);
IkReal x7148=(sj3*x7121);
IkReal x7149=(sj2*x7121);
evalcond[0]=(x7149+x7140+((x7120*x7132))+(((-1.0)*r21*x7143)));
evalcond[1]=(((sj3*x7120))+(((-1.0)*x7124*x7135))+((sj0*x7130))+((cj0*x7122))+(((-1.0)*cj0*r10*x7133)));
evalcond[2]=(x7147+(((-1.0)*x7121*x7132))+(((-1.0)*r22*x7131))+(((-1.0)*r20*sj5*x7143))+(((-1.0)*r21*sj5*x7133)));
evalcond[3]=(x7146+(((-1.0)*x7134*x7147))+((cj0*x7124))+(((-1.0)*r10*sj0*x7133))+((sj0*x7122))+(((-1.0)*x7130*x7141)));
evalcond[4]=(((x7126*x7136))+((x7127*x7136))+(((-1.0)*x7148))+(((-1.0)*r02*sj0*x7131))+(((-1.0)*x7125*x7137))+((r12*x7129))+(((-1.0)*r01*x7125*x7133)));
evalcond[5]=(x7145+((cj5*r12*sj0))+((x7121*x7139))+((r02*x7129))+((x7136*x7137))+((x7125*x7126))+((x7125*x7127))+((cj6*r01*x7136)));
evalcond[6]=((-0.0001)+(((0.0718)*x7148))+(((-1.0)*x7123*x7142))+(((-1.0)*py*x7141))+((sj3*x7144))+((px*sj0))+(((0.09746)*sj3))+(((-1.0)*x7124*x7128))+((x7128*x7130))+((x7122*x7123)));
evalcond[7]=((0.1255)+(((0.1158)*cj2))+((x7132*x7144))+(((-0.026255)*r21*sj6))+(((0.026255)*x7140))+(((-0.0718)*x7147))+pz+(((0.02626)*x7149))+(((0.0009)*sj2))+(((0.09746)*x7132))+(((0.0718)*x7121*x7132)));
evalcond[8]=((-0.001)+(((-1.0)*x7123*x7130))+(((-0.1158)*sj2))+((x7123*x7124))+(((-1.0)*py*x7135))+(((-1.0)*x7138*x7149))+(((-0.0718)*x7145))+(((0.0009)*cj2))+(((-1.0)*px*x7141))+(((-1.0)*x7128*x7142))+(((-1.0)*x7139*x7144))+(((0.02626)*x7146))+(((-0.09746)*x7139))+((x7122*x7128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7150=cj2*cj2;
IkReal x7151=(cj2*cj3);
IkReal x7152=(cj6*r20);
IkReal x7153=(cj5*r22);
IkReal x7154=(r20*sj5);
IkReal x7155=((1.0)*sj2);
IkReal x7156=(sj6*x7155);
IkReal x7157=(cj6*r21*sj5);
CheckValue<IkReal> x7158 = IKatan2WithCheck(IkReal(((((-1.0)*x7153*x7155))+(((-1.0)*x7155*x7157))+(((-1.0)*x7154*x7156))+(((-1.0)*r21*sj6*x7151))+((x7151*x7152)))),(((sj2*x7152))+((sj6*x7151*x7154))+(((-1.0)*r21*x7156))+((x7151*x7157))+((x7151*x7153))),IKFAST_ATAN2_MAGTHRESH);
if(!x7158.valid){
continue;
}
CheckValue<IkReal> x7159=IKPowWithIntegerCheck(IKsign(((-1.0)+x7150+(((-1.0)*x7150*(cj3*cj3))))),-1);
if(!x7159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7158.value)+(((1.5707963267949)*(x7159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7160=IKsin(j4);
IkReal x7161=IKcos(j4);
IkReal x7162=(r11*sj6);
IkReal x7163=((0.026255)*cj0);
IkReal x7164=(r01*sj6);
IkReal x7165=(sj0*sj5);
IkReal x7166=(cj6*r11);
IkReal x7167=(r10*sj6);
IkReal x7168=((0.026255)*sj0);
IkReal x7169=(cj0*cj5);
IkReal x7170=(cj6*r00);
IkReal x7171=((1.0)*cj5);
IkReal x7172=(cj2*cj3);
IkReal x7173=((1.0)*cj6);
IkReal x7174=((1.0)*cj3);
IkReal x7175=((1.0)*sj0);
IkReal x7176=(cj0*sj5);
IkReal x7177=(r00*sj6);
IkReal x7178=((0.0718)*cj3);
IkReal x7179=(cj3*sj2);
IkReal x7180=(cj6*r20);
IkReal x7181=((1.0)*cj0);
IkReal x7182=(cj6*r10);
IkReal x7183=((1.0)*sj6);
IkReal x7184=((0.02626)*x7160);
IkReal x7185=(cj2*x7160);
IkReal x7186=(cj2*x7161);
IkReal x7187=(sj2*x7160);
IkReal x7188=(sj3*x7161);
IkReal x7189=(sj2*x7161);
evalcond[0]=(x7189+x7180+((x7160*x7172))+(((-1.0)*r21*x7183)));
evalcond[1]=(((sj0*x7170))+(((-1.0)*cj0*r10*x7173))+((sj3*x7160))+((cj0*x7162))+(((-1.0)*x7164*x7175)));
evalcond[2]=(x7187+(((-1.0)*r21*sj5*x7173))+(((-1.0)*r20*sj5*x7183))+(((-1.0)*r22*x7171))+(((-1.0)*x7161*x7172)));
evalcond[3]=(x7186+(((-1.0)*x7170*x7181))+(((-1.0)*r10*sj0*x7173))+(((-1.0)*x7174*x7187))+((cj0*x7164))+((sj0*x7162)));
evalcond[4]=((((-1.0)*r01*x7165*x7173))+((x7166*x7176))+(((-1.0)*x7165*x7177))+(((-1.0)*r02*sj0*x7171))+((r12*x7169))+((x7167*x7176))+(((-1.0)*x7188)));
evalcond[5]=(x7185+((cj5*r12*sj0))+((x7161*x7179))+((x7176*x7177))+((x7165*x7167))+((x7165*x7166))+((cj6*r01*x7176))+((r02*x7169)));
evalcond[6]=((-0.0001)+((x7162*x7163))+(((-1.0)*x7164*x7168))+((sj3*x7184))+(((-1.0)*py*x7181))+(((0.0718)*x7188))+(((-1.0)*x7163*x7182))+((px*sj0))+(((0.09746)*sj3))+((x7168*x7170)));
evalcond[7]=((0.1255)+(((-0.0718)*x7187))+(((0.1158)*cj2))+(((-0.026255)*r21*sj6))+(((0.02626)*x7189))+pz+((x7172*x7184))+(((0.09746)*x7172))+(((0.026255)*x7180))+(((0.0009)*sj2))+(((0.0718)*x7161*x7172)));
evalcond[8]=((-0.001)+(((-0.0718)*x7185))+((x7162*x7168))+(((-1.0)*x7168*x7182))+(((-1.0)*x7178*x7189))+(((-1.0)*px*x7181))+(((-0.1158)*sj2))+(((-0.09746)*x7179))+(((-1.0)*x7179*x7184))+(((0.02626)*x7186))+(((0.0009)*cj2))+(((-1.0)*py*x7175))+((x7163*x7164))+(((-1.0)*x7163*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j4]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7190=((1.0)*cj5);
IkReal x7191=(sj0*sj6);
IkReal x7192=(r02*sj5);
IkReal x7193=(cj6*r01);
IkReal x7194=(cj6*r11);
IkReal x7195=(r12*sj5);
IkReal x7196=(cj0*sj6);
CheckValue<IkReal> x7197=IKPowWithIntegerCheck(cj1,-1);
if(!x7197.valid){
continue;
}
if( IKabs(((((-1.0)*r10*x7190*x7191))+(((-1.0)*r00*x7190*x7196))+(((-1.0)*cj0*x7190*x7193))+(((-1.0)*sj0*x7190*x7194))+((sj0*x7195))+((cj0*x7192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7197.value)*(((((-1.0)*r00*x7190*x7191))+(((-1.0)*cj0*x7195))+((cj5*r10*x7196))+((cj0*cj5*x7194))+(((-1.0)*sj0*x7190*x7193))+((sj0*x7192)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7190*x7191))+(((-1.0)*r00*x7190*x7196))+(((-1.0)*cj0*x7190*x7193))+(((-1.0)*sj0*x7190*x7194))+((sj0*x7195))+((cj0*x7192))))+IKsqr(((x7197.value)*(((((-1.0)*r00*x7190*x7191))+(((-1.0)*cj0*x7195))+((cj5*r10*x7196))+((cj0*cj5*x7194))+(((-1.0)*sj0*x7190*x7193))+((sj0*x7192))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r10*x7190*x7191))+(((-1.0)*r00*x7190*x7196))+(((-1.0)*cj0*x7190*x7193))+(((-1.0)*sj0*x7190*x7194))+((sj0*x7195))+((cj0*x7192))), ((x7197.value)*(((((-1.0)*r00*x7190*x7191))+(((-1.0)*cj0*x7195))+((cj5*r10*x7196))+((cj0*cj5*x7194))+(((-1.0)*sj0*x7190*x7193))+((sj0*x7192))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x7198=IKcos(j3);
IkReal x7199=(cj5*cj6);
IkReal x7200=((1.0)*cj0);
IkReal x7201=((1.0)*sj5);
IkReal x7202=(cj0*sj5);
IkReal x7203=((1.0)*sj0);
IkReal x7204=(cj5*sj6);
IkReal x7205=(r10*x7204);
evalcond[0]=((((-1.0)*sj1*x7198))+((r20*x7204))+((r21*x7199))+(((-1.0)*r22*x7201)));
evalcond[1]=((((-1.0)*r11*x7199*x7200))+((r01*sj0*x7199))+((cj1*x7198))+((r00*sj0*x7204))+((r12*x7202))+(((-1.0)*r02*sj0*x7201))+(((-1.0)*x7200*x7205)));
evalcond[2]=((((-1.0)*r11*x7199*x7203))+((r12*sj0*sj5))+(((-1.0)*(IKsin(j3))))+(((-1.0)*x7203*x7205))+(((-1.0)*r01*x7199*x7200))+(((-1.0)*r00*x7200*x7204))+((r02*x7202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x7206=cj3*cj3;
IkReal x7207=((1.0)+((x7206*(cj1*cj1)))+(((-1.0)*x7206)));
j4eval[0]=x7207;
j4eval[1]=IKsign(x7207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7208=(cj5*cj6);
IkReal x7209=(r11*sj0);
IkReal x7210=(cj0*sj6);
IkReal x7211=(cj6*sj5);
IkReal x7212=((1.0)*cj0);
IkReal x7213=(r10*sj0);
IkReal x7214=((1.0)*cj5);
IkReal x7215=(cj0*r02);
IkReal x7216=((1.0)*sj5);
IkReal x7217=(cj5*sj6);
IkReal x7218=(cj6*r00);
IkReal x7219=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x7208))+((r20*x7217))+(((-1.0)*r22*x7216)));
evalcond[2]=((((-1.0)*x7212*x7218))+(((-1.0)*cj6*x7213))+((sj6*x7209))+((r01*x7210)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7210*x7214))+(((-1.0)*sj6*x7213*x7214))+(((-1.0)*r01*x7208*x7212))+(((-1.0)*x7208*x7209))+((sj5*x7215))+((sj5*x7219)));
evalcond[4]=(((cj5*x7215))+((cj5*x7219))+((x7209*x7211))+((sj5*sj6*x7213))+((r00*sj5*x7210))+((cj0*r01*x7211)));
evalcond[5]=((((-1.0)*r10*x7210*x7214))+((r00*sj0*x7217))+(((-1.0)*r02*sj0*x7216))+(((-1.0)*r11*x7208*x7212))+((cj0*r12*sj5))+((r01*sj0*x7208)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x7210))+(((-0.026255)*cj0*x7218))+(((-1.0)*px*x7212))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x7213))+(((0.026255)*sj6*x7209)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=(cj1*r20);
IkReal x7221=((1.0)*sj6);
IkReal x7222=(r20*sj1);
IkReal x7223=((1.0)*cj5*r22);
IkReal x7224=((1.0)*cj6*r21*sj5);
if( IKabs(((((-1.0)*sj5*x7220*x7221))+(((-1.0)*cj1*x7224))+(((-1.0)*cj1*x7223))+(((-1.0)*cj6*x7222))+((r21*sj1*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x7224))+(((-1.0)*sj1*x7223))+(((-1.0)*sj5*x7221*x7222))+((cj6*x7220))+(((-1.0)*cj1*r21*x7221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x7220*x7221))+(((-1.0)*cj1*x7224))+(((-1.0)*cj1*x7223))+(((-1.0)*cj6*x7222))+((r21*sj1*sj6))))+IKsqr(((((-1.0)*sj1*x7224))+(((-1.0)*sj1*x7223))+(((-1.0)*sj5*x7221*x7222))+((cj6*x7220))+(((-1.0)*cj1*r21*x7221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj5*x7220*x7221))+(((-1.0)*cj1*x7224))+(((-1.0)*cj1*x7223))+(((-1.0)*cj6*x7222))+((r21*sj1*sj6))), ((((-1.0)*sj1*x7224))+(((-1.0)*sj1*x7223))+(((-1.0)*sj5*x7221*x7222))+((cj6*x7220))+(((-1.0)*cj1*r21*x7221))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7225=IKcos(j4);
IkReal x7226=IKsin(j4);
IkReal x7227=((1.0)*cj1);
IkReal x7228=((1.0)*cj5);
IkReal x7229=((0.02626)*cj1);
IkReal x7230=((1.0)*cj6);
IkReal x7231=(cj0*r10);
IkReal x7232=((0.026255)*cj6);
IkReal x7233=((1.0)*sj6);
IkReal x7234=(sj0*sj5);
IkReal x7235=(sj1*x7225);
IkReal x7236=(cj0*r11*sj6);
IkReal x7237=((0.0718)*x7226);
IkReal x7238=(sj1*x7226);
IkReal x7239=(cj6*r00*sj0);
IkReal x7240=(r01*sj0*sj6);
IkReal x7241=(cj1*x7225);
IkReal x7242=((1.0)*x7235);
IkReal x7243=(x7226*x7227);
IkReal x7244=(x7243+x7242);
evalcond[0]=((((-1.0)*x7225*x7227))+x7238+((cj6*r20))+(((-1.0)*r21*x7233)));
evalcond[1]=((((-1.0)*r21*sj5*x7230))+(((-1.0)*r20*sj5*x7233))+(((-1.0)*r22*x7228))+(((-1.0)*x7244)));
evalcond[2]=((((-1.0)*r01*sj0*x7233))+x7236+x7239+(((-1.0)*x7230*x7231))+(((-1.0)*x7244)));
evalcond[3]=((((0.02626)*x7238))+(((-1.0)*x7225*x7229))+(((0.09736)*sj1))+(((0.0718)*x7235))+((cj1*x7237))+(((-0.026255)*r21*sj6))+((r20*x7232))+(((-0.1264)*cj1))+pz);
evalcond[4]=(x7241+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*x7233*x7234))+(((-1.0)*r02*sj0*x7228))+((sj5*sj6*x7231))+(((-1.0)*x7238))+(((-1.0)*r01*x7230*x7234)));
evalcond[5]=((((-0.026255)*x7240))+(((-1.0)*x7231*x7232))+(((-0.1264)*sj1))+(((-0.09736)*cj1))+(((0.026255)*x7236))+((r00*sj0*x7232))+(((-0.0718)*x7241))+((px*sj0))+(((-0.02626)*x7235))+((sj1*x7237))+(((-1.0)*x7226*x7229))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7245=(cj5*cj6);
IkReal x7246=(r11*sj0);
IkReal x7247=(cj0*sj6);
IkReal x7248=(cj6*sj5);
IkReal x7249=((1.0)*cj0);
IkReal x7250=(r10*sj0);
IkReal x7251=((1.0)*cj5);
IkReal x7252=(cj0*r02);
IkReal x7253=((1.0)*sj5);
IkReal x7254=(cj5*sj6);
IkReal x7255=(cj6*r00);
IkReal x7256=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x7253))+((r20*x7254))+((r21*x7245)));
evalcond[2]=(((sj6*x7246))+(((-1.0)*x7249*x7255))+(((-1.0)*cj6*x7250))+((r01*x7247)));
evalcond[3]=((1.0)+(((-1.0)*x7245*x7246))+(((-1.0)*r00*x7247*x7251))+(((-1.0)*sj6*x7250*x7251))+(((-1.0)*r01*x7245*x7249))+((sj5*x7252))+((sj5*x7256)));
evalcond[4]=(((cj0*r01*x7248))+((sj5*sj6*x7250))+((x7246*x7248))+((cj5*x7256))+((cj5*x7252))+((r00*sj5*x7247)));
evalcond[5]=((((-1.0)*r11*x7245*x7249))+((r00*sj0*x7254))+(((-1.0)*r10*x7247*x7251))+(((-1.0)*r02*sj0*x7253))+((cj0*r12*sj5))+((r01*sj0*x7245)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj0*x7255))+(((-1.0)*py*sj0))+(((-1.0)*px*x7249))+(((-0.026255)*cj6*x7250))+(((0.026255)*sj6*x7246))+(((0.026255)*r01*x7247)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7257=(sj1*sj6);
IkReal x7258=(r20*sj5);
IkReal x7259=(cj1*cj6);
IkReal x7260=((1.0)*r21);
IkReal x7261=(cj5*r22);
IkReal x7262=(cj1*sj6);
IkReal x7263=(cj6*sj1);
if( IKabs(((((-1.0)*sj5*x7259*x7260))+(((-1.0)*x7257*x7260))+(((-1.0)*cj1*x7261))+((r20*x7263))+(((-1.0)*x7258*x7262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7257*x7258))+((sj1*x7261))+(((-1.0)*x7260*x7262))+((r20*x7259))+((r21*sj5*x7263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x7259*x7260))+(((-1.0)*x7257*x7260))+(((-1.0)*cj1*x7261))+((r20*x7263))+(((-1.0)*x7258*x7262))))+IKsqr((((x7257*x7258))+((sj1*x7261))+(((-1.0)*x7260*x7262))+((r20*x7259))+((r21*sj5*x7263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj5*x7259*x7260))+(((-1.0)*x7257*x7260))+(((-1.0)*cj1*x7261))+((r20*x7263))+(((-1.0)*x7258*x7262))), (((x7257*x7258))+((sj1*x7261))+(((-1.0)*x7260*x7262))+((r20*x7259))+((r21*sj5*x7263))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7264=IKcos(j4);
IkReal x7265=IKsin(j4);
IkReal x7266=((1.0)*cj1);
IkReal x7267=(cj0*sj6);
IkReal x7268=((1.0)*cj5);
IkReal x7269=((1.0)*cj6);
IkReal x7270=(cj0*r10);
IkReal x7271=((0.026255)*cj6);
IkReal x7272=((1.0)*sj6);
IkReal x7273=(sj0*sj5);
IkReal x7274=(sj1*x7264);
IkReal x7275=(cj1*x7265);
IkReal x7276=(sj1*x7265);
IkReal x7277=(cj6*r00*sj0);
IkReal x7278=(r01*sj0*sj6);
IkReal x7279=(cj1*x7264);
IkReal x7280=((1.0)*x7276);
IkReal x7281=(x7264*x7266);
IkReal x7282=(x7281+x7280);
evalcond[0]=((((-1.0)*r21*x7272))+(((-1.0)*x7282))+((cj6*r20)));
evalcond[1]=(x7274+(((-1.0)*r22*x7268))+(((-1.0)*r21*sj5*x7269))+(((-1.0)*x7265*x7266))+(((-1.0)*r20*sj5*x7272)));
evalcond[2]=(x7277+x7275+(((-1.0)*x7274))+((r11*x7267))+(((-1.0)*r01*sj0*x7272))+(((-1.0)*x7269*x7270)));
evalcond[3]=((((-0.02626)*x7279))+(((-0.02626)*x7276))+(((-0.026255)*r21*sj6))+((r20*x7271))+(((-0.1264)*cj1))+(((-0.0718)*x7274))+(((-0.09756)*sj1))+pz+(((0.0718)*x7275)));
evalcond[4]=((((-1.0)*r00*x7272*x7273))+(((-1.0)*r01*x7269*x7273))+(((-1.0)*x7282))+((cj0*cj5*r12))+((r10*sj5*x7267))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x7268)));
evalcond[5]=((((0.02626)*x7275))+(((-0.02626)*x7274))+(((-0.1264)*sj1))+((r00*sj0*x7271))+(((0.09756)*cj1))+((px*sj0))+(((-1.0)*x7270*x7271))+(((0.026255)*r11*x7267))+(((-0.026255)*x7278))+(((-1.0)*cj0*py))+(((0.0718)*x7279))+(((0.0718)*x7276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7283=(cj0*sj5);
IkReal x7284=(cj5*cj6);
IkReal x7285=((1.0)*sj5);
IkReal x7286=((1.0)*sj0);
IkReal x7287=((1.0)*cj0);
IkReal x7288=(cj5*sj6);
IkReal x7289=(r10*x7288);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj1))+((r21*x7284))+((r20*x7288))+(((-1.0)*r22*x7285)));
evalcond[2]=((((-1.0)*x7286*x7289))+((r02*x7283))+(((-1.0)*r00*x7287*x7288))+((r12*sj0*sj5))+(((-1.0)*r01*x7284*x7287))+(((-1.0)*r11*x7284*x7286)));
evalcond[3]=(cj1+((r01*sj0*x7284))+((r12*x7283))+(((-1.0)*r02*sj0*x7285))+(((-1.0)*x7287*x7289))+((r00*sj0*x7288))+(((-1.0)*r11*x7284*x7287)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x7290=((1.0)*r21);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*sj5*x7290))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))))+(IKabs(((((-1.0)*sj6*x7290))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7291=((1.0)*cj6);
IkReal x7292=((1.0)*sj6);
CheckValue<IkReal> x7293=IKPowWithIntegerCheck(cj1,-1);
if(!x7293.valid){
continue;
}
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(sj1,-1);
if(!x7294.valid){
continue;
}
if( IKabs(((x7293.value)*(((((-1.0)*r21*sj5*x7291))+(((-1.0)*r20*sj5*x7292))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7294.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7291))+(((-1.0)*r01*sj0*x7292)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7293.value)*(((((-1.0)*r21*sj5*x7291))+(((-1.0)*r20*sj5*x7292))+(((-1.0)*cj5*r22))))))+IKsqr(((x7294.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7291))+(((-1.0)*r01*sj0*x7292))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7293.value)*(((((-1.0)*r21*sj5*x7291))+(((-1.0)*r20*sj5*x7292))+(((-1.0)*cj5*r22))))), ((x7294.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7291))+(((-1.0)*r01*sj0*x7292))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7295=IKsin(j4);
IkReal x7296=IKcos(j4);
IkReal x7297=(cj0*sj6);
IkReal x7298=((0.026255)*r01);
IkReal x7299=(r11*sj0);
IkReal x7300=((1.0)*cj1);
IkReal x7301=(cj6*sj5);
IkReal x7302=(r10*sj0);
IkReal x7303=(sj5*sj6);
IkReal x7304=((1.0)*cj5);
IkReal x7305=((1.0)*cj6);
IkReal x7306=((1.0)*sj0);
IkReal x7307=((0.026255)*sj6);
IkReal x7308=(cj5*r12);
IkReal x7309=(cj0*r10);
IkReal x7310=((0.026255)*cj6);
IkReal x7311=((1.0)*r21);
IkReal x7312=((1.0)*cj0);
IkReal x7313=(sj1*x7296);
IkReal x7314=((0.0718)*x7295);
IkReal x7315=(r00*x7310);
IkReal x7316=((1.0)*x7295);
evalcond[0]=((((-1.0)*x7296*x7300))+(((-1.0)*sj6*x7311))+((cj6*r20)));
evalcond[1]=((((-1.0)*x7301*x7311))+(((-1.0)*r20*x7303))+(((-1.0)*x7295*x7300))+(((-1.0)*r22*x7304)));
evalcond[2]=((((-1.0)*cj0*r00*x7305))+(((-1.0)*x7302*x7305))+((r01*x7297))+(((-1.0)*x7316))+((sj6*x7299)));
evalcond[3]=((((-1.0)*x7313))+(((-1.0)*r01*sj6*x7306))+((cj6*r00*sj0))+((r11*x7297))+(((-1.0)*x7305*x7309)));
evalcond[4]=((((-0.02626)*cj1*x7296))+(((-0.0001)*sj1))+(((-1.0)*r21*x7307))+((cj1*x7314))+(((-0.1264)*cj1))+((r20*x7310))+pz);
evalcond[5]=(x7296+((cj0*cj5*r02))+((x7302*x7303))+((r00*sj5*x7297))+((cj0*r01*x7301))+((sj0*x7308))+((x7299*x7301)));
evalcond[6]=((((-1.0)*r01*x7301*x7306))+(((-1.0)*r02*sj0*x7304))+(((-1.0)*sj1*x7316))+((cj0*r11*x7301))+((r10*sj5*x7297))+(((-1.0)*r00*x7303*x7306))+((cj0*x7308)));
evalcond[7]=((-0.21426)+((x7297*x7298))+(((-0.02626)*x7295))+(((-0.0718)*x7296))+(((-1.0)*px*x7312))+(((-1.0)*cj0*x7315))+(((-1.0)*x7302*x7310))+((x7299*x7307))+(((-1.0)*py*x7306)));
evalcond[8]=((((-0.1264)*sj1))+(((-1.0)*x7309*x7310))+(((-0.02626)*x7313))+((sj0*x7315))+((sj1*x7314))+(((-1.0)*sj0*sj6*x7298))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x7297))+(((-1.0)*py*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7317=((1.0)*cj6);
CheckValue<IkReal> x7318=IKPowWithIntegerCheck(cj1,-1);
if(!x7318.valid){
continue;
}
if( IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x7317))+(((-1.0)*cj0*r00*x7317))+((cj0*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7318.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x7317))+(((-1.0)*cj0*r00*x7317))+((cj0*r01*sj6))))+IKsqr(((x7318.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x7317))+(((-1.0)*cj0*r00*x7317))+((cj0*r01*sj6))), ((x7318.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7319=IKsin(j4);
IkReal x7320=IKcos(j4);
IkReal x7321=(cj0*sj6);
IkReal x7322=((0.026255)*r01);
IkReal x7323=(r11*sj0);
IkReal x7324=((1.0)*cj1);
IkReal x7325=(cj6*sj5);
IkReal x7326=(r10*sj0);
IkReal x7327=(sj5*sj6);
IkReal x7328=((1.0)*cj5);
IkReal x7329=((1.0)*cj6);
IkReal x7330=((1.0)*sj0);
IkReal x7331=((0.026255)*sj6);
IkReal x7332=(cj5*r12);
IkReal x7333=(cj0*r10);
IkReal x7334=((0.026255)*cj6);
IkReal x7335=((1.0)*r21);
IkReal x7336=((1.0)*cj0);
IkReal x7337=(sj1*x7320);
IkReal x7338=((0.0718)*x7319);
IkReal x7339=(r00*x7334);
IkReal x7340=((1.0)*x7319);
evalcond[0]=((((-1.0)*sj6*x7335))+((cj6*r20))+(((-1.0)*x7320*x7324)));
evalcond[1]=((((-1.0)*r22*x7328))+(((-1.0)*x7325*x7335))+(((-1.0)*x7319*x7324))+(((-1.0)*r20*x7327)));
evalcond[2]=((((-1.0)*cj0*r00*x7329))+((r01*x7321))+(((-1.0)*x7326*x7329))+(((-1.0)*x7340))+((sj6*x7323)));
evalcond[3]=((((-1.0)*x7337))+(((-1.0)*r01*sj6*x7330))+((cj6*r00*sj0))+(((-1.0)*x7329*x7333))+((r11*x7321)));
evalcond[4]=((((-1.0)*r21*x7331))+(((-0.0001)*sj1))+(((-0.02626)*cj1*x7320))+((cj1*x7338))+(((-0.1264)*cj1))+pz+((r20*x7334)));
evalcond[5]=(x7320+((r00*sj5*x7321))+((cj0*cj5*r02))+((x7326*x7327))+((sj0*x7332))+((x7323*x7325))+((cj0*r01*x7325)));
evalcond[6]=((((-1.0)*sj1*x7340))+(((-1.0)*r01*x7325*x7330))+(((-1.0)*r02*sj0*x7328))+((cj0*r11*x7325))+(((-1.0)*r00*x7327*x7330))+((r10*sj5*x7321))+((cj0*x7332)));
evalcond[7]=((-0.21426)+(((-0.02626)*x7319))+(((-1.0)*x7326*x7334))+(((-1.0)*cj0*x7339))+(((-1.0)*px*x7336))+(((-0.0718)*x7320))+((x7323*x7331))+((x7321*x7322))+(((-1.0)*py*x7330)));
evalcond[8]=((((-1.0)*sj0*sj6*x7322))+(((-0.1264)*sj1))+(((-0.02626)*x7337))+(((0.026255)*r11*x7321))+((sj1*x7338))+((sj0*x7339))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7333*x7334))+(((-1.0)*py*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7341=((1.0)*r21);
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x7342.valid){
continue;
}
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x7341))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),(((cj6*r20))+(((-1.0)*sj6*x7341))),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7342.value)))+(x7343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7344=IKsin(j4);
IkReal x7345=IKcos(j4);
IkReal x7346=(cj0*sj6);
IkReal x7347=((0.026255)*r01);
IkReal x7348=(r11*sj0);
IkReal x7349=((1.0)*cj1);
IkReal x7350=(cj6*sj5);
IkReal x7351=(r10*sj0);
IkReal x7352=(sj5*sj6);
IkReal x7353=((1.0)*cj5);
IkReal x7354=((1.0)*cj6);
IkReal x7355=((1.0)*sj0);
IkReal x7356=((0.026255)*sj6);
IkReal x7357=(cj5*r12);
IkReal x7358=(cj0*r10);
IkReal x7359=((0.026255)*cj6);
IkReal x7360=((1.0)*r21);
IkReal x7361=((1.0)*cj0);
IkReal x7362=(sj1*x7345);
IkReal x7363=((0.0718)*x7344);
IkReal x7364=(r00*x7359);
IkReal x7365=((1.0)*x7344);
evalcond[0]=((((-1.0)*sj6*x7360))+(((-1.0)*x7345*x7349))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7353))+(((-1.0)*x7344*x7349))+(((-1.0)*r20*x7352))+(((-1.0)*x7350*x7360)));
evalcond[2]=((((-1.0)*x7351*x7354))+((sj6*x7348))+(((-1.0)*x7365))+(((-1.0)*cj0*r00*x7354))+((r01*x7346)));
evalcond[3]=(((r11*x7346))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x7355))+(((-1.0)*x7354*x7358))+(((-1.0)*x7362)));
evalcond[4]=(((cj1*x7363))+(((-0.02626)*cj1*x7345))+(((-0.0001)*sj1))+((r20*x7359))+(((-0.1264)*cj1))+pz+(((-1.0)*r21*x7356)));
evalcond[5]=(((x7348*x7350))+x7345+((r00*sj5*x7346))+((cj0*cj5*r02))+((cj0*r01*x7350))+((sj0*x7357))+((x7351*x7352)));
evalcond[6]=((((-1.0)*r01*x7350*x7355))+((cj0*r11*x7350))+((cj0*x7357))+(((-1.0)*r00*x7352*x7355))+((r10*sj5*x7346))+(((-1.0)*sj1*x7365))+(((-1.0)*r02*sj0*x7353)));
evalcond[7]=((-0.21426)+((x7348*x7356))+(((-0.02626)*x7344))+(((-1.0)*x7351*x7359))+(((-1.0)*py*x7355))+(((-0.0718)*x7345))+((x7346*x7347))+(((-1.0)*px*x7361))+(((-1.0)*cj0*x7364)));
evalcond[8]=((((-0.02626)*x7362))+(((-0.1264)*sj1))+(((0.026255)*r11*x7346))+((sj1*x7363))+((sj0*x7364))+(((-1.0)*x7358*x7359))+(((-1.0)*sj0*sj6*x7347))+(((-1.0)*py*x7361))+(((0.0001)*cj1))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7366=(cj0*sj5);
IkReal x7367=(cj5*cj6);
IkReal x7368=((1.0)*sj5);
IkReal x7369=((1.0)*cj0);
IkReal x7370=((1.0)*sj0);
IkReal x7371=(cj5*sj6);
IkReal x7372=(r10*x7371);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+((r21*x7367))+((r20*x7371))+(((-1.0)*r22*x7368)));
evalcond[2]=((((-1.0)*r01*x7367*x7369))+((r12*sj0*sj5))+(((-1.0)*x7370*x7372))+(((-1.0)*r00*x7369*x7371))+((r02*x7366))+(((-1.0)*r11*x7367*x7370)));
evalcond[3]=(((r12*x7366))+(((-1.0)*r02*sj0*x7368))+((r01*sj0*x7367))+((r00*sj0*x7371))+(((-1.0)*x7369*x7372))+(((-1.0)*cj1))+(((-1.0)*r11*x7367*x7369)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7373=((1.0)*r21);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*sj6*x7373)))))+(IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x7373))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7374=((1.0)*cj6);
IkReal x7375=((1.0)*sj6);
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(cj1,-1);
if(!x7376.valid){
continue;
}
CheckValue<IkReal> x7377=IKPowWithIntegerCheck(sj1,-1);
if(!x7377.valid){
continue;
}
if( IKabs(((x7376.value)*(((((-1.0)*r20*sj5*x7375))+(((-1.0)*cj5*r22))+(((-1.0)*r21*sj5*x7374)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7377.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7374))+(((-1.0)*r01*sj0*x7375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7376.value)*(((((-1.0)*r20*sj5*x7375))+(((-1.0)*cj5*r22))+(((-1.0)*r21*sj5*x7374))))))+IKsqr(((x7377.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7374))+(((-1.0)*r01*sj0*x7375))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7376.value)*(((((-1.0)*r20*sj5*x7375))+(((-1.0)*cj5*r22))+(((-1.0)*r21*sj5*x7374))))), ((x7377.value)*((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7374))+(((-1.0)*r01*sj0*x7375))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7378=IKsin(j4);
IkReal x7379=IKcos(j4);
IkReal x7380=(cj0*sj6);
IkReal x7381=((0.026255)*r01);
IkReal x7382=(r11*sj0);
IkReal x7383=((1.0)*cj1);
IkReal x7384=(cj6*sj5);
IkReal x7385=(r10*sj0);
IkReal x7386=(sj5*sj6);
IkReal x7387=((1.0)*cj5);
IkReal x7388=((1.0)*cj6);
IkReal x7389=((1.0)*sj0);
IkReal x7390=((0.026255)*sj6);
IkReal x7391=(cj5*r12);
IkReal x7392=(cj0*r10);
IkReal x7393=((0.026255)*cj6);
IkReal x7394=((1.0)*r21);
IkReal x7395=((1.0)*cj0);
IkReal x7396=(sj1*x7379);
IkReal x7397=((0.0718)*x7378);
IkReal x7398=(r00*x7393);
evalcond[0]=((((-1.0)*x7379*x7383))+((cj6*r20))+(((-1.0)*sj6*x7394)));
evalcond[1]=((((-1.0)*r22*x7387))+(((-1.0)*x7378*x7383))+(((-1.0)*r20*x7386))+(((-1.0)*x7384*x7394)));
evalcond[2]=(x7378+(((-1.0)*cj0*r00*x7388))+((sj6*x7382))+(((-1.0)*x7385*x7388))+((r01*x7380)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*x7396))+(((-1.0)*x7388*x7392))+(((-1.0)*r01*sj6*x7389))+((r11*x7380)));
evalcond[4]=((((-0.0001)*sj1))+(((-0.1264)*cj1))+((cj1*x7397))+pz+((r20*x7393))+(((-1.0)*r21*x7390))+(((-0.02626)*cj1*x7379)));
evalcond[5]=(((cj0*cj5*r02))+((r00*sj5*x7380))+((x7385*x7386))+((cj0*r01*x7384))+(((-1.0)*x7379))+((sj0*x7391))+((x7382*x7384)));
evalcond[6]=((((-1.0)*r00*x7386*x7389))+(((-1.0)*r02*sj0*x7387))+(((-1.0)*r01*x7384*x7389))+((cj0*r11*x7384))+(((-1.0)*sj1*x7378))+((r10*sj5*x7380))+((cj0*x7391)));
evalcond[7]=((-0.01934)+(((-1.0)*px*x7395))+(((0.02626)*x7378))+((x7380*x7381))+(((-1.0)*cj0*x7398))+((x7382*x7390))+(((0.0718)*x7379))+(((-1.0)*py*x7389))+(((-1.0)*x7385*x7393)));
evalcond[8]=((((-0.1264)*sj1))+(((0.026255)*r11*x7380))+(((-1.0)*x7392*x7393))+(((-0.02626)*x7396))+(((0.0001)*cj1))+((px*sj0))+((sj1*x7397))+((sj0*x7398))+(((-1.0)*sj0*sj6*x7381))+(((-1.0)*py*x7395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7399=((1.0)*sj6);
CheckValue<IkReal> x7400=IKPowWithIntegerCheck(cj1,-1);
if(!x7400.valid){
continue;
}
if( IKabs((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x7399))+(((-1.0)*r11*sj0*x7399))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7400.value)*((((cj6*r20))+(((-1.0)*r21*x7399)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x7399))+(((-1.0)*r11*sj0*x7399))+((cj0*cj6*r00))))+IKsqr(((x7400.value)*((((cj6*r20))+(((-1.0)*r21*x7399))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x7399))+(((-1.0)*r11*sj0*x7399))+((cj0*cj6*r00))), ((x7400.value)*((((cj6*r20))+(((-1.0)*r21*x7399))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(cj0*sj6);
IkReal x7404=((0.026255)*r01);
IkReal x7405=(r11*sj0);
IkReal x7406=((1.0)*cj1);
IkReal x7407=(cj6*sj5);
IkReal x7408=(r10*sj0);
IkReal x7409=(sj5*sj6);
IkReal x7410=((1.0)*cj5);
IkReal x7411=((1.0)*cj6);
IkReal x7412=((1.0)*sj0);
IkReal x7413=((0.026255)*sj6);
IkReal x7414=(cj5*r12);
IkReal x7415=(cj0*r10);
IkReal x7416=((0.026255)*cj6);
IkReal x7417=((1.0)*r21);
IkReal x7418=((1.0)*cj0);
IkReal x7419=(sj1*x7402);
IkReal x7420=((0.0718)*x7401);
IkReal x7421=(r00*x7416);
evalcond[0]=((((-1.0)*sj6*x7417))+((cj6*r20))+(((-1.0)*x7402*x7406)));
evalcond[1]=((((-1.0)*r20*x7409))+(((-1.0)*x7407*x7417))+(((-1.0)*r22*x7410))+(((-1.0)*x7401*x7406)));
evalcond[2]=(((sj6*x7405))+(((-1.0)*cj0*r00*x7411))+(((-1.0)*x7408*x7411))+((r01*x7403))+x7401);
evalcond[3]=(((r11*x7403))+((cj6*r00*sj0))+(((-1.0)*x7419))+(((-1.0)*x7411*x7415))+(((-1.0)*r01*sj6*x7412)));
evalcond[4]=((((-1.0)*r21*x7413))+(((-0.0001)*sj1))+((r20*x7416))+(((-0.1264)*cj1))+pz+(((-0.02626)*cj1*x7402))+((cj1*x7420)));
evalcond[5]=(((sj0*x7414))+((cj0*cj5*r02))+((r00*sj5*x7403))+((cj0*r01*x7407))+((x7405*x7407))+(((-1.0)*x7402))+((x7408*x7409)));
evalcond[6]=(((cj0*x7414))+((r10*sj5*x7403))+(((-1.0)*r00*x7409*x7412))+(((-1.0)*r01*x7407*x7412))+((cj0*r11*x7407))+(((-1.0)*r02*sj0*x7410))+(((-1.0)*sj1*x7401)));
evalcond[7]=((-0.01934)+(((-1.0)*cj0*x7421))+(((-1.0)*py*x7412))+((x7403*x7404))+((x7405*x7413))+(((-1.0)*x7408*x7416))+(((0.02626)*x7401))+(((0.0718)*x7402))+(((-1.0)*px*x7418)));
evalcond[8]=((((-0.1264)*sj1))+(((-1.0)*x7415*x7416))+(((-1.0)*py*x7418))+(((0.026255)*r11*x7403))+(((-1.0)*sj0*sj6*x7404))+(((0.0001)*cj1))+((px*sj0))+(((-0.02626)*x7419))+((sj0*x7421))+((sj1*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7422=((1.0)*r21);
CheckValue<IkReal> x7423=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x7423.valid){
continue;
}
CheckValue<IkReal> x7424 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x7422))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),(((cj6*r20))+(((-1.0)*sj6*x7422))),IKFAST_ATAN2_MAGTHRESH);
if(!x7424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7423.value)))+(x7424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7425=IKsin(j4);
IkReal x7426=IKcos(j4);
IkReal x7427=(cj0*sj6);
IkReal x7428=((0.026255)*r01);
IkReal x7429=(r11*sj0);
IkReal x7430=((1.0)*cj1);
IkReal x7431=(cj6*sj5);
IkReal x7432=(r10*sj0);
IkReal x7433=(sj5*sj6);
IkReal x7434=((1.0)*cj5);
IkReal x7435=((1.0)*cj6);
IkReal x7436=((1.0)*sj0);
IkReal x7437=((0.026255)*sj6);
IkReal x7438=(cj5*r12);
IkReal x7439=(cj0*r10);
IkReal x7440=((0.026255)*cj6);
IkReal x7441=((1.0)*r21);
IkReal x7442=((1.0)*cj0);
IkReal x7443=(sj1*x7426);
IkReal x7444=((0.0718)*x7425);
IkReal x7445=(r00*x7440);
evalcond[0]=((((-1.0)*sj6*x7441))+((cj6*r20))+(((-1.0)*x7426*x7430)));
evalcond[1]=((((-1.0)*r22*x7434))+(((-1.0)*x7431*x7441))+(((-1.0)*x7425*x7430))+(((-1.0)*r20*x7433)));
evalcond[2]=(((r01*x7427))+((sj6*x7429))+x7425+(((-1.0)*cj0*r00*x7435))+(((-1.0)*x7432*x7435)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*x7443))+((r11*x7427))+(((-1.0)*r01*sj6*x7436))+(((-1.0)*x7435*x7439)));
evalcond[4]=((((-0.02626)*cj1*x7426))+((r20*x7440))+((cj1*x7444))+(((-0.0001)*sj1))+(((-0.1264)*cj1))+pz+(((-1.0)*r21*x7437)));
evalcond[5]=((((-1.0)*x7426))+((x7429*x7431))+((r00*sj5*x7427))+((cj0*cj5*r02))+((cj0*r01*x7431))+((x7432*x7433))+((sj0*x7438)));
evalcond[6]=((((-1.0)*r02*sj0*x7434))+(((-1.0)*sj1*x7425))+(((-1.0)*r01*x7431*x7436))+((cj0*r11*x7431))+((cj0*x7438))+((r10*sj5*x7427))+(((-1.0)*r00*x7433*x7436)));
evalcond[7]=((-0.01934)+((x7429*x7437))+(((-1.0)*px*x7442))+(((0.0718)*x7426))+(((-1.0)*cj0*x7445))+(((-1.0)*x7432*x7440))+((x7427*x7428))+(((0.02626)*x7425))+(((-1.0)*py*x7436)));
evalcond[8]=(((sj0*x7445))+(((-0.1264)*sj1))+((sj1*x7444))+(((-1.0)*py*x7442))+(((-0.02626)*x7443))+(((-1.0)*sj0*sj6*x7428))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7439*x7440))+(((0.026255)*r11*x7427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(cj3,-1);
if(!x7453.valid){
continue;
}
IkReal x7446=x7453.value;
IkReal x7447=(sj1*sj3);
IkReal x7448=((1.0)*cj6);
IkReal x7449=(r10*sj0);
IkReal x7450=(cj0*r00);
IkReal x7451=(cj0*r01*sj6);
IkReal x7452=(r11*sj0*sj6);
CheckValue<IkReal> x7454=IKPowWithIntegerCheck(cj1,-1);
if(!x7454.valid){
continue;
}
if( IKabs((x7446*(((((-1.0)*x7448*x7449))+x7452+x7451+(((-1.0)*x7448*x7450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7446*(x7454.value)*(((((-1.0)*x7447*x7448*x7449))+(((-1.0)*cj3*r21*sj6))+(((-1.0)*x7447*x7448*x7450))+((cj3*cj6*r20))+((x7447*x7451))+((x7447*x7452)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7446*(((((-1.0)*x7448*x7449))+x7452+x7451+(((-1.0)*x7448*x7450))))))+IKsqr((x7446*(x7454.value)*(((((-1.0)*x7447*x7448*x7449))+(((-1.0)*cj3*r21*sj6))+(((-1.0)*x7447*x7448*x7450))+((cj3*cj6*r20))+((x7447*x7451))+((x7447*x7452))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x7446*(((((-1.0)*x7448*x7449))+x7452+x7451+(((-1.0)*x7448*x7450))))), (x7446*(x7454.value)*(((((-1.0)*x7447*x7448*x7449))+(((-1.0)*cj3*r21*sj6))+(((-1.0)*x7447*x7448*x7450))+((cj3*cj6*r20))+((x7447*x7451))+((x7447*x7452))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7455=IKsin(j4);
IkReal x7456=IKcos(j4);
IkReal x7457=(cj0*sj6);
IkReal x7458=((0.026255)*r01);
IkReal x7459=(r11*sj0);
IkReal x7460=(sj1*sj3);
IkReal x7461=((1.0)*cj1);
IkReal x7462=(cj6*sj5);
IkReal x7463=(r10*sj0);
IkReal x7464=(sj5*sj6);
IkReal x7465=((0.026255)*cj6);
IkReal x7466=((1.0)*cj5);
IkReal x7467=(cj1*sj3);
IkReal x7468=((1.0)*cj6);
IkReal x7469=((1.0)*sj0);
IkReal x7470=((0.026255)*sj6);
IkReal x7471=(r00*sj0);
IkReal x7472=(cj5*r12);
IkReal x7473=(cj0*r10);
IkReal x7474=((1.0)*r21);
IkReal x7475=((1.0)*cj0);
IkReal x7476=(cj0*r00);
IkReal x7477=((0.02626)*x7455);
IkReal x7478=((1.0)*x7455);
IkReal x7479=(sj1*x7456);
IkReal x7480=((0.0718)*x7455);
IkReal x7481=((0.0718)*x7456);
evalcond[0]=((((-1.0)*sj6*x7474))+(((-1.0)*x7456*x7461))+((cj6*r20))+((x7455*x7460)));
evalcond[1]=((((-1.0)*cj3*x7478))+((sj6*x7459))+((r01*x7457))+(((-1.0)*x7463*x7468))+(((-1.0)*x7468*x7476)));
evalcond[2]=((((-1.0)*x7462*x7474))+(((-1.0)*x7456*x7460))+(((-1.0)*r22*x7466))+(((-1.0)*x7455*x7461))+(((-1.0)*r20*x7464)));
evalcond[3]=((((-1.0)*sj3*x7455*x7461))+((r11*x7457))+((cj6*x7471))+(((-1.0)*r01*sj6*x7469))+(((-1.0)*x7479))+(((-1.0)*x7468*x7473)));
evalcond[4]=(((cj0*cj5*r02))+((x7463*x7464))+((sj0*x7472))+((r00*sj5*x7457))+((cj0*r01*x7462))+((x7459*x7462))+((cj3*x7456)));
evalcond[5]=((((-1.0)*r00*x7464*x7469))+((x7456*x7467))+((cj0*x7472))+(((-1.0)*r02*sj0*x7466))+((r10*sj5*x7457))+(((-1.0)*sj1*x7478))+((cj0*r11*x7462))+(((-1.0)*r01*x7462*x7469)));
evalcond[6]=((-0.1168)+(((-1.0)*cj3*x7477))+(((-1.0)*py*x7469))+(((-0.09746)*cj3))+((x7457*x7458))+(((-1.0)*x7463*x7465))+(((-1.0)*px*x7475))+(((-1.0)*x7465*x7476))+(((-1.0)*cj3*x7481))+((x7459*x7470)));
evalcond[7]=(((cj1*x7480))+((x7460*x7477))+(((-0.0001)*sj1))+(((-1.0)*r21*x7470))+(((-0.1264)*cj1))+(((-0.02626)*cj1*x7456))+(((0.09746)*x7460))+((r20*x7465))+pz+((x7460*x7481)));
evalcond[8]=((((-0.1264)*sj1))+(((-1.0)*py*x7475))+(((-1.0)*x7467*x7477))+(((-0.09746)*x7467))+((x7465*x7471))+(((-1.0)*sj0*sj6*x7458))+(((0.026255)*r11*x7457))+((sj1*x7480))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7465*x7473))+(((-1.0)*x7467*x7481))+(((-0.02626)*x7479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7482=(cj1*cj6);
IkReal x7483=(cj6*sj1);
IkReal x7484=((1.0)*sj6);
IkReal x7485=(r01*sj0);
IkReal x7486=(r00*sj0);
IkReal x7487=((1.0)*cj0*r10);
IkReal x7488=(cj0*r11*sj6);
CheckValue<IkReal> x7489=IKPowWithIntegerCheck(sj3,-1);
if(!x7489.valid){
continue;
}
if( IKabs(((x7489.value)*(((((-1.0)*r20*x7483))+((cj1*x7488))+(((-1.0)*x7482*x7487))+(((-1.0)*cj1*x7484*x7485))+((r21*sj1*sj6))+((x7482*x7486)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r21*x7484))+(((-1.0)*sj1*x7484*x7485))+((r20*x7482))+((sj1*x7488))+((x7483*x7486))+(((-1.0)*x7483*x7487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7489.value)*(((((-1.0)*r20*x7483))+((cj1*x7488))+(((-1.0)*x7482*x7487))+(((-1.0)*cj1*x7484*x7485))+((r21*sj1*sj6))+((x7482*x7486))))))+IKsqr(((((-1.0)*cj1*r21*x7484))+(((-1.0)*sj1*x7484*x7485))+((r20*x7482))+((sj1*x7488))+((x7483*x7486))+(((-1.0)*x7483*x7487))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7489.value)*(((((-1.0)*r20*x7483))+((cj1*x7488))+(((-1.0)*x7482*x7487))+(((-1.0)*cj1*x7484*x7485))+((r21*sj1*sj6))+((x7482*x7486))))), ((((-1.0)*cj1*r21*x7484))+(((-1.0)*sj1*x7484*x7485))+((r20*x7482))+((sj1*x7488))+((x7483*x7486))+(((-1.0)*x7483*x7487))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7490=IKsin(j4);
IkReal x7491=IKcos(j4);
IkReal x7492=(cj0*sj6);
IkReal x7493=((0.026255)*r01);
IkReal x7494=(r11*sj0);
IkReal x7495=(sj1*sj3);
IkReal x7496=((1.0)*cj1);
IkReal x7497=(cj6*sj5);
IkReal x7498=(r10*sj0);
IkReal x7499=(sj5*sj6);
IkReal x7500=((0.026255)*cj6);
IkReal x7501=((1.0)*cj5);
IkReal x7502=(cj1*sj3);
IkReal x7503=((1.0)*cj6);
IkReal x7504=((1.0)*sj0);
IkReal x7505=((0.026255)*sj6);
IkReal x7506=(r00*sj0);
IkReal x7507=(cj5*r12);
IkReal x7508=(cj0*r10);
IkReal x7509=((1.0)*r21);
IkReal x7510=((1.0)*cj0);
IkReal x7511=(cj0*r00);
IkReal x7512=((0.02626)*x7490);
IkReal x7513=((1.0)*x7490);
IkReal x7514=(sj1*x7491);
IkReal x7515=((0.0718)*x7490);
IkReal x7516=((0.0718)*x7491);
evalcond[0]=((((-1.0)*sj6*x7509))+((x7490*x7495))+((cj6*r20))+(((-1.0)*x7491*x7496)));
evalcond[1]=((((-1.0)*x7498*x7503))+((r01*x7492))+(((-1.0)*cj3*x7513))+(((-1.0)*x7503*x7511))+((sj6*x7494)));
evalcond[2]=((((-1.0)*r22*x7501))+(((-1.0)*x7497*x7509))+(((-1.0)*x7490*x7496))+(((-1.0)*r20*x7499))+(((-1.0)*x7491*x7495)));
evalcond[3]=((((-1.0)*x7503*x7508))+((cj6*x7506))+((r11*x7492))+(((-1.0)*x7514))+(((-1.0)*r01*sj6*x7504))+(((-1.0)*sj3*x7490*x7496)));
evalcond[4]=(((sj0*x7507))+((cj0*cj5*r02))+((cj0*r01*x7497))+((r00*sj5*x7492))+((cj3*x7491))+((x7498*x7499))+((x7494*x7497)));
evalcond[5]=(((x7491*x7502))+(((-1.0)*r00*x7499*x7504))+(((-1.0)*r01*x7497*x7504))+((cj0*x7507))+(((-1.0)*sj1*x7513))+(((-1.0)*r02*sj0*x7501))+((r10*sj5*x7492))+((cj0*r11*x7497)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x7510))+(((-1.0)*x7500*x7511))+(((-1.0)*x7498*x7500))+(((-1.0)*cj3*x7512))+(((-1.0)*cj3*x7516))+((x7494*x7505))+((x7492*x7493))+(((-0.09746)*cj3))+(((-1.0)*py*x7504)));
evalcond[7]=(((cj1*x7515))+(((-1.0)*r21*x7505))+(((-0.0001)*sj1))+((r20*x7500))+(((-0.1264)*cj1))+((x7495*x7516))+((x7495*x7512))+(((-0.02626)*cj1*x7491))+pz+(((0.09746)*x7495)));
evalcond[8]=((((0.026255)*r11*x7492))+(((-1.0)*x7500*x7508))+(((-1.0)*x7502*x7512))+(((-1.0)*x7502*x7516))+((sj1*x7515))+(((-0.1264)*sj1))+(((-1.0)*sj0*sj6*x7493))+(((-1.0)*py*x7510))+(((-0.02626)*x7514))+(((0.0001)*cj1))+((px*sj0))+((x7500*x7506))+(((-0.09746)*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7517=cj3*cj3;
IkReal x7518=(cj1*r20);
IkReal x7519=((1.0)*sj5);
IkReal x7520=(cj1*r21);
IkReal x7521=(r21*sj1*sj3);
IkReal x7522=(r20*sj1*sj3);
IkReal x7523=((1.0)*cj5*r22);
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x7522))+(((-1.0)*cj1*x7523))+((sj6*x7521))+(((-1.0)*cj6*x7519*x7520))+(((-1.0)*sj6*x7518*x7519)))),((((-1.0)*sj1*sj3*x7523))+((cj6*x7518))+(((-1.0)*sj6*x7520))+(((-1.0)*sj6*x7519*x7522))+(((-1.0)*cj6*x7519*x7521))),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(IKsign(((1.0)+((x7517*(cj1*cj1)))+(((-1.0)*x7517)))),-1);
if(!x7525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7524.value)+(((1.5707963267949)*(x7525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7526=IKsin(j4);
IkReal x7527=IKcos(j4);
IkReal x7528=(cj0*sj6);
IkReal x7529=((0.026255)*r01);
IkReal x7530=(r11*sj0);
IkReal x7531=(sj1*sj3);
IkReal x7532=((1.0)*cj1);
IkReal x7533=(cj6*sj5);
IkReal x7534=(r10*sj0);
IkReal x7535=(sj5*sj6);
IkReal x7536=((0.026255)*cj6);
IkReal x7537=((1.0)*cj5);
IkReal x7538=(cj1*sj3);
IkReal x7539=((1.0)*cj6);
IkReal x7540=((1.0)*sj0);
IkReal x7541=((0.026255)*sj6);
IkReal x7542=(r00*sj0);
IkReal x7543=(cj5*r12);
IkReal x7544=(cj0*r10);
IkReal x7545=((1.0)*r21);
IkReal x7546=((1.0)*cj0);
IkReal x7547=(cj0*r00);
IkReal x7548=((0.02626)*x7526);
IkReal x7549=((1.0)*x7526);
IkReal x7550=(sj1*x7527);
IkReal x7551=((0.0718)*x7526);
IkReal x7552=((0.0718)*x7527);
evalcond[0]=((((-1.0)*x7527*x7532))+(((-1.0)*sj6*x7545))+((x7526*x7531))+((cj6*r20)));
evalcond[1]=(((r01*x7528))+((sj6*x7530))+(((-1.0)*x7539*x7547))+(((-1.0)*x7534*x7539))+(((-1.0)*cj3*x7549)));
evalcond[2]=((((-1.0)*x7526*x7532))+(((-1.0)*x7533*x7545))+(((-1.0)*r20*x7535))+(((-1.0)*r22*x7537))+(((-1.0)*x7527*x7531)));
evalcond[3]=((((-1.0)*r01*sj6*x7540))+((r11*x7528))+(((-1.0)*x7539*x7544))+(((-1.0)*x7550))+((cj6*x7542))+(((-1.0)*sj3*x7526*x7532)));
evalcond[4]=(((cj0*r01*x7533))+((cj0*cj5*r02))+((r00*sj5*x7528))+((x7530*x7533))+((sj0*x7543))+((cj3*x7527))+((x7534*x7535)));
evalcond[5]=((((-1.0)*r02*sj0*x7537))+((cj0*x7543))+(((-1.0)*sj1*x7549))+((r10*sj5*x7528))+((x7527*x7538))+(((-1.0)*r01*x7533*x7540))+((cj0*r11*x7533))+(((-1.0)*r00*x7535*x7540)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x7546))+(((-1.0)*x7534*x7536))+(((-0.09746)*cj3))+((x7528*x7529))+(((-1.0)*x7536*x7547))+(((-1.0)*cj3*x7552))+(((-1.0)*cj3*x7548))+(((-1.0)*py*x7540))+((x7530*x7541)));
evalcond[7]=((((0.09746)*x7531))+(((-0.0001)*sj1))+(((-0.1264)*cj1))+pz+(((-0.02626)*cj1*x7527))+((r20*x7536))+((cj1*x7551))+(((-1.0)*r21*x7541))+((x7531*x7548))+((x7531*x7552)));
evalcond[8]=((((-0.02626)*x7550))+(((-0.1264)*sj1))+(((-1.0)*x7538*x7552))+(((-1.0)*x7538*x7548))+((sj1*x7551))+(((-0.09746)*x7538))+(((-1.0)*sj0*sj6*x7529))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7536*x7544))+(((0.026255)*r11*x7528))+(((-1.0)*py*x7546))+((x7536*x7542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7553=((1.0)*cj5);
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(sj1,-1);
if(!x7554.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r00*sj6*x7553))+(((-1.0)*cj6*r11*sj0*x7553))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x7553))+(((-1.0)*cj0*cj6*r01*x7553))+((cj0*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7554.value)*((((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*sj6*x7553))+(((-1.0)*cj6*r11*sj0*x7553))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x7553))+(((-1.0)*cj0*cj6*r01*x7553))+((cj0*r02*sj5))))+IKsqr(((x7554.value)*((((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*sj6*x7553))+(((-1.0)*cj6*r11*sj0*x7553))+((r12*sj0*sj5))+(((-1.0)*r10*sj0*sj6*x7553))+(((-1.0)*cj0*cj6*r01*x7553))+((cj0*r02*sj5))), ((x7554.value)*((((cj5*r20*sj6))+((cj5*cj6*r21))+(((-1.0)*r22*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x7555=IKcos(j3);
IkReal x7556=(cj5*cj6);
IkReal x7557=((1.0)*cj0);
IkReal x7558=((1.0)*sj5);
IkReal x7559=(cj0*sj5);
IkReal x7560=((1.0)*sj0);
IkReal x7561=(cj5*sj6);
IkReal x7562=(r10*x7561);
evalcond[0]=((((-1.0)*sj1*x7555))+((r21*x7556))+(((-1.0)*r22*x7558))+((r20*x7561)));
evalcond[1]=((((-1.0)*r11*x7556*x7557))+(((-1.0)*x7557*x7562))+((r00*sj0*x7561))+(((-1.0)*r02*sj0*x7558))+((r12*x7559))+((cj1*x7555))+((r01*sj0*x7556)));
evalcond[2]=((((-1.0)*r01*x7556*x7557))+(((-1.0)*r11*x7556*x7560))+((r02*x7559))+((r12*sj0*sj5))+(((-1.0)*(IKsin(j3))))+(((-1.0)*r00*x7557*x7561))+(((-1.0)*x7560*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x7563=cj3*cj3;
IkReal x7564=((1.0)+(((-1.0)*x7563))+((x7563*(cj1*cj1))));
j4eval[0]=x7564;
j4eval[1]=IKsign(x7564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7565=(cj5*cj6);
IkReal x7566=(r11*sj0);
IkReal x7567=(cj0*sj6);
IkReal x7568=(cj6*sj5);
IkReal x7569=((1.0)*cj0);
IkReal x7570=(r10*sj0);
IkReal x7571=((1.0)*cj5);
IkReal x7572=(cj0*r02);
IkReal x7573=((1.0)*sj5);
IkReal x7574=(cj5*sj6);
IkReal x7575=(cj6*r00);
IkReal x7576=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x7565))+((r20*x7574))+(((-1.0)*r22*x7573)));
evalcond[2]=((((-1.0)*cj6*x7570))+(((-1.0)*x7569*x7575))+((r01*x7567))+((sj6*x7566)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x7565*x7569))+(((-1.0)*sj6*x7570*x7571))+(((-1.0)*r00*x7567*x7571))+((sj5*x7576))+((sj5*x7572))+(((-1.0)*x7565*x7566)));
evalcond[4]=(((x7566*x7568))+((cj0*r01*x7568))+((sj5*sj6*x7570))+((cj5*x7572))+((cj5*x7576))+((r00*sj5*x7567)));
evalcond[5]=((((-1.0)*r10*x7567*x7571))+(((-1.0)*r11*x7565*x7569))+((cj0*r12*sj5))+((r00*sj0*x7574))+(((-1.0)*r02*sj0*x7573))+((r01*sj0*x7565)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj6*x7570))+(((-1.0)*px*x7569))+(((0.026255)*r01*x7567))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x7566))+(((-0.026255)*cj0*x7575)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7577=(cj1*r20);
IkReal x7578=((1.0)*sj6);
IkReal x7579=(r20*sj1);
IkReal x7580=((1.0)*cj5*r22);
IkReal x7581=((1.0)*cj6*r21*sj5);
if( IKabs(((((-1.0)*cj1*x7580))+(((-1.0)*cj1*x7581))+(((-1.0)*cj6*x7579))+((r21*sj1*sj6))+(((-1.0)*sj5*x7577*x7578)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x7577))+(((-1.0)*sj1*x7581))+(((-1.0)*sj1*x7580))+(((-1.0)*cj1*r21*x7578))+(((-1.0)*sj5*x7578*x7579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x7580))+(((-1.0)*cj1*x7581))+(((-1.0)*cj6*x7579))+((r21*sj1*sj6))+(((-1.0)*sj5*x7577*x7578))))+IKsqr((((cj6*x7577))+(((-1.0)*sj1*x7581))+(((-1.0)*sj1*x7580))+(((-1.0)*cj1*r21*x7578))+(((-1.0)*sj5*x7578*x7579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x7580))+(((-1.0)*cj1*x7581))+(((-1.0)*cj6*x7579))+((r21*sj1*sj6))+(((-1.0)*sj5*x7577*x7578))), (((cj6*x7577))+(((-1.0)*sj1*x7581))+(((-1.0)*sj1*x7580))+(((-1.0)*cj1*r21*x7578))+(((-1.0)*sj5*x7578*x7579))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7582=IKcos(j4);
IkReal x7583=IKsin(j4);
IkReal x7584=((1.0)*cj1);
IkReal x7585=((1.0)*cj5);
IkReal x7586=((0.02626)*cj1);
IkReal x7587=((1.0)*cj6);
IkReal x7588=(cj0*r10);
IkReal x7589=((0.026255)*cj6);
IkReal x7590=((1.0)*sj6);
IkReal x7591=(sj0*sj5);
IkReal x7592=(sj1*x7582);
IkReal x7593=(cj0*r11*sj6);
IkReal x7594=((0.0718)*x7583);
IkReal x7595=(sj1*x7583);
IkReal x7596=(cj6*r00*sj0);
IkReal x7597=(r01*sj0*sj6);
IkReal x7598=(cj1*x7582);
IkReal x7599=((1.0)*x7592);
IkReal x7600=(x7583*x7584);
IkReal x7601=(x7599+x7600);
evalcond[0]=(((cj6*r20))+(((-1.0)*x7582*x7584))+x7595+(((-1.0)*r21*x7590)));
evalcond[1]=((((-1.0)*x7601))+(((-1.0)*r21*sj5*x7587))+(((-1.0)*r22*x7585))+(((-1.0)*r20*sj5*x7590)));
evalcond[2]=((((-1.0)*x7601))+(((-1.0)*r01*sj0*x7590))+(((-1.0)*x7587*x7588))+x7596+x7593);
evalcond[3]=((((0.02626)*x7595))+(((0.09736)*sj1))+(((0.0718)*x7592))+((cj1*x7594))+(((-0.026255)*r21*sj6))+(((-0.1264)*cj1))+pz+(((-1.0)*x7582*x7586))+((r20*x7589)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*x7595))+((sj5*sj6*x7588))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x7585))+(((-1.0)*r00*x7590*x7591))+x7598+(((-1.0)*r01*x7587*x7591)));
evalcond[5]=(((r00*sj0*x7589))+(((-0.0718)*x7598))+(((-0.026255)*x7597))+(((-0.1264)*sj1))+(((-0.09736)*cj1))+((sj1*x7594))+((px*sj0))+(((-1.0)*x7583*x7586))+(((-0.02626)*x7592))+(((0.026255)*x7593))+(((-1.0)*cj0*py))+(((-1.0)*x7588*x7589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7602=(cj5*cj6);
IkReal x7603=(r11*sj0);
IkReal x7604=(cj0*sj6);
IkReal x7605=(cj6*sj5);
IkReal x7606=((1.0)*cj0);
IkReal x7607=(r10*sj0);
IkReal x7608=((1.0)*cj5);
IkReal x7609=(cj0*r02);
IkReal x7610=((1.0)*sj5);
IkReal x7611=(cj5*sj6);
IkReal x7612=(cj6*r00);
IkReal x7613=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x7611))+(((-1.0)*r22*x7610))+((r21*x7602)));
evalcond[2]=(((r01*x7604))+(((-1.0)*x7606*x7612))+(((-1.0)*cj6*x7607))+((sj6*x7603)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7602*x7606))+((sj5*x7613))+((sj5*x7609))+(((-1.0)*x7602*x7603))+(((-1.0)*r00*x7604*x7608))+(((-1.0)*sj6*x7607*x7608)));
evalcond[4]=(((cj5*x7609))+((x7603*x7605))+((cj5*x7613))+((sj5*sj6*x7607))+((cj0*r01*x7605))+((r00*sj5*x7604)));
evalcond[5]=((((-1.0)*r11*x7602*x7606))+((r00*sj0*x7611))+((cj0*r12*sj5))+((r01*sj0*x7602))+(((-1.0)*r10*x7604*x7608))+(((-1.0)*r02*sj0*x7610)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj0*x7612))+(((0.026255)*sj6*x7603))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x7607))+(((0.026255)*r01*x7604))+(((-1.0)*px*x7606)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7614=(sj1*sj6);
IkReal x7615=(r20*sj5);
IkReal x7616=(cj1*cj6);
IkReal x7617=((1.0)*r21);
IkReal x7618=(cj5*r22);
IkReal x7619=(cj1*sj6);
IkReal x7620=(cj6*sj1);
if( IKabs(((((-1.0)*cj1*x7618))+(((-1.0)*sj5*x7616*x7617))+((r20*x7620))+(((-1.0)*x7614*x7617))+(((-1.0)*x7615*x7619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x7616))+(((-1.0)*x7617*x7619))+((r21*sj5*x7620))+((sj1*x7618))+((x7614*x7615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x7618))+(((-1.0)*sj5*x7616*x7617))+((r20*x7620))+(((-1.0)*x7614*x7617))+(((-1.0)*x7615*x7619))))+IKsqr((((r20*x7616))+(((-1.0)*x7617*x7619))+((r21*sj5*x7620))+((sj1*x7618))+((x7614*x7615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x7618))+(((-1.0)*sj5*x7616*x7617))+((r20*x7620))+(((-1.0)*x7614*x7617))+(((-1.0)*x7615*x7619))), (((r20*x7616))+(((-1.0)*x7617*x7619))+((r21*sj5*x7620))+((sj1*x7618))+((x7614*x7615))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7621=IKcos(j4);
IkReal x7622=IKsin(j4);
IkReal x7623=((1.0)*cj1);
IkReal x7624=(cj0*sj6);
IkReal x7625=((1.0)*cj5);
IkReal x7626=((1.0)*cj6);
IkReal x7627=(cj0*r10);
IkReal x7628=((0.026255)*cj6);
IkReal x7629=((1.0)*sj6);
IkReal x7630=(sj0*sj5);
IkReal x7631=(sj1*x7621);
IkReal x7632=(cj1*x7622);
IkReal x7633=(sj1*x7622);
IkReal x7634=(cj6*r00*sj0);
IkReal x7635=(r01*sj0*sj6);
IkReal x7636=(cj1*x7621);
IkReal x7637=((1.0)*x7633);
IkReal x7638=(x7621*x7623);
IkReal x7639=(x7638+x7637);
evalcond[0]=((((-1.0)*x7639))+(((-1.0)*r21*x7629))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x7626))+(((-1.0)*r20*sj5*x7629))+(((-1.0)*x7622*x7623))+x7631+(((-1.0)*r22*x7625)));
evalcond[2]=((((-1.0)*r01*sj0*x7629))+(((-1.0)*x7626*x7627))+(((-1.0)*x7631))+x7632+x7634+((r11*x7624)));
evalcond[3]=((((-0.0718)*x7631))+(((-0.026255)*r21*sj6))+((r20*x7628))+(((-0.1264)*cj1))+(((0.0718)*x7632))+(((-0.09756)*sj1))+(((-0.02626)*x7633))+(((-0.02626)*x7636))+pz);
evalcond[4]=((((-1.0)*x7639))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x7625))+((r10*sj5*x7624))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*x7626*x7630))+(((-1.0)*r00*x7629*x7630)));
evalcond[5]=((((-0.1264)*sj1))+(((-1.0)*x7627*x7628))+(((-0.026255)*x7635))+(((0.02626)*x7632))+(((0.0718)*x7636))+(((0.0718)*x7633))+(((0.09756)*cj1))+(((-0.02626)*x7631))+((px*sj0))+((r00*sj0*x7628))+(((0.026255)*r11*x7624))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7640=(cj0*sj5);
IkReal x7641=(cj5*cj6);
IkReal x7642=((1.0)*sj5);
IkReal x7643=((1.0)*sj0);
IkReal x7644=((1.0)*cj0);
IkReal x7645=(cj5*sj6);
IkReal x7646=(r10*x7645);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x7642))+(((-1.0)*sj1))+((r21*x7641))+((r20*x7645)));
evalcond[2]=((((-1.0)*r11*x7641*x7643))+((r02*x7640))+((r12*sj0*sj5))+(((-1.0)*r01*x7641*x7644))+(((-1.0)*r00*x7644*x7645))+(((-1.0)*x7643*x7646)));
evalcond[3]=(((r12*x7640))+(((-1.0)*r11*x7641*x7644))+cj1+(((-1.0)*x7644*x7646))+((r00*sj0*x7645))+(((-1.0)*r02*sj0*x7642))+((r01*sj0*x7641)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x7647=((1.0)*r21);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*sj5*x7647))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))))+(IKabs((((cj6*r20))+(((-1.0)*sj6*x7647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7648=((1.0)*cj6);
IkReal x7649=((1.0)*sj6);
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(cj1,-1);
if(!x7650.valid){
continue;
}
CheckValue<IkReal> x7651=IKPowWithIntegerCheck(sj1,-1);
if(!x7651.valid){
continue;
}
if( IKabs(((x7650.value)*(((((-1.0)*r20*sj5*x7649))+(((-1.0)*r21*sj5*x7648))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7651.value)*(((((-1.0)*r01*sj0*x7649))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7650.value)*(((((-1.0)*r20*sj5*x7649))+(((-1.0)*r21*sj5*x7648))+(((-1.0)*cj5*r22))))))+IKsqr(((x7651.value)*(((((-1.0)*r01*sj0*x7649))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7648))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7650.value)*(((((-1.0)*r20*sj5*x7649))+(((-1.0)*r21*sj5*x7648))+(((-1.0)*cj5*r22))))), ((x7651.value)*(((((-1.0)*r01*sj0*x7649))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x7648))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7652=IKsin(j4);
IkReal x7653=IKcos(j4);
IkReal x7654=(cj0*sj6);
IkReal x7655=((0.026255)*r01);
IkReal x7656=(r11*sj0);
IkReal x7657=((1.0)*cj1);
IkReal x7658=(cj6*sj5);
IkReal x7659=(r10*sj0);
IkReal x7660=(sj5*sj6);
IkReal x7661=((1.0)*cj5);
IkReal x7662=((1.0)*cj6);
IkReal x7663=((1.0)*sj0);
IkReal x7664=((0.026255)*sj6);
IkReal x7665=(cj5*r12);
IkReal x7666=(cj0*r10);
IkReal x7667=((0.026255)*cj6);
IkReal x7668=((1.0)*r21);
IkReal x7669=((1.0)*cj0);
IkReal x7670=(sj1*x7653);
IkReal x7671=((0.0718)*x7652);
IkReal x7672=(r00*x7667);
IkReal x7673=((1.0)*x7652);
evalcond[0]=((((-1.0)*x7653*x7657))+(((-1.0)*sj6*x7668))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7661))+(((-1.0)*r20*x7660))+(((-1.0)*x7658*x7668))+(((-1.0)*x7652*x7657)));
evalcond[2]=(((sj6*x7656))+(((-1.0)*cj0*r00*x7662))+((r01*x7654))+(((-1.0)*x7673))+(((-1.0)*x7659*x7662)));
evalcond[3]=(((r11*x7654))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x7663))+(((-1.0)*x7662*x7666))+(((-1.0)*x7670)));
evalcond[4]=(((r20*x7667))+(((-0.0001)*sj1))+((cj1*x7671))+(((-0.1264)*cj1))+(((-0.02626)*cj1*x7653))+pz+(((-1.0)*r21*x7664)));
evalcond[5]=(((x7656*x7658))+((cj0*cj5*r02))+((cj0*r01*x7658))+((x7659*x7660))+((r00*sj5*x7654))+((sj0*x7665))+x7653);
evalcond[6]=((((-1.0)*r02*sj0*x7661))+((r10*sj5*x7654))+(((-1.0)*r01*x7658*x7663))+(((-1.0)*sj1*x7673))+((cj0*x7665))+((cj0*r11*x7658))+(((-1.0)*r00*x7660*x7663)));
evalcond[7]=((-0.21426)+(((-1.0)*px*x7669))+(((-0.0718)*x7653))+(((-0.02626)*x7652))+((x7654*x7655))+(((-1.0)*py*x7663))+(((-1.0)*cj0*x7672))+((x7656*x7664))+(((-1.0)*x7659*x7667)));
evalcond[8]=(((sj0*x7672))+(((-0.1264)*sj1))+((sj1*x7671))+(((-1.0)*sj0*sj6*x7655))+(((-1.0)*x7666*x7667))+(((-0.02626)*x7670))+(((-1.0)*py*x7669))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x7654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7674=((1.0)*cj6);
CheckValue<IkReal> x7675=IKPowWithIntegerCheck(cj1,-1);
if(!x7675.valid){
continue;
}
if( IKabs((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x7674))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x7674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7675.value)*((((cj6*r20))+(((-1.0)*r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x7674))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x7674))))+IKsqr(((x7675.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x7674))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x7674))), ((x7675.value)*((((cj6*r20))+(((-1.0)*r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7676=IKsin(j4);
IkReal x7677=IKcos(j4);
IkReal x7678=(cj0*sj6);
IkReal x7679=((0.026255)*r01);
IkReal x7680=(r11*sj0);
IkReal x7681=((1.0)*cj1);
IkReal x7682=(cj6*sj5);
IkReal x7683=(r10*sj0);
IkReal x7684=(sj5*sj6);
IkReal x7685=((1.0)*cj5);
IkReal x7686=((1.0)*cj6);
IkReal x7687=((1.0)*sj0);
IkReal x7688=((0.026255)*sj6);
IkReal x7689=(cj5*r12);
IkReal x7690=(cj0*r10);
IkReal x7691=((0.026255)*cj6);
IkReal x7692=((1.0)*r21);
IkReal x7693=((1.0)*cj0);
IkReal x7694=(sj1*x7677);
IkReal x7695=((0.0718)*x7676);
IkReal x7696=(r00*x7691);
IkReal x7697=((1.0)*x7676);
evalcond[0]=((((-1.0)*x7677*x7681))+(((-1.0)*sj6*x7692))+((cj6*r20)));
evalcond[1]=((((-1.0)*x7676*x7681))+(((-1.0)*r20*x7684))+(((-1.0)*r22*x7685))+(((-1.0)*x7682*x7692)));
evalcond[2]=(((sj6*x7680))+(((-1.0)*cj0*r00*x7686))+(((-1.0)*x7697))+(((-1.0)*x7683*x7686))+((r01*x7678)));
evalcond[3]=(((r11*x7678))+((cj6*r00*sj0))+(((-1.0)*x7694))+(((-1.0)*x7686*x7690))+(((-1.0)*r01*sj6*x7687)));
evalcond[4]=((((-0.0001)*sj1))+(((-0.1264)*cj1))+((r20*x7691))+pz+(((-0.02626)*cj1*x7677))+((cj1*x7695))+(((-1.0)*r21*x7688)));
evalcond[5]=(((x7680*x7682))+((cj0*cj5*r02))+((sj0*x7689))+((x7683*x7684))+x7677+((r00*sj5*x7678))+((cj0*r01*x7682)));
evalcond[6]=(((r10*sj5*x7678))+((cj0*x7689))+(((-1.0)*r02*sj0*x7685))+(((-1.0)*sj1*x7697))+(((-1.0)*r00*x7684*x7687))+(((-1.0)*r01*x7682*x7687))+((cj0*r11*x7682)));
evalcond[7]=((-0.21426)+((x7680*x7688))+(((-1.0)*px*x7693))+(((-1.0)*cj0*x7696))+(((-0.02626)*x7676))+(((-1.0)*py*x7687))+((x7678*x7679))+(((-1.0)*x7683*x7691))+(((-0.0718)*x7677)));
evalcond[8]=((((-0.1264)*sj1))+(((-0.02626)*x7694))+((sj1*x7695))+((sj0*x7696))+(((-1.0)*py*x7693))+(((0.026255)*r11*x7678))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7690*x7691))+(((-1.0)*sj0*sj6*x7679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7698=((1.0)*r21);
CheckValue<IkReal> x7699=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x7699.valid){
continue;
}
CheckValue<IkReal> x7700 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x7698))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x7698))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x7700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7699.value)))+(x7700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7701=IKsin(j4);
IkReal x7702=IKcos(j4);
IkReal x7703=(cj0*sj6);
IkReal x7704=((0.026255)*r01);
IkReal x7705=(r11*sj0);
IkReal x7706=((1.0)*cj1);
IkReal x7707=(cj6*sj5);
IkReal x7708=(r10*sj0);
IkReal x7709=(sj5*sj6);
IkReal x7710=((1.0)*cj5);
IkReal x7711=((1.0)*cj6);
IkReal x7712=((1.0)*sj0);
IkReal x7713=((0.026255)*sj6);
IkReal x7714=(cj5*r12);
IkReal x7715=(cj0*r10);
IkReal x7716=((0.026255)*cj6);
IkReal x7717=((1.0)*r21);
IkReal x7718=((1.0)*cj0);
IkReal x7719=(sj1*x7702);
IkReal x7720=((0.0718)*x7701);
IkReal x7721=(r00*x7716);
IkReal x7722=((1.0)*x7701);
evalcond[0]=((((-1.0)*sj6*x7717))+(((-1.0)*x7702*x7706))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7710))+(((-1.0)*x7707*x7717))+(((-1.0)*r20*x7709))+(((-1.0)*x7701*x7706)));
evalcond[2]=((((-1.0)*x7708*x7711))+((sj6*x7705))+((r01*x7703))+(((-1.0)*cj0*r00*x7711))+(((-1.0)*x7722)));
evalcond[3]=((((-1.0)*x7711*x7715))+(((-1.0)*r01*sj6*x7712))+((cj6*r00*sj0))+(((-1.0)*x7719))+((r11*x7703)));
evalcond[4]=(((cj1*x7720))+(((-0.02626)*cj1*x7702))+(((-0.0001)*sj1))+((r20*x7716))+(((-0.1264)*cj1))+(((-1.0)*r21*x7713))+pz);
evalcond[5]=(((cj0*cj5*r02))+((sj0*x7714))+((x7708*x7709))+((cj0*r01*x7707))+x7702+((x7705*x7707))+((r00*sj5*x7703)));
evalcond[6]=(((cj0*r11*x7707))+((cj0*x7714))+(((-1.0)*r02*sj0*x7710))+(((-1.0)*sj1*x7722))+(((-1.0)*r01*x7707*x7712))+(((-1.0)*r00*x7709*x7712))+((r10*sj5*x7703)));
evalcond[7]=((-0.21426)+(((-1.0)*x7708*x7716))+((x7705*x7713))+((x7703*x7704))+(((-0.0718)*x7702))+(((-0.02626)*x7701))+(((-1.0)*cj0*x7721))+(((-1.0)*px*x7718))+(((-1.0)*py*x7712)));
evalcond[8]=(((sj0*x7721))+(((-0.1264)*sj1))+(((0.026255)*r11*x7703))+(((-0.02626)*x7719))+(((-1.0)*x7715*x7716))+(((0.0001)*cj1))+((px*sj0))+((sj1*x7720))+(((-1.0)*sj0*sj6*x7704))+(((-1.0)*py*x7718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7723=(cj0*sj5);
IkReal x7724=(cj5*cj6);
IkReal x7725=((1.0)*sj5);
IkReal x7726=((1.0)*cj0);
IkReal x7727=((1.0)*sj0);
IkReal x7728=(cj5*sj6);
IkReal x7729=(r10*x7728);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+((r21*x7724))+(((-1.0)*r22*x7725))+((r20*x7728)));
evalcond[2]=((((-1.0)*r00*x7726*x7728))+(((-1.0)*x7727*x7729))+((r12*sj0*sj5))+(((-1.0)*r11*x7724*x7727))+((r02*x7723))+(((-1.0)*r01*x7724*x7726)));
evalcond[3]=((((-1.0)*x7726*x7729))+(((-1.0)*r02*sj0*x7725))+((r01*sj0*x7724))+((r12*x7723))+(((-1.0)*r11*x7724*x7726))+(((-1.0)*cj1))+((r00*sj0*x7728)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7730=((1.0)*r21);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*sj6*x7730))+((cj6*r20)))))+(IKabs(((((-1.0)*cj6*sj5*x7730))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7731=((1.0)*cj6);
IkReal x7732=((1.0)*sj6);
CheckValue<IkReal> x7733=IKPowWithIntegerCheck(cj1,-1);
if(!x7733.valid){
continue;
}
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(sj1,-1);
if(!x7734.valid){
continue;
}
if( IKabs(((x7733.value)*(((((-1.0)*r21*sj5*x7731))+(((-1.0)*r20*sj5*x7732))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7734.value)*(((((-1.0)*r01*sj0*x7732))+(((-1.0)*cj0*r10*x7731))+((cj6*r00*sj0))+((cj0*r11*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7733.value)*(((((-1.0)*r21*sj5*x7731))+(((-1.0)*r20*sj5*x7732))+(((-1.0)*cj5*r22))))))+IKsqr(((x7734.value)*(((((-1.0)*r01*sj0*x7732))+(((-1.0)*cj0*r10*x7731))+((cj6*r00*sj0))+((cj0*r11*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7733.value)*(((((-1.0)*r21*sj5*x7731))+(((-1.0)*r20*sj5*x7732))+(((-1.0)*cj5*r22))))), ((x7734.value)*(((((-1.0)*r01*sj0*x7732))+(((-1.0)*cj0*r10*x7731))+((cj6*r00*sj0))+((cj0*r11*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7735=IKsin(j4);
IkReal x7736=IKcos(j4);
IkReal x7737=(cj0*sj6);
IkReal x7738=((0.026255)*r01);
IkReal x7739=(r11*sj0);
IkReal x7740=((1.0)*cj1);
IkReal x7741=(cj6*sj5);
IkReal x7742=(r10*sj0);
IkReal x7743=(sj5*sj6);
IkReal x7744=((1.0)*cj5);
IkReal x7745=((1.0)*cj6);
IkReal x7746=((1.0)*sj0);
IkReal x7747=((0.026255)*sj6);
IkReal x7748=(cj5*r12);
IkReal x7749=(cj0*r10);
IkReal x7750=((0.026255)*cj6);
IkReal x7751=((1.0)*r21);
IkReal x7752=((1.0)*cj0);
IkReal x7753=(sj1*x7736);
IkReal x7754=((0.0718)*x7735);
IkReal x7755=(r00*x7750);
evalcond[0]=((((-1.0)*sj6*x7751))+(((-1.0)*x7736*x7740))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7744))+(((-1.0)*r20*x7743))+(((-1.0)*x7741*x7751))+(((-1.0)*x7735*x7740)));
evalcond[2]=((((-1.0)*x7742*x7745))+(((-1.0)*cj0*r00*x7745))+((sj6*x7739))+((r01*x7737))+x7735);
evalcond[3]=((((-1.0)*r01*sj6*x7746))+((r11*x7737))+((cj6*r00*sj0))+(((-1.0)*x7753))+(((-1.0)*x7745*x7749)));
evalcond[4]=(((cj1*x7754))+(((-0.0001)*sj1))+(((-0.02626)*cj1*x7736))+(((-0.1264)*cj1))+((r20*x7750))+pz+(((-1.0)*r21*x7747)));
evalcond[5]=(((r00*sj5*x7737))+(((-1.0)*x7736))+((cj0*cj5*r02))+((sj0*x7748))+((x7739*x7741))+((x7742*x7743))+((cj0*r01*x7741)));
evalcond[6]=(((r10*sj5*x7737))+((cj0*r11*x7741))+(((-1.0)*r00*x7743*x7746))+(((-1.0)*sj1*x7735))+((cj0*x7748))+(((-1.0)*r01*x7741*x7746))+(((-1.0)*r02*sj0*x7744)));
evalcond[7]=((-0.01934)+(((0.0718)*x7736))+(((-1.0)*cj0*x7755))+(((-1.0)*px*x7752))+((x7739*x7747))+(((0.02626)*x7735))+((x7737*x7738))+(((-1.0)*py*x7746))+(((-1.0)*x7742*x7750)));
evalcond[8]=((((-0.1264)*sj1))+((sj0*x7755))+((sj1*x7754))+(((0.026255)*r11*x7737))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7749*x7750))+(((-1.0)*py*x7752))+(((-1.0)*sj0*sj6*x7738))+(((-0.02626)*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*sj6);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(cj1,-1);
if(!x7757.valid){
continue;
}
if( IKabs((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x7756))+(((-1.0)*cj0*r01*x7756))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7757.value)*((((cj6*r20))+(((-1.0)*r21*x7756)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x7756))+(((-1.0)*cj0*r01*x7756))+((cj0*cj6*r00))))+IKsqr(((x7757.value)*((((cj6*r20))+(((-1.0)*r21*x7756))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x7756))+(((-1.0)*cj0*r01*x7756))+((cj0*cj6*r00))), ((x7757.value)*((((cj6*r20))+(((-1.0)*r21*x7756))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7758=IKsin(j4);
IkReal x7759=IKcos(j4);
IkReal x7760=(cj0*sj6);
IkReal x7761=((0.026255)*r01);
IkReal x7762=(r11*sj0);
IkReal x7763=((1.0)*cj1);
IkReal x7764=(cj6*sj5);
IkReal x7765=(r10*sj0);
IkReal x7766=(sj5*sj6);
IkReal x7767=((1.0)*cj5);
IkReal x7768=((1.0)*cj6);
IkReal x7769=((1.0)*sj0);
IkReal x7770=((0.026255)*sj6);
IkReal x7771=(cj5*r12);
IkReal x7772=(cj0*r10);
IkReal x7773=((0.026255)*cj6);
IkReal x7774=((1.0)*r21);
IkReal x7775=((1.0)*cj0);
IkReal x7776=(sj1*x7759);
IkReal x7777=((0.0718)*x7758);
IkReal x7778=(r00*x7773);
evalcond[0]=((((-1.0)*sj6*x7774))+(((-1.0)*x7759*x7763))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7767))+(((-1.0)*r20*x7766))+(((-1.0)*x7764*x7774))+(((-1.0)*x7758*x7763)));
evalcond[2]=(((sj6*x7762))+(((-1.0)*cj0*r00*x7768))+x7758+(((-1.0)*x7765*x7768))+((r01*x7760)));
evalcond[3]=((((-1.0)*x7768*x7772))+((cj6*r00*sj0))+(((-1.0)*x7776))+(((-1.0)*r01*sj6*x7769))+((r11*x7760)));
evalcond[4]=((((-0.0001)*sj1))+(((-0.1264)*cj1))+((r20*x7773))+pz+(((-0.02626)*cj1*x7759))+(((-1.0)*r21*x7770))+((cj1*x7777)));
evalcond[5]=(((cj0*r01*x7764))+((cj0*cj5*r02))+((sj0*x7771))+(((-1.0)*x7759))+((x7762*x7764))+((r00*sj5*x7760))+((x7765*x7766)));
evalcond[6]=((((-1.0)*r02*sj0*x7767))+(((-1.0)*r01*x7764*x7769))+((cj0*r11*x7764))+((cj0*x7771))+(((-1.0)*sj1*x7758))+(((-1.0)*r00*x7766*x7769))+((r10*sj5*x7760)));
evalcond[7]=((-0.01934)+((x7760*x7761))+(((-1.0)*py*x7769))+(((-1.0)*cj0*x7778))+((x7762*x7770))+(((-1.0)*px*x7775))+(((0.02626)*x7758))+(((0.0718)*x7759))+(((-1.0)*x7765*x7773)));
evalcond[8]=((((-1.0)*py*x7775))+(((-1.0)*x7772*x7773))+(((-0.1264)*sj1))+((sj0*x7778))+((sj1*x7777))+(((0.026255)*r11*x7760))+(((0.0001)*cj1))+((px*sj0))+(((-0.02626)*x7776))+(((-1.0)*sj0*sj6*x7761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7779=((1.0)*r21);
CheckValue<IkReal> x7780=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x7780.valid){
continue;
}
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x7779))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x7779))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7780.value)))+(x7781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7782=IKsin(j4);
IkReal x7783=IKcos(j4);
IkReal x7784=(cj0*sj6);
IkReal x7785=((0.026255)*r01);
IkReal x7786=(r11*sj0);
IkReal x7787=((1.0)*cj1);
IkReal x7788=(cj6*sj5);
IkReal x7789=(r10*sj0);
IkReal x7790=(sj5*sj6);
IkReal x7791=((1.0)*cj5);
IkReal x7792=((1.0)*cj6);
IkReal x7793=((1.0)*sj0);
IkReal x7794=((0.026255)*sj6);
IkReal x7795=(cj5*r12);
IkReal x7796=(cj0*r10);
IkReal x7797=((0.026255)*cj6);
IkReal x7798=((1.0)*r21);
IkReal x7799=((1.0)*cj0);
IkReal x7800=(sj1*x7783);
IkReal x7801=((0.0718)*x7782);
IkReal x7802=(r00*x7797);
evalcond[0]=((((-1.0)*x7783*x7787))+(((-1.0)*sj6*x7798))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x7791))+(((-1.0)*x7782*x7787))+(((-1.0)*r20*x7790))+(((-1.0)*x7788*x7798)));
evalcond[2]=(((r01*x7784))+(((-1.0)*cj0*r00*x7792))+x7782+(((-1.0)*x7789*x7792))+((sj6*x7786)));
evalcond[3]=((((-1.0)*x7792*x7796))+(((-1.0)*x7800))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x7793))+((r11*x7784)));
evalcond[4]=((((-0.0001)*sj1))+((r20*x7797))+(((-0.1264)*cj1))+((cj1*x7801))+pz+(((-1.0)*r21*x7794))+(((-0.02626)*cj1*x7783)));
evalcond[5]=(((cj0*cj5*r02))+((x7789*x7790))+((cj0*r01*x7788))+((r00*sj5*x7784))+((x7786*x7788))+((sj0*x7795))+(((-1.0)*x7783)));
evalcond[6]=((((-1.0)*r00*x7790*x7793))+((r10*sj5*x7784))+(((-1.0)*r02*sj0*x7791))+((cj0*x7795))+((cj0*r11*x7788))+(((-1.0)*r01*x7788*x7793))+(((-1.0)*sj1*x7782)));
evalcond[7]=((-0.01934)+(((-1.0)*py*x7793))+((x7784*x7785))+((x7786*x7794))+(((0.0718)*x7783))+(((-1.0)*px*x7799))+(((-1.0)*cj0*x7802))+(((-1.0)*x7789*x7797))+(((0.02626)*x7782)));
evalcond[8]=((((0.026255)*r11*x7784))+(((-1.0)*py*x7799))+(((-0.1264)*sj1))+((sj1*x7801))+(((-1.0)*sj0*sj6*x7785))+((sj0*x7802))+(((-0.02626)*x7800))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x7796*x7797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(cj3,-1);
if(!x7810.valid){
continue;
}
IkReal x7803=x7810.value;
IkReal x7804=(sj1*sj3);
IkReal x7805=((1.0)*cj6);
IkReal x7806=(r10*sj0);
IkReal x7807=(cj0*r00);
IkReal x7808=(cj0*r01*sj6);
IkReal x7809=(r11*sj0*sj6);
CheckValue<IkReal> x7811=IKPowWithIntegerCheck(cj1,-1);
if(!x7811.valid){
continue;
}
if( IKabs((x7803*(((((-1.0)*x7805*x7807))+(((-1.0)*x7805*x7806))+x7809+x7808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7803*(x7811.value)*(((((-1.0)*x7804*x7805*x7807))+(((-1.0)*x7804*x7805*x7806))+(((-1.0)*cj3*r21*sj6))+((cj3*cj6*r20))+((x7804*x7808))+((x7804*x7809)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7803*(((((-1.0)*x7805*x7807))+(((-1.0)*x7805*x7806))+x7809+x7808))))+IKsqr((x7803*(x7811.value)*(((((-1.0)*x7804*x7805*x7807))+(((-1.0)*x7804*x7805*x7806))+(((-1.0)*cj3*r21*sj6))+((cj3*cj6*r20))+((x7804*x7808))+((x7804*x7809))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x7803*(((((-1.0)*x7805*x7807))+(((-1.0)*x7805*x7806))+x7809+x7808))), (x7803*(x7811.value)*(((((-1.0)*x7804*x7805*x7807))+(((-1.0)*x7804*x7805*x7806))+(((-1.0)*cj3*r21*sj6))+((cj3*cj6*r20))+((x7804*x7808))+((x7804*x7809))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7812=IKsin(j4);
IkReal x7813=IKcos(j4);
IkReal x7814=(cj0*sj6);
IkReal x7815=((0.026255)*r01);
IkReal x7816=(r11*sj0);
IkReal x7817=(sj1*sj3);
IkReal x7818=((1.0)*cj1);
IkReal x7819=(cj6*sj5);
IkReal x7820=(r10*sj0);
IkReal x7821=(sj5*sj6);
IkReal x7822=((0.026255)*cj6);
IkReal x7823=((1.0)*cj5);
IkReal x7824=(cj1*sj3);
IkReal x7825=((1.0)*cj6);
IkReal x7826=((1.0)*sj0);
IkReal x7827=((0.026255)*sj6);
IkReal x7828=(r00*sj0);
IkReal x7829=(cj5*r12);
IkReal x7830=(cj0*r10);
IkReal x7831=((1.0)*r21);
IkReal x7832=((1.0)*cj0);
IkReal x7833=(cj0*r00);
IkReal x7834=((0.02626)*x7812);
IkReal x7835=((1.0)*x7812);
IkReal x7836=(sj1*x7813);
IkReal x7837=((0.0718)*x7812);
IkReal x7838=((0.0718)*x7813);
evalcond[0]=(((x7812*x7817))+(((-1.0)*sj6*x7831))+((cj6*r20))+(((-1.0)*x7813*x7818)));
evalcond[1]=((((-1.0)*x7820*x7825))+(((-1.0)*cj3*x7835))+((r01*x7814))+((sj6*x7816))+(((-1.0)*x7825*x7833)));
evalcond[2]=((((-1.0)*x7819*x7831))+(((-1.0)*x7812*x7818))+(((-1.0)*x7813*x7817))+(((-1.0)*r22*x7823))+(((-1.0)*r20*x7821)));
evalcond[3]=((((-1.0)*sj3*x7812*x7818))+((r11*x7814))+(((-1.0)*r01*sj6*x7826))+(((-1.0)*x7836))+(((-1.0)*x7825*x7830))+((cj6*x7828)));
evalcond[4]=(((cj0*cj5*r02))+((x7820*x7821))+((x7816*x7819))+((sj0*x7829))+((r00*sj5*x7814))+((cj0*r01*x7819))+((cj3*x7813)));
evalcond[5]=((((-1.0)*r02*sj0*x7823))+((x7813*x7824))+(((-1.0)*r01*x7819*x7826))+(((-1.0)*r00*x7821*x7826))+((cj0*r11*x7819))+((cj0*x7829))+((r10*sj5*x7814))+(((-1.0)*sj1*x7835)));
evalcond[6]=((-0.1168)+((x7816*x7827))+((x7814*x7815))+(((-1.0)*x7820*x7822))+(((-1.0)*px*x7832))+(((-1.0)*x7822*x7833))+(((-0.09746)*cj3))+(((-1.0)*cj3*x7834))+(((-1.0)*cj3*x7838))+(((-1.0)*py*x7826)));
evalcond[7]=((((0.09746)*x7817))+((x7817*x7838))+((x7817*x7834))+(((-1.0)*r21*x7827))+(((-0.0001)*sj1))+((r20*x7822))+(((-0.1264)*cj1))+pz+(((-0.02626)*cj1*x7813))+((cj1*x7837)));
evalcond[8]=((((-1.0)*x7824*x7838))+(((-1.0)*x7824*x7834))+(((-0.09746)*x7824))+(((-0.1264)*sj1))+(((-1.0)*sj0*sj6*x7815))+(((-0.02626)*x7836))+(((-1.0)*py*x7832))+(((-1.0)*x7822*x7830))+((x7822*x7828))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x7814))+((sj1*x7837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7839=(cj1*cj6);
IkReal x7840=(cj6*sj1);
IkReal x7841=((1.0)*sj6);
IkReal x7842=(r01*sj0);
IkReal x7843=(r00*sj0);
IkReal x7844=((1.0)*cj0*r10);
IkReal x7845=(cj0*r11*sj6);
CheckValue<IkReal> x7846=IKPowWithIntegerCheck(sj3,-1);
if(!x7846.valid){
continue;
}
if( IKabs(((x7846.value)*(((((-1.0)*x7839*x7844))+(((-1.0)*r20*x7840))+((x7839*x7843))+((r21*sj1*sj6))+(((-1.0)*cj1*x7841*x7842))+((cj1*x7845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x7839))+(((-1.0)*x7840*x7844))+(((-1.0)*cj1*r21*x7841))+((x7840*x7843))+(((-1.0)*sj1*x7841*x7842))+((sj1*x7845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7846.value)*(((((-1.0)*x7839*x7844))+(((-1.0)*r20*x7840))+((x7839*x7843))+((r21*sj1*sj6))+(((-1.0)*cj1*x7841*x7842))+((cj1*x7845))))))+IKsqr((((r20*x7839))+(((-1.0)*x7840*x7844))+(((-1.0)*cj1*r21*x7841))+((x7840*x7843))+(((-1.0)*sj1*x7841*x7842))+((sj1*x7845))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x7846.value)*(((((-1.0)*x7839*x7844))+(((-1.0)*r20*x7840))+((x7839*x7843))+((r21*sj1*sj6))+(((-1.0)*cj1*x7841*x7842))+((cj1*x7845))))), (((r20*x7839))+(((-1.0)*x7840*x7844))+(((-1.0)*cj1*r21*x7841))+((x7840*x7843))+(((-1.0)*sj1*x7841*x7842))+((sj1*x7845))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7847=IKsin(j4);
IkReal x7848=IKcos(j4);
IkReal x7849=(cj0*sj6);
IkReal x7850=((0.026255)*r01);
IkReal x7851=(r11*sj0);
IkReal x7852=(sj1*sj3);
IkReal x7853=((1.0)*cj1);
IkReal x7854=(cj6*sj5);
IkReal x7855=(r10*sj0);
IkReal x7856=(sj5*sj6);
IkReal x7857=((0.026255)*cj6);
IkReal x7858=((1.0)*cj5);
IkReal x7859=(cj1*sj3);
IkReal x7860=((1.0)*cj6);
IkReal x7861=((1.0)*sj0);
IkReal x7862=((0.026255)*sj6);
IkReal x7863=(r00*sj0);
IkReal x7864=(cj5*r12);
IkReal x7865=(cj0*r10);
IkReal x7866=((1.0)*r21);
IkReal x7867=((1.0)*cj0);
IkReal x7868=(cj0*r00);
IkReal x7869=((0.02626)*x7847);
IkReal x7870=((1.0)*x7847);
IkReal x7871=(sj1*x7848);
IkReal x7872=((0.0718)*x7847);
IkReal x7873=((0.0718)*x7848);
evalcond[0]=((((-1.0)*x7848*x7853))+((cj6*r20))+((x7847*x7852))+(((-1.0)*sj6*x7866)));
evalcond[1]=((((-1.0)*x7855*x7860))+((sj6*x7851))+((r01*x7849))+(((-1.0)*x7860*x7868))+(((-1.0)*cj3*x7870)));
evalcond[2]=((((-1.0)*x7847*x7853))+(((-1.0)*x7848*x7852))+(((-1.0)*r20*x7856))+(((-1.0)*x7854*x7866))+(((-1.0)*r22*x7858)));
evalcond[3]=((((-1.0)*r01*sj6*x7861))+(((-1.0)*x7871))+((cj6*x7863))+(((-1.0)*sj3*x7847*x7853))+(((-1.0)*x7860*x7865))+((r11*x7849)));
evalcond[4]=(((cj0*cj5*r02))+((r00*sj5*x7849))+((cj0*r01*x7854))+((sj0*x7864))+((x7851*x7854))+((cj3*x7848))+((x7855*x7856)));
evalcond[5]=((((-1.0)*r00*x7856*x7861))+(((-1.0)*sj1*x7870))+((cj0*x7864))+((x7848*x7859))+((r10*sj5*x7849))+((cj0*r11*x7854))+(((-1.0)*r01*x7854*x7861))+(((-1.0)*r02*sj0*x7858)));
evalcond[6]=((-0.1168)+(((-1.0)*cj3*x7869))+((x7849*x7850))+(((-1.0)*px*x7867))+(((-1.0)*py*x7861))+(((-1.0)*x7855*x7857))+(((-0.09746)*cj3))+(((-1.0)*x7857*x7868))+((x7851*x7862))+(((-1.0)*cj3*x7873)));
evalcond[7]=((((-0.02626)*cj1*x7848))+(((0.09746)*x7852))+(((-0.0001)*sj1))+(((-0.1264)*cj1))+((cj1*x7872))+pz+((x7852*x7873))+((x7852*x7869))+(((-1.0)*r21*x7862))+((r20*x7857)));
evalcond[8]=((((-1.0)*x7859*x7869))+(((0.026255)*r11*x7849))+(((-1.0)*x7859*x7873))+(((-0.1264)*sj1))+((x7857*x7863))+(((-0.09746)*x7859))+((sj1*x7872))+(((-1.0)*py*x7867))+(((-1.0)*x7857*x7865))+(((0.0001)*cj1))+((px*sj0))+(((-0.02626)*x7871))+(((-1.0)*sj0*sj6*x7850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7874=cj3*cj3;
IkReal x7875=(cj1*r20);
IkReal x7876=((1.0)*sj5);
IkReal x7877=(cj1*r21);
IkReal x7878=(r21*sj1*sj3);
IkReal x7879=(r20*sj1*sj3);
IkReal x7880=((1.0)*cj5*r22);
CheckValue<IkReal> x7881=IKPowWithIntegerCheck(IKsign(((1.0)+((x7874*(cj1*cj1)))+(((-1.0)*x7874)))),-1);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x7876*x7877))+(((-1.0)*cj1*x7880))+(((-1.0)*cj6*x7879))+((sj6*x7878))+(((-1.0)*sj6*x7875*x7876)))),((((-1.0)*sj6*x7876*x7879))+(((-1.0)*sj1*sj3*x7880))+(((-1.0)*cj6*x7876*x7878))+((cj6*x7875))+(((-1.0)*sj6*x7877))),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7881.value)))+(x7882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7883=IKsin(j4);
IkReal x7884=IKcos(j4);
IkReal x7885=(cj0*sj6);
IkReal x7886=((0.026255)*r01);
IkReal x7887=(r11*sj0);
IkReal x7888=(sj1*sj3);
IkReal x7889=((1.0)*cj1);
IkReal x7890=(cj6*sj5);
IkReal x7891=(r10*sj0);
IkReal x7892=(sj5*sj6);
IkReal x7893=((0.026255)*cj6);
IkReal x7894=((1.0)*cj5);
IkReal x7895=(cj1*sj3);
IkReal x7896=((1.0)*cj6);
IkReal x7897=((1.0)*sj0);
IkReal x7898=((0.026255)*sj6);
IkReal x7899=(r00*sj0);
IkReal x7900=(cj5*r12);
IkReal x7901=(cj0*r10);
IkReal x7902=((1.0)*r21);
IkReal x7903=((1.0)*cj0);
IkReal x7904=(cj0*r00);
IkReal x7905=((0.02626)*x7883);
IkReal x7906=((1.0)*x7883);
IkReal x7907=(sj1*x7884);
IkReal x7908=((0.0718)*x7883);
IkReal x7909=((0.0718)*x7884);
evalcond[0]=((((-1.0)*sj6*x7902))+(((-1.0)*x7884*x7889))+((x7883*x7888))+((cj6*r20)));
evalcond[1]=((((-1.0)*cj3*x7906))+(((-1.0)*x7891*x7896))+((r01*x7885))+((sj6*x7887))+(((-1.0)*x7896*x7904)));
evalcond[2]=((((-1.0)*x7890*x7902))+(((-1.0)*r20*x7892))+(((-1.0)*r22*x7894))+(((-1.0)*x7883*x7889))+(((-1.0)*x7884*x7888)));
evalcond[3]=((((-1.0)*sj3*x7883*x7889))+(((-1.0)*x7907))+((r11*x7885))+((cj6*x7899))+(((-1.0)*r01*sj6*x7897))+(((-1.0)*x7896*x7901)));
evalcond[4]=(((r00*sj5*x7885))+((cj0*cj5*r02))+((sj0*x7900))+((cj3*x7884))+((cj0*r01*x7890))+((x7891*x7892))+((x7887*x7890)));
evalcond[5]=(((r10*sj5*x7885))+(((-1.0)*sj1*x7906))+((cj0*r11*x7890))+(((-1.0)*r00*x7892*x7897))+(((-1.0)*r02*sj0*x7894))+((x7884*x7895))+(((-1.0)*r01*x7890*x7897))+((cj0*x7900)));
evalcond[6]=((-0.1168)+((x7885*x7886))+(((-1.0)*cj3*x7905))+(((-1.0)*cj3*x7909))+(((-1.0)*x7891*x7893))+(((-1.0)*py*x7897))+(((-1.0)*x7893*x7904))+(((-0.09746)*cj3))+((x7887*x7898))+(((-1.0)*px*x7903)));
evalcond[7]=((((0.09746)*x7888))+(((-0.0001)*sj1))+(((-1.0)*r21*x7898))+((x7888*x7905))+((x7888*x7909))+(((-0.1264)*cj1))+((cj1*x7908))+pz+(((-0.02626)*cj1*x7884))+((r20*x7893)));
evalcond[8]=((((-0.1264)*sj1))+((x7893*x7899))+(((-0.02626)*x7907))+(((-1.0)*x7895*x7905))+(((-1.0)*x7895*x7909))+(((-1.0)*x7893*x7901))+((sj1*x7908))+(((-1.0)*sj0*sj6*x7886))+(((-1.0)*py*x7903))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x7885))+(((-0.09746)*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j4]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x7910=(cj0*cj5);
IkReal x7911=(r00*sj6);
IkReal x7912=((1.0)*sj5);
IkReal x7913=(cj6*r01);
IkReal x7914=(cj5*sj0);
IkReal x7915=(cj6*r11);
IkReal x7916=(r10*sj6);
IkReal x7917=((1.0)*x7914);
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(cj1,-1);
if(!x7918.valid){
continue;
}
if( IKabs((((x7910*x7911))+((x7910*x7913))+(((-1.0)*r12*sj0*x7912))+(((-1.0)*cj0*r02*x7912))+((x7914*x7915))+((x7914*x7916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7918.value)*((((r02*sj0*sj5))+(((-1.0)*x7913*x7917))+(((-1.0)*x7911*x7917))+(((-1.0)*cj0*r12*x7912))+((x7910*x7915))+((x7910*x7916)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x7910*x7911))+((x7910*x7913))+(((-1.0)*r12*sj0*x7912))+(((-1.0)*cj0*r02*x7912))+((x7914*x7915))+((x7914*x7916))))+IKsqr(((x7918.value)*((((r02*sj0*sj5))+(((-1.0)*x7913*x7917))+(((-1.0)*x7911*x7917))+(((-1.0)*cj0*r12*x7912))+((x7910*x7915))+((x7910*x7916))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x7910*x7911))+((x7910*x7913))+(((-1.0)*r12*sj0*x7912))+(((-1.0)*cj0*r02*x7912))+((x7914*x7915))+((x7914*x7916))), ((x7918.value)*((((r02*sj0*sj5))+(((-1.0)*x7913*x7917))+(((-1.0)*x7911*x7917))+(((-1.0)*cj0*r12*x7912))+((x7910*x7915))+((x7910*x7916))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x7919=IKcos(j3);
IkReal x7920=(cj0*sj5);
IkReal x7921=(cj5*cj6);
IkReal x7922=((1.0)*sj5);
IkReal x7923=((1.0)*cj0);
IkReal x7924=((1.0)*sj0);
IkReal x7925=(cj5*sj6);
IkReal x7926=(r10*x7925);
evalcond[0]=((((-1.0)*r22*x7922))+((r20*x7925))+(((-1.0)*sj1*x7919))+((r21*x7921)));
evalcond[1]=((((-1.0)*x7924*x7926))+(((-1.0)*r01*x7921*x7923))+(((-1.0)*r00*x7923*x7925))+((r12*sj0*sj5))+(IKsin(j3))+((r02*x7920))+(((-1.0)*r11*x7921*x7924)));
evalcond[2]=(((r12*x7920))+((cj1*x7919))+(((-1.0)*x7923*x7926))+(((-1.0)*r11*x7921*x7923))+((r01*sj0*x7921))+((r00*sj0*x7925))+(((-1.0)*r02*sj0*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x7927=cj3*cj3;
IkReal x7928=(sj5*sj6);
IkReal x7929=(cj1*cj6);
IkReal x7930=(sj1*sj3);
IkReal x7931=(r21*sj5);
IkReal x7932=((1.0)*cj1);
IkReal x7933=(cj5*r22);
IkReal x7934=(r20*x7930);
IkReal x7935=((1.0)*r21*sj6);
IkReal x7936=((-1.0)+x7927+(((-1.0)*cj1*x7927*x7932)));
j4eval[0]=x7936;
j4eval[1]=((IKabs(((((-1.0)*x7932*x7933))+(((-1.0)*r20*x7928*x7932))+(((-1.0)*x7930*x7935))+((cj6*x7934))+(((-1.0)*x7929*x7931)))))+(IKabs((((x7930*x7933))+((r20*x7929))+((cj6*x7930*x7931))+(((-1.0)*r21*sj6*x7932))+((x7928*x7934))))));
j4eval[2]=IKsign(x7936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7937=(cj5*cj6);
IkReal x7938=(r11*sj0);
IkReal x7939=(cj0*sj6);
IkReal x7940=(cj6*sj5);
IkReal x7941=((1.0)*cj0);
IkReal x7942=(r10*sj0);
IkReal x7943=((1.0)*cj5);
IkReal x7944=(cj0*r02);
IkReal x7945=((1.0)*sj5);
IkReal x7946=(cj5*sj6);
IkReal x7947=(cj6*r00);
IkReal x7948=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x7937))+(((-1.0)*r22*x7945))+((r20*x7946)));
evalcond[2]=((((-1.0)*x7941*x7947))+(((-1.0)*cj6*x7942))+((r01*x7939))+((sj6*x7938)));
evalcond[3]=((1.0)+(((-1.0)*x7937*x7938))+(((-1.0)*sj6*x7942*x7943))+((sj5*x7948))+((sj5*x7944))+(((-1.0)*r01*x7937*x7941))+(((-1.0)*r00*x7939*x7943)));
evalcond[4]=(((cj0*r01*x7940))+((cj5*x7944))+((cj5*x7948))+((sj5*sj6*x7942))+((x7938*x7940))+((r00*sj5*x7939)));
evalcond[5]=(((r00*sj0*x7946))+(((-1.0)*r10*x7939*x7943))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x7945))+(((-1.0)*r11*x7937*x7941))+((r01*sj0*x7937)));
evalcond[6]=((0.1148)+(((-1.0)*px*x7941))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x7947))+(((0.026255)*r01*x7939))+(((-0.026255)*cj6*x7942))+(((0.026255)*sj6*x7938)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7949=(cj6*r21);
IkReal x7950=(r20*sj6);
IkReal x7951=(r21*sj6);
IkReal x7952=(cj1*sj5);
IkReal x7953=(cj5*r22);
IkReal x7954=((1.0)*sj1*sj5);
IkReal x7955=((1.0)*cj6*r20);
if( IKabs((((x7950*x7952))+(((-1.0)*sj1*x7955))+((cj1*x7953))+((sj1*x7951))+((x7949*x7952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x7955))+(((-1.0)*sj1*x7953))+(((-1.0)*x7949*x7954))+(((-1.0)*x7950*x7954))+((cj1*x7951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x7950*x7952))+(((-1.0)*sj1*x7955))+((cj1*x7953))+((sj1*x7951))+((x7949*x7952))))+IKsqr(((((-1.0)*cj1*x7955))+(((-1.0)*sj1*x7953))+(((-1.0)*x7949*x7954))+(((-1.0)*x7950*x7954))+((cj1*x7951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x7950*x7952))+(((-1.0)*sj1*x7955))+((cj1*x7953))+((sj1*x7951))+((x7949*x7952))), ((((-1.0)*cj1*x7955))+(((-1.0)*sj1*x7953))+(((-1.0)*x7949*x7954))+(((-1.0)*x7950*x7954))+((cj1*x7951))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKsin(j4);
IkReal x7957=IKcos(j4);
IkReal x7958=((1.0)*cj5);
IkReal x7959=((1.0)*cj0);
IkReal x7960=(cj6*r10);
IkReal x7961=(cj6*r20);
IkReal x7962=((1.0)*sj5);
IkReal x7963=(r21*sj6);
IkReal x7964=(cj0*sj5);
IkReal x7965=(cj1*x7957);
IkReal x7966=(sj1*x7956);
IkReal x7967=(sj1*x7957);
IkReal x7968=(cj0*r11*sj6);
IkReal x7969=(cj1*x7956);
IkReal x7970=(cj6*r00*sj0);
IkReal x7971=(r01*sj0*sj6);
IkReal x7972=(x7966+x7965);
evalcond[0]=((((-1.0)*x7963))+x7961+x7972);
evalcond[1]=((((-1.0)*cj6*r21*x7962))+(((-1.0)*r22*x7958))+(((-1.0)*x7967))+x7969+(((-1.0)*r20*sj6*x7962)));
evalcond[2]=((((-1.0)*x7969))+x7967+x7968+x7970+(((-1.0)*x7971))+(((-1.0)*x7959*x7960)));
evalcond[3]=((((0.09736)*sj1))+(((0.02626)*x7966))+(((0.02626)*x7965))+(((-0.026255)*x7963))+(((0.026255)*x7961))+pz+(((-0.0718)*x7969))+(((-0.1246)*cj1))+(((0.0718)*x7967)));
evalcond[4]=((((-1.0)*r02*sj0*x7958))+((cj0*cj5*r12))+x7972+((cj6*r11*x7964))+(((-1.0)*cj6*r01*sj0*x7962))+((r10*sj6*x7964))+(((-1.0)*r00*sj0*sj6*x7962)));
evalcond[5]=((((-1.0)*py*x7959))+(((-0.026255)*x7971))+(((-0.1246)*sj1))+(((-0.09736)*cj1))+(((0.02626)*x7967))+(((0.026255)*x7968))+(((0.026255)*x7970))+(((-0.02626)*x7969))+((px*sj0))+(((-0.0718)*x7966))+(((-0.0718)*x7965))+(((-0.026255)*cj0*x7960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7973=(cj5*cj6);
IkReal x7974=(r11*sj0);
IkReal x7975=(cj0*sj6);
IkReal x7976=(cj6*sj5);
IkReal x7977=((1.0)*cj0);
IkReal x7978=(r10*sj0);
IkReal x7979=((1.0)*cj5);
IkReal x7980=(cj0*r02);
IkReal x7981=((1.0)*sj5);
IkReal x7982=(cj5*sj6);
IkReal x7983=(cj6*r00);
IkReal x7984=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x7981))+((r20*x7982))+((r21*x7973)));
evalcond[2]=(((r01*x7975))+((sj6*x7974))+(((-1.0)*cj6*x7978))+(((-1.0)*x7977*x7983)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7975*x7979))+(((-1.0)*x7973*x7974))+(((-1.0)*sj6*x7978*x7979))+((sj5*x7980))+((sj5*x7984))+(((-1.0)*r01*x7973*x7977)));
evalcond[4]=(((cj0*r01*x7976))+((sj5*sj6*x7978))+((x7974*x7976))+((r00*sj5*x7975))+((cj5*x7980))+((cj5*x7984)));
evalcond[5]=((((-1.0)*r10*x7975*x7979))+(((-1.0)*r02*sj0*x7981))+((cj0*r12*sj5))+((r00*sj0*x7982))+((r01*sj0*x7973))+(((-1.0)*r11*x7973*x7977)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x7978))+(((-1.0)*py*sj0))+(((-1.0)*px*x7977))+(((0.026255)*sj6*x7974))+(((0.026255)*r01*x7975))+(((-0.026255)*cj0*x7983)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7985=(cj5*r22);
IkReal x7986=(cj6*r20);
IkReal x7987=(r21*sj1);
IkReal x7988=(cj6*sj5);
IkReal x7989=(cj1*r21);
IkReal x7990=(r20*sj5*sj6);
if( IKabs((((cj1*x7990))+((x7988*x7989))+(((-1.0)*sj6*x7987))+((sj1*x7986))+((cj1*x7985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x7986))+((sj1*x7985))+((sj6*x7989))+((sj1*x7990))+((x7987*x7988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x7990))+((x7988*x7989))+(((-1.0)*sj6*x7987))+((sj1*x7986))+((cj1*x7985))))+IKsqr(((((-1.0)*cj1*x7986))+((sj1*x7985))+((sj6*x7989))+((sj1*x7990))+((x7987*x7988))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x7990))+((x7988*x7989))+(((-1.0)*sj6*x7987))+((sj1*x7986))+((cj1*x7985))), ((((-1.0)*cj1*x7986))+((sj1*x7985))+((sj6*x7989))+((sj1*x7990))+((x7987*x7988))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7991=IKcos(j4);
IkReal x7992=IKsin(j4);
IkReal x7993=(cj0*sj6);
IkReal x7994=((1.0)*cj5);
IkReal x7995=((1.0)*cj0);
IkReal x7996=(cj6*r10);
IkReal x7997=(cj6*r20);
IkReal x7998=((1.0)*sj5);
IkReal x7999=(r21*sj6);
IkReal x8000=(sj1*x7991);
IkReal x8001=(cj1*x7992);
IkReal x8002=(cj1*x7991);
IkReal x8003=(sj1*x7992);
IkReal x8004=(cj6*r00*sj0);
IkReal x8005=(r01*sj0*sj6);
IkReal x8006=(x8000+x8001);
evalcond[0]=(x7997+(((-1.0)*x7999))+(((-1.0)*x8003))+x8002);
evalcond[1]=((((-1.0)*r20*sj6*x7998))+x8006+(((-1.0)*cj6*r21*x7998))+(((-1.0)*r22*x7994)));
evalcond[2]=(((r11*x7993))+(((-1.0)*x7995*x7996))+(((-1.0)*x8005))+x8004+x8006);
evalcond[3]=((((-0.026255)*x7999))+(((-0.0718)*x8000))+(((-0.0718)*x8001))+(((-0.02626)*x8003))+(((-0.09756)*sj1))+pz+(((0.026255)*x7997))+(((-0.1246)*cj1))+(((0.02626)*x8002)));
evalcond[4]=(((r10*sj5*x7993))+(((-1.0)*cj6*r01*sj0*x7998))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x7994))+((cj0*cj6*r11*sj5))+(((-1.0)*x8002))+x8003+(((-1.0)*r00*sj0*sj6*x7998)));
evalcond[5]=((((0.026255)*x8004))+(((-0.1246)*sj1))+(((-0.0718)*x8003))+(((-0.026255)*x8005))+(((0.09756)*cj1))+(((0.0718)*x8002))+((px*sj0))+(((-1.0)*py*x7995))+(((0.026255)*r11*x7993))+(((0.02626)*x8000))+(((0.02626)*x8001))+(((-0.026255)*cj0*x7996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8007=(cj0*sj5);
IkReal x8008=(cj5*cj6);
IkReal x8009=((1.0)*sj5);
IkReal x8010=((1.0)*sj0);
IkReal x8011=((1.0)*cj0);
IkReal x8012=(cj5*sj6);
IkReal x8013=(r10*x8012);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj1))+((r21*x8008))+(((-1.0)*r22*x8009))+((r20*x8012)));
evalcond[2]=((((-1.0)*x8010*x8013))+((r02*x8007))+((r12*sj0*sj5))+(((-1.0)*r00*x8011*x8012))+(((-1.0)*r11*x8008*x8010))+(((-1.0)*r01*x8008*x8011)));
evalcond[3]=((((-1.0)*x8011*x8013))+cj1+(((-1.0)*r02*sj0*x8009))+((r12*x8007))+((r01*sj0*x8008))+((r00*sj0*x8012))+(((-1.0)*r11*x8008*x8011)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8014=IKPowWithIntegerCheck(cj1,-1);
if(!x8014.valid){
continue;
}
CheckValue<IkReal> x8015=IKPowWithIntegerCheck(sj1,-1);
if(!x8015.valid){
continue;
}
if( IKabs(((x8014.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8015.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8014.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x8015.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8014.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x8015.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8016=IKsin(j4);
IkReal x8017=IKcos(j4);
IkReal x8018=(r11*sj0);
IkReal x8019=(cj0*sj6);
IkReal x8020=((0.026255)*r01);
IkReal x8021=(cj6*sj5);
IkReal x8022=(r10*sj0);
IkReal x8023=(sj5*sj6);
IkReal x8024=((1.0)*cj5);
IkReal x8025=((1.0)*cj6);
IkReal x8026=((1.0)*sj0);
IkReal x8027=((1.0)*cj0);
IkReal x8028=((0.026255)*sj6);
IkReal x8029=(cj5*r12);
IkReal x8030=(cj0*r10);
IkReal x8031=((0.026255)*cj6);
IkReal x8032=((1.0)*r21);
IkReal x8033=(sj1*x8017);
IkReal x8034=(cj1*x8016);
IkReal x8035=(r00*x8031);
IkReal x8036=(sj1*x8016);
IkReal x8037=(cj1*x8017);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x8032))+x8037);
evalcond[1]=((((-1.0)*r20*x8023))+x8034+(((-1.0)*r22*x8024))+(((-1.0)*x8021*x8032)));
evalcond[2]=((((-1.0)*cj0*r00*x8025))+((r01*x8019))+(((-1.0)*x8022*x8025))+((sj6*x8018))+x8016);
evalcond[3]=((((-1.0)*r01*sj6*x8026))+((cj6*r00*sj0))+((r11*x8019))+x8033+(((-1.0)*x8025*x8030)));
evalcond[4]=((((-0.0001)*sj1))+(((-0.0718)*x8034))+(((0.02626)*x8037))+(((-1.0)*r21*x8028))+((r20*x8031))+pz+(((-0.1246)*cj1)));
evalcond[5]=(((x8018*x8021))+((cj0*cj5*r02))+((x8022*x8023))+((sj0*x8029))+(((-1.0)*x8017))+((cj0*r01*x8021))+((r00*sj5*x8019)));
evalcond[6]=(((r10*sj5*x8019))+((cj0*r11*x8021))+(((-1.0)*r01*x8021*x8026))+(((-1.0)*r02*sj0*x8024))+((cj0*x8029))+(((-1.0)*r00*x8023*x8026))+x8036);
evalcond[7]=((0.21226)+(((0.02626)*x8016))+((x8018*x8028))+(((-1.0)*x8022*x8031))+(((-1.0)*py*x8026))+(((-1.0)*cj0*x8035))+(((-1.0)*px*x8027))+(((0.0718)*x8017))+((x8019*x8020)));
evalcond[8]=((((-0.1246)*sj1))+((sj0*x8035))+(((-0.0718)*x8036))+(((0.02626)*x8033))+(((0.026255)*r11*x8019))+(((-1.0)*py*x8027))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*sj0*sj6*x8020))+(((-1.0)*x8030*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8038=((1.0)*sj6);
CheckValue<IkReal> x8039=IKPowWithIntegerCheck(cj1,-1);
if(!x8039.valid){
continue;
}
if( IKabs(((((-1.0)*r11*sj0*x8038))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x8038))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8039.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*sj0*x8038))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x8038))+((cj0*cj6*r00))))+IKsqr(((x8039.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*sj0*x8038))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x8038))+((cj0*cj6*r00))), ((x8039.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8040=IKsin(j4);
IkReal x8041=IKcos(j4);
IkReal x8042=(r11*sj0);
IkReal x8043=(cj0*sj6);
IkReal x8044=((0.026255)*r01);
IkReal x8045=(cj6*sj5);
IkReal x8046=(r10*sj0);
IkReal x8047=(sj5*sj6);
IkReal x8048=((1.0)*cj5);
IkReal x8049=((1.0)*cj6);
IkReal x8050=((1.0)*sj0);
IkReal x8051=((1.0)*cj0);
IkReal x8052=((0.026255)*sj6);
IkReal x8053=(cj5*r12);
IkReal x8054=(cj0*r10);
IkReal x8055=((0.026255)*cj6);
IkReal x8056=((1.0)*r21);
IkReal x8057=(sj1*x8041);
IkReal x8058=(cj1*x8040);
IkReal x8059=(r00*x8055);
IkReal x8060=(sj1*x8040);
IkReal x8061=(cj1*x8041);
evalcond[0]=((((-1.0)*sj6*x8056))+((cj6*r20))+x8061);
evalcond[1]=((((-1.0)*x8045*x8056))+(((-1.0)*r20*x8047))+(((-1.0)*r22*x8048))+x8058);
evalcond[2]=(((r01*x8043))+((sj6*x8042))+x8040+(((-1.0)*x8046*x8049))+(((-1.0)*cj0*r00*x8049)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*r01*sj6*x8050))+((r11*x8043))+x8057+(((-1.0)*x8049*x8054)));
evalcond[4]=((((-0.0718)*x8058))+((r20*x8055))+(((-0.0001)*sj1))+(((-1.0)*r21*x8052))+pz+(((-0.1246)*cj1))+(((0.02626)*x8061)));
evalcond[5]=(((cj0*cj5*r02))+(((-1.0)*x8041))+((sj0*x8053))+((x8046*x8047))+((cj0*r01*x8045))+((r00*sj5*x8043))+((x8042*x8045)));
evalcond[6]=(((r10*sj5*x8043))+(((-1.0)*r02*sj0*x8048))+(((-1.0)*r00*x8047*x8050))+((cj0*x8053))+(((-1.0)*r01*x8045*x8050))+x8060+((cj0*r11*x8045)));
evalcond[7]=((0.21226)+(((-1.0)*x8046*x8055))+(((-1.0)*py*x8050))+(((0.02626)*x8040))+(((0.0718)*x8041))+(((-1.0)*px*x8051))+((x8043*x8044))+((x8042*x8052))+(((-1.0)*cj0*x8059)));
evalcond[8]=((((-0.1246)*sj1))+(((0.02626)*x8057))+(((-1.0)*py*x8051))+(((-0.0718)*x8060))+((sj0*x8059))+(((0.026255)*r11*x8043))+(((-1.0)*sj0*sj6*x8044))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x8054*x8055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8062=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8062.valid){
continue;
}
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8062.value)))+(x8063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8064=IKsin(j4);
IkReal x8065=IKcos(j4);
IkReal x8066=(r11*sj0);
IkReal x8067=(cj0*sj6);
IkReal x8068=((0.026255)*r01);
IkReal x8069=(cj6*sj5);
IkReal x8070=(r10*sj0);
IkReal x8071=(sj5*sj6);
IkReal x8072=((1.0)*cj5);
IkReal x8073=((1.0)*cj6);
IkReal x8074=((1.0)*sj0);
IkReal x8075=((1.0)*cj0);
IkReal x8076=((0.026255)*sj6);
IkReal x8077=(cj5*r12);
IkReal x8078=(cj0*r10);
IkReal x8079=((0.026255)*cj6);
IkReal x8080=((1.0)*r21);
IkReal x8081=(sj1*x8065);
IkReal x8082=(cj1*x8064);
IkReal x8083=(r00*x8079);
IkReal x8084=(sj1*x8064);
IkReal x8085=(cj1*x8065);
evalcond[0]=((((-1.0)*sj6*x8080))+((cj6*r20))+x8085);
evalcond[1]=((((-1.0)*r20*x8071))+(((-1.0)*r22*x8072))+(((-1.0)*x8069*x8080))+x8082);
evalcond[2]=((((-1.0)*cj0*r00*x8073))+((r01*x8067))+(((-1.0)*x8070*x8073))+x8064+((sj6*x8066)));
evalcond[3]=((((-1.0)*r01*sj6*x8074))+((cj6*r00*sj0))+(((-1.0)*x8073*x8078))+x8081+((r11*x8067)));
evalcond[4]=(((r20*x8079))+(((-0.0718)*x8082))+(((-0.0001)*sj1))+(((0.02626)*x8085))+pz+(((-0.1246)*cj1))+(((-1.0)*r21*x8076)));
evalcond[5]=((((-1.0)*x8065))+((cj0*cj5*r02))+((r00*sj5*x8067))+((sj0*x8077))+((x8066*x8069))+((x8070*x8071))+((cj0*r01*x8069)));
evalcond[6]=(((cj0*r11*x8069))+((r10*sj5*x8067))+(((-1.0)*r02*sj0*x8072))+(((-1.0)*r01*x8069*x8074))+((cj0*x8077))+x8084+(((-1.0)*r00*x8071*x8074)));
evalcond[7]=((0.21226)+(((-1.0)*py*x8074))+((x8066*x8076))+(((-1.0)*cj0*x8083))+((x8067*x8068))+(((0.0718)*x8065))+(((-1.0)*x8070*x8079))+(((-1.0)*px*x8075))+(((0.02626)*x8064)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*py*x8075))+(((-0.0718)*x8084))+(((-1.0)*sj0*sj6*x8068))+((sj0*x8083))+(((0.02626)*x8081))+(((0.026255)*r11*x8067))+(((-1.0)*x8078*x8079))+(((0.0001)*cj1))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8086=(cj0*sj5);
IkReal x8087=(cj5*cj6);
IkReal x8088=((1.0)*sj5);
IkReal x8089=((1.0)*cj0);
IkReal x8090=((1.0)*sj0);
IkReal x8091=(cj5*sj6);
IkReal x8092=(r10*x8091);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+((r21*x8087))+(((-1.0)*r22*x8088))+((r20*x8091)));
evalcond[2]=((((-1.0)*r00*x8089*x8091))+((r12*sj0*sj5))+(((-1.0)*x8090*x8092))+(((-1.0)*r11*x8087*x8090))+(((-1.0)*r01*x8087*x8089))+((r02*x8086)));
evalcond[3]=((((-1.0)*r02*sj0*x8088))+((r00*sj0*x8091))+((r12*x8086))+(((-1.0)*x8089*x8092))+(((-1.0)*r11*x8087*x8089))+(((-1.0)*cj1))+((r01*sj0*x8087)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8093=IKPowWithIntegerCheck(cj1,-1);
if(!x8093.valid){
continue;
}
CheckValue<IkReal> x8094=IKPowWithIntegerCheck(sj1,-1);
if(!x8094.valid){
continue;
}
if( IKabs(((x8093.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8094.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8093.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x8094.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8093.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x8094.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=(r11*sj0);
IkReal x8098=(cj0*sj6);
IkReal x8099=((0.026255)*r01);
IkReal x8100=(cj6*sj5);
IkReal x8101=(r10*sj0);
IkReal x8102=(sj5*sj6);
IkReal x8103=((1.0)*cj5);
IkReal x8104=((1.0)*cj6);
IkReal x8105=((1.0)*sj0);
IkReal x8106=((1.0)*cj0);
IkReal x8107=((0.026255)*sj6);
IkReal x8108=(cj5*r12);
IkReal x8109=(cj0*r10);
IkReal x8110=((0.026255)*cj6);
IkReal x8111=((1.0)*r21);
IkReal x8112=(sj1*x8096);
IkReal x8113=(cj1*x8095);
IkReal x8114=(r00*x8110);
IkReal x8115=(sj1*x8095);
IkReal x8116=(cj1*x8096);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x8111))+x8116);
evalcond[1]=((((-1.0)*r20*x8102))+(((-1.0)*r22*x8103))+(((-1.0)*x8100*x8111))+x8113);
evalcond[2]=((((-1.0)*x8095))+((sj6*x8097))+(((-1.0)*cj0*r00*x8104))+(((-1.0)*x8101*x8104))+((r01*x8098)));
evalcond[3]=((((-1.0)*x8104*x8109))+((cj6*r00*sj0))+((r11*x8098))+x8112+(((-1.0)*r01*sj6*x8105)));
evalcond[4]=((((-0.0001)*sj1))+((r20*x8110))+(((-1.0)*r21*x8107))+pz+(((-0.0718)*x8113))+(((-0.1246)*cj1))+(((0.02626)*x8116)));
evalcond[5]=(((r00*sj5*x8098))+((sj0*x8108))+((x8101*x8102))+((cj0*cj5*r02))+((cj0*r01*x8100))+((x8097*x8100))+x8096);
evalcond[6]=(((r10*sj5*x8098))+(((-1.0)*r00*x8102*x8105))+(((-1.0)*r01*x8100*x8105))+(((-1.0)*r02*sj0*x8103))+((cj0*x8108))+((cj0*r11*x8100))+x8115);
evalcond[7]=((0.01734)+((x8098*x8099))+(((-1.0)*cj0*x8114))+(((-1.0)*px*x8106))+((x8097*x8107))+(((-1.0)*x8101*x8110))+(((-0.02626)*x8095))+(((-1.0)*py*x8105))+(((-0.0718)*x8096)));
evalcond[8]=((((-1.0)*x8109*x8110))+(((-0.1246)*sj1))+(((0.026255)*r11*x8098))+(((-1.0)*sj0*sj6*x8099))+(((0.0001)*cj1))+((px*sj0))+(((-0.0718)*x8115))+(((0.02626)*x8112))+((sj0*x8114))+(((-1.0)*py*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8117=((1.0)*cj6);
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(cj1,-1);
if(!x8118.valid){
continue;
}
if( IKabs(((((-1.0)*r10*sj0*x8117))+((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8118.value)*(((((-1.0)*r20*x8117))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj0*x8117))+((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8117))))+IKsqr(((x8118.value)*(((((-1.0)*r20*x8117))+((r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*sj0*x8117))+((r11*sj0*sj6))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8117))), ((x8118.value)*(((((-1.0)*r20*x8117))+((r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(r11*sj0);
IkReal x8122=(cj0*sj6);
IkReal x8123=((0.026255)*r01);
IkReal x8124=(cj6*sj5);
IkReal x8125=(r10*sj0);
IkReal x8126=(sj5*sj6);
IkReal x8127=((1.0)*cj5);
IkReal x8128=((1.0)*cj6);
IkReal x8129=((1.0)*sj0);
IkReal x8130=((1.0)*cj0);
IkReal x8131=((0.026255)*sj6);
IkReal x8132=(cj5*r12);
IkReal x8133=(cj0*r10);
IkReal x8134=((0.026255)*cj6);
IkReal x8135=((1.0)*r21);
IkReal x8136=(sj1*x8120);
IkReal x8137=(cj1*x8119);
IkReal x8138=(r00*x8134);
IkReal x8139=(sj1*x8119);
IkReal x8140=(cj1*x8120);
evalcond[0]=((((-1.0)*sj6*x8135))+((cj6*r20))+x8140);
evalcond[1]=((((-1.0)*x8124*x8135))+(((-1.0)*r20*x8126))+(((-1.0)*r22*x8127))+x8137);
evalcond[2]=(((sj6*x8121))+(((-1.0)*x8125*x8128))+((r01*x8122))+(((-1.0)*cj0*r00*x8128))+(((-1.0)*x8119)));
evalcond[3]=(((cj6*r00*sj0))+((r11*x8122))+(((-1.0)*x8128*x8133))+(((-1.0)*r01*sj6*x8129))+x8136);
evalcond[4]=((((-0.0001)*sj1))+(((-0.0718)*x8137))+((r20*x8134))+pz+(((0.02626)*x8140))+(((-1.0)*r21*x8131))+(((-0.1246)*cj1)));
evalcond[5]=(((cj0*cj5*r02))+((x8121*x8124))+((cj0*r01*x8124))+((x8125*x8126))+((sj0*x8132))+((r00*sj5*x8122))+x8120);
evalcond[6]=(((r10*sj5*x8122))+(((-1.0)*r00*x8126*x8129))+(((-1.0)*r02*sj0*x8127))+((cj0*x8132))+x8139+(((-1.0)*r01*x8124*x8129))+((cj0*r11*x8124)));
evalcond[7]=((0.01734)+(((-1.0)*py*x8129))+((x8122*x8123))+(((-1.0)*px*x8130))+((x8121*x8131))+(((-1.0)*x8125*x8134))+(((-0.02626)*x8119))+(((-0.0718)*x8120))+(((-1.0)*cj0*x8138)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*sj0*sj6*x8123))+(((0.026255)*r11*x8122))+(((-0.0718)*x8139))+(((-1.0)*py*x8130))+(((0.0001)*cj1))+(((-1.0)*x8133*x8134))+((px*sj0))+((sj0*x8138))+(((0.02626)*x8136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8141=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8141.valid){
continue;
}
CheckValue<IkReal> x8142 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8141.value)))+(x8142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8143=IKsin(j4);
IkReal x8144=IKcos(j4);
IkReal x8145=(r11*sj0);
IkReal x8146=(cj0*sj6);
IkReal x8147=((0.026255)*r01);
IkReal x8148=(cj6*sj5);
IkReal x8149=(r10*sj0);
IkReal x8150=(sj5*sj6);
IkReal x8151=((1.0)*cj5);
IkReal x8152=((1.0)*cj6);
IkReal x8153=((1.0)*sj0);
IkReal x8154=((1.0)*cj0);
IkReal x8155=((0.026255)*sj6);
IkReal x8156=(cj5*r12);
IkReal x8157=(cj0*r10);
IkReal x8158=((0.026255)*cj6);
IkReal x8159=((1.0)*r21);
IkReal x8160=(sj1*x8144);
IkReal x8161=(cj1*x8143);
IkReal x8162=(r00*x8158);
IkReal x8163=(sj1*x8143);
IkReal x8164=(cj1*x8144);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x8159))+x8164);
evalcond[1]=((((-1.0)*x8148*x8159))+(((-1.0)*r20*x8150))+(((-1.0)*r22*x8151))+x8161);
evalcond[2]=(((sj6*x8145))+((r01*x8146))+(((-1.0)*x8143))+(((-1.0)*cj0*r00*x8152))+(((-1.0)*x8149*x8152)));
evalcond[3]=(((cj6*r00*sj0))+((r11*x8146))+(((-1.0)*r01*sj6*x8153))+x8160+(((-1.0)*x8152*x8157)));
evalcond[4]=((((-0.0718)*x8161))+((r20*x8158))+(((-0.0001)*sj1))+(((0.02626)*x8164))+pz+(((-0.1246)*cj1))+(((-1.0)*r21*x8155)));
evalcond[5]=(((r00*sj5*x8146))+((cj0*cj5*r02))+((sj0*x8156))+((x8149*x8150))+((x8145*x8148))+x8144+((cj0*r01*x8148)));
evalcond[6]=(((cj0*x8156))+(((-1.0)*r00*x8150*x8153))+(((-1.0)*r02*sj0*x8151))+(((-1.0)*r01*x8148*x8153))+x8163+((cj0*r11*x8148))+((r10*sj5*x8146)));
evalcond[7]=((0.01734)+(((-1.0)*py*x8153))+(((-0.02626)*x8143))+((x8145*x8155))+((x8146*x8147))+(((-0.0718)*x8144))+(((-1.0)*x8149*x8158))+(((-1.0)*cj0*x8162))+(((-1.0)*px*x8154)));
evalcond[8]=((((0.026255)*r11*x8146))+(((-0.1246)*sj1))+(((-1.0)*py*x8154))+(((-0.0718)*x8163))+(((0.02626)*x8160))+((sj0*x8162))+(((-1.0)*x8157*x8158))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*sj0*sj6*x8147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(cj3,-1);
if(!x8172.valid){
continue;
}
IkReal x8165=x8172.value;
IkReal x8166=(cj6*r10);
IkReal x8167=(r11*sj6);
IkReal x8168=(sj1*sj3);
IkReal x8169=(cj0*cj6*r00);
IkReal x8170=(sj0*x8168);
IkReal x8171=(cj0*r01*sj6);
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(cj1,-1);
if(!x8173.valid){
continue;
}
if( IKabs((x8165*(((((-1.0)*x8171))+(((-1.0)*sj0*x8167))+((sj0*x8166))+x8169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8165*(x8173.value)*(((((-1.0)*cj3*cj6*r20))+(((-1.0)*x8168*x8169))+((cj3*r21*sj6))+((x8168*x8171))+(((-1.0)*x8166*x8170))+((x8167*x8170)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8165*(((((-1.0)*x8171))+(((-1.0)*sj0*x8167))+((sj0*x8166))+x8169))))+IKsqr((x8165*(x8173.value)*(((((-1.0)*cj3*cj6*r20))+(((-1.0)*x8168*x8169))+((cj3*r21*sj6))+((x8168*x8171))+(((-1.0)*x8166*x8170))+((x8167*x8170))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8165*(((((-1.0)*x8171))+(((-1.0)*sj0*x8167))+((sj0*x8166))+x8169))), (x8165*(x8173.value)*(((((-1.0)*cj3*cj6*r20))+(((-1.0)*x8168*x8169))+((cj3*r21*sj6))+((x8168*x8171))+(((-1.0)*x8166*x8170))+((x8167*x8170))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8174=IKsin(j4);
IkReal x8175=IKcos(j4);
IkReal x8176=(r11*sj0);
IkReal x8177=(sj1*sj3);
IkReal x8178=(cj0*sj6);
IkReal x8179=((0.026255)*r01);
IkReal x8180=(cj5*r12);
IkReal x8181=(cj6*sj5);
IkReal x8182=(r10*sj0);
IkReal x8183=(sj5*sj6);
IkReal x8184=((0.026255)*cj6);
IkReal x8185=(cj1*sj3);
IkReal x8186=((1.0)*cj5);
IkReal x8187=((1.0)*cj6);
IkReal x8188=((1.0)*sj0);
IkReal x8189=((1.0)*cj0);
IkReal x8190=(cj0*r00);
IkReal x8191=((0.026255)*sj6);
IkReal x8192=(r00*sj0);
IkReal x8193=(cj0*r10);
IkReal x8194=((1.0)*r21);
IkReal x8195=((0.02626)*x8174);
IkReal x8196=(sj1*x8175);
IkReal x8197=(cj1*x8174);
IkReal x8198=(sj1*x8174);
IkReal x8199=((1.0)*x8175);
IkReal x8200=((0.0718)*x8175);
IkReal x8201=(cj1*x8175);
evalcond[0]=(((x8174*x8177))+(((-1.0)*sj6*x8194))+((cj6*r20))+x8201);
evalcond[1]=((((-1.0)*x8182*x8187))+((cj3*x8174))+((r01*x8178))+(((-1.0)*x8187*x8190))+((sj6*x8176)));
evalcond[2]=((((-1.0)*r22*x8186))+(((-1.0)*x8181*x8194))+x8197+(((-1.0)*x8177*x8199))+(((-1.0)*r20*x8183)));
evalcond[3]=((((-1.0)*r01*sj6*x8188))+((cj6*x8192))+((r11*x8178))+(((-1.0)*x8174*x8185))+(((-1.0)*x8187*x8193))+x8196);
evalcond[4]=((((-1.0)*cj3*x8199))+((cj0*cj5*r02))+((sj0*x8180))+((x8182*x8183))+((cj0*r01*x8181))+((x8176*x8181))+((r00*sj5*x8178)));
evalcond[5]=((((-1.0)*r02*sj0*x8186))+(((-1.0)*r00*x8183*x8188))+((cj0*r11*x8181))+((x8175*x8185))+(((-1.0)*r01*x8181*x8188))+((r10*sj5*x8178))+x8198+((cj0*x8180)));
evalcond[6]=((0.1148)+(((-1.0)*x8182*x8184))+(((-1.0)*px*x8189))+((cj3*x8195))+(((-1.0)*py*x8188))+(((-1.0)*x8184*x8190))+(((0.09746)*cj3))+((x8176*x8191))+((cj3*x8200))+((x8178*x8179)));
evalcond[7]=(((x8177*x8195))+(((-0.0001)*sj1))+(((-0.0718)*x8197))+((x8177*x8200))+pz+(((-1.0)*r21*x8191))+(((0.02626)*x8201))+(((-0.1246)*cj1))+(((0.09746)*x8177))+((r20*x8184)));
evalcond[8]=((((-1.0)*sj0*sj6*x8179))+(((-0.1246)*sj1))+(((-0.09746)*x8185))+((x8184*x8192))+(((-0.0718)*x8198))+(((-1.0)*py*x8189))+(((0.02626)*x8196))+(((-1.0)*x8185*x8195))+(((-1.0)*x8184*x8193))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x8185*x8200))+(((0.026255)*r11*x8178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8202=((1.0)*cj0);
IkReal x8203=(cj1*cj6);
IkReal x8204=(sj1*sj6);
IkReal x8205=(r01*sj0);
IkReal x8206=((1.0)*r20);
IkReal x8207=(r00*sj0);
IkReal x8208=(cj6*sj1);
IkReal x8209=(cj1*sj6);
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(sj3,-1);
if(!x8210.valid){
continue;
}
if( IKabs(((x8210.value)*(((((-1.0)*x8205*x8209))+((x8203*x8207))+(((-1.0)*r10*x8202*x8203))+((cj0*r11*x8209))+(((-1.0)*x8206*x8208))+((r21*x8204)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8202*x8204))+((x8204*x8205))+((cj0*r10*x8208))+(((-1.0)*x8207*x8208))+((r21*x8209))+(((-1.0)*x8203*x8206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8210.value)*(((((-1.0)*x8205*x8209))+((x8203*x8207))+(((-1.0)*r10*x8202*x8203))+((cj0*r11*x8209))+(((-1.0)*x8206*x8208))+((r21*x8204))))))+IKsqr(((((-1.0)*r11*x8202*x8204))+((x8204*x8205))+((cj0*r10*x8208))+(((-1.0)*x8207*x8208))+((r21*x8209))+(((-1.0)*x8203*x8206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8210.value)*(((((-1.0)*x8205*x8209))+((x8203*x8207))+(((-1.0)*r10*x8202*x8203))+((cj0*r11*x8209))+(((-1.0)*x8206*x8208))+((r21*x8204))))), ((((-1.0)*r11*x8202*x8204))+((x8204*x8205))+((cj0*r10*x8208))+(((-1.0)*x8207*x8208))+((r21*x8209))+(((-1.0)*x8203*x8206))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8211=IKsin(j4);
IkReal x8212=IKcos(j4);
IkReal x8213=(r11*sj0);
IkReal x8214=(sj1*sj3);
IkReal x8215=(cj0*sj6);
IkReal x8216=((0.026255)*r01);
IkReal x8217=(cj5*r12);
IkReal x8218=(cj6*sj5);
IkReal x8219=(r10*sj0);
IkReal x8220=(sj5*sj6);
IkReal x8221=((0.026255)*cj6);
IkReal x8222=(cj1*sj3);
IkReal x8223=((1.0)*cj5);
IkReal x8224=((1.0)*cj6);
IkReal x8225=((1.0)*sj0);
IkReal x8226=((1.0)*cj0);
IkReal x8227=(cj0*r00);
IkReal x8228=((0.026255)*sj6);
IkReal x8229=(r00*sj0);
IkReal x8230=(cj0*r10);
IkReal x8231=((1.0)*r21);
IkReal x8232=((0.02626)*x8211);
IkReal x8233=(sj1*x8212);
IkReal x8234=(cj1*x8211);
IkReal x8235=(sj1*x8211);
IkReal x8236=((1.0)*x8212);
IkReal x8237=((0.0718)*x8212);
IkReal x8238=(cj1*x8212);
evalcond[0]=((((-1.0)*sj6*x8231))+((x8211*x8214))+((cj6*r20))+x8238);
evalcond[1]=((((-1.0)*x8219*x8224))+(((-1.0)*x8224*x8227))+((r01*x8215))+((cj3*x8211))+((sj6*x8213)));
evalcond[2]=((((-1.0)*r20*x8220))+(((-1.0)*x8218*x8231))+(((-1.0)*x8214*x8236))+(((-1.0)*r22*x8223))+x8234);
evalcond[3]=(((r11*x8215))+(((-1.0)*r01*sj6*x8225))+(((-1.0)*x8211*x8222))+(((-1.0)*x8224*x8230))+((cj6*x8229))+x8233);
evalcond[4]=(((cj0*cj5*r02))+((r00*sj5*x8215))+((cj0*r01*x8218))+((x8219*x8220))+(((-1.0)*cj3*x8236))+((x8213*x8218))+((sj0*x8217)));
evalcond[5]=((((-1.0)*r01*x8218*x8225))+((cj0*x8217))+(((-1.0)*r02*sj0*x8223))+((r10*sj5*x8215))+(((-1.0)*r00*x8220*x8225))+((cj0*r11*x8218))+((x8212*x8222))+x8235);
evalcond[6]=((0.1148)+(((-1.0)*x8219*x8221))+((cj3*x8232))+((cj3*x8237))+((x8213*x8228))+(((-1.0)*x8221*x8227))+(((-1.0)*px*x8226))+(((0.09746)*cj3))+(((-1.0)*py*x8225))+((x8215*x8216)));
evalcond[7]=(((r20*x8221))+(((-0.0001)*sj1))+(((0.09746)*x8214))+pz+(((-0.0718)*x8234))+(((0.02626)*x8238))+(((-0.1246)*cj1))+(((-1.0)*r21*x8228))+((x8214*x8232))+((x8214*x8237)));
evalcond[8]=((((-1.0)*x8222*x8232))+(((-1.0)*x8222*x8237))+(((-1.0)*x8221*x8230))+(((-0.1246)*sj1))+(((-0.09746)*x8222))+((x8221*x8229))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x8215))+(((-0.0718)*x8235))+(((0.02626)*x8233))+(((-1.0)*py*x8226))+(((-1.0)*sj0*sj6*x8216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8239=cj3*cj3;
IkReal x8240=(cj1*cj6);
IkReal x8241=((1.0)*r21);
IkReal x8242=(cj1*sj6);
IkReal x8243=(sj1*sj3);
IkReal x8244=(r20*sj5);
IkReal x8245=(cj5*r22);
CheckValue<IkReal> x8246=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x8239*(cj1*cj1)))+x8239)),-1);
if(!x8246.valid){
continue;
}
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x8240*x8241))+(((-1.0)*sj6*x8241*x8243))+(((-1.0)*x8242*x8244))+((cj6*r20*x8243))+(((-1.0)*cj1*x8245)))),(((r20*x8240))+(((-1.0)*x8241*x8242))+((x8243*x8245))+((sj6*x8243*x8244))+((cj6*r21*sj5*x8243))),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8246.value)))+(x8247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8248=IKsin(j4);
IkReal x8249=IKcos(j4);
IkReal x8250=(r11*sj0);
IkReal x8251=(sj1*sj3);
IkReal x8252=(cj0*sj6);
IkReal x8253=((0.026255)*r01);
IkReal x8254=(cj5*r12);
IkReal x8255=(cj6*sj5);
IkReal x8256=(r10*sj0);
IkReal x8257=(sj5*sj6);
IkReal x8258=((0.026255)*cj6);
IkReal x8259=(cj1*sj3);
IkReal x8260=((1.0)*cj5);
IkReal x8261=((1.0)*cj6);
IkReal x8262=((1.0)*sj0);
IkReal x8263=((1.0)*cj0);
IkReal x8264=(cj0*r00);
IkReal x8265=((0.026255)*sj6);
IkReal x8266=(r00*sj0);
IkReal x8267=(cj0*r10);
IkReal x8268=((1.0)*r21);
IkReal x8269=((0.02626)*x8248);
IkReal x8270=(sj1*x8249);
IkReal x8271=(cj1*x8248);
IkReal x8272=(sj1*x8248);
IkReal x8273=((1.0)*x8249);
IkReal x8274=((0.0718)*x8249);
IkReal x8275=(cj1*x8249);
evalcond[0]=((((-1.0)*sj6*x8268))+((cj6*r20))+((x8248*x8251))+x8275);
evalcond[1]=(((r01*x8252))+(((-1.0)*x8261*x8264))+(((-1.0)*x8256*x8261))+((cj3*x8248))+((sj6*x8250)));
evalcond[2]=((((-1.0)*r22*x8260))+(((-1.0)*x8255*x8268))+(((-1.0)*x8251*x8273))+(((-1.0)*r20*x8257))+x8271);
evalcond[3]=((((-1.0)*r01*sj6*x8262))+(((-1.0)*x8248*x8259))+(((-1.0)*x8261*x8267))+((cj6*x8266))+((r11*x8252))+x8270);
evalcond[4]=(((x8256*x8257))+((cj0*cj5*r02))+((cj0*r01*x8255))+((sj0*x8254))+(((-1.0)*cj3*x8273))+((x8250*x8255))+((r00*sj5*x8252)));
evalcond[5]=((((-1.0)*r01*x8255*x8262))+((cj0*r11*x8255))+((r10*sj5*x8252))+(((-1.0)*r02*sj0*x8260))+((cj0*x8254))+(((-1.0)*r00*x8257*x8262))+((x8249*x8259))+x8272);
evalcond[6]=((0.1148)+((x8250*x8265))+(((-1.0)*px*x8263))+(((-1.0)*x8258*x8264))+((cj3*x8274))+(((-1.0)*py*x8262))+(((0.09746)*cj3))+((cj3*x8269))+(((-1.0)*x8256*x8258))+((x8252*x8253)));
evalcond[7]=((((-1.0)*r21*x8265))+(((-0.0001)*sj1))+(((-0.0718)*x8271))+((x8251*x8274))+((r20*x8258))+((x8251*x8269))+pz+(((-0.1246)*cj1))+(((0.02626)*x8275))+(((0.09746)*x8251)));
evalcond[8]=((((-0.1246)*sj1))+(((-0.0718)*x8272))+(((-1.0)*sj0*sj6*x8253))+(((-1.0)*x8258*x8267))+(((0.026255)*r11*x8252))+(((-1.0)*x8259*x8274))+((x8258*x8266))+(((-1.0)*x8259*x8269))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*py*x8263))+(((0.02626)*x8270))+(((-0.09746)*x8259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x8276=(cj0*cj5);
IkReal x8277=((1.0)*sj5);
IkReal x8278=(cj5*cj6);
IkReal x8279=(cj5*sj6);
CheckValue<IkReal> x8280=IKPowWithIntegerCheck(sj1,-1);
if(!x8280.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r02*x8277))+((r10*sj0*x8279))+(((-1.0)*r12*sj0*x8277))+((r00*sj6*x8276))+((r11*sj0*x8278))+((cj6*r01*x8276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8280.value)*((((r20*x8279))+(((-1.0)*r22*x8277))+((r21*x8278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r02*x8277))+((r10*sj0*x8279))+(((-1.0)*r12*sj0*x8277))+((r00*sj6*x8276))+((r11*sj0*x8278))+((cj6*r01*x8276))))+IKsqr(((x8280.value)*((((r20*x8279))+(((-1.0)*r22*x8277))+((r21*x8278))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r02*x8277))+((r10*sj0*x8279))+(((-1.0)*r12*sj0*x8277))+((r00*sj6*x8276))+((r11*sj0*x8278))+((cj6*r01*x8276))), ((x8280.value)*((((r20*x8279))+(((-1.0)*r22*x8277))+((r21*x8278))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x8281=IKcos(j3);
IkReal x8282=(cj0*sj5);
IkReal x8283=(cj5*cj6);
IkReal x8284=((1.0)*sj5);
IkReal x8285=((1.0)*cj0);
IkReal x8286=((1.0)*sj0);
IkReal x8287=(cj5*sj6);
IkReal x8288=(r10*x8287);
evalcond[0]=(((r21*x8283))+(((-1.0)*sj1*x8281))+((r20*x8287))+(((-1.0)*r22*x8284)));
evalcond[1]=(((r12*sj0*sj5))+(IKsin(j3))+(((-1.0)*r00*x8285*x8287))+(((-1.0)*r01*x8283*x8285))+(((-1.0)*x8286*x8288))+(((-1.0)*r11*x8283*x8286))+((r02*x8282)));
evalcond[2]=((((-1.0)*x8285*x8288))+((r01*sj0*x8283))+((cj1*x8281))+(((-1.0)*r11*x8283*x8285))+(((-1.0)*r02*sj0*x8284))+((r12*x8282))+((r00*sj0*x8287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x8289=cj3*cj3;
IkReal x8290=(sj5*sj6);
IkReal x8291=(cj1*cj6);
IkReal x8292=(sj1*sj3);
IkReal x8293=(r21*sj5);
IkReal x8294=((1.0)*cj1);
IkReal x8295=(cj5*r22);
IkReal x8296=(r20*x8292);
IkReal x8297=((1.0)*r21*sj6);
IkReal x8298=((-1.0)+(((-1.0)*cj1*x8289*x8294))+x8289);
j4eval[0]=x8298;
j4eval[1]=((IKabs(((((-1.0)*r20*x8290*x8294))+((cj6*x8296))+(((-1.0)*x8294*x8295))+(((-1.0)*x8292*x8297))+(((-1.0)*x8291*x8293)))))+(IKabs(((((-1.0)*r21*sj6*x8294))+((r20*x8291))+((cj6*x8292*x8293))+((x8290*x8296))+((x8292*x8295))))));
j4eval[2]=IKsign(x8298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8299=(cj5*cj6);
IkReal x8300=(r11*sj0);
IkReal x8301=(cj0*sj6);
IkReal x8302=(cj6*sj5);
IkReal x8303=((1.0)*cj0);
IkReal x8304=(r10*sj0);
IkReal x8305=((1.0)*cj5);
IkReal x8306=(cj0*r02);
IkReal x8307=((1.0)*sj5);
IkReal x8308=(cj5*sj6);
IkReal x8309=(cj6*r00);
IkReal x8310=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x8299))+(((-1.0)*r22*x8307))+((r20*x8308)));
evalcond[2]=(((sj6*x8300))+(((-1.0)*cj6*x8304))+((r01*x8301))+(((-1.0)*x8303*x8309)));
evalcond[3]=((1.0)+((sj5*x8310))+(((-1.0)*r01*x8299*x8303))+((sj5*x8306))+(((-1.0)*sj6*x8304*x8305))+(((-1.0)*x8299*x8300))+(((-1.0)*r00*x8301*x8305)));
evalcond[4]=(((x8300*x8302))+((cj5*x8310))+((r00*sj5*x8301))+((cj0*r01*x8302))+((sj5*sj6*x8304))+((cj5*x8306)));
evalcond[5]=(((r01*sj0*x8299))+(((-1.0)*r02*sj0*x8307))+(((-1.0)*r10*x8301*x8305))+(((-1.0)*r11*x8299*x8303))+((cj0*r12*sj5))+((r00*sj0*x8308)));
evalcond[6]=((0.1148)+(((0.026255)*sj6*x8300))+(((0.026255)*r01*x8301))+(((-1.0)*py*sj0))+(((-1.0)*px*x8303))+(((-0.026255)*cj0*x8309))+(((-0.026255)*cj6*x8304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8311=(cj6*r21);
IkReal x8312=(r20*sj6);
IkReal x8313=(r21*sj6);
IkReal x8314=(cj1*sj5);
IkReal x8315=(cj5*r22);
IkReal x8316=((1.0)*sj1*sj5);
IkReal x8317=((1.0)*cj6*r20);
if( IKabs((((cj1*x8315))+((x8312*x8314))+((x8311*x8314))+((sj1*x8313))+(((-1.0)*sj1*x8317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x8312*x8316))+((cj1*x8313))+(((-1.0)*cj1*x8317))+(((-1.0)*sj1*x8315))+(((-1.0)*x8311*x8316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8315))+((x8312*x8314))+((x8311*x8314))+((sj1*x8313))+(((-1.0)*sj1*x8317))))+IKsqr(((((-1.0)*x8312*x8316))+((cj1*x8313))+(((-1.0)*cj1*x8317))+(((-1.0)*sj1*x8315))+(((-1.0)*x8311*x8316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x8315))+((x8312*x8314))+((x8311*x8314))+((sj1*x8313))+(((-1.0)*sj1*x8317))), ((((-1.0)*x8312*x8316))+((cj1*x8313))+(((-1.0)*cj1*x8317))+(((-1.0)*sj1*x8315))+(((-1.0)*x8311*x8316))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8318=IKsin(j4);
IkReal x8319=IKcos(j4);
IkReal x8320=((1.0)*cj5);
IkReal x8321=((1.0)*cj0);
IkReal x8322=(cj6*r10);
IkReal x8323=(cj6*r20);
IkReal x8324=((1.0)*sj5);
IkReal x8325=(r21*sj6);
IkReal x8326=(cj0*sj5);
IkReal x8327=(cj1*x8319);
IkReal x8328=(sj1*x8318);
IkReal x8329=(sj1*x8319);
IkReal x8330=(cj0*r11*sj6);
IkReal x8331=(cj1*x8318);
IkReal x8332=(cj6*r00*sj0);
IkReal x8333=(r01*sj0*sj6);
IkReal x8334=(x8328+x8327);
evalcond[0]=(x8323+x8334+(((-1.0)*x8325)));
evalcond[1]=((((-1.0)*cj6*r21*x8324))+x8331+(((-1.0)*r22*x8320))+(((-1.0)*r20*sj6*x8324))+(((-1.0)*x8329)));
evalcond[2]=(x8329+x8332+x8330+(((-1.0)*x8333))+(((-1.0)*x8331))+(((-1.0)*x8321*x8322)));
evalcond[3]=((((0.0718)*x8329))+(((0.09736)*sj1))+(((-0.026255)*x8325))+(((-0.0718)*x8331))+pz+(((-0.1246)*cj1))+(((0.026255)*x8323))+(((0.02626)*x8328))+(((0.02626)*x8327)));
evalcond[4]=(x8334+((r10*sj6*x8326))+((cj0*cj5*r12))+(((-1.0)*cj6*r01*sj0*x8324))+(((-1.0)*r02*sj0*x8320))+(((-1.0)*r00*sj0*sj6*x8324))+((cj6*r11*x8326)));
evalcond[5]=((((-0.1246)*sj1))+(((-0.09736)*cj1))+(((-0.02626)*x8331))+(((-0.026255)*cj0*x8322))+(((-0.0718)*x8327))+(((-0.0718)*x8328))+(((-1.0)*py*x8321))+((px*sj0))+(((0.02626)*x8329))+(((0.026255)*x8332))+(((0.026255)*x8330))+(((-0.026255)*x8333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8335=(cj5*cj6);
IkReal x8336=(r11*sj0);
IkReal x8337=(cj0*sj6);
IkReal x8338=(cj6*sj5);
IkReal x8339=((1.0)*cj0);
IkReal x8340=(r10*sj0);
IkReal x8341=((1.0)*cj5);
IkReal x8342=(cj0*r02);
IkReal x8343=((1.0)*sj5);
IkReal x8344=(cj5*sj6);
IkReal x8345=(cj6*r00);
IkReal x8346=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x8335))+((r20*x8344))+(((-1.0)*r22*x8343)));
evalcond[2]=((((-1.0)*cj6*x8340))+((sj6*x8336))+(((-1.0)*x8339*x8345))+((r01*x8337)));
evalcond[3]=((-1.0)+((sj5*x8342))+((sj5*x8346))+(((-1.0)*r01*x8335*x8339))+(((-1.0)*r00*x8337*x8341))+(((-1.0)*x8335*x8336))+(((-1.0)*sj6*x8340*x8341)));
evalcond[4]=(((cj5*x8342))+((cj5*x8346))+((r00*sj5*x8337))+((sj5*sj6*x8340))+((cj0*r01*x8338))+((x8336*x8338)));
evalcond[5]=((((-1.0)*r10*x8337*x8341))+(((-1.0)*r11*x8335*x8339))+((r01*sj0*x8335))+((r00*sj0*x8344))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x8343)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x8337))+(((-0.026255)*cj6*x8340))+(((-0.026255)*cj0*x8345))+(((-1.0)*py*sj0))+(((-1.0)*px*x8339))+(((0.026255)*sj6*x8336)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8347=(cj5*r22);
IkReal x8348=(cj6*r20);
IkReal x8349=(r21*sj1);
IkReal x8350=(cj6*sj5);
IkReal x8351=(cj1*r21);
IkReal x8352=(r20*sj5*sj6);
if( IKabs((((x8350*x8351))+(((-1.0)*sj6*x8349))+((sj1*x8348))+((cj1*x8347))+((cj1*x8352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x8347))+((sj1*x8352))+((sj6*x8351))+(((-1.0)*cj1*x8348))+((x8349*x8350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x8350*x8351))+(((-1.0)*sj6*x8349))+((sj1*x8348))+((cj1*x8347))+((cj1*x8352))))+IKsqr((((sj1*x8347))+((sj1*x8352))+((sj6*x8351))+(((-1.0)*cj1*x8348))+((x8349*x8350))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x8350*x8351))+(((-1.0)*sj6*x8349))+((sj1*x8348))+((cj1*x8347))+((cj1*x8352))), (((sj1*x8347))+((sj1*x8352))+((sj6*x8351))+(((-1.0)*cj1*x8348))+((x8349*x8350))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8353=IKcos(j4);
IkReal x8354=IKsin(j4);
IkReal x8355=(cj0*sj6);
IkReal x8356=((1.0)*cj5);
IkReal x8357=((1.0)*cj0);
IkReal x8358=(cj6*r10);
IkReal x8359=(cj6*r20);
IkReal x8360=((1.0)*sj5);
IkReal x8361=(r21*sj6);
IkReal x8362=(sj1*x8353);
IkReal x8363=(cj1*x8354);
IkReal x8364=(cj1*x8353);
IkReal x8365=(sj1*x8354);
IkReal x8366=(cj6*r00*sj0);
IkReal x8367=(r01*sj0*sj6);
IkReal x8368=(x8363+x8362);
evalcond[0]=(x8364+x8359+(((-1.0)*x8365))+(((-1.0)*x8361)));
evalcond[1]=((((-1.0)*r20*sj6*x8360))+x8368+(((-1.0)*r22*x8356))+(((-1.0)*cj6*r21*x8360)));
evalcond[2]=(x8366+x8368+(((-1.0)*x8357*x8358))+(((-1.0)*x8367))+((r11*x8355)));
evalcond[3]=((((-0.09756)*sj1))+(((-0.026255)*x8361))+(((0.02626)*x8364))+pz+(((-0.02626)*x8365))+(((-0.0718)*x8363))+(((-0.0718)*x8362))+(((-0.1246)*cj1))+(((0.026255)*x8359)));
evalcond[4]=(x8365+(((-1.0)*cj6*r01*sj0*x8360))+((cj0*cj5*r12))+(((-1.0)*x8364))+((r10*sj5*x8355))+(((-1.0)*r00*sj0*sj6*x8360))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x8356)));
evalcond[5]=((((-0.1246)*sj1))+(((0.026255)*r11*x8355))+(((0.0718)*x8364))+(((-1.0)*py*x8357))+(((0.09756)*cj1))+(((-0.026255)*x8367))+(((0.026255)*x8366))+(((-0.026255)*cj0*x8358))+(((0.02626)*x8363))+(((0.02626)*x8362))+(((-0.0718)*x8365))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8369=(cj0*sj5);
IkReal x8370=(cj5*cj6);
IkReal x8371=((1.0)*sj5);
IkReal x8372=((1.0)*sj0);
IkReal x8373=((1.0)*cj0);
IkReal x8374=(cj5*sj6);
IkReal x8375=(r10*x8374);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj1))+((r20*x8374))+(((-1.0)*r22*x8371))+((r21*x8370)));
evalcond[2]=((((-1.0)*r01*x8370*x8373))+((r12*sj0*sj5))+(((-1.0)*x8372*x8375))+(((-1.0)*r11*x8370*x8372))+((r02*x8369))+(((-1.0)*r00*x8373*x8374)));
evalcond[3]=(((r01*sj0*x8370))+cj1+((r00*sj0*x8374))+(((-1.0)*x8373*x8375))+((r12*x8369))+(((-1.0)*r11*x8370*x8373))+(((-1.0)*r02*sj0*x8371)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(cj1,-1);
if(!x8376.valid){
continue;
}
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(sj1,-1);
if(!x8377.valid){
continue;
}
if( IKabs(((x8376.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8377.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8376.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x8377.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8376.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x8377.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8378=IKsin(j4);
IkReal x8379=IKcos(j4);
IkReal x8380=(r11*sj0);
IkReal x8381=(cj0*sj6);
IkReal x8382=((0.026255)*r01);
IkReal x8383=(cj6*sj5);
IkReal x8384=(r10*sj0);
IkReal x8385=(sj5*sj6);
IkReal x8386=((1.0)*cj5);
IkReal x8387=((1.0)*cj6);
IkReal x8388=((1.0)*sj0);
IkReal x8389=((1.0)*cj0);
IkReal x8390=((0.026255)*sj6);
IkReal x8391=(cj5*r12);
IkReal x8392=(cj0*r10);
IkReal x8393=((0.026255)*cj6);
IkReal x8394=((1.0)*r21);
IkReal x8395=(sj1*x8379);
IkReal x8396=(cj1*x8378);
IkReal x8397=(r00*x8393);
IkReal x8398=(sj1*x8378);
IkReal x8399=(cj1*x8379);
evalcond[0]=(x8399+((cj6*r20))+(((-1.0)*sj6*x8394)));
evalcond[1]=((((-1.0)*r20*x8385))+x8396+(((-1.0)*x8383*x8394))+(((-1.0)*r22*x8386)));
evalcond[2]=(x8378+((sj6*x8380))+(((-1.0)*x8384*x8387))+(((-1.0)*cj0*r00*x8387))+((r01*x8381)));
evalcond[3]=(x8395+(((-1.0)*x8387*x8392))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x8388))+((r11*x8381)));
evalcond[4]=(((r20*x8393))+(((-0.0001)*sj1))+pz+(((0.02626)*x8399))+(((-0.0718)*x8396))+(((-0.1246)*cj1))+(((-1.0)*r21*x8390)));
evalcond[5]=(((cj0*r01*x8383))+((cj0*cj5*r02))+((x8380*x8383))+((sj0*x8391))+(((-1.0)*x8379))+((r00*sj5*x8381))+((x8384*x8385)));
evalcond[6]=(((r10*sj5*x8381))+x8398+(((-1.0)*r01*x8383*x8388))+(((-1.0)*r02*sj0*x8386))+((cj0*r11*x8383))+(((-1.0)*r00*x8385*x8388))+((cj0*x8391)));
evalcond[7]=((0.21226)+((x8381*x8382))+(((-1.0)*px*x8389))+(((0.0718)*x8379))+(((-1.0)*cj0*x8397))+(((-1.0)*x8384*x8393))+((x8380*x8390))+(((0.02626)*x8378))+(((-1.0)*py*x8388)));
evalcond[8]=((((-0.1246)*sj1))+((sj0*x8397))+(((0.02626)*x8395))+(((-1.0)*x8392*x8393))+(((-0.0718)*x8398))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x8381))+(((-1.0)*sj0*sj6*x8382))+(((-1.0)*py*x8389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8400=((1.0)*sj6);
CheckValue<IkReal> x8401=IKPowWithIntegerCheck(cj1,-1);
if(!x8401.valid){
continue;
}
if( IKabs((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x8400))+(((-1.0)*cj0*r01*x8400))+((cj0*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8401.value)*(((((-1.0)*cj6*r20))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x8400))+(((-1.0)*cj0*r01*x8400))+((cj0*cj6*r00))))+IKsqr(((x8401.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x8400))+(((-1.0)*cj0*r01*x8400))+((cj0*cj6*r00))), ((x8401.value)*(((((-1.0)*cj6*r20))+((r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8402=IKsin(j4);
IkReal x8403=IKcos(j4);
IkReal x8404=(r11*sj0);
IkReal x8405=(cj0*sj6);
IkReal x8406=((0.026255)*r01);
IkReal x8407=(cj6*sj5);
IkReal x8408=(r10*sj0);
IkReal x8409=(sj5*sj6);
IkReal x8410=((1.0)*cj5);
IkReal x8411=((1.0)*cj6);
IkReal x8412=((1.0)*sj0);
IkReal x8413=((1.0)*cj0);
IkReal x8414=((0.026255)*sj6);
IkReal x8415=(cj5*r12);
IkReal x8416=(cj0*r10);
IkReal x8417=((0.026255)*cj6);
IkReal x8418=((1.0)*r21);
IkReal x8419=(sj1*x8403);
IkReal x8420=(cj1*x8402);
IkReal x8421=(r00*x8417);
IkReal x8422=(sj1*x8402);
IkReal x8423=(cj1*x8403);
evalcond[0]=(x8423+(((-1.0)*sj6*x8418))+((cj6*r20)));
evalcond[1]=(x8420+(((-1.0)*x8407*x8418))+(((-1.0)*r22*x8410))+(((-1.0)*r20*x8409)));
evalcond[2]=((((-1.0)*x8408*x8411))+x8402+((r01*x8405))+(((-1.0)*cj0*r00*x8411))+((sj6*x8404)));
evalcond[3]=(((r11*x8405))+x8419+((cj6*r00*sj0))+(((-1.0)*x8411*x8416))+(((-1.0)*r01*sj6*x8412)));
evalcond[4]=((((0.02626)*x8423))+(((-0.0001)*sj1))+((r20*x8417))+(((-1.0)*r21*x8414))+(((-0.0718)*x8420))+pz+(((-0.1246)*cj1)));
evalcond[5]=(((x8408*x8409))+((cj0*r01*x8407))+((cj0*cj5*r02))+(((-1.0)*x8403))+((r00*sj5*x8405))+((sj0*x8415))+((x8404*x8407)));
evalcond[6]=(x8422+(((-1.0)*r00*x8409*x8412))+(((-1.0)*r01*x8407*x8412))+((cj0*x8415))+((r10*sj5*x8405))+(((-1.0)*r02*sj0*x8410))+((cj0*r11*x8407)));
evalcond[7]=((0.21226)+(((-1.0)*x8408*x8417))+((x8405*x8406))+(((-1.0)*cj0*x8421))+(((-1.0)*py*x8412))+(((0.0718)*x8403))+((x8404*x8414))+(((-1.0)*px*x8413))+(((0.02626)*x8402)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*py*x8413))+(((0.026255)*r11*x8405))+(((-1.0)*x8416*x8417))+(((-0.0718)*x8422))+((sj0*x8421))+(((-1.0)*sj0*sj6*x8406))+(((0.0001)*cj1))+((px*sj0))+(((0.02626)*x8419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8424=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8424.valid){
continue;
}
CheckValue<IkReal> x8425 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8424.value)))+(x8425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8426=IKsin(j4);
IkReal x8427=IKcos(j4);
IkReal x8428=(r11*sj0);
IkReal x8429=(cj0*sj6);
IkReal x8430=((0.026255)*r01);
IkReal x8431=(cj6*sj5);
IkReal x8432=(r10*sj0);
IkReal x8433=(sj5*sj6);
IkReal x8434=((1.0)*cj5);
IkReal x8435=((1.0)*cj6);
IkReal x8436=((1.0)*sj0);
IkReal x8437=((1.0)*cj0);
IkReal x8438=((0.026255)*sj6);
IkReal x8439=(cj5*r12);
IkReal x8440=(cj0*r10);
IkReal x8441=((0.026255)*cj6);
IkReal x8442=((1.0)*r21);
IkReal x8443=(sj1*x8427);
IkReal x8444=(cj1*x8426);
IkReal x8445=(r00*x8441);
IkReal x8446=(sj1*x8426);
IkReal x8447=(cj1*x8427);
evalcond[0]=((((-1.0)*sj6*x8442))+x8447+((cj6*r20)));
evalcond[1]=(x8444+(((-1.0)*x8431*x8442))+(((-1.0)*r22*x8434))+(((-1.0)*r20*x8433)));
evalcond[2]=((((-1.0)*x8432*x8435))+x8426+((sj6*x8428))+((r01*x8429))+(((-1.0)*cj0*r00*x8435)));
evalcond[3]=(x8443+((cj6*r00*sj0))+((r11*x8429))+(((-1.0)*x8435*x8440))+(((-1.0)*r01*sj6*x8436)));
evalcond[4]=((((-1.0)*r21*x8438))+(((0.02626)*x8447))+(((-0.0001)*sj1))+pz+((r20*x8441))+(((-0.1246)*cj1))+(((-0.0718)*x8444)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x8439))+((x8432*x8433))+((x8428*x8431))+((cj0*r01*x8431))+(((-1.0)*x8427))+((r00*sj5*x8429)));
evalcond[6]=(x8446+(((-1.0)*r01*x8431*x8436))+(((-1.0)*r02*sj0*x8434))+(((-1.0)*r00*x8433*x8436))+((cj0*x8439))+((cj0*r11*x8431))+((r10*sj5*x8429)));
evalcond[7]=((0.21226)+(((0.02626)*x8426))+(((-1.0)*py*x8436))+((x8429*x8430))+(((-1.0)*x8432*x8441))+(((-1.0)*px*x8437))+((x8428*x8438))+(((-1.0)*cj0*x8445))+(((0.0718)*x8427)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*py*x8437))+(((0.02626)*x8443))+(((-1.0)*x8440*x8441))+((sj0*x8445))+(((0.026255)*r11*x8429))+(((-1.0)*sj0*sj6*x8430))+(((0.0001)*cj1))+((px*sj0))+(((-0.0718)*x8446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8448=(cj0*sj5);
IkReal x8449=(cj5*cj6);
IkReal x8450=((1.0)*sj5);
IkReal x8451=((1.0)*cj0);
IkReal x8452=((1.0)*sj0);
IkReal x8453=(cj5*sj6);
IkReal x8454=(r10*x8453);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+((r21*x8449))+((r20*x8453))+(((-1.0)*r22*x8450)));
evalcond[2]=((((-1.0)*x8452*x8454))+(((-1.0)*r00*x8451*x8453))+(((-1.0)*r01*x8449*x8451))+((r12*sj0*sj5))+(((-1.0)*r11*x8449*x8452))+((r02*x8448)));
evalcond[3]=(((r12*x8448))+(((-1.0)*r02*sj0*x8450))+((r01*sj0*x8449))+(((-1.0)*x8451*x8454))+(((-1.0)*r11*x8449*x8451))+((r00*sj0*x8453))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=sj1;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8455=IKPowWithIntegerCheck(cj1,-1);
if(!x8455.valid){
continue;
}
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(sj1,-1);
if(!x8456.valid){
continue;
}
if( IKabs(((x8455.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8456.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8455.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x8456.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8455.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x8456.value)*((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))+(((-1.0)*cj6*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8457=IKsin(j4);
IkReal x8458=IKcos(j4);
IkReal x8459=(r11*sj0);
IkReal x8460=(cj0*sj6);
IkReal x8461=((0.026255)*r01);
IkReal x8462=(cj6*sj5);
IkReal x8463=(r10*sj0);
IkReal x8464=(sj5*sj6);
IkReal x8465=((1.0)*cj5);
IkReal x8466=((1.0)*cj6);
IkReal x8467=((1.0)*sj0);
IkReal x8468=((1.0)*cj0);
IkReal x8469=((0.026255)*sj6);
IkReal x8470=(cj5*r12);
IkReal x8471=(cj0*r10);
IkReal x8472=((0.026255)*cj6);
IkReal x8473=((1.0)*r21);
IkReal x8474=(sj1*x8458);
IkReal x8475=(cj1*x8457);
IkReal x8476=(r00*x8472);
IkReal x8477=(sj1*x8457);
IkReal x8478=(cj1*x8458);
evalcond[0]=((((-1.0)*sj6*x8473))+x8478+((cj6*r20)));
evalcond[1]=(x8475+(((-1.0)*r20*x8464))+(((-1.0)*r22*x8465))+(((-1.0)*x8462*x8473)));
evalcond[2]=(((r01*x8460))+(((-1.0)*x8457))+((sj6*x8459))+(((-1.0)*x8463*x8466))+(((-1.0)*cj0*r00*x8466)));
evalcond[3]=(x8474+(((-1.0)*r01*sj6*x8467))+((r11*x8460))+((cj6*r00*sj0))+(((-1.0)*x8466*x8471)));
evalcond[4]=((((-0.0718)*x8475))+(((-0.0001)*sj1))+pz+(((-0.1246)*cj1))+((r20*x8472))+(((-1.0)*r21*x8469))+(((0.02626)*x8478)));
evalcond[5]=(x8458+((cj0*cj5*r02))+((x8459*x8462))+((cj0*r01*x8462))+((x8463*x8464))+((sj0*x8470))+((r00*sj5*x8460)));
evalcond[6]=(x8477+((cj0*x8470))+(((-1.0)*r02*sj0*x8465))+(((-1.0)*r00*x8464*x8467))+((r10*sj5*x8460))+(((-1.0)*r01*x8462*x8467))+((cj0*r11*x8462)));
evalcond[7]=((0.01734)+(((-1.0)*py*x8467))+((x8459*x8469))+(((-0.02626)*x8457))+(((-1.0)*x8463*x8472))+(((-1.0)*px*x8468))+((x8460*x8461))+(((-0.0718)*x8458))+(((-1.0)*cj0*x8476)));
evalcond[8]=((((-0.0718)*x8477))+(((-1.0)*py*x8468))+(((-0.1246)*sj1))+(((-1.0)*x8471*x8472))+(((0.026255)*r11*x8460))+(((0.0001)*cj1))+((px*sj0))+((sj0*x8476))+(((0.02626)*x8474))+(((-1.0)*sj0*sj6*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8479=((1.0)*cj6);
CheckValue<IkReal> x8480=IKPowWithIntegerCheck(cj1,-1);
if(!x8480.valid){
continue;
}
if( IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x8479))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8480.value)*((((r21*sj6))+(((-1.0)*r20*x8479)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x8479))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8479))))+IKsqr(((x8480.value)*((((r21*sj6))+(((-1.0)*r20*x8479))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x8479))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x8479))), ((x8480.value)*((((r21*sj6))+(((-1.0)*r20*x8479))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8481=IKsin(j4);
IkReal x8482=IKcos(j4);
IkReal x8483=(r11*sj0);
IkReal x8484=(cj0*sj6);
IkReal x8485=((0.026255)*r01);
IkReal x8486=(cj6*sj5);
IkReal x8487=(r10*sj0);
IkReal x8488=(sj5*sj6);
IkReal x8489=((1.0)*cj5);
IkReal x8490=((1.0)*cj6);
IkReal x8491=((1.0)*sj0);
IkReal x8492=((1.0)*cj0);
IkReal x8493=((0.026255)*sj6);
IkReal x8494=(cj5*r12);
IkReal x8495=(cj0*r10);
IkReal x8496=((0.026255)*cj6);
IkReal x8497=((1.0)*r21);
IkReal x8498=(sj1*x8482);
IkReal x8499=(cj1*x8481);
IkReal x8500=(r00*x8496);
IkReal x8501=(sj1*x8481);
IkReal x8502=(cj1*x8482);
evalcond[0]=(x8502+((cj6*r20))+(((-1.0)*sj6*x8497)));
evalcond[1]=(x8499+(((-1.0)*r20*x8488))+(((-1.0)*x8486*x8497))+(((-1.0)*r22*x8489)));
evalcond[2]=(((r01*x8484))+(((-1.0)*x8487*x8490))+((sj6*x8483))+(((-1.0)*cj0*r00*x8490))+(((-1.0)*x8481)));
evalcond[3]=(x8498+((cj6*r00*sj0))+(((-1.0)*x8490*x8495))+(((-1.0)*r01*sj6*x8491))+((r11*x8484)));
evalcond[4]=((((-1.0)*r21*x8493))+(((-0.0001)*sj1))+(((0.02626)*x8502))+pz+(((-0.0718)*x8499))+((r20*x8496))+(((-0.1246)*cj1)));
evalcond[5]=(x8482+((cj0*cj5*r02))+((sj0*x8494))+((x8487*x8488))+((x8483*x8486))+((r00*sj5*x8484))+((cj0*r01*x8486)));
evalcond[6]=((((-1.0)*r01*x8486*x8491))+x8501+(((-1.0)*r02*sj0*x8489))+(((-1.0)*r00*x8488*x8491))+((r10*sj5*x8484))+((cj0*r11*x8486))+((cj0*x8494)));
evalcond[7]=((0.01734)+((x8484*x8485))+(((-1.0)*x8487*x8496))+(((-1.0)*px*x8492))+((x8483*x8493))+(((-0.0718)*x8482))+(((-0.02626)*x8481))+(((-1.0)*cj0*x8500))+(((-1.0)*py*x8491)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*sj0*sj6*x8485))+(((0.02626)*x8498))+(((0.026255)*r11*x8484))+((sj0*x8500))+(((-0.0718)*x8501))+(((-1.0)*x8495*x8496))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*py*x8492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8503.value)))+(x8504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(r11*sj0);
IkReal x8508=(cj0*sj6);
IkReal x8509=((0.026255)*r01);
IkReal x8510=(cj6*sj5);
IkReal x8511=(r10*sj0);
IkReal x8512=(sj5*sj6);
IkReal x8513=((1.0)*cj5);
IkReal x8514=((1.0)*cj6);
IkReal x8515=((1.0)*sj0);
IkReal x8516=((1.0)*cj0);
IkReal x8517=((0.026255)*sj6);
IkReal x8518=(cj5*r12);
IkReal x8519=(cj0*r10);
IkReal x8520=((0.026255)*cj6);
IkReal x8521=((1.0)*r21);
IkReal x8522=(sj1*x8506);
IkReal x8523=(cj1*x8505);
IkReal x8524=(r00*x8520);
IkReal x8525=(sj1*x8505);
IkReal x8526=(cj1*x8506);
evalcond[0]=(x8526+(((-1.0)*sj6*x8521))+((cj6*r20)));
evalcond[1]=((((-1.0)*x8510*x8521))+x8523+(((-1.0)*r20*x8512))+(((-1.0)*r22*x8513)));
evalcond[2]=(((sj6*x8507))+(((-1.0)*cj0*r00*x8514))+(((-1.0)*x8505))+((r01*x8508))+(((-1.0)*x8511*x8514)));
evalcond[3]=(x8522+((r11*x8508))+((cj6*r00*sj0))+(((-1.0)*x8514*x8519))+(((-1.0)*r01*sj6*x8515)));
evalcond[4]=(((r20*x8520))+(((-0.0001)*sj1))+(((-1.0)*r21*x8517))+(((0.02626)*x8526))+pz+(((-0.0718)*x8523))+(((-0.1246)*cj1)));
evalcond[5]=(((cj0*cj5*r02))+x8506+((r00*sj5*x8508))+((sj0*x8518))+((x8511*x8512))+((x8507*x8510))+((cj0*r01*x8510)));
evalcond[6]=(((cj0*x8518))+(((-1.0)*r00*x8512*x8515))+x8525+((cj0*r11*x8510))+(((-1.0)*r02*sj0*x8513))+(((-1.0)*r01*x8510*x8515))+((r10*sj5*x8508)));
evalcond[7]=((0.01734)+(((-1.0)*x8511*x8520))+(((-1.0)*px*x8516))+(((-1.0)*cj0*x8524))+(((-1.0)*py*x8515))+(((-0.0718)*x8506))+((x8508*x8509))+(((-0.02626)*x8505))+((x8507*x8517)));
evalcond[8]=((((-0.1246)*sj1))+(((-1.0)*x8519*x8520))+((sj0*x8524))+(((0.026255)*r11*x8508))+(((0.02626)*x8522))+(((-1.0)*py*x8516))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*sj0*sj6*x8509))+(((-0.0718)*x8525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8534=IKPowWithIntegerCheck(cj3,-1);
if(!x8534.valid){
continue;
}
IkReal x8527=x8534.value;
IkReal x8528=(cj6*r10);
IkReal x8529=(r11*sj6);
IkReal x8530=(sj1*sj3);
IkReal x8531=(cj0*cj6*r00);
IkReal x8532=(sj0*x8530);
IkReal x8533=(cj0*r01*sj6);
CheckValue<IkReal> x8535=IKPowWithIntegerCheck(cj1,-1);
if(!x8535.valid){
continue;
}
if( IKabs((x8527*(((((-1.0)*x8533))+x8531+((sj0*x8528))+(((-1.0)*sj0*x8529)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8527*(x8535.value)*(((((-1.0)*cj3*cj6*r20))+((cj3*r21*sj6))+(((-1.0)*x8530*x8531))+(((-1.0)*x8528*x8532))+((x8529*x8532))+((x8530*x8533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8527*(((((-1.0)*x8533))+x8531+((sj0*x8528))+(((-1.0)*sj0*x8529))))))+IKsqr((x8527*(x8535.value)*(((((-1.0)*cj3*cj6*r20))+((cj3*r21*sj6))+(((-1.0)*x8530*x8531))+(((-1.0)*x8528*x8532))+((x8529*x8532))+((x8530*x8533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8527*(((((-1.0)*x8533))+x8531+((sj0*x8528))+(((-1.0)*sj0*x8529))))), (x8527*(x8535.value)*(((((-1.0)*cj3*cj6*r20))+((cj3*r21*sj6))+(((-1.0)*x8530*x8531))+(((-1.0)*x8528*x8532))+((x8529*x8532))+((x8530*x8533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8536=IKsin(j4);
IkReal x8537=IKcos(j4);
IkReal x8538=(r11*sj0);
IkReal x8539=(sj1*sj3);
IkReal x8540=(cj0*sj6);
IkReal x8541=((0.026255)*r01);
IkReal x8542=(cj5*r12);
IkReal x8543=(cj6*sj5);
IkReal x8544=(r10*sj0);
IkReal x8545=(sj5*sj6);
IkReal x8546=((0.026255)*cj6);
IkReal x8547=(cj1*sj3);
IkReal x8548=((1.0)*cj5);
IkReal x8549=((1.0)*cj6);
IkReal x8550=((1.0)*sj0);
IkReal x8551=((1.0)*cj0);
IkReal x8552=(cj0*r00);
IkReal x8553=((0.026255)*sj6);
IkReal x8554=(r00*sj0);
IkReal x8555=(cj0*r10);
IkReal x8556=((1.0)*r21);
IkReal x8557=((0.02626)*x8536);
IkReal x8558=(sj1*x8537);
IkReal x8559=(cj1*x8536);
IkReal x8560=(sj1*x8536);
IkReal x8561=((1.0)*x8537);
IkReal x8562=((0.0718)*x8537);
IkReal x8563=(cj1*x8537);
evalcond[0]=(((x8536*x8539))+x8563+((cj6*r20))+(((-1.0)*sj6*x8556)));
evalcond[1]=(((r01*x8540))+(((-1.0)*x8549*x8552))+(((-1.0)*x8544*x8549))+((sj6*x8538))+((cj3*x8536)));
evalcond[2]=((((-1.0)*r20*x8545))+x8559+(((-1.0)*x8543*x8556))+(((-1.0)*x8539*x8561))+(((-1.0)*r22*x8548)));
evalcond[3]=(((cj6*x8554))+x8558+(((-1.0)*r01*sj6*x8550))+(((-1.0)*x8536*x8547))+(((-1.0)*x8549*x8555))+((r11*x8540)));
evalcond[4]=(((x8538*x8543))+((cj0*cj5*r02))+((x8544*x8545))+((cj0*r01*x8543))+((r00*sj5*x8540))+(((-1.0)*cj3*x8561))+((sj0*x8542)));
evalcond[5]=(((cj0*r11*x8543))+x8560+((x8537*x8547))+((cj0*x8542))+((r10*sj5*x8540))+(((-1.0)*r01*x8543*x8550))+(((-1.0)*r00*x8545*x8550))+(((-1.0)*r02*sj0*x8548)));
evalcond[6]=((0.1148)+(((-1.0)*x8546*x8552))+((cj3*x8562))+((x8540*x8541))+(((-1.0)*py*x8550))+(((-1.0)*x8544*x8546))+((x8538*x8553))+(((0.09746)*cj3))+((cj3*x8557))+(((-1.0)*px*x8551)));
evalcond[7]=((((-0.0001)*sj1))+(((-0.0718)*x8559))+(((0.09746)*x8539))+((r20*x8546))+pz+(((-1.0)*r21*x8553))+(((0.02626)*x8563))+((x8539*x8557))+((x8539*x8562))+(((-0.1246)*cj1)));
evalcond[8]=((((-1.0)*x8547*x8557))+(((-1.0)*x8546*x8555))+(((-0.09746)*x8547))+(((-0.1246)*sj1))+(((-1.0)*py*x8551))+((x8546*x8554))+(((0.026255)*r11*x8540))+(((-1.0)*sj0*sj6*x8541))+(((-0.0718)*x8560))+(((0.02626)*x8558))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x8547*x8562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8564=((1.0)*cj0);
IkReal x8565=(cj1*cj6);
IkReal x8566=(sj1*sj6);
IkReal x8567=(r01*sj0);
IkReal x8568=((1.0)*r20);
IkReal x8569=(r00*sj0);
IkReal x8570=(cj6*sj1);
IkReal x8571=(cj1*sj6);
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(sj3,-1);
if(!x8572.valid){
continue;
}
if( IKabs(((x8572.value)*(((((-1.0)*x8568*x8570))+((x8565*x8569))+((cj0*r11*x8571))+(((-1.0)*r10*x8564*x8565))+((r21*x8566))+(((-1.0)*x8567*x8571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8564*x8566))+((cj0*r10*x8570))+(((-1.0)*x8565*x8568))+(((-1.0)*x8569*x8570))+((r21*x8571))+((x8566*x8567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8572.value)*(((((-1.0)*x8568*x8570))+((x8565*x8569))+((cj0*r11*x8571))+(((-1.0)*r10*x8564*x8565))+((r21*x8566))+(((-1.0)*x8567*x8571))))))+IKsqr(((((-1.0)*r11*x8564*x8566))+((cj0*r10*x8570))+(((-1.0)*x8565*x8568))+(((-1.0)*x8569*x8570))+((r21*x8571))+((x8566*x8567))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8572.value)*(((((-1.0)*x8568*x8570))+((x8565*x8569))+((cj0*r11*x8571))+(((-1.0)*r10*x8564*x8565))+((r21*x8566))+(((-1.0)*x8567*x8571))))), ((((-1.0)*r11*x8564*x8566))+((cj0*r10*x8570))+(((-1.0)*x8565*x8568))+(((-1.0)*x8569*x8570))+((r21*x8571))+((x8566*x8567))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8573=IKsin(j4);
IkReal x8574=IKcos(j4);
IkReal x8575=(r11*sj0);
IkReal x8576=(sj1*sj3);
IkReal x8577=(cj0*sj6);
IkReal x8578=((0.026255)*r01);
IkReal x8579=(cj5*r12);
IkReal x8580=(cj6*sj5);
IkReal x8581=(r10*sj0);
IkReal x8582=(sj5*sj6);
IkReal x8583=((0.026255)*cj6);
IkReal x8584=(cj1*sj3);
IkReal x8585=((1.0)*cj5);
IkReal x8586=((1.0)*cj6);
IkReal x8587=((1.0)*sj0);
IkReal x8588=((1.0)*cj0);
IkReal x8589=(cj0*r00);
IkReal x8590=((0.026255)*sj6);
IkReal x8591=(r00*sj0);
IkReal x8592=(cj0*r10);
IkReal x8593=((1.0)*r21);
IkReal x8594=((0.02626)*x8573);
IkReal x8595=(sj1*x8574);
IkReal x8596=(cj1*x8573);
IkReal x8597=(sj1*x8573);
IkReal x8598=((1.0)*x8574);
IkReal x8599=((0.0718)*x8574);
IkReal x8600=(cj1*x8574);
evalcond[0]=(x8600+((x8573*x8576))+((cj6*r20))+(((-1.0)*sj6*x8593)));
evalcond[1]=(((sj6*x8575))+((cj3*x8573))+(((-1.0)*x8581*x8586))+((r01*x8577))+(((-1.0)*x8586*x8589)));
evalcond[2]=((((-1.0)*r22*x8585))+x8596+(((-1.0)*x8576*x8598))+(((-1.0)*x8580*x8593))+(((-1.0)*r20*x8582)));
evalcond[3]=(x8595+(((-1.0)*x8586*x8592))+((r11*x8577))+((cj6*x8591))+(((-1.0)*r01*sj6*x8587))+(((-1.0)*x8573*x8584)));
evalcond[4]=(((cj0*cj5*r02))+((x8575*x8580))+((r00*sj5*x8577))+(((-1.0)*cj3*x8598))+((x8581*x8582))+((sj0*x8579))+((cj0*r01*x8580)));
evalcond[5]=((((-1.0)*r00*x8582*x8587))+((r10*sj5*x8577))+(((-1.0)*r01*x8580*x8587))+x8597+(((-1.0)*r02*sj0*x8585))+((cj0*x8579))+((x8574*x8584))+((cj0*r11*x8580)));
evalcond[6]=((0.1148)+(((-1.0)*py*x8587))+(((-1.0)*x8583*x8589))+((x8577*x8578))+(((-1.0)*x8581*x8583))+((cj3*x8599))+((cj3*x8594))+(((-1.0)*px*x8588))+(((0.09746)*cj3))+((x8575*x8590)));
evalcond[7]=((((-0.0718)*x8596))+(((-0.0001)*sj1))+(((0.02626)*x8600))+pz+((x8576*x8594))+((x8576*x8599))+(((0.09746)*x8576))+(((-0.1246)*cj1))+((r20*x8583))+(((-1.0)*r21*x8590)));
evalcond[8]=((((-1.0)*py*x8588))+(((-0.0718)*x8597))+(((-0.1246)*sj1))+(((-0.09746)*x8584))+(((-1.0)*x8583*x8592))+((x8583*x8591))+(((0.0001)*cj1))+(((0.02626)*x8595))+((px*sj0))+(((-1.0)*sj0*sj6*x8578))+(((0.026255)*r11*x8577))+(((-1.0)*x8584*x8594))+(((-1.0)*x8584*x8599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8601=cj3*cj3;
IkReal x8602=(cj1*cj6);
IkReal x8603=((1.0)*r21);
IkReal x8604=(cj1*sj6);
IkReal x8605=(sj1*sj3);
IkReal x8606=(r20*sj5);
IkReal x8607=(cj5*r22);
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal((((cj6*r20*x8605))+(((-1.0)*cj1*x8607))+(((-1.0)*sj6*x8603*x8605))+(((-1.0)*sj5*x8602*x8603))+(((-1.0)*x8604*x8606)))),(((r20*x8602))+((cj6*r21*sj5*x8605))+((x8605*x8607))+((sj6*x8605*x8606))+(((-1.0)*x8603*x8604))),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(IKsign(((-1.0)+x8601+(((-1.0)*x8601*(cj1*cj1))))),-1);
if(!x8609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8608.value)+(((1.5707963267949)*(x8609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8610=IKsin(j4);
IkReal x8611=IKcos(j4);
IkReal x8612=(r11*sj0);
IkReal x8613=(sj1*sj3);
IkReal x8614=(cj0*sj6);
IkReal x8615=((0.026255)*r01);
IkReal x8616=(cj5*r12);
IkReal x8617=(cj6*sj5);
IkReal x8618=(r10*sj0);
IkReal x8619=(sj5*sj6);
IkReal x8620=((0.026255)*cj6);
IkReal x8621=(cj1*sj3);
IkReal x8622=((1.0)*cj5);
IkReal x8623=((1.0)*cj6);
IkReal x8624=((1.0)*sj0);
IkReal x8625=((1.0)*cj0);
IkReal x8626=(cj0*r00);
IkReal x8627=((0.026255)*sj6);
IkReal x8628=(r00*sj0);
IkReal x8629=(cj0*r10);
IkReal x8630=((1.0)*r21);
IkReal x8631=((0.02626)*x8610);
IkReal x8632=(sj1*x8611);
IkReal x8633=(cj1*x8610);
IkReal x8634=(sj1*x8610);
IkReal x8635=((1.0)*x8611);
IkReal x8636=((0.0718)*x8611);
IkReal x8637=(cj1*x8611);
evalcond[0]=(x8637+(((-1.0)*sj6*x8630))+((cj6*r20))+((x8610*x8613)));
evalcond[1]=((((-1.0)*x8618*x8623))+((r01*x8614))+(((-1.0)*x8623*x8626))+((sj6*x8612))+((cj3*x8610)));
evalcond[2]=(x8633+(((-1.0)*x8617*x8630))+(((-1.0)*r20*x8619))+(((-1.0)*r22*x8622))+(((-1.0)*x8613*x8635)));
evalcond[3]=((((-1.0)*r01*sj6*x8624))+((cj6*x8628))+x8632+((r11*x8614))+(((-1.0)*x8623*x8629))+(((-1.0)*x8610*x8621)));
evalcond[4]=(((cj0*cj5*r02))+((cj0*r01*x8617))+((x8618*x8619))+(((-1.0)*cj3*x8635))+((r00*sj5*x8614))+((x8612*x8617))+((sj0*x8616)));
evalcond[5]=(((x8611*x8621))+((r10*sj5*x8614))+x8634+(((-1.0)*r02*sj0*x8622))+((cj0*r11*x8617))+(((-1.0)*r00*x8619*x8624))+((cj0*x8616))+(((-1.0)*r01*x8617*x8624)));
evalcond[6]=((0.1148)+(((-1.0)*x8618*x8620))+(((-1.0)*px*x8625))+((cj3*x8636))+((cj3*x8631))+((x8612*x8627))+(((-1.0)*py*x8624))+((x8614*x8615))+(((-1.0)*x8620*x8626))+(((0.09746)*cj3)));
evalcond[7]=(((x8613*x8636))+((x8613*x8631))+(((-0.0001)*sj1))+(((0.09746)*x8613))+pz+((r20*x8620))+(((-0.0718)*x8633))+(((-1.0)*r21*x8627))+(((-0.1246)*cj1))+(((0.02626)*x8637)));
evalcond[8]=(((x8620*x8628))+(((-0.1246)*sj1))+(((-1.0)*py*x8625))+(((-1.0)*sj0*sj6*x8615))+(((-1.0)*x8620*x8629))+(((-0.09746)*x8621))+(((0.0001)*cj1))+((px*sj0))+(((-0.0718)*x8634))+(((-1.0)*x8621*x8636))+(((-1.0)*x8621*x8631))+(((0.02626)*x8632))+(((0.026255)*r11*x8614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x8650=IKPowWithIntegerCheck(sj2,-1);
if(!x8650.valid){
continue;
}
IkReal x8638=x8650.value;
IkReal x8639=(cj2*sj1);
IkReal x8640=(r11*sj0);
IkReal x8641=(cj0*r01);
IkReal x8642=(cj0*cj5);
IkReal x8643=(sj2*sj5);
IkReal x8644=(sj0*sj2);
IkReal x8645=(cj0*r02*sj5);
IkReal x8646=((1.0)*cj5*cj6);
IkReal x8647=((1.0)*r00*sj6);
IkReal x8648=(r12*sj0*sj5);
IkReal x8649=((1.0)*cj5*r10*sj0*sj6);
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(cj1,-1);
if(!x8651.valid){
continue;
}
if( IKabs((x8638*((x8648+x8645+(((-1.0)*x8642*x8647))+(((-1.0)*x8640*x8646))+(((-1.0)*x8641*x8646))+(((-1.0)*x8649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8638*(x8651.value)*(((((-1.0)*x8639*x8649))+((r10*sj2*sj6*x8642))+(((-1.0)*cj5*x8644*x8647))+(((-1.0)*x8639*x8642*x8647))+(((-1.0)*cj0*r12*x8643))+((x8639*x8645))+((x8639*x8648))+(((-1.0)*x8639*x8640*x8646))+(((-1.0)*x8639*x8641*x8646))+((r02*sj0*x8643))+(((-1.0)*r01*x8644*x8646))+((cj6*r11*sj2*x8642)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8638*((x8648+x8645+(((-1.0)*x8642*x8647))+(((-1.0)*x8640*x8646))+(((-1.0)*x8641*x8646))+(((-1.0)*x8649))))))+IKsqr((x8638*(x8651.value)*(((((-1.0)*x8639*x8649))+((r10*sj2*sj6*x8642))+(((-1.0)*cj5*x8644*x8647))+(((-1.0)*x8639*x8642*x8647))+(((-1.0)*cj0*r12*x8643))+((x8639*x8645))+((x8639*x8648))+(((-1.0)*x8639*x8640*x8646))+(((-1.0)*x8639*x8641*x8646))+((r02*sj0*x8643))+(((-1.0)*r01*x8644*x8646))+((cj6*r11*sj2*x8642))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x8638*((x8648+x8645+(((-1.0)*x8642*x8647))+(((-1.0)*x8640*x8646))+(((-1.0)*x8641*x8646))+(((-1.0)*x8649))))), (x8638*(x8651.value)*(((((-1.0)*x8639*x8649))+((r10*sj2*sj6*x8642))+(((-1.0)*cj5*x8644*x8647))+(((-1.0)*x8639*x8642*x8647))+(((-1.0)*cj0*r12*x8643))+((x8639*x8645))+((x8639*x8648))+(((-1.0)*x8639*x8640*x8646))+(((-1.0)*x8639*x8641*x8646))+((r02*sj0*x8643))+(((-1.0)*r01*x8644*x8646))+((cj6*r11*sj2*x8642))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x8652=IKsin(j3);
IkReal x8653=IKcos(j3);
IkReal x8654=((1.0)*sj1);
IkReal x8655=(cj0*sj5);
IkReal x8656=(cj5*cj6);
IkReal x8657=((1.0)*sj5);
IkReal x8658=((1.0)*cj0);
IkReal x8659=((1.0)*sj0);
IkReal x8660=(cj5*sj6);
IkReal x8661=((1.0)*x8652);
evalcond[0]=(((r20*x8660))+((r21*x8656))+(((-1.0)*cj1*cj2*x8661))+(((-1.0)*r22*x8657))+(((-1.0)*x8653*x8654)));
evalcond[1]=((((-1.0)*sj2*x8661))+(((-1.0)*r10*x8659*x8660))+(((-1.0)*r00*x8658*x8660))+((r12*sj0*sj5))+(((-1.0)*r11*x8656*x8659))+(((-1.0)*r01*x8656*x8658))+((r02*x8655)));
evalcond[2]=((((-1.0)*cj2*x8652*x8654))+((r00*sj0*x8660))+((r01*sj0*x8656))+(((-1.0)*r10*x8658*x8660))+(((-1.0)*r11*x8656*x8658))+((r12*x8655))+(((-1.0)*r02*sj0*x8657))+((cj1*x8653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x8662=((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)));
j4eval[0]=x8662;
j4eval[1]=IKsign(x8662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8663=cj1*cj1;
IkReal x8664=cj3*cj3;
IkReal x8665=cj2*cj2;
IkReal x8666=(x8663*x8664);
IkReal x8667=((1.0)+(((-2.0)*cj1*cj2*cj3*sj1*sj3))+x8666+(((-1.0)*x8664))+(((-1.0)*x8663*x8665))+((x8665*x8666)));
j4eval[0]=x8667;
j4eval[1]=IKsign(x8667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8668=cj3*cj3;
IkReal x8669=(cj1*cj2);
IkReal x8670=(cj3*sj1*sj3);
IkReal x8671=(sj2*x8669);
IkReal x8672=((1.0)*x8668);
j4eval[0]=(x8671+((sj2*x8670))+(((-1.0)*x8671*x8672)));
j4eval[1]=(x8669+x8670+(((-1.0)*x8669*x8672)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8673=(cj0*sj5);
IkReal x8674=(cj5*cj6);
IkReal x8675=((1.0)*sj3);
IkReal x8676=((1.0)*cj0);
IkReal x8677=((1.0)*sj0);
IkReal x8678=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r20*x8678))+(((-1.0)*cj3*sj1))+(((-1.0)*r22*sj5))+(((-1.0)*cj1*x8675))+((r21*x8674)));
evalcond[2]=(((r12*sj0*sj5))+(((-1.0)*r10*x8677*x8678))+(((-1.0)*r01*x8674*x8676))+(((-1.0)*r11*x8674*x8677))+((r02*x8673))+(((-1.0)*r00*x8676*x8678)));
evalcond[3]=((((-1.0)*sj1*x8675))+((r00*sj0*x8678))+((r12*x8673))+(((-1.0)*r11*x8674*x8676))+((r01*sj0*x8674))+(((-1.0)*r02*sj5*x8677))+((cj1*cj3))+(((-1.0)*r10*x8676*x8678)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8679=(cj0*cj6);
IkReal x8680=((1.0)*cj5);
IkReal x8681=((1.0)*sj5);
IkReal x8682=(sj0*sj6);
IkReal x8683=(cj6*sj0);
IkReal x8684=(cj0*sj6);
if( IKabs(((((-1.0)*r00*x8681*x8684))+(((-1.0)*r12*sj0*x8680))+(((-1.0)*r11*x8681*x8683))+(((-1.0)*r01*x8679*x8681))+(((-1.0)*r10*x8681*x8682))+(((-1.0)*cj0*r02*x8680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x8684))+((r10*x8683))+((r00*x8679))+(((-1.0)*r11*x8682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x8681*x8684))+(((-1.0)*r12*sj0*x8680))+(((-1.0)*r11*x8681*x8683))+(((-1.0)*r01*x8679*x8681))+(((-1.0)*r10*x8681*x8682))+(((-1.0)*cj0*r02*x8680))))+IKsqr(((((-1.0)*r01*x8684))+((r10*x8683))+((r00*x8679))+(((-1.0)*r11*x8682))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x8681*x8684))+(((-1.0)*r12*sj0*x8680))+(((-1.0)*r11*x8681*x8683))+(((-1.0)*r01*x8679*x8681))+(((-1.0)*r10*x8681*x8682))+(((-1.0)*cj0*r02*x8680))), ((((-1.0)*r01*x8684))+((r10*x8683))+((r00*x8679))+(((-1.0)*r11*x8682))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8685=IKsin(j4);
IkReal x8686=IKcos(j4);
IkReal x8687=(r11*sj0);
IkReal x8688=(sj1*sj3);
IkReal x8689=(cj0*sj6);
IkReal x8690=((0.026255)*r01);
IkReal x8691=(cj5*r12);
IkReal x8692=(cj6*sj5);
IkReal x8693=(sj0*sj6);
IkReal x8694=(r10*sj5);
IkReal x8695=((0.026255)*cj6);
IkReal x8696=(r00*sj0);
IkReal x8697=((1.0)*cj5);
IkReal x8698=(cj1*sj3);
IkReal x8699=((1.0)*r01);
IkReal x8700=(cj0*r00);
IkReal x8701=(r00*sj5);
IkReal x8702=((0.026255)*sj6);
IkReal x8703=(cj1*cj3);
IkReal x8704=((1.0)*py);
IkReal x8705=(cj3*sj1);
IkReal x8706=((1.0)*r21);
IkReal x8707=((1.0)*cj6*r10);
IkReal x8708=((0.02626)*x8685);
IkReal x8709=((1.0)*x8685);
IkReal x8710=((0.0718)*x8686);
IkReal x8711=(x8686*x8703);
evalcond[0]=((((-1.0)*sj6*x8706))+((cj6*r20))+((x8685*x8688))+(((-1.0)*x8703*x8709)));
evalcond[1]=(x8686+((r01*x8689))+(((-1.0)*cj6*x8700))+((sj6*x8687))+(((-1.0)*sj0*x8707)));
evalcond[2]=((((-1.0)*x8692*x8706))+x8711+(((-1.0)*x8686*x8688))+(((-1.0)*r22*x8697))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(x8685+((cj0*cj5*r02))+((x8689*x8701))+((x8687*x8692))+((sj0*x8691))+((x8693*x8694))+((cj0*r01*x8692)));
evalcond[4]=((((-1.0)*x8705*x8709))+(((-1.0)*cj0*x8707))+(((-1.0)*x8698*x8709))+((r11*x8689))+(((-1.0)*x8693*x8699))+((cj6*x8696)));
evalcond[5]=((-0.0001)+(((-1.0)*x8695*x8700))+(((-0.0718)*x8685))+((x8689*x8690))+((x8687*x8702))+(((0.02626)*x8686))+(((-1.0)*r10*sj0*x8695))+(((-1.0)*sj0*x8704))+(((-1.0)*cj0*px)));
evalcond[6]=(((x8686*x8698))+(((-1.0)*x8693*x8701))+(((-1.0)*sj0*x8692*x8699))+((cj0*x8691))+((x8689*x8694))+((x8686*x8705))+((cj0*r11*x8692))+(((-1.0)*r02*sj0*x8697)));
evalcond[7]=((((-1.0)*x8703*x8710))+(((-0.09746)*x8703))+(((-0.0001)*sj1))+((x8688*x8710))+(((0.09746)*x8688))+((r20*x8695))+(((-0.2413)*cj1))+pz+(((-1.0)*r21*x8702))+((x8688*x8708))+(((-1.0)*x8703*x8708)));
evalcond[8]=((((-1.0)*x8705*x8708))+(((-1.0)*cj0*x8704))+(((-0.09746)*x8705))+(((-1.0)*x8698*x8708))+((x8695*x8696))+(((-1.0)*x8705*x8710))+(((-1.0)*x8690*x8693))+(((-1.0)*x8698*x8710))+(((0.0001)*cj1))+((px*sj0))+(((-0.2413)*sj1))+(((-0.09746)*x8698))+(((-1.0)*cj0*r10*x8695))+(((0.026255)*r11*x8689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8712=(cj0*sj5);
IkReal x8713=(cj5*cj6);
IkReal x8714=((1.0)*sj5);
IkReal x8715=((1.0)*cj0);
IkReal x8716=((1.0)*sj0);
IkReal x8717=(cj5*sj6);
IkReal x8718=(r10*x8717);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj1*sj3))+(((-1.0)*r22*x8714))+((r20*x8717))+(((-1.0)*cj3*sj1))+((r21*x8713)));
evalcond[2]=((((-1.0)*r01*x8713*x8715))+((r12*sj0*sj5))+(((-1.0)*x8716*x8718))+(((-1.0)*r00*x8715*x8717))+(((-1.0)*r11*x8713*x8716))+((r02*x8712)));
evalcond[3]=((((-1.0)*x8715*x8718))+((r00*sj0*x8717))+((sj1*sj3))+(((-1.0)*r11*x8713*x8715))+(((-1.0)*r02*sj0*x8714))+((cj1*cj3))+((r12*x8712))+((r01*sj0*x8713)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x8719=((1.0)*sj5);
IkReal x8720=(((sj1*sj3))+((cj1*cj3)));
j4eval[0]=x8720;
j4eval[1]=IKsign(x8720);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x8719))+(((-1.0)*cj6*r21*x8719))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=(((sj1*sj3))+((cj1*cj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=((((-1.0)*cj1*sj3))+((cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8721=(cj5*cj6);
IkReal x8722=(cj0*sj6);
IkReal x8723=(r01*sj0);
IkReal x8724=((1.0)*sj0);
IkReal x8725=((1.0)*cj5);
IkReal x8726=(cj0*r12);
IkReal x8727=(r02*sj5);
IkReal x8728=((1.0)*sj5);
IkReal x8729=(cj5*sj6);
IkReal x8730=((1.0)*cj0);
IkReal x8731=(cj6*r10);
IkReal x8732=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x8721))+((r20*x8729))+(((-1.0)*r22*x8728)));
evalcond[2]=(x8732+((r11*x8722))+(((-1.0)*sj6*x8723))+(((-1.0)*x8730*x8731)));
evalcond[3]=((((-1.0)*r10*x8724*x8729))+(((-1.0)*r11*x8721*x8724))+((cj0*x8727))+(((-1.0)*r00*x8722*x8725))+((r12*sj0*sj5))+(((-1.0)*r01*x8721*x8730)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8721*x8730))+(((-1.0)*r10*x8722*x8725))+(((-1.0)*x8724*x8727))+((x8721*x8723))+((sj5*x8726))+((r00*sj0*x8729)));
evalcond[5]=((((-1.0)*cj5*r02*x8724))+(((-1.0)*r00*sj5*sj6*x8724))+((cj5*x8726))+(((-1.0)*cj6*x8723*x8728))+((r10*sj5*x8722))+((cj0*cj6*r11*sj5)));
evalcond[6]=((0.0001)+(((0.026255)*x8732))+(((-1.0)*py*x8730))+(((0.026255)*r11*x8722))+(((-0.026255)*cj0*x8731))+((px*sj0))+(((-0.026255)*sj6*x8723)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8733=(cj6*r20);
IkReal x8734=(r21*sj6);
if( IKabs((x8734+(((-1.0)*x8733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.22228412256267)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8733))+(((-6.96378830083565e-5)*x8734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8734+(((-1.0)*x8733))))+IKsqr(((-1.22228412256267)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8733))+(((-6.96378830083565e-5)*x8734))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8734+(((-1.0)*x8733))), ((-1.22228412256267)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8733))+(((-6.96378830083565e-5)*x8734))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8735=IKcos(j4);
IkReal x8736=IKsin(j4);
IkReal x8737=(r11*sj0);
IkReal x8738=(cj0*sj6);
IkReal x8739=(cj6*sj5);
IkReal x8740=(r10*sj0);
IkReal x8741=(sj5*sj6);
IkReal x8742=((1.0)*cj6);
IkReal x8743=((0.026255)*sj6);
IkReal x8744=((0.026255)*cj6);
IkReal x8745=(cj0*r00);
IkReal x8746=((1.0)*r21);
IkReal x8747=((1.0)*x8735);
evalcond[0]=(x8736+((cj6*r20))+(((-1.0)*sj6*x8746)));
evalcond[1]=((((-1.0)*r20*x8741))+(((-1.0)*x8739*x8746))+(((-1.0)*cj5*r22))+(((-1.0)*x8747)));
evalcond[2]=((0.08776)+((r20*x8744))+(((0.0718)*x8735))+pz+(((0.02626)*x8736))+(((-1.0)*r21*x8743)));
evalcond[3]=(((sj6*x8737))+(((-1.0)*x8740*x8742))+(((-1.0)*x8742*x8745))+(((-1.0)*x8747))+((r01*x8738)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x8738))+((cj0*cj5*r02))+((x8740*x8741))+(((-1.0)*x8736))+((cj0*r01*x8739))+((x8737*x8739)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x8738))+(((-1.0)*x8740*x8744))+(((0.0718)*x8736))+((x8737*x8743))+(((-1.0)*x8744*x8745))+(((-1.0)*py*sj0))+(((-0.02626)*x8735))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8748=(cj5*cj6);
IkReal x8749=(cj0*sj6);
IkReal x8750=(r01*sj0);
IkReal x8751=((1.0)*sj0);
IkReal x8752=((1.0)*cj5);
IkReal x8753=(cj0*r12);
IkReal x8754=(r02*sj5);
IkReal x8755=((1.0)*sj5);
IkReal x8756=(cj5*sj6);
IkReal x8757=((1.0)*cj0);
IkReal x8758=(cj6*r10);
IkReal x8759=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x8755))+((r20*x8756))+((r21*x8748)));
evalcond[2]=((((-1.0)*sj6*x8750))+x8759+(((-1.0)*x8757*x8758))+((r11*x8749)));
evalcond[3]=((((-1.0)*r00*x8749*x8752))+((cj0*x8754))+(((-1.0)*r01*x8748*x8757))+((r12*sj0*sj5))+(((-1.0)*r10*x8751*x8756))+(((-1.0)*r11*x8748*x8751)));
evalcond[4]=((-1.0)+(((-1.0)*x8751*x8754))+((sj5*x8753))+(((-1.0)*r10*x8749*x8752))+((r00*sj0*x8756))+((x8748*x8750))+(((-1.0)*r11*x8748*x8757)));
evalcond[5]=((((-1.0)*cj6*x8750*x8755))+((r10*sj5*x8749))+((cj5*x8753))+(((-1.0)*r00*sj5*sj6*x8751))+(((-1.0)*cj5*r02*x8751))+((cj0*cj6*r11*sj5)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x8749))+(((-0.026255)*cj0*x8758))+(((-1.0)*py*x8757))+((px*sj0))+(((-0.026255)*sj6*x8750))+(((0.026255)*x8759)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8760=IKcos(j4);
IkReal x8761=IKsin(j4);
IkReal x8762=(r11*sj0);
IkReal x8763=(cj0*sj6);
IkReal x8764=(cj6*sj5);
IkReal x8765=(r10*sj0);
IkReal x8766=(sj5*sj6);
IkReal x8767=((1.0)*cj6);
IkReal x8768=((0.026255)*sj6);
IkReal x8769=((0.026255)*cj6);
IkReal x8770=(cj0*r00);
IkReal x8771=((1.0)*r21);
IkReal x8772=((1.0)*x8761);
evalcond[0]=((((-1.0)*x8772))+(((-1.0)*sj6*x8771))+((cj6*r20)));
evalcond[1]=(x8760+(((-1.0)*cj5*r22))+(((-1.0)*x8764*x8771))+(((-1.0)*r20*x8766)));
evalcond[2]=((-0.10716)+(((-1.0)*r21*x8768))+((r20*x8769))+pz+(((-0.0718)*x8760))+(((-0.02626)*x8761)));
evalcond[3]=(((r01*x8763))+(((-1.0)*x8767*x8770))+(((-1.0)*x8760))+((sj6*x8762))+(((-1.0)*x8765*x8767)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x8765*x8766))+((r00*sj5*x8763))+(((-1.0)*x8772))+((x8762*x8764))+((cj0*r01*x8764)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x8763))+(((-1.0)*x8769*x8770))+(((-1.0)*py*sj0))+(((0.0718)*x8761))+(((-1.0)*x8765*x8769))+((x8762*x8768))+(((-1.0)*cj0*px))+(((-0.02626)*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8773=(cj5*cj6);
IkReal x8774=(cj0*sj6);
IkReal x8775=(r01*sj0);
IkReal x8776=((1.0)*sj0);
IkReal x8777=((1.0)*cj5);
IkReal x8778=(cj0*r12);
IkReal x8779=(r02*sj5);
IkReal x8780=((1.0)*sj5);
IkReal x8781=(cj5*sj6);
IkReal x8782=((1.0)*cj0);
IkReal x8783=(cj6*r10);
IkReal x8784=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x8773))+(((-1.0)*r22*x8780))+((r20*x8781)));
evalcond[2]=(x8784+(((-1.0)*x8782*x8783))+((r11*x8774))+(((-1.0)*sj6*x8775)));
evalcond[3]=((((-1.0)*r01*x8773*x8782))+((r12*sj0*sj5))+(((-1.0)*r10*x8776*x8781))+(((-1.0)*r11*x8773*x8776))+(((-1.0)*r00*x8774*x8777))+((cj0*x8779)));
evalcond[4]=((1.0)+(((-1.0)*x8776*x8779))+((x8773*x8775))+((sj5*x8778))+(((-1.0)*r11*x8773*x8782))+((r00*sj0*x8781))+(((-1.0)*r10*x8774*x8777)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x8776))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x8775*x8780))+((cj5*x8778))+((r10*sj5*x8774))+(((-1.0)*cj5*r02*x8776)));
evalcond[6]=((-0.0097)+(((0.026255)*x8784))+(((-1.0)*py*x8782))+(((-0.026255)*cj0*x8783))+(((-0.026255)*sj6*x8775))+((px*sj0))+(((0.026255)*r11*x8774)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8785=(cj6*r20);
IkReal x8786=(r21*sj6);
if( IKabs((x8786+(((-1.0)*x8785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8785))+(((-6.96378830083565e-5)*x8786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8786+(((-1.0)*x8785))))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8785))+(((-6.96378830083565e-5)*x8786))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8786+(((-1.0)*x8785))), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8785))+(((-6.96378830083565e-5)*x8786))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8787=IKcos(j4);
IkReal x8788=IKsin(j4);
IkReal x8789=(r11*sj0);
IkReal x8790=(cj0*sj6);
IkReal x8791=(cj6*sj5);
IkReal x8792=(r10*sj0);
IkReal x8793=(sj5*sj6);
IkReal x8794=((1.0)*cj6);
IkReal x8795=((0.026255)*sj6);
IkReal x8796=((0.026255)*cj6);
IkReal x8797=(cj0*r00);
IkReal x8798=((1.0)*r21);
IkReal x8799=((1.0)*x8787);
evalcond[0]=(x8788+(((-1.0)*sj6*x8798))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x8793))+(((-1.0)*cj5*r22))+(((-1.0)*x8799))+(((-1.0)*x8791*x8798)));
evalcond[2]=((0.09736)+(((0.0718)*x8787))+(((-1.0)*r21*x8795))+pz+(((0.02626)*x8788))+((r20*x8796)));
evalcond[3]=((((-1.0)*x8792*x8794))+((sj6*x8789))+(((-1.0)*x8794*x8797))+((r01*x8790))+(((-1.0)*x8799)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x8789*x8791))+(((-1.0)*x8788))+((x8792*x8793))+((cj0*r01*x8791))+((r00*sj5*x8790)));
evalcond[5]=((-0.0019)+(((-1.0)*x8792*x8796))+(((-1.0)*x8796*x8797))+(((0.0718)*x8788))+(((0.026255)*r01*x8790))+((x8789*x8795))+(((-1.0)*py*sj0))+(((-0.02626)*x8787))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8800=(cj5*cj6);
IkReal x8801=(cj0*sj6);
IkReal x8802=(r01*sj0);
IkReal x8803=((1.0)*sj0);
IkReal x8804=((1.0)*cj5);
IkReal x8805=(cj0*r12);
IkReal x8806=(r02*sj5);
IkReal x8807=((1.0)*sj5);
IkReal x8808=(cj5*sj6);
IkReal x8809=((1.0)*cj0);
IkReal x8810=(cj6*r10);
IkReal x8811=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x8800))+(((-1.0)*r22*x8807))+((r20*x8808)));
evalcond[2]=(x8811+((r11*x8801))+(((-1.0)*x8809*x8810))+(((-1.0)*sj6*x8802)));
evalcond[3]=((((-1.0)*r11*x8800*x8803))+((cj0*x8806))+(((-1.0)*r10*x8803*x8808))+((r12*sj0*sj5))+(((-1.0)*r01*x8800*x8809))+(((-1.0)*r00*x8801*x8804)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8800*x8809))+((x8800*x8802))+((r00*sj0*x8808))+(((-1.0)*x8803*x8806))+(((-1.0)*r10*x8801*x8804))+((sj5*x8805)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x8803))+(((-1.0)*cj6*x8802*x8807))+((cj5*x8805))+((cj0*cj6*r11*sj5))+((r10*sj5*x8801))+(((-1.0)*cj5*r02*x8803)));
evalcond[6]=((-0.0097)+(((-0.026255)*sj6*x8802))+(((-1.0)*py*x8809))+(((0.026255)*x8811))+(((-0.026255)*cj0*x8810))+((px*sj0))+(((0.026255)*r11*x8801)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8812=IKcos(j4);
IkReal x8813=IKsin(j4);
IkReal x8814=(r11*sj0);
IkReal x8815=(cj0*sj6);
IkReal x8816=(cj6*sj5);
IkReal x8817=(r10*sj0);
IkReal x8818=(sj5*sj6);
IkReal x8819=((1.0)*cj6);
IkReal x8820=((0.026255)*sj6);
IkReal x8821=((0.026255)*cj6);
IkReal x8822=(cj0*r00);
IkReal x8823=((1.0)*r21);
IkReal x8824=((1.0)*x8813);
evalcond[0]=((((-1.0)*sj6*x8823))+((cj6*r20))+(((-1.0)*x8824)));
evalcond[1]=((((-1.0)*x8816*x8823))+x8812+(((-1.0)*cj5*r22))+(((-1.0)*r20*x8818)));
evalcond[2]=((-0.09756)+(((-1.0)*r21*x8820))+((r20*x8821))+(((-0.0718)*x8812))+pz+(((-0.02626)*x8813)));
evalcond[3]=((((-1.0)*x8812))+((sj6*x8814))+((r01*x8815))+(((-1.0)*x8817*x8819))+(((-1.0)*x8819*x8822)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x8817*x8818))+((x8814*x8816))+((cj0*r01*x8816))+(((-1.0)*x8824))+((r00*sj5*x8815)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x8815))+(((-1.0)*x8821*x8822))+(((0.0718)*x8813))+((x8814*x8820))+(((-1.0)*x8817*x8821))+(((-1.0)*py*sj0))+(((-0.02626)*x8812))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8825=(cj5*cj6);
IkReal x8826=(cj0*sj6);
IkReal x8827=(r01*sj0);
IkReal x8828=((1.0)*sj0);
IkReal x8829=((1.0)*cj5);
IkReal x8830=(cj0*r12);
IkReal x8831=(r02*sj5);
IkReal x8832=((1.0)*sj5);
IkReal x8833=(cj5*sj6);
IkReal x8834=((1.0)*cj0);
IkReal x8835=(cj6*r10);
IkReal x8836=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=(((r21*x8825))+((r20*x8833))+(((-1.0)*r22*x8832)));
evalcond[2]=((((-1.0)*x8834*x8835))+x8836+((r11*x8826))+(((-1.0)*sj6*x8827)));
evalcond[3]=(((cj0*x8831))+(((-1.0)*r11*x8825*x8828))+((r12*sj0*sj5))+(((-1.0)*r00*x8826*x8829))+(((-1.0)*r10*x8828*x8833))+(((-1.0)*r01*x8825*x8834)));
evalcond[4]=((-1.0)+((x8825*x8827))+((r00*sj0*x8833))+(((-1.0)*r11*x8825*x8834))+(((-1.0)*r10*x8826*x8829))+(((-1.0)*x8828*x8831))+((sj5*x8830)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x8828))+((cj5*x8830))+((cj0*cj6*r11*sj5))+((r10*sj5*x8826))+(((-1.0)*cj6*x8827*x8832))+(((-1.0)*cj5*r02*x8828)));
evalcond[6]=((-0.0001)+(((-0.026255)*sj6*x8827))+(((0.026255)*x8836))+((px*sj0))+(((0.026255)*r11*x8826))+(((-0.026255)*cj0*x8835))+(((-1.0)*py*x8834)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8837=IKcos(j4);
IkReal x8838=IKsin(j4);
IkReal x8839=(r11*sj0);
IkReal x8840=(cj0*sj6);
IkReal x8841=(cj6*sj5);
IkReal x8842=(r10*sj0);
IkReal x8843=(sj5*sj6);
IkReal x8844=((1.0)*cj6);
IkReal x8845=((0.026255)*sj6);
IkReal x8846=((0.026255)*cj6);
IkReal x8847=(cj0*r00);
IkReal x8848=((1.0)*r21);
IkReal x8849=((1.0)*x8838);
evalcond[0]=((((-1.0)*x8849))+((cj6*r20))+(((-1.0)*sj6*x8848)));
evalcond[1]=((((-1.0)*x8841*x8848))+x8837+(((-1.0)*r20*x8843))+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.08776)+(((-0.0718)*x8837))+((r20*x8846))+(((-1.0)*r21*x8845))+pz+(((-0.02626)*x8838)));
evalcond[3]=((((-1.0)*x8842*x8844))+((sj6*x8839))+(((-1.0)*x8837))+(((-1.0)*x8844*x8847))+((r01*x8840)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x8842*x8843))+((x8839*x8841))+((cj0*r01*x8841))+(((-1.0)*x8849))+((r00*sj5*x8840)));
evalcond[5]=((-0.0019)+(((-1.0)*x8842*x8846))+(((0.0718)*x8838))+((x8839*x8845))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((-1.0)*x8846*x8847))+(((-0.02626)*x8837))+(((0.026255)*r01*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8850=(cj5*cj6);
IkReal x8851=(cj0*sj6);
IkReal x8852=(r01*sj0);
IkReal x8853=((1.0)*sj0);
IkReal x8854=((1.0)*cj5);
IkReal x8855=(cj0*r12);
IkReal x8856=(r02*sj5);
IkReal x8857=((1.0)*sj5);
IkReal x8858=(cj5*sj6);
IkReal x8859=((1.0)*cj0);
IkReal x8860=(cj6*r10);
IkReal x8861=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x8857))+((r21*x8850))+((r20*x8858)));
evalcond[2]=((((-1.0)*sj6*x8852))+x8861+((r11*x8851))+(((-1.0)*x8859*x8860)));
evalcond[3]=((((-1.0)*r00*x8851*x8854))+((r12*sj0*sj5))+(((-1.0)*r11*x8850*x8853))+((cj0*x8856))+(((-1.0)*r10*x8853*x8858))+(((-1.0)*r01*x8850*x8859)));
evalcond[4]=((1.0)+((x8850*x8852))+(((-1.0)*x8853*x8856))+((sj5*x8855))+(((-1.0)*r11*x8850*x8859))+(((-1.0)*r10*x8851*x8854))+((r00*sj0*x8858)));
evalcond[5]=(((r10*sj5*x8851))+(((-1.0)*cj5*r02*x8853))+(((-1.0)*r00*sj5*sj6*x8853))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x8852*x8857))+((cj5*x8855)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x8851))+(((-1.0)*py*x8859))+(((-0.026255)*cj0*x8860))+(((-0.026255)*sj6*x8852))+((px*sj0))+(((0.026255)*x8861)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8862=(cj6*r20);
IkReal x8863=(r21*sj6);
if( IKabs((x8863+(((-1.0)*x8862)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8862))+(((-6.96378830083565e-5)*x8863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8863+(((-1.0)*x8862))))+IKsqr(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8862))+(((-6.96378830083565e-5)*x8863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8863+(((-1.0)*x8862))), ((-1.4924791086351)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x8862))+(((-6.96378830083565e-5)*x8863))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8864=IKcos(j4);
IkReal x8865=IKsin(j4);
IkReal x8866=(r11*sj0);
IkReal x8867=(cj0*sj6);
IkReal x8868=(cj6*sj5);
IkReal x8869=(r10*sj0);
IkReal x8870=(sj5*sj6);
IkReal x8871=((1.0)*cj6);
IkReal x8872=((0.026255)*sj6);
IkReal x8873=((0.026255)*cj6);
IkReal x8874=(cj0*r00);
IkReal x8875=((1.0)*r21);
IkReal x8876=((1.0)*x8864);
evalcond[0]=((((-1.0)*sj6*x8875))+x8865+((cj6*r20)));
evalcond[1]=((((-1.0)*x8868*x8875))+(((-1.0)*x8876))+(((-1.0)*cj5*r22))+(((-1.0)*r20*x8870)));
evalcond[2]=((0.10716)+(((-1.0)*r21*x8872))+((r20*x8873))+(((0.02626)*x8865))+pz+(((0.0718)*x8864)));
evalcond[3]=((((-1.0)*x8871*x8874))+((r01*x8867))+(((-1.0)*x8876))+(((-1.0)*x8869*x8871))+((sj6*x8866)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x8867))+((cj0*cj5*r02))+((cj0*r01*x8868))+((x8866*x8868))+((x8869*x8870))+(((-1.0)*x8865)));
evalcond[5]=((-0.0019)+(((-1.0)*x8873*x8874))+(((-1.0)*x8869*x8873))+(((-0.02626)*x8864))+((x8866*x8872))+(((0.0718)*x8865))+(((-1.0)*py*sj0))+(((0.026255)*r01*x8867))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8877=(cj5*cj6);
IkReal x8878=(cj0*sj6);
IkReal x8879=(r01*sj0);
IkReal x8880=((1.0)*sj0);
IkReal x8881=((1.0)*cj5);
IkReal x8882=(cj0*r12);
IkReal x8883=(r02*sj5);
IkReal x8884=((1.0)*sj5);
IkReal x8885=(cj5*sj6);
IkReal x8886=((1.0)*cj0);
IkReal x8887=(cj6*r10);
IkReal x8888=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x8884))+((r21*x8877))+((r20*x8885)));
evalcond[2]=((((-1.0)*sj6*x8879))+x8888+(((-1.0)*x8886*x8887))+((r11*x8878)));
evalcond[3]=((((-1.0)*r10*x8880*x8885))+(((-1.0)*r00*x8878*x8881))+(((-1.0)*r01*x8877*x8886))+((r12*sj0*sj5))+((cj0*x8883))+(((-1.0)*r11*x8877*x8880)));
evalcond[4]=((-1.0)+((x8877*x8879))+((sj5*x8882))+(((-1.0)*r10*x8878*x8881))+(((-1.0)*x8880*x8883))+(((-1.0)*r11*x8877*x8886))+((r00*sj0*x8885)));
evalcond[5]=((((-1.0)*cj6*x8879*x8884))+((cj5*x8882))+(((-1.0)*r00*sj5*sj6*x8880))+(((-1.0)*cj5*r02*x8880))+((cj0*cj6*r11*sj5))+((r10*sj5*x8878)));
evalcond[6]=((0.0097)+(((0.026255)*r11*x8878))+(((-0.026255)*cj0*x8887))+(((-0.026255)*sj6*x8879))+(((-1.0)*py*x8886))+((px*sj0))+(((0.026255)*x8888)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8889=IKcos(j4);
IkReal x8890=IKsin(j4);
IkReal x8891=(r11*sj0);
IkReal x8892=(cj0*sj6);
IkReal x8893=(cj6*sj5);
IkReal x8894=(r10*sj0);
IkReal x8895=(sj5*sj6);
IkReal x8896=((1.0)*cj6);
IkReal x8897=((0.026255)*sj6);
IkReal x8898=((0.026255)*cj6);
IkReal x8899=(cj0*r00);
IkReal x8900=((1.0)*r21);
IkReal x8901=((1.0)*x8890);
evalcond[0]=((((-1.0)*sj6*x8900))+(((-1.0)*x8901))+((cj6*r20)));
evalcond[1]=(x8889+(((-1.0)*x8893*x8900))+(((-1.0)*cj5*r22))+(((-1.0)*r20*x8895)));
evalcond[2]=((-0.09736)+(((-1.0)*r21*x8897))+((r20*x8898))+pz+(((-0.0718)*x8889))+(((-0.02626)*x8890)));
evalcond[3]=(((r01*x8892))+(((-1.0)*x8889))+(((-1.0)*x8896*x8899))+(((-1.0)*x8894*x8896))+((sj6*x8891)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x8893))+(((-1.0)*x8901))+((x8894*x8895))+((r00*sj5*x8892))+((x8891*x8893)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x8892))+(((-1.0)*x8894*x8898))+(((-1.0)*py*sj0))+(((0.0718)*x8890))+(((-0.02626)*x8889))+(((-1.0)*x8898*x8899))+(((-1.0)*cj0*px))+((x8891*x8897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8902=(cj5*cj6);
IkReal x8903=(cj0*sj6);
IkReal x8904=(r01*sj0);
IkReal x8905=((1.0)*sj0);
IkReal x8906=((1.0)*cj5);
IkReal x8907=(cj0*r12);
IkReal x8908=(r02*sj5);
IkReal x8909=((1.0)*sj5);
IkReal x8910=(cj5*sj6);
IkReal x8911=((1.0)*cj0);
IkReal x8912=(cj6*r10);
IkReal x8913=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x8902))+(((-1.0)*r22*x8909))+((r20*x8910)));
evalcond[2]=(((r11*x8903))+x8913+(((-1.0)*sj6*x8904))+(((-1.0)*x8911*x8912)));
evalcond[3]=((((-1.0)*r01*x8902*x8911))+((r12*sj0*sj5))+(((-1.0)*r10*x8905*x8910))+(((-1.0)*r11*x8902*x8905))+((cj0*x8908))+(((-1.0)*r00*x8903*x8906)));
evalcond[4]=((1.0)+(((-1.0)*r10*x8903*x8906))+(((-1.0)*r11*x8902*x8911))+((x8902*x8904))+((sj5*x8907))+(((-1.0)*x8905*x8908))+((r00*sj0*x8910)));
evalcond[5]=((((-1.0)*cj5*r02*x8905))+(((-1.0)*cj6*x8904*x8909))+((cj0*cj6*r11*sj5))+((r10*sj5*x8903))+(((-1.0)*r00*sj5*sj6*x8905))+((cj5*x8907)));
evalcond[6]=((0.0097)+(((-0.026255)*cj0*x8912))+(((0.026255)*x8913))+(((-1.0)*py*x8911))+((px*sj0))+(((-0.026255)*sj6*x8904))+(((0.026255)*r11*x8903)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8914=(cj6*r20);
IkReal x8915=(r21*sj6);
if( IKabs(((((-1.0)*x8914))+x8915)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x8915))+(((6.96378830083565e-5)*x8914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8914))+x8915))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x8915))+(((6.96378830083565e-5)*x8914))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x8914))+x8915), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x8915))+(((6.96378830083565e-5)*x8914))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8916=IKcos(j4);
IkReal x8917=IKsin(j4);
IkReal x8918=(r11*sj0);
IkReal x8919=(cj0*sj6);
IkReal x8920=(cj6*sj5);
IkReal x8921=(r10*sj0);
IkReal x8922=(sj5*sj6);
IkReal x8923=((1.0)*cj6);
IkReal x8924=((0.026255)*sj6);
IkReal x8925=((0.026255)*cj6);
IkReal x8926=(cj0*r00);
IkReal x8927=((1.0)*r21);
IkReal x8928=((1.0)*x8916);
evalcond[0]=(x8917+(((-1.0)*sj6*x8927))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x8922))+(((-1.0)*x8920*x8927))+(((-1.0)*x8928))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09756)+((r20*x8925))+(((-1.0)*r21*x8924))+(((0.0718)*x8916))+(((0.02626)*x8917))+pz);
evalcond[3]=(((r01*x8919))+(((-1.0)*x8928))+((sj6*x8918))+(((-1.0)*x8921*x8923))+(((-1.0)*x8923*x8926)));
evalcond[4]=((((-1.0)*x8917))+((cj5*r12*sj0))+((x8921*x8922))+((cj0*cj5*r02))+((x8918*x8920))+((cj0*r01*x8920))+((r00*sj5*x8919)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x8919))+(((0.0718)*x8917))+((x8918*x8924))+(((-1.0)*py*sj0))+(((-0.02626)*x8916))+(((-1.0)*x8921*x8925))+(((-1.0)*cj0*px))+(((-1.0)*x8925*x8926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8929=(cj5*cj6);
IkReal x8930=((1.0)*sj0);
IkReal x8931=((1.0)*r22);
IkReal x8932=(cj0*sj5);
IkReal x8933=(cj5*sj6);
IkReal x8934=((1.0)*cj0);
IkReal x8935=(cj6*r20);
IkReal x8936=((1.0)*sj5);
IkReal x8937=(r21*sj6);
IkReal x8938=(x8933*x8934);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj5*x8931))+((r20*x8933))+((r21*x8929)));
evalcond[2]=(x8935+(((-1.0)*x8937)));
evalcond[3]=((((-1.0)*r20*sj6*x8936))+(((-1.0)*cj6*r21*x8936))+(((-1.0)*cj5*x8931)));
evalcond[4]=((((-1.0)*r00*x8938))+((r12*sj0*sj5))+(((-1.0)*r10*x8930*x8933))+(((-1.0)*r01*x8929*x8934))+((r02*x8932))+(((-1.0)*r11*x8929*x8930)));
evalcond[5]=(((r12*x8932))+(((-1.0)*r10*x8938))+(((-1.0)*r02*sj5*x8930))+((r01*sj0*x8929))+((r00*sj0*x8933))+(((-1.0)*r11*x8929*x8934)));
evalcond[6]=((-0.0097)+(((0.026255)*x8935))+(((-0.026255)*x8937))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8939=(sj0*sj6);
IkReal x8940=(cj0*sj6);
IkReal x8941=(cj6*r00);
IkReal x8942=((1.0)*cj6*r10);
if( IKabs((((r11*x8940))+(((-1.0)*cj0*x8942))+((sj0*x8941))+(((-1.0)*r01*x8939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x8942))+(((-1.0)*cj0*x8941))+((r01*x8940))+((r11*x8939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x8940))+(((-1.0)*cj0*x8942))+((sj0*x8941))+(((-1.0)*r01*x8939))))+IKsqr(((((-1.0)*sj0*x8942))+(((-1.0)*cj0*x8941))+((r01*x8940))+((r11*x8939))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x8940))+(((-1.0)*cj0*x8942))+((sj0*x8941))+(((-1.0)*r01*x8939))), ((((-1.0)*sj0*x8942))+(((-1.0)*cj0*x8941))+((r01*x8940))+((r11*x8939))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8943=IKcos(j4);
IkReal x8944=IKsin(j4);
IkReal x8945=(r11*sj6);
IkReal x8946=((0.026255)*cj0);
IkReal x8947=(r01*sj6);
IkReal x8948=(sj0*sj5);
IkReal x8949=(cj6*r11);
IkReal x8950=(r10*sj6);
IkReal x8951=(cj5*r12);
IkReal x8952=(cj6*sj0);
IkReal x8953=((1.0)*sj0);
IkReal x8954=(cj5*r02);
IkReal x8955=((1.0)*r10);
IkReal x8956=(cj0*sj5);
IkReal x8957=(r00*sj6);
IkReal x8958=((0.026255)*sj0);
IkReal x8959=(cj0*cj6);
IkReal x8960=((1.0)*cj0);
IkReal x8961=(cj6*r01);
IkReal x8962=((1.0)*x8944);
evalcond[0]=((((-1.0)*x8943))+(((-1.0)*x8952*x8955))+((cj0*x8947))+((sj0*x8945))+(((-1.0)*r00*x8959)));
evalcond[1]=((((-1.0)*x8947*x8953))+(((-1.0)*x8955*x8959))+((r00*x8952))+((cj0*x8945))+(((-1.0)*x8962)));
evalcond[2]=(((x8948*x8949))+((x8956*x8957))+((x8956*x8961))+((cj0*x8954))+(((-1.0)*x8962))+((sj0*x8951))+((x8948*x8950)));
evalcond[3]=((((-1.0)*x8948*x8957))+((x8950*x8956))+(((-1.0)*x8948*x8961))+x8943+(((-1.0)*x8953*x8954))+((cj0*x8951))+((x8949*x8956)));
evalcond[4]=((-0.09736)+(((-1.0)*x8947*x8958))+(((-0.02626)*x8944))+(((-0.0718)*x8943))+((x8945*x8946))+(((-1.0)*py*x8960))+((px*sj0))+(((0.026255)*r00*x8952))+(((-1.0)*cj6*r10*x8946)));
evalcond[5]=((-0.0019)+((x8946*x8947))+(((-0.02626)*x8943))+(((-1.0)*px*x8960))+((x8945*x8958))+(((-0.026255)*r10*x8952))+(((-1.0)*py*x8953))+(((0.0718)*x8944))+(((-1.0)*cj6*r00*x8946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8963=(cj5*cj6);
IkReal x8964=((1.0)*sj0);
IkReal x8965=((1.0)*r22);
IkReal x8966=(cj0*sj5);
IkReal x8967=(cj5*sj6);
IkReal x8968=((1.0)*cj0);
IkReal x8969=(cj6*r20);
IkReal x8970=((1.0)*sj5);
IkReal x8971=(r21*sj6);
IkReal x8972=(x8967*x8968);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x8965))+((r20*x8967))+((r21*x8963)));
evalcond[2]=(x8969+(((-1.0)*x8971)));
evalcond[3]=((((-1.0)*r20*sj6*x8970))+(((-1.0)*cj6*r21*x8970))+(((-1.0)*cj5*x8965)));
evalcond[4]=(((r02*x8966))+((r12*sj0*sj5))+(((-1.0)*r10*x8964*x8967))+(((-1.0)*r11*x8963*x8964))+(((-1.0)*r01*x8963*x8968))+(((-1.0)*r00*x8972)));
evalcond[5]=((((-1.0)*r10*x8972))+((r01*sj0*x8963))+((r00*sj0*x8967))+(((-1.0)*r11*x8963*x8968))+(((-1.0)*r02*sj5*x8964))+((r12*x8966)));
evalcond[6]=((-0.0097)+(((-0.026255)*x8971))+pz+(((0.026255)*x8969)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8973=(sj0*sj6);
IkReal x8974=(cj6*r10);
IkReal x8975=((1.0)*sj0);
IkReal x8976=(cj6*r00);
IkReal x8977=(cj0*sj6);
if( IKabs((((r01*x8973))+(((-1.0)*x8975*x8976))+((cj0*x8974))+(((-1.0)*r11*x8977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x8976))+((r11*x8973))+((r01*x8977))+(((-1.0)*x8974*x8975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x8973))+(((-1.0)*x8975*x8976))+((cj0*x8974))+(((-1.0)*r11*x8977))))+IKsqr(((((-1.0)*cj0*x8976))+((r11*x8973))+((r01*x8977))+(((-1.0)*x8974*x8975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x8973))+(((-1.0)*x8975*x8976))+((cj0*x8974))+(((-1.0)*r11*x8977))), ((((-1.0)*cj0*x8976))+((r11*x8973))+((r01*x8977))+(((-1.0)*x8974*x8975))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8978=IKsin(j4);
IkReal x8979=IKcos(j4);
IkReal x8980=(r11*sj6);
IkReal x8981=((0.026255)*cj0);
IkReal x8982=(r01*sj6);
IkReal x8983=(sj0*sj5);
IkReal x8984=(cj6*r11);
IkReal x8985=(r10*sj6);
IkReal x8986=(cj5*r12);
IkReal x8987=(cj6*sj0);
IkReal x8988=((1.0)*sj0);
IkReal x8989=(cj5*r02);
IkReal x8990=((1.0)*r10);
IkReal x8991=(cj0*sj5);
IkReal x8992=(r00*sj6);
IkReal x8993=((0.026255)*sj0);
IkReal x8994=(cj0*cj6);
IkReal x8995=((1.0)*cj0);
IkReal x8996=(cj6*r01);
IkReal x8997=((1.0)*x8979);
evalcond[0]=(((r00*x8987))+(((-1.0)*x8982*x8988))+(((-1.0)*x8990*x8994))+((cj0*x8980))+x8978);
evalcond[1]=(((cj0*x8982))+(((-1.0)*x8987*x8990))+(((-1.0)*x8997))+(((-1.0)*r00*x8994))+((sj0*x8980)));
evalcond[2]=(((x8983*x8985))+((x8983*x8984))+((x8991*x8992))+((x8991*x8996))+((cj0*x8989))+(((-1.0)*x8978))+((sj0*x8986)));
evalcond[3]=(((x8985*x8991))+(((-1.0)*x8988*x8989))+(((-1.0)*x8983*x8992))+(((-1.0)*x8983*x8996))+((cj0*x8986))+(((-1.0)*x8997))+((x8984*x8991)));
evalcond[4]=((0.09756)+(((0.026255)*r00*x8987))+(((-1.0)*x8982*x8993))+(((-1.0)*cj6*r10*x8981))+((px*sj0))+(((0.02626)*x8978))+(((-1.0)*py*x8995))+(((0.0718)*x8979))+((x8980*x8981)));
evalcond[5]=((-0.0019)+(((-0.026255)*r10*x8987))+(((-1.0)*py*x8988))+(((-1.0)*px*x8995))+(((-1.0)*cj6*r00*x8981))+(((-0.02626)*x8979))+((x8981*x8982))+((x8980*x8993))+(((0.0718)*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8998=(cj5*cj6);
IkReal x8999=((1.0)*sj0);
IkReal x9000=((1.0)*r22);
IkReal x9001=(cj0*sj5);
IkReal x9002=(cj5*sj6);
IkReal x9003=((1.0)*cj0);
IkReal x9004=(cj6*r20);
IkReal x9005=((1.0)*sj5);
IkReal x9006=(r21*sj6);
IkReal x9007=(x9002*x9003);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x9000))+((r21*x8998))+((r20*x9002)));
evalcond[2]=((((-1.0)*x9006))+x9004);
evalcond[3]=((((-1.0)*r20*sj6*x9005))+(((-1.0)*cj5*x9000))+(((-1.0)*cj6*r21*x9005)));
evalcond[4]=((((-1.0)*r11*x8998*x8999))+(((-1.0)*r10*x8999*x9002))+((r02*x9001))+((r12*sj0*sj5))+(((-1.0)*r01*x8998*x9003))+(((-1.0)*r00*x9007)));
evalcond[5]=((((-1.0)*r10*x9007))+((r01*sj0*x8998))+(((-1.0)*r02*sj5*x8999))+(((-1.0)*r11*x8998*x9003))+((r12*x9001))+((r00*sj0*x9002)));
evalcond[6]=((-0.0001)+(((-0.026255)*x9006))+pz+(((0.026255)*x9004)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9008=(sj0*sj6);
IkReal x9009=(cj6*r10);
IkReal x9010=((1.0)*sj0);
IkReal x9011=(cj6*r00);
IkReal x9012=(cj0*sj6);
if( IKabs(((((-1.0)*r11*x9012))+((cj0*x9009))+(((-1.0)*x9010*x9011))+((r01*x9008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x9011))+(((-1.0)*x9009*x9010))+((r11*x9008))+((r01*x9012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x9012))+((cj0*x9009))+(((-1.0)*x9010*x9011))+((r01*x9008))))+IKsqr(((((-1.0)*cj0*x9011))+(((-1.0)*x9009*x9010))+((r11*x9008))+((r01*x9012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x9012))+((cj0*x9009))+(((-1.0)*x9010*x9011))+((r01*x9008))), ((((-1.0)*cj0*x9011))+(((-1.0)*x9009*x9010))+((r11*x9008))+((r01*x9012))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9013=IKsin(j4);
IkReal x9014=IKcos(j4);
IkReal x9015=(r11*sj6);
IkReal x9016=((0.026255)*cj0);
IkReal x9017=(r01*sj6);
IkReal x9018=(sj0*sj5);
IkReal x9019=(cj6*r11);
IkReal x9020=(r10*sj6);
IkReal x9021=(cj5*r12);
IkReal x9022=(cj6*sj0);
IkReal x9023=((1.0)*sj0);
IkReal x9024=(cj5*r02);
IkReal x9025=((1.0)*r10);
IkReal x9026=(cj0*sj5);
IkReal x9027=(r00*sj6);
IkReal x9028=((0.026255)*sj0);
IkReal x9029=(cj0*cj6);
IkReal x9030=((1.0)*cj0);
IkReal x9031=(cj6*r01);
IkReal x9032=((1.0)*x9014);
evalcond[0]=((((-1.0)*x9017*x9023))+((r00*x9022))+x9013+((cj0*x9015))+(((-1.0)*x9025*x9029)));
evalcond[1]=((((-1.0)*x9032))+(((-1.0)*x9022*x9025))+((sj0*x9015))+((cj0*x9017))+(((-1.0)*r00*x9029)));
evalcond[2]=(((x9026*x9027))+(((-1.0)*x9013))+((x9026*x9031))+((x9018*x9020))+((cj0*x9024))+((sj0*x9021))+((x9018*x9019)));
evalcond[3]=(((x9019*x9026))+(((-1.0)*x9032))+(((-1.0)*x9023*x9024))+((cj0*x9021))+(((-1.0)*x9018*x9031))+((x9020*x9026))+(((-1.0)*x9018*x9027)));
evalcond[4]=((0.08776)+(((0.02626)*x9013))+(((-1.0)*x9017*x9028))+((x9015*x9016))+(((-1.0)*cj6*r10*x9016))+(((0.0718)*x9014))+(((-1.0)*py*x9030))+(((0.026255)*r00*x9022))+((px*sj0)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x9030))+(((-0.02626)*x9014))+(((-0.026255)*r10*x9022))+((x9015*x9028))+((x9016*x9017))+(((-1.0)*cj6*r00*x9016))+(((-1.0)*py*x9023))+(((0.0718)*x9013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9033=(cj5*cj6);
IkReal x9034=((1.0)*sj0);
IkReal x9035=((1.0)*r22);
IkReal x9036=(cj0*sj5);
IkReal x9037=(cj5*sj6);
IkReal x9038=((1.0)*cj0);
IkReal x9039=(cj6*r20);
IkReal x9040=((1.0)*sj5);
IkReal x9041=(r21*sj6);
IkReal x9042=(x9037*x9038);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r21*x9033))+(((-1.0)*sj5*x9035))+((r20*x9037)));
evalcond[2]=((((-1.0)*x9041))+x9039);
evalcond[3]=((((-1.0)*cj6*r21*x9040))+(((-1.0)*r20*sj6*x9040))+(((-1.0)*cj5*x9035)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r00*x9042))+((r02*x9036))+(((-1.0)*r10*x9034*x9037))+(((-1.0)*r11*x9033*x9034))+(((-1.0)*r01*x9033*x9038)));
evalcond[5]=(((r01*sj0*x9033))+((r00*sj0*x9037))+(((-1.0)*r10*x9042))+(((-1.0)*r11*x9033*x9038))+((r12*x9036))+(((-1.0)*r02*sj5*x9034)));
evalcond[6]=((-0.0001)+(((-0.026255)*x9041))+pz+(((0.026255)*x9039)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9043=(sj0*sj6);
IkReal x9044=(cj0*sj6);
IkReal x9045=(cj6*r00);
IkReal x9046=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x9046))+(((-1.0)*r01*x9043))+((sj0*x9045))+((r11*x9044)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x9046))+((r01*x9044))+((r11*x9043))+(((-1.0)*cj0*x9045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x9046))+(((-1.0)*r01*x9043))+((sj0*x9045))+((r11*x9044))))+IKsqr(((((-1.0)*sj0*x9046))+((r01*x9044))+((r11*x9043))+(((-1.0)*cj0*x9045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x9046))+(((-1.0)*r01*x9043))+((sj0*x9045))+((r11*x9044))), ((((-1.0)*sj0*x9046))+((r01*x9044))+((r11*x9043))+(((-1.0)*cj0*x9045))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9047=IKcos(j4);
IkReal x9048=IKsin(j4);
IkReal x9049=(r11*sj6);
IkReal x9050=((0.026255)*cj0);
IkReal x9051=(r01*sj6);
IkReal x9052=(sj0*sj5);
IkReal x9053=(cj6*r11);
IkReal x9054=(r10*sj6);
IkReal x9055=(cj5*r12);
IkReal x9056=(cj6*sj0);
IkReal x9057=((1.0)*sj0);
IkReal x9058=(cj5*r02);
IkReal x9059=((1.0)*r10);
IkReal x9060=(cj0*sj5);
IkReal x9061=(r00*sj6);
IkReal x9062=((0.026255)*sj0);
IkReal x9063=(cj0*cj6);
IkReal x9064=((1.0)*cj0);
IkReal x9065=(cj6*r01);
IkReal x9066=((1.0)*x9048);
evalcond[0]=((((-1.0)*x9047))+(((-1.0)*x9056*x9059))+((sj0*x9049))+((cj0*x9051))+(((-1.0)*r00*x9063)));
evalcond[1]=((((-1.0)*x9066))+(((-1.0)*x9059*x9063))+((r00*x9056))+((cj0*x9049))+(((-1.0)*x9051*x9057)));
evalcond[2]=((((-1.0)*x9066))+((x9060*x9061))+((x9060*x9065))+((x9052*x9054))+((x9052*x9053))+((sj0*x9055))+((cj0*x9058)));
evalcond[3]=((((-1.0)*x9057*x9058))+x9047+(((-1.0)*x9052*x9061))+(((-1.0)*x9052*x9065))+((cj0*x9055))+((x9053*x9060))+((x9054*x9060)));
evalcond[4]=((-0.10716)+(((-0.02626)*x9048))+((x9049*x9050))+(((-1.0)*x9051*x9062))+(((-1.0)*cj6*r10*x9050))+(((-1.0)*py*x9064))+((px*sj0))+(((-0.0718)*x9047))+(((0.026255)*r00*x9056)));
evalcond[5]=((-0.0019)+(((-0.02626)*x9047))+(((0.0718)*x9048))+((x9050*x9051))+(((-1.0)*py*x9057))+(((-1.0)*px*x9064))+(((-0.026255)*r10*x9056))+(((-1.0)*cj6*r00*x9050))+((x9049*x9062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9067=(cj5*cj6);
IkReal x9068=((1.0)*sj0);
IkReal x9069=((1.0)*r22);
IkReal x9070=(cj0*sj5);
IkReal x9071=(cj5*sj6);
IkReal x9072=((1.0)*cj0);
IkReal x9073=(cj6*r20);
IkReal x9074=((1.0)*sj5);
IkReal x9075=(r21*sj6);
IkReal x9076=(x9071*x9072);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+((r20*x9071))+(((-1.0)*sj5*x9069))+((r21*x9067)));
evalcond[2]=((((-1.0)*x9075))+x9073);
evalcond[3]=((((-1.0)*r20*sj6*x9074))+(((-1.0)*cj6*r21*x9074))+(((-1.0)*cj5*x9069)));
evalcond[4]=((((-1.0)*r01*x9067*x9072))+(((-1.0)*r10*x9068*x9071))+((r12*sj0*sj5))+(((-1.0)*r00*x9076))+(((-1.0)*r11*x9067*x9068))+((r02*x9070)));
evalcond[5]=((((-1.0)*r11*x9067*x9072))+(((-1.0)*r02*sj5*x9068))+((r00*sj0*x9071))+((r12*x9070))+((r01*sj0*x9067))+(((-1.0)*r10*x9076)));
evalcond[6]=((0.0097)+(((-0.026255)*x9075))+pz+(((0.026255)*x9073)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9077=(sj0*sj6);
IkReal x9078=(cj6*r10);
IkReal x9079=((1.0)*sj0);
IkReal x9080=(cj6*r00);
IkReal x9081=(cj0*sj6);
if( IKabs(((((-1.0)*r11*x9081))+((r01*x9077))+(((-1.0)*x9079*x9080))+((cj0*x9078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x9081))+((r11*x9077))+(((-1.0)*x9078*x9079))+(((-1.0)*cj0*x9080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x9081))+((r01*x9077))+(((-1.0)*x9079*x9080))+((cj0*x9078))))+IKsqr((((r01*x9081))+((r11*x9077))+(((-1.0)*x9078*x9079))+(((-1.0)*cj0*x9080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x9081))+((r01*x9077))+(((-1.0)*x9079*x9080))+((cj0*x9078))), (((r01*x9081))+((r11*x9077))+(((-1.0)*x9078*x9079))+(((-1.0)*cj0*x9080))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9082=IKsin(j4);
IkReal x9083=IKcos(j4);
IkReal x9084=(r11*sj6);
IkReal x9085=((0.026255)*cj0);
IkReal x9086=(r01*sj6);
IkReal x9087=(sj0*sj5);
IkReal x9088=(cj6*r11);
IkReal x9089=(r10*sj6);
IkReal x9090=(cj5*r12);
IkReal x9091=(cj6*sj0);
IkReal x9092=((1.0)*sj0);
IkReal x9093=(cj5*r02);
IkReal x9094=((1.0)*r10);
IkReal x9095=(cj0*sj5);
IkReal x9096=(r00*sj6);
IkReal x9097=((0.026255)*sj0);
IkReal x9098=(cj0*cj6);
IkReal x9099=((1.0)*cj0);
IkReal x9100=(cj6*r01);
IkReal x9101=((1.0)*x9083);
evalcond[0]=(((cj0*x9084))+((r00*x9091))+(((-1.0)*x9086*x9092))+x9082+(((-1.0)*x9094*x9098)));
evalcond[1]=(((sj0*x9084))+((cj0*x9086))+(((-1.0)*r00*x9098))+(((-1.0)*x9091*x9094))+(((-1.0)*x9101)));
evalcond[2]=(((sj0*x9090))+((cj0*x9093))+((x9095*x9096))+((x9087*x9089))+((x9087*x9088))+((x9095*x9100))+(((-1.0)*x9082)));
evalcond[3]=((((-1.0)*x9092*x9093))+((cj0*x9090))+(((-1.0)*x9087*x9096))+(((-1.0)*x9087*x9100))+((x9089*x9095))+((x9088*x9095))+(((-1.0)*x9101)));
evalcond[4]=((0.09736)+(((-1.0)*py*x9099))+(((-1.0)*x9086*x9097))+(((0.02626)*x9082))+(((-1.0)*cj6*r10*x9085))+((px*sj0))+(((0.0718)*x9083))+(((0.026255)*r00*x9091))+((x9084*x9085)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x9092))+(((-1.0)*px*x9099))+((x9085*x9086))+(((-1.0)*cj6*r00*x9085))+(((0.0718)*x9082))+((x9084*x9097))+(((-0.026255)*r10*x9091))+(((-0.02626)*x9083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9102=(cj5*cj6);
IkReal x9103=((1.0)*sj0);
IkReal x9104=((1.0)*r22);
IkReal x9105=(cj0*sj5);
IkReal x9106=(cj5*sj6);
IkReal x9107=((1.0)*cj0);
IkReal x9108=(cj6*r20);
IkReal x9109=((1.0)*sj5);
IkReal x9110=(r21*sj6);
IkReal x9111=(x9106*x9107);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((1.0)+((r21*x9102))+(((-1.0)*sj5*x9104))+((r20*x9106)));
evalcond[2]=(x9108+(((-1.0)*x9110)));
evalcond[3]=((((-1.0)*cj5*x9104))+(((-1.0)*r20*sj6*x9109))+(((-1.0)*cj6*r21*x9109)));
evalcond[4]=((((-1.0)*r01*x9102*x9107))+(((-1.0)*r10*x9103*x9106))+(((-1.0)*r11*x9102*x9103))+((r12*sj0*sj5))+((r02*x9105))+(((-1.0)*r00*x9111)));
evalcond[5]=(((r01*sj0*x9102))+(((-1.0)*r10*x9111))+(((-1.0)*r02*sj5*x9103))+(((-1.0)*r11*x9102*x9107))+((r00*sj0*x9106))+((r12*x9105)));
evalcond[6]=((0.0097)+(((-0.026255)*x9110))+pz+(((0.026255)*x9108)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9112=(sj0*sj6);
IkReal x9113=(cj0*sj6);
IkReal x9114=(cj6*r00);
IkReal x9115=((1.0)*cj6*r10);
if( IKabs((((r11*x9113))+((sj0*x9114))+(((-1.0)*cj0*x9115))+(((-1.0)*r01*x9112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x9115))+((r11*x9112))+((r01*x9113))+(((-1.0)*cj0*x9114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x9113))+((sj0*x9114))+(((-1.0)*cj0*x9115))+(((-1.0)*r01*x9112))))+IKsqr(((((-1.0)*sj0*x9115))+((r11*x9112))+((r01*x9113))+(((-1.0)*cj0*x9114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x9113))+((sj0*x9114))+(((-1.0)*cj0*x9115))+(((-1.0)*r01*x9112))), ((((-1.0)*sj0*x9115))+((r11*x9112))+((r01*x9113))+(((-1.0)*cj0*x9114))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9116=IKcos(j4);
IkReal x9117=IKsin(j4);
IkReal x9118=(r11*sj6);
IkReal x9119=((0.026255)*cj0);
IkReal x9120=(r01*sj6);
IkReal x9121=(sj0*sj5);
IkReal x9122=(cj6*r11);
IkReal x9123=(r10*sj6);
IkReal x9124=(cj5*r12);
IkReal x9125=(cj6*sj0);
IkReal x9126=((1.0)*sj0);
IkReal x9127=(cj5*r02);
IkReal x9128=((1.0)*r10);
IkReal x9129=(cj0*sj5);
IkReal x9130=(r00*sj6);
IkReal x9131=((0.026255)*sj0);
IkReal x9132=(cj0*cj6);
IkReal x9133=((1.0)*cj0);
IkReal x9134=(cj6*r01);
IkReal x9135=((1.0)*x9117);
evalcond[0]=((((-1.0)*r00*x9132))+((cj0*x9120))+(((-1.0)*x9116))+((sj0*x9118))+(((-1.0)*x9125*x9128)));
evalcond[1]=(((cj0*x9118))+(((-1.0)*x9128*x9132))+(((-1.0)*x9120*x9126))+((r00*x9125))+(((-1.0)*x9135)));
evalcond[2]=(((x9129*x9130))+((x9129*x9134))+((cj0*x9127))+((sj0*x9124))+((x9121*x9123))+((x9121*x9122))+(((-1.0)*x9135)));
evalcond[3]=(((x9122*x9129))+((cj0*x9124))+x9116+((x9123*x9129))+(((-1.0)*x9121*x9134))+(((-1.0)*x9121*x9130))+(((-1.0)*x9126*x9127)));
evalcond[4]=((-0.09756)+(((0.026255)*r00*x9125))+(((-0.02626)*x9117))+(((-1.0)*x9120*x9131))+((x9118*x9119))+((px*sj0))+(((-0.0718)*x9116))+(((-1.0)*cj6*r10*x9119))+(((-1.0)*py*x9133)));
evalcond[5]=((-0.0019)+((x9118*x9131))+((x9119*x9120))+(((-0.02626)*x9116))+(((-1.0)*cj6*r00*x9119))+(((-1.0)*px*x9133))+(((-0.026255)*r10*x9125))+(((0.0718)*x9117))+(((-1.0)*py*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9136=(cj5*cj6);
IkReal x9137=((1.0)*sj0);
IkReal x9138=((1.0)*r22);
IkReal x9139=(cj0*sj5);
IkReal x9140=(cj5*sj6);
IkReal x9141=((1.0)*cj0);
IkReal x9142=(cj6*r20);
IkReal x9143=((1.0)*sj5);
IkReal x9144=(r21*sj6);
IkReal x9145=(x9140*x9141);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x9140))+((r21*x9136))+(((-1.0)*sj5*x9138)));
evalcond[2]=((((-1.0)*x9144))+x9142);
evalcond[3]=((((-1.0)*cj6*r21*x9143))+(((-1.0)*r20*sj6*x9143))+(((-1.0)*cj5*x9138)));
evalcond[4]=((((-1.0)*r00*x9145))+(((-1.0)*r10*x9137*x9140))+(((-1.0)*r11*x9136*x9137))+((r12*sj0*sj5))+(((-1.0)*r01*x9136*x9141))+((r02*x9139)));
evalcond[5]=((((-1.0)*r02*sj5*x9137))+(((-1.0)*r10*x9145))+((r12*x9139))+(((-1.0)*r11*x9136*x9141))+((r00*sj0*x9140))+((r01*sj0*x9136)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x9142))+(((-0.026255)*x9144)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9146=(sj0*sj6);
IkReal x9147=(cj0*sj6);
IkReal x9148=(cj6*r00);
IkReal x9149=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x9149))+((sj0*x9148))+(((-1.0)*r01*x9146))+((r11*x9147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x9147))+(((-1.0)*cj0*x9148))+(((-1.0)*sj0*x9149))+((r11*x9146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x9149))+((sj0*x9148))+(((-1.0)*r01*x9146))+((r11*x9147))))+IKsqr((((r01*x9147))+(((-1.0)*cj0*x9148))+(((-1.0)*sj0*x9149))+((r11*x9146))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x9149))+((sj0*x9148))+(((-1.0)*r01*x9146))+((r11*x9147))), (((r01*x9147))+(((-1.0)*cj0*x9148))+(((-1.0)*sj0*x9149))+((r11*x9146))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9150=IKcos(j4);
IkReal x9151=IKsin(j4);
IkReal x9152=(r11*sj6);
IkReal x9153=((0.026255)*cj0);
IkReal x9154=(r01*sj6);
IkReal x9155=(sj0*sj5);
IkReal x9156=(cj6*r11);
IkReal x9157=(r10*sj6);
IkReal x9158=(cj5*r12);
IkReal x9159=(cj6*sj0);
IkReal x9160=((1.0)*sj0);
IkReal x9161=(cj5*r02);
IkReal x9162=((1.0)*r10);
IkReal x9163=(cj0*sj5);
IkReal x9164=(r00*sj6);
IkReal x9165=((0.026255)*sj0);
IkReal x9166=(cj0*cj6);
IkReal x9167=((1.0)*cj0);
IkReal x9168=(cj6*r01);
IkReal x9169=((1.0)*x9151);
evalcond[0]=((((-1.0)*x9159*x9162))+((cj0*x9154))+(((-1.0)*r00*x9166))+((sj0*x9152))+(((-1.0)*x9150)));
evalcond[1]=(((cj0*x9152))+(((-1.0)*x9154*x9160))+(((-1.0)*x9162*x9166))+((r00*x9159))+(((-1.0)*x9169)));
evalcond[2]=(((x9163*x9168))+((x9163*x9164))+((x9155*x9157))+((x9155*x9156))+((sj0*x9158))+((cj0*x9161))+(((-1.0)*x9169)));
evalcond[3]=(((cj0*x9158))+x9150+(((-1.0)*x9160*x9161))+(((-1.0)*x9155*x9164))+(((-1.0)*x9155*x9168))+((x9157*x9163))+((x9156*x9163)));
evalcond[4]=((-0.08776)+(((-1.0)*x9154*x9165))+(((-0.0718)*x9150))+(((-1.0)*cj6*r10*x9153))+((x9152*x9153))+(((-1.0)*py*x9167))+((px*sj0))+(((-0.02626)*x9151))+(((0.026255)*r00*x9159)));
evalcond[5]=((-0.0019)+(((-1.0)*cj6*r00*x9153))+((x9152*x9165))+(((-1.0)*px*x9167))+(((0.0718)*x9151))+((x9153*x9154))+(((-0.026255)*r10*x9159))+(((-1.0)*py*x9160))+(((-0.02626)*x9150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9170=(cj5*cj6);
IkReal x9171=((1.0)*sj0);
IkReal x9172=((1.0)*r22);
IkReal x9173=(cj0*sj5);
IkReal x9174=(cj5*sj6);
IkReal x9175=((1.0)*cj0);
IkReal x9176=(cj6*r20);
IkReal x9177=((1.0)*sj5);
IkReal x9178=(r21*sj6);
IkReal x9179=(x9174*x9175);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+((r20*x9174))+((r21*x9170))+(((-1.0)*sj5*x9172)));
evalcond[2]=((((-1.0)*x9178))+x9176);
evalcond[3]=((((-1.0)*cj5*x9172))+(((-1.0)*cj6*r21*x9177))+(((-1.0)*r20*sj6*x9177)));
evalcond[4]=(((r02*x9173))+(((-1.0)*r01*x9170*x9175))+((r12*sj0*sj5))+(((-1.0)*r10*x9171*x9174))+(((-1.0)*r11*x9170*x9171))+(((-1.0)*r00*x9179)));
evalcond[5]=((((-1.0)*r02*sj5*x9171))+(((-1.0)*r10*x9179))+((r00*sj0*x9174))+((r12*x9173))+((r01*sj0*x9170))+(((-1.0)*r11*x9170*x9175)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x9176))+(((-0.026255)*x9178)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9180=(sj0*sj6);
IkReal x9181=(cj6*r10);
IkReal x9182=((1.0)*sj0);
IkReal x9183=(cj6*r00);
IkReal x9184=(cj0*sj6);
if( IKabs(((((-1.0)*x9182*x9183))+(((-1.0)*r11*x9184))+((cj0*x9181))+((r01*x9180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x9183))+((r11*x9180))+(((-1.0)*x9181*x9182))+((r01*x9184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9182*x9183))+(((-1.0)*r11*x9184))+((cj0*x9181))+((r01*x9180))))+IKsqr(((((-1.0)*cj0*x9183))+((r11*x9180))+(((-1.0)*x9181*x9182))+((r01*x9184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x9182*x9183))+(((-1.0)*r11*x9184))+((cj0*x9181))+((r01*x9180))), ((((-1.0)*cj0*x9183))+((r11*x9180))+(((-1.0)*x9181*x9182))+((r01*x9184))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9185=IKsin(j4);
IkReal x9186=IKcos(j4);
IkReal x9187=(r11*sj6);
IkReal x9188=((0.026255)*cj0);
IkReal x9189=(r01*sj6);
IkReal x9190=(sj0*sj5);
IkReal x9191=(cj6*r11);
IkReal x9192=(r10*sj6);
IkReal x9193=(cj5*r12);
IkReal x9194=(cj6*sj0);
IkReal x9195=((1.0)*sj0);
IkReal x9196=(cj5*r02);
IkReal x9197=((1.0)*r10);
IkReal x9198=(cj0*sj5);
IkReal x9199=(r00*sj6);
IkReal x9200=((0.026255)*sj0);
IkReal x9201=(cj0*cj6);
IkReal x9202=((1.0)*cj0);
IkReal x9203=(cj6*r01);
IkReal x9204=((1.0)*x9186);
evalcond[0]=((((-1.0)*x9197*x9201))+((r00*x9194))+(((-1.0)*x9189*x9195))+x9185+((cj0*x9187)));
evalcond[1]=((((-1.0)*r00*x9201))+((sj0*x9187))+((cj0*x9189))+(((-1.0)*x9194*x9197))+(((-1.0)*x9204)));
evalcond[2]=(((sj0*x9193))+((x9198*x9199))+((x9198*x9203))+((cj0*x9196))+((x9190*x9192))+((x9190*x9191))+(((-1.0)*x9185)));
evalcond[3]=((((-1.0)*x9190*x9203))+((x9192*x9198))+((cj0*x9193))+(((-1.0)*x9190*x9199))+(((-1.0)*x9204))+((x9191*x9198))+(((-1.0)*x9195*x9196)));
evalcond[4]=((0.10716)+(((0.026255)*r00*x9194))+(((0.02626)*x9185))+(((-1.0)*cj6*r10*x9188))+(((-1.0)*py*x9202))+(((0.0718)*x9186))+((x9187*x9188))+((px*sj0))+(((-1.0)*x9189*x9200)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x9202))+(((0.0718)*x9185))+(((-1.0)*py*x9195))+((x9188*x9189))+(((-0.026255)*r10*x9194))+(((-1.0)*cj6*r00*x9188))+(((-0.02626)*x9186))+((x9187*x9200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9205=(cj6*r10);
IkReal x9206=((1.0)*sj0);
IkReal x9207=(sj0*sj6);
IkReal x9208=(cj6*r00);
IkReal x9209=(cj0*sj6);
CheckValue<IkReal> x9210=IKPowWithIntegerCheck(((((-1.0)*cj1*sj3))+((cj3*sj1))),-1);
if(!x9210.valid){
continue;
}
if( IKabs(((x9210.value)*((((r01*x9207))+(((-1.0)*r11*x9209))+((cj0*x9205))+(((-1.0)*x9206*x9208)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x9209))+(((-1.0)*x9205*x9206))+((r11*x9207))+(((-1.0)*cj0*x9208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9210.value)*((((r01*x9207))+(((-1.0)*r11*x9209))+((cj0*x9205))+(((-1.0)*x9206*x9208))))))+IKsqr((((r01*x9209))+(((-1.0)*x9205*x9206))+((r11*x9207))+(((-1.0)*cj0*x9208))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9210.value)*((((r01*x9207))+(((-1.0)*r11*x9209))+((cj0*x9205))+(((-1.0)*x9206*x9208))))), (((r01*x9209))+(((-1.0)*x9205*x9206))+((r11*x9207))+(((-1.0)*cj0*x9208))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9211=IKsin(j4);
IkReal x9212=IKcos(j4);
IkReal x9213=((1.0)*sj1);
IkReal x9214=(r11*sj0);
IkReal x9215=(sj1*sj3);
IkReal x9216=(cj0*sj6);
IkReal x9217=((0.026255)*r01);
IkReal x9218=(cj5*r12);
IkReal x9219=(cj6*sj5);
IkReal x9220=(r10*sj0);
IkReal x9221=(sj5*sj6);
IkReal x9222=((0.026255)*cj6);
IkReal x9223=(r00*sj0);
IkReal x9224=((1.0)*cj5);
IkReal x9225=(cj1*sj3);
IkReal x9226=((1.0)*cj6);
IkReal x9227=((1.0)*sj0);
IkReal x9228=(cj0*r00);
IkReal x9229=((0.026255)*sj6);
IkReal x9230=(cj1*cj3);
IkReal x9231=(cj0*r10);
IkReal x9232=(cj3*sj1);
IkReal x9233=((1.0)*r21);
IkReal x9234=((1.0)*cj0);
IkReal x9235=(cj3*x9212);
IkReal x9236=((0.02626)*x9211);
IkReal x9237=((1.0)*x9211);
IkReal x9238=((0.0718)*x9212);
evalcond[0]=((((-1.0)*sj6*x9233))+((cj6*r20))+((x9211*x9215))+((x9211*x9230)));
evalcond[1]=((((-1.0)*x9220*x9226))+((sj6*x9214))+(((-1.0)*x9212))+((r01*x9216))+(((-1.0)*x9226*x9228)));
evalcond[2]=((((-1.0)*sj3*x9212*x9213))+(((-1.0)*r20*x9221))+(((-1.0)*x9219*x9233))+(((-1.0)*x9212*x9230))+(((-1.0)*r22*x9224)));
evalcond[3]=((((-1.0)*x9225*x9237))+(((-1.0)*x9226*x9231))+((r11*x9216))+(((-1.0)*r01*sj6*x9227))+((cj6*x9223))+((x9211*x9232)));
evalcond[4]=(((cj0*cj5*r02))+((x9214*x9219))+(((-1.0)*x9237))+((cj0*r01*x9219))+((sj0*x9218))+((x9220*x9221))+((r00*sj5*x9216)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x9234))+((x9214*x9229))+(((-1.0)*x9220*x9222))+(((0.0718)*x9211))+(((-1.0)*py*x9227))+((x9216*x9217))+(((-0.02626)*x9212))+(((-1.0)*x9222*x9228)));
evalcond[6]=((((-1.0)*r02*sj0*x9224))+((cj0*r11*x9219))+((cj0*x9218))+((r10*sj5*x9216))+(((-1.0)*r01*x9219*x9227))+(((-1.0)*x9213*x9235))+(((-1.0)*x9221*x9223))+((x9212*x9225)));
evalcond[7]=(((r20*x9222))+(((0.09746)*x9230))+(((-0.0001)*sj1))+(((0.09746)*x9215))+(((-0.0097)*cj1))+(((-1.0)*r21*x9229))+pz+((x9230*x9236))+((x9230*x9238))+((x9215*x9236))+((x9215*x9238)));
evalcond[8]=((((-1.0)*x9225*x9238))+(((-1.0)*x9225*x9236))+(((0.09746)*x9232))+(((-0.0097)*sj1))+((x9232*x9238))+((x9232*x9236))+((x9222*x9223))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*sj0*sj6*x9217))+(((-1.0)*py*x9234))+(((-0.09746)*x9225))+(((-1.0)*x9222*x9231))+(((0.026255)*r11*x9216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9239=((1.0)*cj6);
CheckValue<IkReal> x9240=IKPowWithIntegerCheck((((sj1*sj3))+((cj1*cj3))),-1);
if(!x9240.valid){
continue;
}
if( IKabs(((x9240.value)*((((r21*sj6))+(((-1.0)*r20*x9239)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj0*x9239))+((r11*sj0*sj6))+(((-1.0)*cj0*r00*x9239))+((cj0*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9240.value)*((((r21*sj6))+(((-1.0)*r20*x9239))))))+IKsqr(((((-1.0)*r10*sj0*x9239))+((r11*sj0*sj6))+(((-1.0)*cj0*r00*x9239))+((cj0*r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9240.value)*((((r21*sj6))+(((-1.0)*r20*x9239))))), ((((-1.0)*r10*sj0*x9239))+((r11*sj0*sj6))+(((-1.0)*cj0*r00*x9239))+((cj0*r01*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9241=IKsin(j4);
IkReal x9242=IKcos(j4);
IkReal x9243=((1.0)*sj1);
IkReal x9244=(r11*sj0);
IkReal x9245=(sj1*sj3);
IkReal x9246=(cj0*sj6);
IkReal x9247=((0.026255)*r01);
IkReal x9248=(cj5*r12);
IkReal x9249=(cj6*sj5);
IkReal x9250=(r10*sj0);
IkReal x9251=(sj5*sj6);
IkReal x9252=((0.026255)*cj6);
IkReal x9253=(r00*sj0);
IkReal x9254=((1.0)*cj5);
IkReal x9255=(cj1*sj3);
IkReal x9256=((1.0)*cj6);
IkReal x9257=((1.0)*sj0);
IkReal x9258=(cj0*r00);
IkReal x9259=((0.026255)*sj6);
IkReal x9260=(cj1*cj3);
IkReal x9261=(cj0*r10);
IkReal x9262=(cj3*sj1);
IkReal x9263=((1.0)*r21);
IkReal x9264=((1.0)*cj0);
IkReal x9265=(cj3*x9242);
IkReal x9266=((0.02626)*x9241);
IkReal x9267=((1.0)*x9241);
IkReal x9268=((0.0718)*x9242);
evalcond[0]=(((x9241*x9245))+((cj6*r20))+(((-1.0)*sj6*x9263))+((x9241*x9260)));
evalcond[1]=((((-1.0)*x9250*x9256))+(((-1.0)*x9256*x9258))+((r01*x9246))+((sj6*x9244))+(((-1.0)*x9242)));
evalcond[2]=((((-1.0)*sj3*x9242*x9243))+(((-1.0)*x9249*x9263))+(((-1.0)*r22*x9254))+(((-1.0)*x9242*x9260))+(((-1.0)*r20*x9251)));
evalcond[3]=((((-1.0)*x9256*x9261))+(((-1.0)*x9255*x9267))+(((-1.0)*r01*sj6*x9257))+((r11*x9246))+((cj6*x9253))+((x9241*x9262)));
evalcond[4]=((((-1.0)*x9267))+((cj0*cj5*r02))+((x9250*x9251))+((x9244*x9249))+((cj0*r01*x9249))+((sj0*x9248))+((r00*sj5*x9246)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x9257))+(((-1.0)*x9250*x9252))+((x9244*x9259))+((x9246*x9247))+(((-1.0)*px*x9264))+(((-0.02626)*x9242))+(((0.0718)*x9241))+(((-1.0)*x9252*x9258)));
evalcond[6]=(((cj0*x9248))+(((-1.0)*r02*sj0*x9254))+((x9242*x9255))+(((-1.0)*r01*x9249*x9257))+(((-1.0)*x9251*x9253))+(((-1.0)*x9243*x9265))+((cj0*r11*x9249))+((r10*sj5*x9246)));
evalcond[7]=((((0.09746)*x9245))+(((-0.0001)*sj1))+(((-1.0)*r21*x9259))+(((-0.0097)*cj1))+pz+((r20*x9252))+((x9260*x9266))+((x9260*x9268))+(((0.09746)*x9260))+((x9245*x9268))+((x9245*x9266)));
evalcond[8]=(((x9262*x9268))+((x9262*x9266))+(((-1.0)*py*x9264))+(((-1.0)*x9255*x9266))+(((-1.0)*x9255*x9268))+(((-0.0097)*sj1))+(((0.026255)*r11*x9246))+((x9252*x9253))+(((-1.0)*sj0*sj6*x9247))+(((0.0001)*cj1))+((px*sj0))+(((-0.09746)*x9255))+(((0.09746)*x9262))+(((-1.0)*x9252*x9261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9269=((1.0)*sj5);
CheckValue<IkReal> x9270=IKPowWithIntegerCheck(IKsign((((sj1*sj3))+((cj1*cj3)))),-1);
if(!x9270.valid){
continue;
}
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x9269))+(((-1.0)*cj6*r21*x9269))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9270.value)))+(x9271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9272=IKsin(j4);
IkReal x9273=IKcos(j4);
IkReal x9274=((1.0)*sj1);
IkReal x9275=(r11*sj0);
IkReal x9276=(sj1*sj3);
IkReal x9277=(cj0*sj6);
IkReal x9278=((0.026255)*r01);
IkReal x9279=(cj5*r12);
IkReal x9280=(cj6*sj5);
IkReal x9281=(r10*sj0);
IkReal x9282=(sj5*sj6);
IkReal x9283=((0.026255)*cj6);
IkReal x9284=(r00*sj0);
IkReal x9285=((1.0)*cj5);
IkReal x9286=(cj1*sj3);
IkReal x9287=((1.0)*cj6);
IkReal x9288=((1.0)*sj0);
IkReal x9289=(cj0*r00);
IkReal x9290=((0.026255)*sj6);
IkReal x9291=(cj1*cj3);
IkReal x9292=(cj0*r10);
IkReal x9293=(cj3*sj1);
IkReal x9294=((1.0)*r21);
IkReal x9295=((1.0)*cj0);
IkReal x9296=(cj3*x9273);
IkReal x9297=((0.02626)*x9272);
IkReal x9298=((1.0)*x9272);
IkReal x9299=((0.0718)*x9273);
evalcond[0]=(((x9272*x9291))+((x9272*x9276))+((cj6*r20))+(((-1.0)*sj6*x9294)));
evalcond[1]=((((-1.0)*x9281*x9287))+((r01*x9277))+(((-1.0)*x9273))+(((-1.0)*x9287*x9289))+((sj6*x9275)));
evalcond[2]=((((-1.0)*r20*x9282))+(((-1.0)*r22*x9285))+(((-1.0)*x9273*x9291))+(((-1.0)*x9280*x9294))+(((-1.0)*sj3*x9273*x9274)));
evalcond[3]=((((-1.0)*r01*sj6*x9288))+((cj6*x9284))+((x9272*x9293))+(((-1.0)*x9286*x9298))+(((-1.0)*x9287*x9292))+((r11*x9277)));
evalcond[4]=(((cj0*cj5*r02))+((sj0*x9279))+((cj0*r01*x9280))+((r00*sj5*x9277))+(((-1.0)*x9298))+((x9275*x9280))+((x9281*x9282)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x9288))+((x9275*x9290))+(((-1.0)*x9281*x9283))+(((-0.02626)*x9273))+((x9277*x9278))+(((-1.0)*px*x9295))+(((-1.0)*x9283*x9289))+(((0.0718)*x9272)));
evalcond[6]=(((cj0*x9279))+(((-1.0)*r02*sj0*x9285))+(((-1.0)*x9282*x9284))+((r10*sj5*x9277))+((x9273*x9286))+(((-1.0)*r01*x9280*x9288))+(((-1.0)*x9274*x9296))+((cj0*r11*x9280)));
evalcond[7]=((((-0.0001)*sj1))+((x9291*x9297))+((x9291*x9299))+((x9276*x9297))+((x9276*x9299))+((r20*x9283))+(((-0.0097)*cj1))+pz+(((0.09746)*x9291))+(((0.09746)*x9276))+(((-1.0)*r21*x9290)));
evalcond[8]=((((-1.0)*sj0*sj6*x9278))+(((-1.0)*py*x9295))+(((-0.0097)*sj1))+(((-1.0)*x9286*x9297))+(((-1.0)*x9286*x9299))+((x9293*x9299))+((x9293*x9297))+(((-0.09746)*x9286))+(((0.026255)*r11*x9277))+(((-1.0)*x9283*x9292))+(((0.09746)*x9293))+(((0.0001)*cj1))+((px*sj0))+((x9283*x9284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9300=(cj0*sj5);
IkReal x9301=(cj5*cj6);
IkReal x9302=((1.0)*sj5);
IkReal x9303=((1.0)*sj0);
IkReal x9304=((1.0)*cj0);
IkReal x9305=(cj5*sj6);
IkReal x9306=(r10*x9305);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj1))+((r21*x9301))+((r20*x9305))+(((-1.0)*r22*x9302)));
evalcond[2]=((((-1.0)*r11*x9301*x9303))+((r02*x9300))+(((-1.0)*x9303*x9306))+((r12*sj0*sj5))+(((-1.0)*r00*x9304*x9305))+(((-1.0)*r01*x9301*x9304)));
evalcond[3]=((((-1.0)*r11*x9301*x9304))+cj1+((r01*sj0*x9301))+((r00*sj0*x9305))+(((-1.0)*r02*sj0*x9302))+((r12*x9300))+(((-1.0)*x9304*x9306)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x9307=(cj2*sj6);
IkReal x9308=((1.0)*r21);
IkReal x9309=(r20*sj5);
IkReal x9310=(sj2*sj6);
IkReal x9311=(cj2*cj6);
IkReal x9312=(cj5*r22);
IkReal x9313=(cj6*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*sj5*x9308*x9313))+(((-1.0)*x9307*x9308))+(((-1.0)*sj2*x9312))+(((-1.0)*x9309*x9310))+((r20*x9311)))))+(IKabs((((cj2*x9312))+((r21*sj5*x9311))+((r20*x9313))+((x9307*x9309))+(((-1.0)*x9308*x9310))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x9314=(cj1*sj1);
j4eval[0]=x9314;
j4eval[1]=IKsign(x9314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9315=(cj5*cj6);
IkReal x9316=(cj0*sj6);
IkReal x9317=(r01*sj0);
IkReal x9318=((1.0)*sj0);
IkReal x9319=((1.0)*cj5);
IkReal x9320=(cj0*r12);
IkReal x9321=(r02*sj5);
IkReal x9322=((1.0)*sj5);
IkReal x9323=(cj5*sj6);
IkReal x9324=((1.0)*cj0);
IkReal x9325=(cj6*r10);
IkReal x9326=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((r20*x9323))+(((-1.0)*r22*x9322))+((r21*x9315)));
evalcond[2]=(x9326+(((-1.0)*x9324*x9325))+((r11*x9316))+(((-1.0)*sj6*x9317)));
evalcond[3]=((((-1.0)*r11*x9315*x9318))+((cj0*x9321))+(((-1.0)*r01*x9315*x9324))+(((-1.0)*r00*x9316*x9319))+((r12*sj0*sj5))+(((-1.0)*r10*x9318*x9323)));
evalcond[4]=((1.0)+((r00*sj0*x9323))+((x9315*x9317))+(((-1.0)*r10*x9316*x9319))+(((-1.0)*r11*x9315*x9324))+(((-1.0)*x9318*x9321))+((sj5*x9320)));
evalcond[5]=((((-1.0)*cj6*x9317*x9322))+(((-1.0)*cj5*r02*x9318))+((r10*sj5*x9316))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x9318))+((cj5*x9320)));
evalcond[6]=((0.0001)+(((-0.026255)*cj0*x9325))+(((0.026255)*x9326))+(((-0.026255)*sj6*x9317))+((px*sj0))+(((-1.0)*py*x9324))+(((0.026255)*r11*x9316)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9327=((1.0)*r21);
IkReal x9328=(cj2*sj6);
IkReal x9329=(cj5*r22);
IkReal x9330=(cj6*sj5);
IkReal x9331=(r20*sj2);
if( IKabs((((cj2*cj6*r20))+(((-1.0)*sj2*x9327*x9330))+(((-1.0)*x9327*x9328))+(((-1.0)*sj2*x9329))+(((-1.0)*sj5*sj6*x9331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x9329))+((cj2*r21*x9330))+((r20*sj5*x9328))+((cj6*x9331))+(((-1.0)*sj2*sj6*x9327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*cj6*r20))+(((-1.0)*sj2*x9327*x9330))+(((-1.0)*x9327*x9328))+(((-1.0)*sj2*x9329))+(((-1.0)*sj5*sj6*x9331))))+IKsqr((((cj2*x9329))+((cj2*r21*x9330))+((r20*sj5*x9328))+((cj6*x9331))+(((-1.0)*sj2*sj6*x9327))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj2*cj6*r20))+(((-1.0)*sj2*x9327*x9330))+(((-1.0)*x9327*x9328))+(((-1.0)*sj2*x9329))+(((-1.0)*sj5*sj6*x9331))), (((cj2*x9329))+((cj2*r21*x9330))+((r20*sj5*x9328))+((cj6*x9331))+(((-1.0)*sj2*sj6*x9327))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9332=IKcos(j4);
IkReal x9333=IKsin(j4);
IkReal x9334=(r11*sj0);
IkReal x9335=((0.026255)*sj6);
IkReal x9336=(cj0*r01);
IkReal x9337=(cj6*sj5);
IkReal x9338=(r10*sj0);
IkReal x9339=(sj5*sj6);
IkReal x9340=(cj6*r20);
IkReal x9341=((1.0)*cj6);
IkReal x9342=(cj0*r00);
IkReal x9343=((0.026255)*cj6);
IkReal x9344=((1.0)*r21);
IkReal x9345=(cj2*x9332);
IkReal x9346=((0.02626)*x9333);
IkReal x9347=(cj2*x9333);
IkReal x9348=((0.0718)*x9332);
IkReal x9349=(sj2*x9332);
IkReal x9350=(sj2*x9333);
IkReal x9351=((1.0)*x9350);
evalcond[0]=((((-1.0)*sj6*x9344))+x9340+(((-1.0)*x9349))+(((-1.0)*x9347)));
evalcond[1]=(x9345+(((-1.0)*x9337*x9344))+(((-1.0)*x9351))+(((-1.0)*r20*x9339))+(((-1.0)*cj5*r22)));
evalcond[2]=(x9345+(((-1.0)*x9351))+((sj6*x9334))+((sj6*x9336))+(((-1.0)*x9338*x9341))+(((-1.0)*x9341*x9342)));
evalcond[3]=(((cj5*r12*sj0))+((x9338*x9339))+((x9339*x9342))+((cj0*cj5*r02))+x9347+x9349+((x9336*x9337))+((x9334*x9337)));
evalcond[4]=((-0.1255)+(((-0.21326)*cj2))+(((-0.0718)*x9345))+(((0.0718)*x9350))+(((0.026255)*x9340))+(((-1.0)*r21*x9335))+(((-0.0009)*sj2))+(((-0.02626)*x9349))+pz+(((-1.0)*cj2*x9346)));
evalcond[5]=((-0.001)+(((-1.0)*sj2*x9346))+(((-1.0)*sj2*x9348))+(((-0.0718)*x9347))+(((0.0009)*cj2))+(((-1.0)*x9338*x9343))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+((x9334*x9335))+(((0.02626)*x9345))+((x9335*x9336))+(((-1.0)*cj0*px))+(((-1.0)*x9342*x9343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9352=(cj5*cj6);
IkReal x9353=((1.0)*sj0);
IkReal x9354=((1.0)*r22);
IkReal x9355=(cj0*sj5);
IkReal x9356=(cj5*sj6);
IkReal x9357=((1.0)*cj0);
IkReal x9358=(cj6*r20);
IkReal x9359=((1.0)*sj5);
IkReal x9360=(r21*sj6);
IkReal x9361=(x9356*x9357);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x9354))+((r20*x9356))+((r21*x9352)));
evalcond[2]=(x9358+(((-1.0)*x9360)));
evalcond[3]=((((-1.0)*cj5*x9354))+(((-1.0)*cj6*r21*x9359))+(((-1.0)*r20*sj6*x9359)));
evalcond[4]=((((-1.0)*r11*x9352*x9353))+((r12*sj0*sj5))+(((-1.0)*r00*x9361))+(((-1.0)*r10*x9353*x9356))+(((-1.0)*r01*x9352*x9357))+((r02*x9355)));
evalcond[5]=((((-1.0)*r11*x9352*x9357))+((r01*sj0*x9352))+((r00*sj0*x9356))+(((-1.0)*r10*x9361))+(((-1.0)*r02*sj5*x9353))+((r12*x9355)));
evalcond[6]=((-0.0001)+(((-0.026255)*x9360))+(((0.026255)*x9358))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9362=((1.0)*r10);
IkReal x9363=((1.0)*cj2);
IkReal x9364=(r11*sj6);
IkReal x9365=(sj0*sj2);
IkReal x9366=(cj0*cj2);
IkReal x9367=(r01*sj6);
IkReal x9368=(cj0*x9367);
IkReal x9369=(cj6*x9365);
IkReal x9370=(cj0*cj6*sj2);
IkReal x9371=(cj2*cj6*sj0);
if( IKabs((((x9364*x9365))+((x9364*x9366))+(((-1.0)*x9362*x9369))+((sj2*x9368))+(((-1.0)*cj6*x9362*x9366))+(((-1.0)*r00*x9370))+(((-1.0)*sj0*x9363*x9367))+((r00*x9371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x9365*x9367))+((cj6*r00*x9366))+((cj0*sj2*x9364))+((r00*x9369))+(((-1.0)*x9362*x9370))+(((-1.0)*sj0*x9363*x9364))+(((-1.0)*x9363*x9368))+((r10*x9371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x9364*x9365))+((x9364*x9366))+(((-1.0)*x9362*x9369))+((sj2*x9368))+(((-1.0)*cj6*x9362*x9366))+(((-1.0)*r00*x9370))+(((-1.0)*sj0*x9363*x9367))+((r00*x9371))))+IKsqr(((((-1.0)*x9365*x9367))+((cj6*r00*x9366))+((cj0*sj2*x9364))+((r00*x9369))+(((-1.0)*x9362*x9370))+(((-1.0)*sj0*x9363*x9364))+(((-1.0)*x9363*x9368))+((r10*x9371))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x9364*x9365))+((x9364*x9366))+(((-1.0)*x9362*x9369))+((sj2*x9368))+(((-1.0)*cj6*x9362*x9366))+(((-1.0)*r00*x9370))+(((-1.0)*sj0*x9363*x9367))+((r00*x9371))), ((((-1.0)*x9365*x9367))+((cj6*r00*x9366))+((cj0*sj2*x9364))+((r00*x9369))+(((-1.0)*x9362*x9370))+(((-1.0)*sj0*x9363*x9364))+(((-1.0)*x9363*x9368))+((r10*x9371))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9372=IKsin(j4);
IkReal x9373=IKcos(j4);
IkReal x9374=(r11*sj6);
IkReal x9375=((0.026255)*cj0);
IkReal x9376=(r01*sj6);
IkReal x9377=(sj0*sj5);
IkReal x9378=(cj6*r11);
IkReal x9379=(r10*sj6);
IkReal x9380=((0.026255)*sj0);
IkReal x9381=(cj0*cj5);
IkReal x9382=(cj6*r00);
IkReal x9383=((1.0)*sj0);
IkReal x9384=(cj0*sj5);
IkReal x9385=(r00*sj6);
IkReal x9386=((1.0)*cj0);
IkReal x9387=(cj6*r10);
IkReal x9388=(cj6*r01);
IkReal x9389=(cj2*x9373);
IkReal x9390=((1.0)*x9387);
IkReal x9391=((0.02626)*x9372);
IkReal x9392=(cj2*x9372);
IkReal x9393=((0.0718)*x9373);
IkReal x9394=(sj2*x9373);
IkReal x9395=(sj2*x9372);
IkReal x9396=((1.0)*x9395);
evalcond[0]=(((cj0*x9376))+x9389+((sj0*x9374))+(((-1.0)*x9396))+(((-1.0)*x9383*x9387))+(((-1.0)*x9382*x9386)));
evalcond[1]=(((cj0*x9374))+(((-1.0)*x9376*x9383))+(((-1.0)*x9386*x9387))+((sj0*x9382))+(((-1.0)*x9394))+(((-1.0)*x9392)));
evalcond[2]=(((cj5*r12*sj0))+((r02*x9381))+x9394+x9392+((x9384*x9388))+((x9384*x9385))+((x9377*x9379))+((x9377*x9378)));
evalcond[3]=((((-1.0)*cj5*r02*x9383))+x9389+((x9378*x9384))+((r12*x9381))+((x9379*x9384))+(((-1.0)*x9396))+(((-1.0)*x9377*x9385))+(((-1.0)*x9377*x9388)));
evalcond[4]=((-0.1255)+((x9374*x9375))+(((-0.02626)*x9394))+(((-1.0)*x9376*x9380))+(((-0.21326)*cj2))+(((-1.0)*py*x9386))+(((-0.0009)*sj2))+(((-0.0718)*x9389))+((x9380*x9382))+(((0.0718)*x9395))+((px*sj0))+(((-1.0)*cj2*x9391))+(((-1.0)*x9375*x9387)));
evalcond[5]=((-0.001)+(((-1.0)*px*x9386))+(((-0.0718)*x9392))+(((-1.0)*x9380*x9387))+(((0.02626)*x9389))+(((-1.0)*py*x9383))+(((0.0009)*cj2))+(((-0.21326)*sj2))+((x9375*x9376))+(((-1.0)*sj2*x9393))+(((-1.0)*sj2*x9391))+(((-1.0)*x9375*x9382))+((x9374*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9397=(cj5*cj6);
IkReal x9398=(cj0*sj6);
IkReal x9399=(r01*sj0);
IkReal x9400=((1.0)*sj0);
IkReal x9401=((1.0)*cj5);
IkReal x9402=(cj0*r12);
IkReal x9403=(r02*sj5);
IkReal x9404=((1.0)*sj5);
IkReal x9405=(cj5*sj6);
IkReal x9406=((1.0)*cj0);
IkReal x9407=(cj6*r10);
IkReal x9408=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x9404))+((r20*x9405))+((r21*x9397)));
evalcond[2]=((((-1.0)*x9406*x9407))+(((-1.0)*sj6*x9399))+((r11*x9398))+x9408);
evalcond[3]=(((cj0*x9403))+(((-1.0)*r00*x9398*x9401))+((r12*sj0*sj5))+(((-1.0)*r10*x9400*x9405))+(((-1.0)*r11*x9397*x9400))+(((-1.0)*r01*x9397*x9406)));
evalcond[4]=((-1.0)+((sj5*x9402))+((r00*sj0*x9405))+(((-1.0)*r11*x9397*x9406))+(((-1.0)*x9400*x9403))+(((-1.0)*r10*x9398*x9401))+((x9397*x9399)));
evalcond[5]=(((cj5*x9402))+(((-1.0)*cj5*r02*x9400))+((cj0*cj6*r11*sj5))+((r10*sj5*x9398))+(((-1.0)*cj6*x9399*x9404))+(((-1.0)*r00*sj5*sj6*x9400)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x9398))+(((-0.026255)*sj6*x9399))+(((0.026255)*x9408))+((px*sj0))+(((-1.0)*py*x9406))+(((-0.026255)*cj0*x9407)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9409=(cj2*r21);
IkReal x9410=(cj6*sj5);
IkReal x9411=(cj5*r22);
IkReal x9412=(r21*sj2);
IkReal x9413=((1.0)*cj2);
IkReal x9414=(cj6*r20);
IkReal x9415=(r20*sj5*sj6);
if( IKabs((((x9410*x9412))+((sj6*x9409))+((sj2*x9415))+((sj2*x9411))+(((-1.0)*x9413*x9414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x9409*x9410))+(((-1.0)*sj2*x9414))+((sj6*x9412))+(((-1.0)*x9411*x9413))+(((-1.0)*x9413*x9415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x9410*x9412))+((sj6*x9409))+((sj2*x9415))+((sj2*x9411))+(((-1.0)*x9413*x9414))))+IKsqr(((((-1.0)*x9409*x9410))+(((-1.0)*sj2*x9414))+((sj6*x9412))+(((-1.0)*x9411*x9413))+(((-1.0)*x9413*x9415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x9410*x9412))+((sj6*x9409))+((sj2*x9415))+((sj2*x9411))+(((-1.0)*x9413*x9414))), ((((-1.0)*x9409*x9410))+(((-1.0)*sj2*x9414))+((sj6*x9412))+(((-1.0)*x9411*x9413))+(((-1.0)*x9413*x9415))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9416=IKsin(j4);
IkReal x9417=IKcos(j4);
IkReal x9418=(r11*sj0);
IkReal x9419=((0.026255)*sj6);
IkReal x9420=(cj0*r01);
IkReal x9421=(cj6*sj5);
IkReal x9422=(r10*sj0);
IkReal x9423=(sj5*sj6);
IkReal x9424=((1.0)*cj6);
IkReal x9425=(cj0*r00);
IkReal x9426=((0.026255)*cj6);
IkReal x9427=((1.0)*r21);
IkReal x9428=(sj2*x9417);
IkReal x9429=(cj2*x9416);
IkReal x9430=((0.02626)*x9416);
IkReal x9431=(cj2*x9417);
IkReal x9432=(sj2*x9416);
IkReal x9433=(x9429+x9428);
evalcond[0]=(((cj6*r20))+x9433+(((-1.0)*sj6*x9427)));
evalcond[1]=((((-1.0)*x9421*x9427))+(((-1.0)*x9431))+(((-1.0)*r20*x9423))+x9432+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x9424*x9425))+(((-1.0)*x9432))+((sj6*x9418))+(((-1.0)*x9422*x9424))+x9431+((sj6*x9420)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x9422*x9423))+((x9423*x9425))+((x9418*x9421))+((x9420*x9421))+x9433);
evalcond[4]=((0.1255)+(((-1.0)*r21*x9419))+(((-0.0718)*x9432))+((r20*x9426))+(((0.0718)*x9431))+(((0.02626)*x9428))+(((0.02626)*x9429))+pz+(((0.21326)*cj2))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-1.0)*x9425*x9426))+(((-0.0718)*x9428))+(((-0.0718)*x9429))+((x9419*x9420))+(((-1.0)*sj2*x9430))+(((0.0009)*cj2))+(((-1.0)*x9422*x9426))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+(((0.02626)*x9431))+((x9418*x9419))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9434=(cj5*cj6);
IkReal x9435=((1.0)*sj0);
IkReal x9436=((1.0)*r22);
IkReal x9437=(cj0*sj5);
IkReal x9438=(cj5*sj6);
IkReal x9439=((1.0)*cj0);
IkReal x9440=(cj6*r20);
IkReal x9441=((1.0)*sj5);
IkReal x9442=(r21*sj6);
IkReal x9443=(x9438*x9439);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x9436))+((r20*x9438))+((r21*x9434)));
evalcond[2]=((((-1.0)*x9442))+x9440);
evalcond[3]=((((-1.0)*cj5*x9436))+(((-1.0)*cj6*r21*x9441))+(((-1.0)*r20*sj6*x9441)));
evalcond[4]=((((-1.0)*r00*x9443))+(((-1.0)*r01*x9434*x9439))+(((-1.0)*r11*x9434*x9435))+((r12*sj0*sj5))+((r02*x9437))+(((-1.0)*r10*x9435*x9438)));
evalcond[5]=((((-1.0)*r10*x9443))+((r00*sj0*x9438))+((r01*sj0*x9434))+(((-1.0)*r11*x9434*x9439))+(((-1.0)*r02*sj5*x9435))+((r12*x9437)));
evalcond[6]=((0.0001)+pz+(((0.026255)*x9440))+(((-0.026255)*x9442)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9444=(cj0*sj6);
IkReal x9445=(r01*sj2);
IkReal x9446=(sj0*sj2);
IkReal x9447=((1.0)*cj6);
IkReal x9448=(sj0*sj6);
IkReal x9449=(cj0*sj2);
IkReal x9450=(cj6*r10);
IkReal x9451=(cj2*sj0);
IkReal x9452=(cj2*r01);
IkReal x9453=(cj0*cj2);
IkReal x9454=((1.0)*cj2*r11);
if( IKabs((((x9448*x9452))+(((-1.0)*r10*x9446*x9447))+((x9444*x9445))+((r11*sj6*x9446))+(((-1.0)*x9444*x9454))+((x9450*x9453))+(((-1.0)*r00*x9447*x9451))+(((-1.0)*r00*x9447*x9449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9449*x9450))+(((-1.0)*r11*sj2*x9444))+((x9445*x9448))+(((-1.0)*x9444*x9452))+((x9450*x9451))+((cj6*r00*x9453))+(((-1.0)*r00*x9446*x9447))+(((-1.0)*x9448*x9454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x9448*x9452))+(((-1.0)*r10*x9446*x9447))+((x9444*x9445))+((r11*sj6*x9446))+(((-1.0)*x9444*x9454))+((x9450*x9453))+(((-1.0)*r00*x9447*x9451))+(((-1.0)*r00*x9447*x9449))))+IKsqr((((x9449*x9450))+(((-1.0)*r11*sj2*x9444))+((x9445*x9448))+(((-1.0)*x9444*x9452))+((x9450*x9451))+((cj6*r00*x9453))+(((-1.0)*r00*x9446*x9447))+(((-1.0)*x9448*x9454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x9448*x9452))+(((-1.0)*r10*x9446*x9447))+((x9444*x9445))+((r11*sj6*x9446))+(((-1.0)*x9444*x9454))+((x9450*x9453))+(((-1.0)*r00*x9447*x9451))+(((-1.0)*r00*x9447*x9449))), (((x9449*x9450))+(((-1.0)*r11*sj2*x9444))+((x9445*x9448))+(((-1.0)*x9444*x9452))+((x9450*x9451))+((cj6*r00*x9453))+(((-1.0)*r00*x9446*x9447))+(((-1.0)*x9448*x9454))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9455=IKcos(j4);
IkReal x9456=IKsin(j4);
IkReal x9457=(r11*sj6);
IkReal x9458=((0.026255)*cj0);
IkReal x9459=(r01*sj6);
IkReal x9460=(sj0*sj5);
IkReal x9461=(cj6*r11);
IkReal x9462=(r10*sj6);
IkReal x9463=((0.026255)*sj0);
IkReal x9464=(cj5*r12);
IkReal x9465=(cj6*r00);
IkReal x9466=((1.0)*sj0);
IkReal x9467=(cj5*r02);
IkReal x9468=(cj6*r10);
IkReal x9469=(cj0*sj5);
IkReal x9470=(r00*sj6);
IkReal x9471=((1.0)*cj0);
IkReal x9472=(cj6*r01);
IkReal x9473=(sj2*x9455);
IkReal x9474=(cj2*x9456);
IkReal x9475=(sj2*x9456);
IkReal x9476=((0.0718)*x9455);
IkReal x9477=(cj2*x9455);
IkReal x9478=(x9473+x9474);
evalcond[0]=(((sj0*x9465))+((cj0*x9457))+(((-1.0)*x9459*x9466))+(((-1.0)*x9468*x9471))+x9478);
evalcond[1]=(((sj0*x9457))+((cj0*x9459))+(((-1.0)*x9475))+x9477+(((-1.0)*x9465*x9471))+(((-1.0)*x9466*x9468)));
evalcond[2]=(((x9469*x9472))+((x9469*x9470))+((sj0*x9464))+((x9460*x9461))+((x9460*x9462))+((cj0*x9467))+x9478);
evalcond[3]=(((x9461*x9469))+((cj0*x9464))+(((-1.0)*x9477))+(((-1.0)*x9460*x9470))+(((-1.0)*x9460*x9472))+x9475+((x9462*x9469))+(((-1.0)*x9466*x9467)));
evalcond[4]=((0.1255)+((x9457*x9458))+((cj2*x9476))+(((-1.0)*py*x9471))+((x9463*x9465))+(((-1.0)*x9459*x9463))+(((-1.0)*x9458*x9468))+((px*sj0))+(((0.21326)*cj2))+(((-0.0718)*x9475))+(((0.0009)*sj2))+(((0.02626)*x9473))+(((0.02626)*x9474)));
evalcond[5]=((-0.001)+((x9457*x9463))+(((-1.0)*py*x9466))+(((-1.0)*x9458*x9465))+(((0.0009)*cj2))+((x9458*x9459))+(((-0.02626)*x9475))+(((-0.21326)*sj2))+(((-1.0)*px*x9471))+(((-0.0718)*x9473))+(((-0.0718)*x9474))+(((-1.0)*x9463*x9468))+(((0.02626)*x9477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9479=(cj1*cj2);
IkReal x9480=((1.0)*sj6);
IkReal x9481=(r01*sj0);
IkReal x9482=(cj0*r10);
IkReal x9483=(cj1*sj2);
IkReal x9484=(cj6*r00*sj0);
IkReal x9485=(cj0*r11*sj6);
IkReal x9486=((1.0)*cj6*sj2);
IkReal x9487=(r21*sj1*sj5);
IkReal x9488=(cj5*r22*sj1);
IkReal x9489=(r20*sj1*sj5);
CheckValue<IkReal> x9490=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x9490.valid){
continue;
}
CheckValue<IkReal> x9491 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x9480*x9489))+(((-1.0)*cj6*x9479*x9482))+(((-1.0)*sj2*x9488))+(((-1.0)*x9486*x9487))+((x9479*x9485))+((x9479*x9484))+(((-1.0)*x9479*x9480*x9481)))),((((-1.0)*x9480*x9481*x9483))+((cj2*x9488))+((x9483*x9485))+((x9483*x9484))+((cj2*sj6*x9489))+((cj2*cj6*x9487))+(((-1.0)*cj6*x9482*x9483))),IKFAST_ATAN2_MAGTHRESH);
if(!x9491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9490.value)))+(x9491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9492=IKcos(j4);
IkReal x9493=IKsin(j4);
IkReal x9494=((0.0718)*sj1);
IkReal x9495=(r11*sj0);
IkReal x9496=((0.02626)*sj2);
IkReal x9497=((0.026255)*sj6);
IkReal x9498=(cj0*r01);
IkReal x9499=(cj5*r12);
IkReal x9500=(cj6*sj5);
IkReal x9501=(cj1*cj2);
IkReal x9502=(cj6*r20);
IkReal x9503=(cj0*r11);
IkReal x9504=((1.0)*sj1);
IkReal x9505=((1.0)*cj5);
IkReal x9506=((0.0009)*sj2);
IkReal x9507=((1.0)*sj6);
IkReal x9508=(r01*sj0);
IkReal x9509=(cj0*r00);
IkReal x9510=(sj5*sj6);
IkReal x9511=((0.0718)*cj1);
IkReal x9512=((1.0)*py);
IkReal x9513=((0.026255)*cj6);
IkReal x9514=(cj0*r10);
IkReal x9515=(r10*sj0);
IkReal x9516=((1.0)*cj1);
IkReal x9517=(cj2*x9492);
IkReal x9518=((1.0)*cj6*r10);
IkReal x9519=(sj2*x9492);
IkReal x9520=(cj2*x9493);
IkReal x9521=(cj6*r00*sj0);
IkReal x9522=(sj2*x9493);
evalcond[0]=((((-1.0)*x9516*x9519))+(((-1.0)*x9493*x9501))+x9502+(((-1.0)*r21*x9507)));
evalcond[1]=(((x9492*x9501))+(((-1.0)*r22*x9505))+(((-1.0)*r21*x9500))+(((-1.0)*x9516*x9522))+(((-1.0)*r20*sj5*x9507)));
evalcond[2]=(((sj6*x9498))+((sj6*x9495))+(((-1.0)*cj6*x9515))+(((-1.0)*x9522))+x9517+(((-1.0)*cj6*x9509)));
evalcond[3]=((((-1.0)*cj6*x9514))+(((-1.0)*x9504*x9519))+(((-1.0)*x9507*x9508))+(((-1.0)*x9504*x9520))+x9521+((sj6*x9503)));
evalcond[4]=(((x9498*x9500))+((cj0*cj5*r02))+((x9510*x9515))+((x9495*x9500))+x9519+x9520+((sj0*x9499))+((x9509*x9510)));
evalcond[5]=((((-1.0)*r00*sj0*sj5*x9507))+((cj0*x9499))+((x9500*x9503))+((x9510*x9514))+((sj1*x9517))+(((-1.0)*x9500*x9508))+(((-1.0)*x9504*x9522))+(((-1.0)*r02*sj0*x9505)));
evalcond[6]=((((-0.21326)*x9501))+(((0.026255)*x9502))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.0718)*x9492*x9501))+(((-0.02626)*x9493*x9501))+pz+(((-1.0)*r21*x9497))+(((-1.0)*cj1*x9492*x9496))+(((-1.0)*cj1*x9506))+((x9511*x9522)));
evalcond[7]=((-0.001)+(((-1.0)*x9493*x9496))+(((-1.0)*x9513*x9515))+(((-0.0718)*x9520))+(((0.0009)*cj2))+(((-0.0718)*x9519))+(((-0.21326)*sj2))+((x9495*x9497))+(((0.02626)*x9517))+((x9497*x9498))+(((-1.0)*x9509*x9513))+(((-1.0)*sj0*x9512))+(((-1.0)*cj0*px)));
evalcond[8]=((((-0.1255)*sj1))+((x9494*x9522))+(((-1.0)*x9513*x9514))+((r00*sj0*x9513))+(((-1.0)*sj1*x9492*x9496))+((x9497*x9503))+(((-1.0)*sj1*x9506))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*x9494*x9517))+(((-1.0)*cj0*x9512))+(((-0.02626)*sj1*x9520))+(((-1.0)*x9497*x9508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9523=(cj0*r00);
IkReal x9524=(r10*sj0);
IkReal x9525=(cj1*cj2);
IkReal x9526=(cj1*sj2);
IkReal x9527=(cj6*r20);
IkReal x9528=(r11*sj0*sj6);
IkReal x9529=((1.0)*r21*sj6);
IkReal x9530=(cj0*r01*sj6);
IkReal x9531=((1.0)*cj6*x9526);
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal(((((-1.0)*x9524*x9531))+((cj2*x9527))+((x9526*x9530))+(((-1.0)*x9523*x9531))+((x9526*x9528))+(((-1.0)*cj2*x9529)))),((((-1.0)*x9525*x9530))+(((-1.0)*sj2*x9529))+(((-1.0)*x9525*x9528))+((cj6*x9524*x9525))+((sj2*x9527))+((cj6*x9523*x9525))),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x9533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9532.value)+(((1.5707963267949)*(x9533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9534=IKcos(j4);
IkReal x9535=IKsin(j4);
IkReal x9536=((0.0718)*sj1);
IkReal x9537=(r11*sj0);
IkReal x9538=((0.02626)*sj2);
IkReal x9539=((0.026255)*sj6);
IkReal x9540=(cj0*r01);
IkReal x9541=(cj5*r12);
IkReal x9542=(cj6*sj5);
IkReal x9543=(cj1*cj2);
IkReal x9544=(cj6*r20);
IkReal x9545=(cj0*r11);
IkReal x9546=((1.0)*sj1);
IkReal x9547=((1.0)*cj5);
IkReal x9548=((0.0009)*sj2);
IkReal x9549=((1.0)*sj6);
IkReal x9550=(r01*sj0);
IkReal x9551=(cj0*r00);
IkReal x9552=(sj5*sj6);
IkReal x9553=((0.0718)*cj1);
IkReal x9554=((1.0)*py);
IkReal x9555=((0.026255)*cj6);
IkReal x9556=(cj0*r10);
IkReal x9557=(r10*sj0);
IkReal x9558=((1.0)*cj1);
IkReal x9559=(cj2*x9534);
IkReal x9560=((1.0)*cj6*r10);
IkReal x9561=(sj2*x9534);
IkReal x9562=(cj2*x9535);
IkReal x9563=(cj6*r00*sj0);
IkReal x9564=(sj2*x9535);
evalcond[0]=((((-1.0)*x9535*x9543))+x9544+(((-1.0)*x9558*x9561))+(((-1.0)*r21*x9549)));
evalcond[1]=((((-1.0)*r22*x9547))+((x9534*x9543))+(((-1.0)*r21*x9542))+(((-1.0)*x9558*x9564))+(((-1.0)*r20*sj5*x9549)));
evalcond[2]=((((-1.0)*x9564))+(((-1.0)*cj6*x9557))+(((-1.0)*cj6*x9551))+((sj6*x9537))+x9559+((sj6*x9540)));
evalcond[3]=((((-1.0)*cj6*x9556))+x9563+(((-1.0)*x9549*x9550))+(((-1.0)*x9546*x9562))+(((-1.0)*x9546*x9561))+((sj6*x9545)));
evalcond[4]=(((x9537*x9542))+((cj0*cj5*r02))+x9561+x9562+((x9552*x9557))+((x9551*x9552))+((x9540*x9542))+((sj0*x9541)));
evalcond[5]=(((sj1*x9559))+(((-1.0)*x9542*x9550))+((cj0*x9541))+((x9552*x9556))+((x9542*x9545))+(((-1.0)*x9546*x9564))+(((-1.0)*r00*sj0*sj5*x9549))+(((-1.0)*r02*sj0*x9547)));
evalcond[6]=((((-0.21326)*x9543))+((x9553*x9564))+(((0.026255)*x9544))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.0718)*x9534*x9543))+pz+(((-1.0)*r21*x9539))+(((-1.0)*cj1*x9548))+(((-0.02626)*x9535*x9543))+(((-1.0)*cj1*x9534*x9538)));
evalcond[7]=((-0.001)+(((-1.0)*x9555*x9557))+((x9537*x9539))+(((-1.0)*x9551*x9555))+(((0.02626)*x9559))+((x9539*x9540))+(((-1.0)*sj0*x9554))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-0.0718)*x9561))+(((-0.0718)*x9562))+(((-1.0)*x9535*x9538))+(((-1.0)*cj0*px)));
evalcond[8]=((((-0.1255)*sj1))+((r00*sj0*x9555))+(((-1.0)*x9555*x9556))+((x9539*x9545))+(((-1.0)*cj0*x9554))+(((-0.02626)*sj1*x9562))+(((-1.0)*x9539*x9550))+(((-1.0)*sj1*x9534*x9538))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+((x9536*x9564))+(((-1.0)*sj1*x9548))+(((-1.0)*x9536*x9559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9565=(cj2*r21);
IkReal x9566=((1.0)*sj6);
IkReal x9567=(cj5*r22);
IkReal x9568=(cj6*sj5);
IkReal x9569=(r20*sj5);
IkReal x9570=(cj6*r20);
IkReal x9571=(r21*sj2);
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal((((cj2*x9570))+(((-1.0)*sj2*x9567))+(((-1.0)*sj2*x9566*x9569))+(((-1.0)*x9565*x9566))+(((-1.0)*x9568*x9571)))),(((sj2*x9570))+((x9565*x9568))+(((-1.0)*x9566*x9571))+((cj2*x9567))+((cj2*sj6*x9569))),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9572.value)))+(x9573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9574=IKcos(j4);
IkReal x9575=IKsin(j4);
IkReal x9576=((0.0718)*sj1);
IkReal x9577=(r11*sj0);
IkReal x9578=((0.02626)*sj2);
IkReal x9579=((0.026255)*sj6);
IkReal x9580=(cj0*r01);
IkReal x9581=(cj5*r12);
IkReal x9582=(cj6*sj5);
IkReal x9583=(cj1*cj2);
IkReal x9584=(cj6*r20);
IkReal x9585=(cj0*r11);
IkReal x9586=((1.0)*sj1);
IkReal x9587=((1.0)*cj5);
IkReal x9588=((0.0009)*sj2);
IkReal x9589=((1.0)*sj6);
IkReal x9590=(r01*sj0);
IkReal x9591=(cj0*r00);
IkReal x9592=(sj5*sj6);
IkReal x9593=((0.0718)*cj1);
IkReal x9594=((1.0)*py);
IkReal x9595=((0.026255)*cj6);
IkReal x9596=(cj0*r10);
IkReal x9597=(r10*sj0);
IkReal x9598=((1.0)*cj1);
IkReal x9599=(cj2*x9574);
IkReal x9600=((1.0)*cj6*r10);
IkReal x9601=(sj2*x9574);
IkReal x9602=(cj2*x9575);
IkReal x9603=(cj6*r00*sj0);
IkReal x9604=(sj2*x9575);
evalcond[0]=((((-1.0)*r21*x9589))+(((-1.0)*x9575*x9583))+x9584+(((-1.0)*x9598*x9601)));
evalcond[1]=(((x9574*x9583))+(((-1.0)*r22*x9587))+(((-1.0)*r20*sj5*x9589))+(((-1.0)*x9598*x9604))+(((-1.0)*r21*x9582)));
evalcond[2]=(((sj6*x9580))+((sj6*x9577))+(((-1.0)*x9604))+(((-1.0)*cj6*x9597))+(((-1.0)*cj6*x9591))+x9599);
evalcond[3]=(((sj6*x9585))+(((-1.0)*cj6*x9596))+x9603+(((-1.0)*x9589*x9590))+(((-1.0)*x9586*x9602))+(((-1.0)*x9586*x9601)));
evalcond[4]=(((cj0*cj5*r02))+((sj0*x9581))+((x9580*x9582))+x9601+x9602+((x9592*x9597))+((x9591*x9592))+((x9577*x9582)));
evalcond[5]=(((x9582*x9585))+(((-1.0)*x9582*x9590))+((sj1*x9599))+(((-1.0)*r00*sj0*sj5*x9589))+((x9592*x9596))+((cj0*x9581))+(((-1.0)*x9586*x9604))+(((-1.0)*r02*sj0*x9587)));
evalcond[6]=((((-0.02626)*x9575*x9583))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((0.026255)*x9584))+(((-1.0)*r21*x9579))+(((-1.0)*cj1*x9574*x9578))+(((-0.0718)*x9574*x9583))+(((-0.21326)*x9583))+pz+((x9593*x9604))+(((-1.0)*cj1*x9588)));
evalcond[7]=((-0.001)+((x9577*x9579))+(((0.02626)*x9599))+((x9579*x9580))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*sj0*x9594))+(((-1.0)*x9595*x9597))+(((-1.0)*cj0*px))+(((-1.0)*x9591*x9595))+(((-0.0718)*x9602))+(((-0.0718)*x9601))+(((-1.0)*x9575*x9578)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*sj1*x9588))+((x9576*x9604))+((x9579*x9585))+(((-1.0)*sj1*x9574*x9578))+(((-1.0)*cj0*x9594))+((r00*sj0*x9595))+(((-0.02626)*sj1*x9602))+(((-1.0)*x9576*x9599))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*x9595*x9596))+(((-1.0)*x9579*x9590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9605=(cj0*sj5);
IkReal x9606=(cj5*cj6);
IkReal x9607=((1.0)*sj5);
IkReal x9608=((1.0)*cj0);
IkReal x9609=((1.0)*sj0);
IkReal x9610=(cj5*sj6);
IkReal x9611=(r10*x9610);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x9607))+((r20*x9610))+((r21*x9606))+sj1);
evalcond[2]=((((-1.0)*x9609*x9611))+(((-1.0)*r11*x9606*x9609))+((r12*sj0*sj5))+(((-1.0)*r01*x9606*x9608))+((r02*x9605))+(((-1.0)*r00*x9608*x9610)));
evalcond[3]=((((-1.0)*r11*x9606*x9608))+((r12*x9605))+(((-1.0)*r02*sj0*x9607))+((r01*sj0*x9606))+(((-1.0)*x9608*x9611))+((r00*sj0*x9610))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9612=(cj2*r21);
IkReal x9613=((1.0)*cj6);
IkReal x9614=((1.0)*cj2);
IkReal x9615=(cj5*r22);
IkReal x9616=(r20*sj2);
IkReal x9617=(sj5*sj6);
IkReal x9618=(r21*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs((((cj6*x9616))+(((-1.0)*x9614*x9615))+(((-1.0)*r20*x9614*x9617))+(((-1.0)*sj6*x9618))+(((-1.0)*sj5*x9612*x9613)))))+(IKabs(((((-1.0)*sj5*x9613*x9618))+(((-1.0)*sj2*x9615))+(((-1.0)*x9616*x9617))+(((-1.0)*cj2*r20*x9613))+((sj6*x9612))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9619=(cj1*sj1);
j4eval[0]=x9619;
j4eval[1]=IKsign(x9619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9620=(cj5*cj6);
IkReal x9621=(cj0*sj6);
IkReal x9622=(r01*sj0);
IkReal x9623=((1.0)*sj0);
IkReal x9624=((1.0)*cj5);
IkReal x9625=(cj0*r12);
IkReal x9626=(r02*sj5);
IkReal x9627=((1.0)*sj5);
IkReal x9628=(cj5*sj6);
IkReal x9629=((1.0)*cj0);
IkReal x9630=(cj6*r10);
IkReal x9631=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((r20*x9628))+(((-1.0)*r22*x9627))+((r21*x9620)));
evalcond[2]=((((-1.0)*x9629*x9630))+x9631+((r11*x9621))+(((-1.0)*sj6*x9622)));
evalcond[3]=(((cj0*x9626))+(((-1.0)*r11*x9620*x9623))+(((-1.0)*r10*x9623*x9628))+((r12*sj0*sj5))+(((-1.0)*r01*x9620*x9629))+(((-1.0)*r00*x9621*x9624)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x9620*x9629))+((x9620*x9622))+((r00*sj0*x9628))+(((-1.0)*r10*x9621*x9624))+((sj5*x9625))+(((-1.0)*x9623*x9626)));
evalcond[5]=(((r10*sj5*x9621))+(((-1.0)*cj6*x9622*x9627))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x9623))+(((-1.0)*r00*sj5*sj6*x9623))+((cj5*x9625)));
evalcond[6]=((0.0001)+(((-0.026255)*sj6*x9622))+(((0.026255)*x9631))+(((-1.0)*py*x9629))+(((0.026255)*r11*x9621))+(((-0.026255)*cj0*x9630))+((px*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9632=(cj2*r21);
IkReal x9633=((1.0)*cj6);
IkReal x9634=((1.0)*cj2);
IkReal x9635=(cj5*r22);
IkReal x9636=(r20*sj2);
IkReal x9637=(sj5*sj6);
IkReal x9638=(r21*sj2);
if( IKabs((((sj6*x9632))+(((-1.0)*sj5*x9633*x9638))+(((-1.0)*x9636*x9637))+(((-1.0)*sj2*x9635))+(((-1.0)*cj2*r20*x9633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x9636))+(((-1.0)*sj5*x9632*x9633))+(((-1.0)*r20*x9634*x9637))+(((-1.0)*sj6*x9638))+(((-1.0)*x9634*x9635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*x9632))+(((-1.0)*sj5*x9633*x9638))+(((-1.0)*x9636*x9637))+(((-1.0)*sj2*x9635))+(((-1.0)*cj2*r20*x9633))))+IKsqr((((cj6*x9636))+(((-1.0)*sj5*x9632*x9633))+(((-1.0)*r20*x9634*x9637))+(((-1.0)*sj6*x9638))+(((-1.0)*x9634*x9635))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*x9632))+(((-1.0)*sj5*x9633*x9638))+(((-1.0)*x9636*x9637))+(((-1.0)*sj2*x9635))+(((-1.0)*cj2*r20*x9633))), (((cj6*x9636))+(((-1.0)*sj5*x9632*x9633))+(((-1.0)*r20*x9634*x9637))+(((-1.0)*sj6*x9638))+(((-1.0)*x9634*x9635))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9639=IKcos(j4);
IkReal x9640=IKsin(j4);
IkReal x9641=(r11*sj0);
IkReal x9642=(cj0*sj6);
IkReal x9643=(cj6*sj5);
IkReal x9644=(r10*sj0);
IkReal x9645=(sj5*sj6);
IkReal x9646=((1.0)*cj6);
IkReal x9647=((0.026255)*sj6);
IkReal x9648=((0.026255)*cj6);
IkReal x9649=(cj0*r00);
IkReal x9650=((1.0)*r21);
IkReal x9651=(cj2*x9640);
IkReal x9652=((0.02626)*x9640);
IkReal x9653=(cj2*x9639);
IkReal x9654=(sj2*x9640);
IkReal x9655=(sj2*x9639);
IkReal x9656=((1.0)*x9655);
evalcond[0]=((((-1.0)*sj6*x9650))+x9651+((cj6*r20))+(((-1.0)*x9656)));
evalcond[1]=((((-1.0)*r20*x9645))+(((-1.0)*x9643*x9650))+(((-1.0)*x9654))+(((-1.0)*x9653))+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x9646*x9649))+((r01*x9642))+x9653+x9654+((sj6*x9641))+(((-1.0)*x9644*x9646)));
evalcond[3]=(((cj5*r12*sj0))+((x9641*x9643))+((cj0*cj5*r02))+((x9644*x9645))+x9651+((r00*sj5*x9642))+((cj0*r01*x9643))+(((-1.0)*x9656)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x9647))+(((-0.0009)*sj2))+(((-0.02626)*x9655))+pz+((r20*x9648))+(((0.02626)*x9651))+(((-0.01834)*cj2))+(((0.0718)*x9654))+(((0.0718)*x9653)));
evalcond[5]=((-0.001)+((sj2*x9652))+((x9641*x9647))+(((-0.01834)*sj2))+(((0.0009)*cj2))+(((0.02626)*x9653))+(((-1.0)*py*sj0))+(((0.0718)*x9655))+(((-0.0718)*x9651))+(((0.026255)*r01*x9642))+(((-1.0)*cj0*px))+(((-1.0)*x9648*x9649))+(((-1.0)*x9644*x9648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9657=(cj5*cj6);
IkReal x9658=((1.0)*sj0);
IkReal x9659=((1.0)*r22);
IkReal x9660=(cj0*sj5);
IkReal x9661=(cj5*sj6);
IkReal x9662=((1.0)*cj0);
IkReal x9663=(cj6*r20);
IkReal x9664=((1.0)*sj5);
IkReal x9665=(r21*sj6);
IkReal x9666=(x9661*x9662);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x9659))+((r21*x9657))+((r20*x9661)));
evalcond[2]=(x9663+(((-1.0)*x9665)));
evalcond[3]=((((-1.0)*r20*sj6*x9664))+(((-1.0)*cj5*x9659))+(((-1.0)*cj6*r21*x9664)));
evalcond[4]=((((-1.0)*r01*x9657*x9662))+(((-1.0)*r11*x9657*x9658))+(((-1.0)*r00*x9666))+((r12*sj0*sj5))+(((-1.0)*r10*x9658*x9661))+((r02*x9660)));
evalcond[5]=((((-1.0)*r02*sj5*x9658))+(((-1.0)*r10*x9666))+(((-1.0)*r11*x9657*x9662))+((r00*sj0*x9661))+((r12*x9660))+((r01*sj0*x9657)));
evalcond[6]=((-0.0001)+(((0.026255)*x9663))+(((-0.026255)*x9665))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9667=(sj0*sj2);
IkReal x9668=(cj0*cj2);
IkReal x9669=(r01*sj6);
IkReal x9670=(cj6*r10);
IkReal x9671=(cj2*sj0);
IkReal x9672=(cj0*sj2);
IkReal x9673=(cj6*r00);
IkReal x9674=((1.0)*r11*sj6);
IkReal x9675=((1.0)*x9672);
if( IKabs((((x9667*x9670))+(((-1.0)*x9668*x9674))+((x9668*x9670))+(((-1.0)*x9669*x9675))+((x9669*x9671))+(((-1.0)*x9667*x9674))+(((-1.0)*x9671*x9673))+((x9672*x9673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9667*x9673))+(((-1.0)*x9668*x9669))+(((-1.0)*x9671*x9674))+(((-1.0)*x9670*x9675))+((x9670*x9671))+((x9668*x9673))+((r11*sj6*x9672))+(((-1.0)*x9667*x9669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x9667*x9670))+(((-1.0)*x9668*x9674))+((x9668*x9670))+(((-1.0)*x9669*x9675))+((x9669*x9671))+(((-1.0)*x9667*x9674))+(((-1.0)*x9671*x9673))+((x9672*x9673))))+IKsqr((((x9667*x9673))+(((-1.0)*x9668*x9669))+(((-1.0)*x9671*x9674))+(((-1.0)*x9670*x9675))+((x9670*x9671))+((x9668*x9673))+((r11*sj6*x9672))+(((-1.0)*x9667*x9669))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x9667*x9670))+(((-1.0)*x9668*x9674))+((x9668*x9670))+(((-1.0)*x9669*x9675))+((x9669*x9671))+(((-1.0)*x9667*x9674))+(((-1.0)*x9671*x9673))+((x9672*x9673))), (((x9667*x9673))+(((-1.0)*x9668*x9669))+(((-1.0)*x9671*x9674))+(((-1.0)*x9670*x9675))+((x9670*x9671))+((x9668*x9673))+((r11*sj6*x9672))+(((-1.0)*x9667*x9669))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9676=IKsin(j4);
IkReal x9677=IKcos(j4);
IkReal x9678=(r11*sj6);
IkReal x9679=((0.026255)*cj0);
IkReal x9680=(r01*sj6);
IkReal x9681=(sj0*sj5);
IkReal x9682=(cj6*r11);
IkReal x9683=(r10*sj6);
IkReal x9684=(cj5*r12);
IkReal x9685=(cj6*sj0);
IkReal x9686=((1.0)*sj0);
IkReal x9687=(cj5*r02);
IkReal x9688=((1.0)*r10);
IkReal x9689=(cj0*sj5);
IkReal x9690=(r00*sj6);
IkReal x9691=((0.026255)*sj0);
IkReal x9692=(cj0*cj6);
IkReal x9693=((1.0)*cj0);
IkReal x9694=(cj6*r01);
IkReal x9695=(cj2*x9676);
IkReal x9696=(sj2*x9676);
IkReal x9697=((0.0718)*x9677);
IkReal x9698=(cj2*x9677);
IkReal x9699=(sj2*x9677);
IkReal x9700=((1.0)*x9699);
evalcond[0]=((((-1.0)*x9685*x9688))+(((-1.0)*r00*x9692))+x9698+x9696+((cj0*x9680))+((sj0*x9678)));
evalcond[1]=((((-1.0)*x9680*x9686))+((cj0*x9678))+(((-1.0)*x9700))+x9695+(((-1.0)*x9688*x9692))+((r00*x9685)));
evalcond[2]=(((x9689*x9694))+((x9689*x9690))+((sj0*x9684))+((x9681*x9683))+((x9681*x9682))+(((-1.0)*x9700))+x9695+((cj0*x9687)));
evalcond[3]=(((x9682*x9689))+(((-1.0)*x9698))+(((-1.0)*x9696))+(((-1.0)*x9681*x9694))+(((-1.0)*x9681*x9690))+((x9683*x9689))+(((-1.0)*x9686*x9687))+((cj0*x9684)));
evalcond[4]=((-0.1255)+(((0.026255)*r00*x9685))+(((-0.02626)*x9699))+(((-1.0)*x9680*x9691))+((x9678*x9679))+(((0.02626)*x9695))+(((-0.0009)*sj2))+(((0.0718)*x9696))+(((-1.0)*py*x9693))+((cj2*x9697))+(((-1.0)*cj6*r10*x9679))+((px*sj0))+(((-0.01834)*cj2)));
evalcond[5]=((-0.001)+(((-1.0)*px*x9693))+(((-0.01834)*sj2))+(((0.02626)*x9698))+(((0.02626)*x9696))+((x9679*x9680))+(((-1.0)*cj6*r00*x9679))+(((-0.0718)*x9695))+(((0.0009)*cj2))+(((-1.0)*py*x9686))+((x9678*x9691))+(((-0.026255)*r10*x9685))+((sj2*x9697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9701=(cj5*cj6);
IkReal x9702=(cj0*sj6);
IkReal x9703=(r01*sj0);
IkReal x9704=((1.0)*sj0);
IkReal x9705=((1.0)*cj5);
IkReal x9706=(cj0*r12);
IkReal x9707=(r02*sj5);
IkReal x9708=((1.0)*sj5);
IkReal x9709=(cj5*sj6);
IkReal x9710=((1.0)*cj0);
IkReal x9711=(cj6*r10);
IkReal x9712=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x9708))+((r20*x9709))+((r21*x9701)));
evalcond[2]=((((-1.0)*sj6*x9703))+((r11*x9702))+x9712+(((-1.0)*x9710*x9711)));
evalcond[3]=((((-1.0)*r11*x9701*x9704))+(((-1.0)*r01*x9701*x9710))+((r12*sj0*sj5))+(((-1.0)*r00*x9702*x9705))+((cj0*x9707))+(((-1.0)*r10*x9704*x9709)));
evalcond[4]=((1.0)+((sj5*x9706))+((x9701*x9703))+(((-1.0)*r11*x9701*x9710))+((r00*sj0*x9709))+(((-1.0)*x9704*x9707))+(((-1.0)*r10*x9702*x9705)));
evalcond[5]=(((r10*sj5*x9702))+(((-1.0)*cj6*x9703*x9708))+(((-1.0)*r00*sj5*sj6*x9704))+(((-1.0)*cj5*r02*x9704))+((cj0*cj6*r11*sj5))+((cj5*x9706)));
evalcond[6]=((-0.0001)+(((-0.026255)*cj0*x9711))+(((0.026255)*x9712))+(((-0.026255)*sj6*x9703))+((px*sj0))+(((0.026255)*r11*x9702))+(((-1.0)*py*x9710)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9713=(cj5*r22);
IkReal x9714=(cj6*sj2);
IkReal x9715=(r21*sj5);
IkReal x9716=(r21*sj6);
IkReal x9717=(cj2*cj6);
IkReal x9718=(r20*sj5*sj6);
if( IKabs((((x9714*x9715))+((sj2*x9713))+((sj2*x9718))+((r20*x9717))+(((-1.0)*cj2*x9716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x9716))+(((-1.0)*r20*x9714))+((x9715*x9717))+((cj2*x9718))+((cj2*x9713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x9714*x9715))+((sj2*x9713))+((sj2*x9718))+((r20*x9717))+(((-1.0)*cj2*x9716))))+IKsqr((((sj2*x9716))+(((-1.0)*r20*x9714))+((x9715*x9717))+((cj2*x9718))+((cj2*x9713))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x9714*x9715))+((sj2*x9713))+((sj2*x9718))+((r20*x9717))+(((-1.0)*cj2*x9716))), (((sj2*x9716))+(((-1.0)*r20*x9714))+((x9715*x9717))+((cj2*x9718))+((cj2*x9713))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9719=IKcos(j4);
IkReal x9720=IKsin(j4);
IkReal x9721=(r11*sj0);
IkReal x9722=(cj0*sj6);
IkReal x9723=(cj6*sj5);
IkReal x9724=(r10*sj0);
IkReal x9725=(sj5*sj6);
IkReal x9726=(cj6*r20);
IkReal x9727=((1.0)*cj6);
IkReal x9728=((0.026255)*sj6);
IkReal x9729=((0.026255)*cj6);
IkReal x9730=(cj0*r00);
IkReal x9731=((1.0)*r21);
IkReal x9732=(cj2*x9719);
IkReal x9733=(sj2*x9720);
IkReal x9734=((0.02626)*x9720);
IkReal x9735=(cj2*x9720);
IkReal x9736=((0.0718)*x9719);
IkReal x9737=(sj2*x9719);
IkReal x9738=(x9733+x9732);
evalcond[0]=((((-1.0)*sj6*x9731))+x9726+x9737+(((-1.0)*x9735)));
evalcond[1]=((((-1.0)*r20*x9725))+x9738+(((-1.0)*cj5*r22))+(((-1.0)*x9723*x9731)));
evalcond[2]=(((r01*x9722))+(((-1.0)*x9724*x9727))+((sj6*x9721))+x9738+(((-1.0)*x9727*x9730)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+x9735+((r00*sj5*x9722))+((x9724*x9725))+((cj0*r01*x9723))+((x9721*x9723))+(((-1.0)*x9737)));
evalcond[4]=((0.1255)+(((0.02626)*x9737))+(((0.026255)*x9726))+(((-1.0)*r21*x9728))+pz+(((-0.0718)*x9732))+(((-0.0718)*x9733))+(((0.01834)*cj2))+(((0.0009)*sj2))+(((-1.0)*cj2*x9734)));
evalcond[5]=((-0.001)+(((0.02626)*x9732))+(((0.02626)*x9733))+(((-0.01834)*sj2))+(((-1.0)*x9724*x9729))+(((-1.0)*x9729*x9730))+((sj2*x9736))+(((0.0009)*cj2))+(((-0.0718)*x9735))+(((0.026255)*r01*x9722))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+((x9721*x9728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9739=(cj5*cj6);
IkReal x9740=((1.0)*sj0);
IkReal x9741=((1.0)*r22);
IkReal x9742=(cj0*sj5);
IkReal x9743=(cj5*sj6);
IkReal x9744=((1.0)*cj0);
IkReal x9745=(cj6*r20);
IkReal x9746=((1.0)*sj5);
IkReal x9747=(r21*sj6);
IkReal x9748=(x9743*x9744);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x9741))+((r20*x9743))+((r21*x9739)));
evalcond[2]=((((-1.0)*x9747))+x9745);
evalcond[3]=((((-1.0)*cj5*x9741))+(((-1.0)*r20*sj6*x9746))+(((-1.0)*cj6*r21*x9746)));
evalcond[4]=(((r12*sj0*sj5))+((r02*x9742))+(((-1.0)*r11*x9739*x9740))+(((-1.0)*r00*x9748))+(((-1.0)*r10*x9740*x9743))+(((-1.0)*r01*x9739*x9744)));
evalcond[5]=((((-1.0)*r10*x9748))+(((-1.0)*r02*sj5*x9740))+((r01*sj0*x9739))+(((-1.0)*r11*x9739*x9744))+((r12*x9742))+((r00*sj0*x9743)));
evalcond[6]=((0.0001)+(((-0.026255)*x9747))+(((0.026255)*x9745))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9749=(cj6*r10);
IkReal x9750=(r11*sj0);
IkReal x9751=(r01*sj6);
IkReal x9752=((1.0)*sj0);
IkReal x9753=(cj2*sj6);
IkReal x9754=(cj0*r11);
IkReal x9755=(cj2*sj0);
IkReal x9756=(cj6*r00);
IkReal x9757=(sj0*sj2);
IkReal x9758=((1.0)*cj0*cj2);
IkReal x9759=((1.0)*sj2*sj6);
IkReal x9760=(sj2*x9756);
if( IKabs(((((-1.0)*cj0*sj2*x9751))+(((-1.0)*cj2*x9751*x9752))+(((-1.0)*x9749*x9758))+((x9753*x9754))+((x9755*x9756))+(((-1.0)*x9750*x9759))+((cj0*x9760))+((x9749*x9757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj2*x9756))+((x9751*x9757))+((cj0*sj2*x9749))+(((-1.0)*x9751*x9758))+(((-1.0)*x9754*x9759))+(((-1.0)*x9752*x9760))+(((-1.0)*x9750*x9753))+((x9749*x9755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*sj2*x9751))+(((-1.0)*cj2*x9751*x9752))+(((-1.0)*x9749*x9758))+((x9753*x9754))+((x9755*x9756))+(((-1.0)*x9750*x9759))+((cj0*x9760))+((x9749*x9757))))+IKsqr((((cj0*cj2*x9756))+((x9751*x9757))+((cj0*sj2*x9749))+(((-1.0)*x9751*x9758))+(((-1.0)*x9754*x9759))+(((-1.0)*x9752*x9760))+(((-1.0)*x9750*x9753))+((x9749*x9755))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*sj2*x9751))+(((-1.0)*cj2*x9751*x9752))+(((-1.0)*x9749*x9758))+((x9753*x9754))+((x9755*x9756))+(((-1.0)*x9750*x9759))+((cj0*x9760))+((x9749*x9757))), (((cj0*cj2*x9756))+((x9751*x9757))+((cj0*sj2*x9749))+(((-1.0)*x9751*x9758))+(((-1.0)*x9754*x9759))+(((-1.0)*x9752*x9760))+(((-1.0)*x9750*x9753))+((x9749*x9755))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9761=IKcos(j4);
IkReal x9762=IKsin(j4);
IkReal x9763=(r11*sj6);
IkReal x9764=((0.026255)*cj0);
IkReal x9765=(r01*sj6);
IkReal x9766=(sj0*sj5);
IkReal x9767=(cj6*r11);
IkReal x9768=(r10*sj6);
IkReal x9769=(cj5*r12);
IkReal x9770=(cj6*sj0);
IkReal x9771=((1.0)*sj0);
IkReal x9772=(cj5*r02);
IkReal x9773=((1.0)*r10);
IkReal x9774=(cj0*sj5);
IkReal x9775=(r00*sj6);
IkReal x9776=((0.026255)*sj0);
IkReal x9777=(cj0*cj6);
IkReal x9778=((1.0)*cj0);
IkReal x9779=(cj6*r01);
IkReal x9780=(cj2*x9761);
IkReal x9781=(sj2*x9762);
IkReal x9782=((0.02626)*x9762);
IkReal x9783=(cj2*x9762);
IkReal x9784=((0.0718)*x9761);
IkReal x9785=(sj2*x9761);
IkReal x9786=(x9780+x9781);
evalcond[0]=((((-1.0)*r00*x9777))+x9786+((sj0*x9763))+(((-1.0)*x9770*x9773))+((cj0*x9765)));
evalcond[1]=((((-1.0)*x9765*x9771))+((r00*x9770))+x9785+(((-1.0)*x9783))+(((-1.0)*x9773*x9777))+((cj0*x9763)));
evalcond[2]=(x9783+((sj0*x9769))+(((-1.0)*x9785))+((x9766*x9768))+((x9766*x9767))+((x9774*x9779))+((x9774*x9775))+((cj0*x9772)));
evalcond[3]=((((-1.0)*x9766*x9775))+(((-1.0)*x9766*x9779))+((x9767*x9774))+((x9768*x9774))+(((-1.0)*x9771*x9772))+x9786+((cj0*x9769)));
evalcond[4]=((0.1255)+(((0.026255)*r00*x9770))+((x9763*x9764))+(((-1.0)*x9765*x9776))+(((-1.0)*cj6*r10*x9764))+(((-1.0)*py*x9778))+(((-1.0)*cj2*x9782))+(((0.01834)*cj2))+((px*sj0))+(((0.02626)*x9785))+(((-0.0718)*x9780))+(((-0.0718)*x9781))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-1.0)*px*x9778))+((x9763*x9776))+(((-0.01834)*sj2))+((x9764*x9765))+(((-1.0)*py*x9771))+(((0.0009)*cj2))+(((-0.026255)*r10*x9770))+((sj2*x9784))+(((0.02626)*x9780))+(((0.02626)*x9781))+(((-1.0)*cj6*r00*x9764))+(((-0.0718)*x9783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9787=(cj0*cj1);
IkReal x9788=(cj5*r22);
IkReal x9789=(r21*sj5);
IkReal x9790=((1.0)*cj2);
IkReal x9791=(r11*sj6);
IkReal x9792=(cj1*sj0);
IkReal x9793=(cj6*r00);
IkReal x9794=(r01*sj6);
IkReal x9795=((1.0)*cj6*sj2);
IkReal x9796=(sj1*x9790);
IkReal x9797=(r20*sj5*sj6);
IkReal x9798=((1.0)*sj1*sj2);
CheckValue<IkReal> x9799=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x9799.valid){
continue;
}
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(((((-1.0)*x9788*x9798))+(((-1.0)*sj1*x9789*x9795))+(((-1.0)*x9797*x9798))+(((-1.0)*x9787*x9790*x9791))+((cj2*x9792*x9794))+((cj2*cj6*r10*x9787))+(((-1.0)*x9790*x9792*x9793)))),((((-1.0)*x9788*x9796))+(((-1.0)*cj6*x9789*x9796))+((sj2*x9787*x9791))+(((-1.0)*x9796*x9797))+(((-1.0)*sj2*x9792*x9794))+((sj2*x9792*x9793))+(((-1.0)*r10*x9787*x9795))),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9799.value)))+(x9800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9801=IKcos(j4);
IkReal x9802=IKsin(j4);
IkReal x9803=((0.0718)*sj1);
IkReal x9804=(sj0*sj6);
IkReal x9805=(cj0*sj6);
IkReal x9806=((0.026255)*r01);
IkReal x9807=(cj5*r12);
IkReal x9808=((1.0)*cj1);
IkReal x9809=(r10*sj5);
IkReal x9810=((0.026255)*r11);
IkReal x9811=((0.026255)*cj6);
IkReal x9812=(r00*sj0);
IkReal x9813=((1.0)*cj5);
IkReal x9814=(cj1*sj2);
IkReal x9815=(cj2*sj1);
IkReal x9816=((1.0)*sj0);
IkReal x9817=(cj6*r10);
IkReal x9818=((1.0)*sj1);
IkReal x9819=(sj1*sj2);
IkReal x9820=(r00*sj5);
IkReal x9821=((1.0)*cj0);
IkReal x9822=(cj6*sj5);
IkReal x9823=((1.0)*r21);
IkReal x9824=(cj2*x9801);
IkReal x9825=((0.02626)*x9802);
IkReal x9826=(cj2*x9802);
IkReal x9827=((0.02626)*x9801);
IkReal x9828=(sj2*x9802);
IkReal x9829=(sj2*x9801);
IkReal x9830=(cj1*x9826);
evalcond[0]=((((-1.0)*x9808*x9829))+((cj6*r20))+(((-1.0)*sj6*x9823))+x9830);
evalcond[1]=(((r11*x9804))+(((-1.0)*x9816*x9817))+(((-1.0)*cj6*r00*x9821))+x9824+x9828+((r01*x9805)));
evalcond[2]=((((-1.0)*x9822*x9823))+(((-1.0)*x9808*x9828))+(((-1.0)*x9808*x9824))+(((-1.0)*r22*x9813))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=((((-1.0)*x9818*x9829))+((cj6*x9812))+((r11*x9805))+((x9802*x9815))+(((-1.0)*r01*x9804))+(((-1.0)*x9817*x9821)));
evalcond[4]=(((cj0*cj5*r02))+((sj0*x9807))+((x9804*x9809))+((r11*sj0*x9822))+x9826+((cj0*r01*x9822))+(((-1.0)*x9829))+((x9805*x9820)));
evalcond[5]=((((-1.0)*x9801*x9815))+(((-1.0)*x9818*x9828))+(((-1.0)*r01*x9816*x9822))+(((-1.0)*x9804*x9820))+((cj0*r11*x9822))+(((-1.0)*r02*sj0*x9813))+((x9805*x9809))+((cj0*x9807)));
evalcond[6]=((((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+((cj1*cj2*x9825))+pz+(((-0.0009)*x9814))+(((-1.0)*x9814*x9827))+((r20*x9811))+(((0.0718)*x9802*x9814))+(((0.0718)*cj1*x9824)));
evalcond[7]=((-0.001)+(((0.02626)*x9824))+(((-0.01834)*sj2))+(((0.0718)*x9829))+(((-1.0)*py*x9816))+((x9804*x9810))+(((0.0009)*cj2))+((sj2*x9825))+(((-0.0718)*x9826))+(((-1.0)*r10*sj0*x9811))+(((-1.0)*cj0*r00*x9811))+(((-1.0)*px*x9821))+((x9805*x9806)));
evalcond[8]=((((-0.1255)*sj1))+(((-0.01834)*x9815))+(((-1.0)*py*x9821))+(((-1.0)*cj0*r10*x9811))+((x9811*x9812))+((x9815*x9825))+(((-1.0)*x9819*x9827))+(((-0.0009)*x9819))+(((-1.0)*x9804*x9806))+((x9803*x9828))+((x9803*x9824))+(((0.0001)*cj1))+((px*sj0))+((x9805*x9810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9831=(cj1*sj2);
IkReal x9832=(cj2*sj6);
IkReal x9833=(cj1*cj2);
IkReal x9834=(cj6*r20);
IkReal x9835=((1.0)*sj6);
IkReal x9836=(cj0*r01);
IkReal x9837=(cj0*cj6*r00);
IkReal x9838=((1.0)*r11*sj0);
IkReal x9839=(cj6*r10*sj0);
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x9840.valid){
continue;
}
CheckValue<IkReal> x9841 = IKatan2WithCheck(IkReal((((r21*x9832))+(((-1.0)*r11*sj0*x9831*x9835))+(((-1.0)*x9831*x9835*x9836))+(((-1.0)*cj2*x9834))+((x9831*x9839))+((x9831*x9837)))),(((x9833*x9839))+((x9833*x9837))+((sj2*x9834))+(((-1.0)*cj1*x9832*x9838))+(((-1.0)*cj1*x9832*x9836))+(((-1.0)*r21*sj2*x9835))),IKFAST_ATAN2_MAGTHRESH);
if(!x9841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9840.value)))+(x9841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9842=IKcos(j4);
IkReal x9843=IKsin(j4);
IkReal x9844=((0.0718)*sj1);
IkReal x9845=(sj0*sj6);
IkReal x9846=(cj0*sj6);
IkReal x9847=((0.026255)*r01);
IkReal x9848=(cj5*r12);
IkReal x9849=((1.0)*cj1);
IkReal x9850=(r10*sj5);
IkReal x9851=((0.026255)*r11);
IkReal x9852=((0.026255)*cj6);
IkReal x9853=(r00*sj0);
IkReal x9854=((1.0)*cj5);
IkReal x9855=(cj1*sj2);
IkReal x9856=(cj2*sj1);
IkReal x9857=((1.0)*sj0);
IkReal x9858=(cj6*r10);
IkReal x9859=((1.0)*sj1);
IkReal x9860=(sj1*sj2);
IkReal x9861=(r00*sj5);
IkReal x9862=((1.0)*cj0);
IkReal x9863=(cj6*sj5);
IkReal x9864=((1.0)*r21);
IkReal x9865=(cj2*x9842);
IkReal x9866=((0.02626)*x9843);
IkReal x9867=(cj2*x9843);
IkReal x9868=((0.02626)*x9842);
IkReal x9869=(sj2*x9843);
IkReal x9870=(sj2*x9842);
IkReal x9871=(cj1*x9867);
evalcond[0]=((((-1.0)*x9849*x9870))+((cj6*r20))+x9871+(((-1.0)*sj6*x9864)));
evalcond[1]=(((r11*x9845))+(((-1.0)*cj6*r00*x9862))+((r01*x9846))+(((-1.0)*x9857*x9858))+x9869+x9865);
evalcond[2]=((((-1.0)*x9863*x9864))+(((-1.0)*r22*x9854))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*x9849*x9869))+(((-1.0)*x9849*x9865)));
evalcond[3]=(((r11*x9846))+(((-1.0)*x9858*x9862))+(((-1.0)*r01*x9845))+((x9843*x9856))+(((-1.0)*x9859*x9870))+((cj6*x9853)));
evalcond[4]=(((cj0*cj5*r02))+(((-1.0)*x9870))+((x9845*x9850))+((r11*sj0*x9863))+((sj0*x9848))+((x9846*x9861))+((cj0*r01*x9863))+x9867);
evalcond[5]=(((x9846*x9850))+(((-1.0)*x9859*x9869))+(((-1.0)*x9842*x9856))+(((-1.0)*x9845*x9861))+(((-1.0)*r01*x9857*x9863))+(((-1.0)*r02*sj0*x9854))+((cj0*r11*x9863))+((cj0*x9848)));
evalcond[6]=((((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+((r20*x9852))+pz+(((-1.0)*x9855*x9868))+(((-0.0009)*x9855))+((cj1*cj2*x9866))+(((0.0718)*x9843*x9855))+(((0.0718)*cj1*x9865)));
evalcond[7]=((-0.001)+((x9846*x9847))+(((-1.0)*r10*sj0*x9852))+(((-1.0)*py*x9857))+(((-1.0)*px*x9862))+(((-0.01834)*sj2))+((x9845*x9851))+((sj2*x9866))+(((0.0009)*cj2))+(((-0.0718)*x9867))+(((0.02626)*x9865))+(((-1.0)*cj0*r00*x9852))+(((0.0718)*x9870)));
evalcond[8]=((((-0.01834)*x9856))+(((-0.1255)*sj1))+(((-0.0009)*x9860))+((x9846*x9851))+(((-1.0)*py*x9862))+(((-1.0)*cj0*r10*x9852))+(((-1.0)*x9845*x9847))+(((-1.0)*x9860*x9868))+(((0.0001)*cj1))+((px*sj0))+((x9844*x9865))+((x9844*x9869))+((x9856*x9866))+((x9852*x9853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9872=(cj2*r21);
IkReal x9873=((1.0)*cj6);
IkReal x9874=((1.0)*cj2);
IkReal x9875=(cj5*r22);
IkReal x9876=(r20*sj2);
IkReal x9877=(sj5*sj6);
IkReal x9878=(r21*sj2);
CheckValue<IkReal> x9879=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x9879.valid){
continue;
}
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x9875))+(((-1.0)*cj2*r20*x9873))+(((-1.0)*sj5*x9873*x9878))+((sj6*x9872))+(((-1.0)*x9876*x9877)))),((((-1.0)*r20*x9874*x9877))+(((-1.0)*sj5*x9872*x9873))+(((-1.0)*x9874*x9875))+(((-1.0)*sj6*x9878))+((cj6*x9876))),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9879.value)))+(x9880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9881=IKcos(j4);
IkReal x9882=IKsin(j4);
IkReal x9883=((0.0718)*sj1);
IkReal x9884=(sj0*sj6);
IkReal x9885=(cj0*sj6);
IkReal x9886=((0.026255)*r01);
IkReal x9887=(cj5*r12);
IkReal x9888=((1.0)*cj1);
IkReal x9889=(r10*sj5);
IkReal x9890=((0.026255)*r11);
IkReal x9891=((0.026255)*cj6);
IkReal x9892=(r00*sj0);
IkReal x9893=((1.0)*cj5);
IkReal x9894=(cj1*sj2);
IkReal x9895=(cj2*sj1);
IkReal x9896=((1.0)*sj0);
IkReal x9897=(cj6*r10);
IkReal x9898=((1.0)*sj1);
IkReal x9899=(sj1*sj2);
IkReal x9900=(r00*sj5);
IkReal x9901=((1.0)*cj0);
IkReal x9902=(cj6*sj5);
IkReal x9903=((1.0)*r21);
IkReal x9904=(cj2*x9881);
IkReal x9905=((0.02626)*x9882);
IkReal x9906=(cj2*x9882);
IkReal x9907=((0.02626)*x9881);
IkReal x9908=(sj2*x9882);
IkReal x9909=(sj2*x9881);
IkReal x9910=(cj1*x9906);
evalcond[0]=((((-1.0)*sj6*x9903))+(((-1.0)*x9888*x9909))+((cj6*r20))+x9910);
evalcond[1]=((((-1.0)*cj6*r00*x9901))+((r01*x9885))+((r11*x9884))+(((-1.0)*x9896*x9897))+x9904+x9908);
evalcond[2]=((((-1.0)*x9902*x9903))+(((-1.0)*x9888*x9904))+(((-1.0)*x9888*x9908))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r22*x9893)));
evalcond[3]=(((x9882*x9895))+((r11*x9885))+((cj6*x9892))+(((-1.0)*x9898*x9909))+(((-1.0)*r01*x9884))+(((-1.0)*x9897*x9901)));
evalcond[4]=(((x9884*x9889))+((cj0*cj5*r02))+(((-1.0)*x9909))+((r11*sj0*x9902))+((cj0*r01*x9902))+((sj0*x9887))+x9906+((x9885*x9900)));
evalcond[5]=((((-1.0)*x9881*x9895))+(((-1.0)*r02*sj0*x9893))+(((-1.0)*x9884*x9900))+((cj0*r11*x9902))+(((-1.0)*r01*x9896*x9902))+(((-1.0)*x9898*x9908))+((cj0*x9887))+((x9885*x9889)));
evalcond[6]=((((-0.01834)*cj1*cj2))+(((-0.0009)*x9894))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+((cj1*cj2*x9905))+pz+(((-1.0)*x9894*x9907))+((r20*x9891))+(((0.0718)*cj1*x9904))+(((0.0718)*x9882*x9894)));
evalcond[7]=((-0.001)+((x9884*x9890))+((sj2*x9905))+(((-0.0718)*x9906))+(((-0.01834)*sj2))+(((-1.0)*cj0*r00*x9891))+(((-1.0)*py*x9896))+(((0.0718)*x9909))+(((0.0009)*cj2))+(((-1.0)*px*x9901))+(((0.02626)*x9904))+((x9885*x9886))+(((-1.0)*r10*sj0*x9891)));
evalcond[8]=((((-1.0)*py*x9901))+(((-0.1255)*sj1))+((x9885*x9890))+(((-0.0009)*x9899))+((x9895*x9905))+(((-1.0)*x9884*x9886))+(((-0.01834)*x9895))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x9899*x9907))+(((-1.0)*cj0*r10*x9891))+((x9891*x9892))+((x9883*x9904))+((x9883*x9908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9911=(cj0*sj5);
IkReal x9912=(cj5*cj6);
IkReal x9913=((1.0)*sj5);
IkReal x9914=((1.0)*cj0);
IkReal x9915=((1.0)*sj0);
IkReal x9916=(cj5*sj6);
IkReal x9917=(r10*x9916);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x9916))+(((-1.0)*r22*x9913))+((r21*x9912))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r01*x9912*x9914))+(((-1.0)*r00*x9914*x9916))+((r12*sj0*sj5))+(((-1.0)*x9915*x9917))+(((-1.0)*r11*x9912*x9915))+((r02*x9911)));
evalcond[3]=(((r12*x9911))+(((-1.0)*x9914*x9917))+(((-1.0)*r02*sj0*x9913))+((r01*sj0*x9912))+(((-1.0)*r11*x9912*x9914))+((r00*sj0*x9916)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9918=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x9918))+(((-1.0)*r20*sj6*x9918))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9919=(cj5*cj6);
IkReal x9920=((1.0)*sj0);
IkReal x9921=((1.0)*r22);
IkReal x9922=(cj0*sj5);
IkReal x9923=(cj5*sj6);
IkReal x9924=((1.0)*cj0);
IkReal x9925=(cj6*r20);
IkReal x9926=((1.0)*sj5);
IkReal x9927=(r21*sj6);
IkReal x9928=(x9923*x9924);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x9923))+(((-1.0)*sj5*x9921))+((r21*x9919)));
evalcond[2]=((((-1.0)*x9927))+x9925);
evalcond[3]=((((-1.0)*cj5*x9921))+(((-1.0)*cj6*r21*x9926))+(((-1.0)*r20*sj6*x9926)));
evalcond[4]=((((-1.0)*r01*x9919*x9924))+(((-1.0)*r10*x9920*x9923))+((r02*x9922))+((r12*sj0*sj5))+(((-1.0)*r00*x9928))+(((-1.0)*r11*x9919*x9920)));
evalcond[5]=(((r00*sj0*x9923))+(((-1.0)*r10*x9928))+((r12*x9922))+((r01*sj0*x9919))+(((-1.0)*r02*sj5*x9920))+(((-1.0)*r11*x9919*x9924)));
evalcond[6]=((-0.0001)+(((0.026255)*x9925))+pz+(((-0.026255)*x9927)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9929=(sj0*sj6);
IkReal x9930=(cj0*sj6);
IkReal x9931=(cj6*r00);
IkReal x9932=((1.0)*cj6*r10);
if( IKabs((((r01*x9930))+((r11*x9929))+(((-1.0)*sj0*x9932))+(((-1.0)*cj0*x9931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x9931))+((r11*x9930))+(((-1.0)*r01*x9929))+(((-1.0)*cj0*x9932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x9930))+((r11*x9929))+(((-1.0)*sj0*x9932))+(((-1.0)*cj0*x9931))))+IKsqr((((sj0*x9931))+((r11*x9930))+(((-1.0)*r01*x9929))+(((-1.0)*cj0*x9932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x9930))+((r11*x9929))+(((-1.0)*sj0*x9932))+(((-1.0)*cj0*x9931))), (((sj0*x9931))+((r11*x9930))+(((-1.0)*r01*x9929))+(((-1.0)*cj0*x9932))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9933=IKcos(j4);
IkReal x9934=IKsin(j4);
IkReal x9935=(r11*sj6);
IkReal x9936=((0.026255)*cj0);
IkReal x9937=(r01*sj6);
IkReal x9938=(sj0*sj5);
IkReal x9939=(cj6*r11);
IkReal x9940=(r10*sj6);
IkReal x9941=(cj5*r12);
IkReal x9942=(cj6*sj0);
IkReal x9943=((1.0)*sj0);
IkReal x9944=(cj5*r02);
IkReal x9945=((1.0)*r10);
IkReal x9946=(cj0*sj5);
IkReal x9947=(r00*sj6);
IkReal x9948=((0.026255)*sj0);
IkReal x9949=(cj0*cj6);
IkReal x9950=((1.0)*cj0);
IkReal x9951=(cj6*r01);
IkReal x9952=((1.0)*x9934);
evalcond[0]=(((sj0*x9935))+((cj0*x9937))+(((-1.0)*r00*x9949))+(((-1.0)*x9952))+(((-1.0)*x9942*x9945)));
evalcond[1]=(((cj0*x9935))+(((-1.0)*x9945*x9949))+(((-1.0)*x9933))+(((-1.0)*x9937*x9943))+((r00*x9942)));
evalcond[2]=(((cj0*x9944))+((sj0*x9941))+((x9946*x9947))+((x9938*x9939))+((x9946*x9951))+x9933+((x9938*x9940)));
evalcond[3]=(((cj0*x9941))+(((-1.0)*x9938*x9951))+(((-1.0)*x9938*x9947))+(((-1.0)*x9952))+((x9940*x9946))+(((-1.0)*x9943*x9944))+((x9939*x9946)));
evalcond[4]=((-0.1264)+(((-1.0)*py*x9950))+(((0.0718)*x9934))+(((-1.0)*x9937*x9948))+(((0.026255)*r00*x9942))+((px*sj0))+((x9935*x9936))+(((-1.0)*cj6*r10*x9936))+(((-0.02626)*x9933)));
evalcond[5]=((-0.21426)+(((-0.0718)*x9933))+(((-1.0)*py*x9943))+((x9936*x9937))+(((-1.0)*px*x9950))+(((-1.0)*cj6*r00*x9936))+((x9935*x9948))+(((-0.026255)*r10*x9942))+(((-0.02626)*x9934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9953=(cj5*cj6);
IkReal x9954=((1.0)*sj0);
IkReal x9955=((1.0)*r22);
IkReal x9956=(cj0*sj5);
IkReal x9957=(cj5*sj6);
IkReal x9958=((1.0)*cj0);
IkReal x9959=(cj6*r20);
IkReal x9960=((1.0)*sj5);
IkReal x9961=(r21*sj6);
IkReal x9962=(x9957*x9958);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x9957))+(((-1.0)*sj5*x9955))+((r21*x9953)));
evalcond[2]=(x9959+(((-1.0)*x9961)));
evalcond[3]=((((-1.0)*r20*sj6*x9960))+(((-1.0)*cj6*r21*x9960))+(((-1.0)*cj5*x9955)));
evalcond[4]=((((-1.0)*r01*x9953*x9958))+(((-1.0)*r10*x9954*x9957))+((r02*x9956))+((r12*sj0*sj5))+(((-1.0)*r00*x9962))+(((-1.0)*r11*x9953*x9954)));
evalcond[5]=(((r00*sj0*x9957))+((r01*sj0*x9953))+((r12*x9956))+(((-1.0)*r02*sj5*x9954))+(((-1.0)*r10*x9962))+(((-1.0)*r11*x9953*x9958)));
evalcond[6]=((-0.0001)+(((-0.026255)*x9961))+(((0.026255)*x9959))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9963=(cj0*cj6);
IkReal x9964=(cj6*sj0);
IkReal x9965=(cj0*sj6);
IkReal x9966=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r11*x9966))+((r10*x9964))+((r00*x9963))+(((-1.0)*r01*x9965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x9964))+(((-1.0)*r10*x9963))+(((-1.0)*r01*x9966))+((r11*x9965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x9966))+((r10*x9964))+((r00*x9963))+(((-1.0)*r01*x9965))))+IKsqr((((r00*x9964))+(((-1.0)*r10*x9963))+(((-1.0)*r01*x9966))+((r11*x9965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x9966))+((r10*x9964))+((r00*x9963))+(((-1.0)*r01*x9965))), (((r00*x9964))+(((-1.0)*r10*x9963))+(((-1.0)*r01*x9966))+((r11*x9965))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9967=IKsin(j4);
IkReal x9968=IKcos(j4);
IkReal x9969=(r11*sj6);
IkReal x9970=((0.026255)*cj0);
IkReal x9971=(r01*sj6);
IkReal x9972=(sj0*sj5);
IkReal x9973=(cj6*r11);
IkReal x9974=(r10*sj6);
IkReal x9975=(cj5*r12);
IkReal x9976=(cj6*sj0);
IkReal x9977=((1.0)*sj0);
IkReal x9978=(cj5*r02);
IkReal x9979=((1.0)*r10);
IkReal x9980=(cj0*sj5);
IkReal x9981=(r00*sj6);
IkReal x9982=((0.026255)*sj0);
IkReal x9983=(cj0*cj6);
IkReal x9984=((1.0)*cj0);
IkReal x9985=(cj6*r01);
IkReal x9986=((1.0)*x9968);
evalcond[0]=(((cj0*x9971))+((sj0*x9969))+x9967+(((-1.0)*r00*x9983))+(((-1.0)*x9976*x9979)));
evalcond[1]=((((-1.0)*x9971*x9977))+((cj0*x9969))+(((-1.0)*x9979*x9983))+((r00*x9976))+(((-1.0)*x9986)));
evalcond[2]=(((cj0*x9978))+((x9972*x9973))+((x9972*x9974))+((sj0*x9975))+(((-1.0)*x9986))+((x9980*x9981))+((x9980*x9985)));
evalcond[3]=(((cj0*x9975))+(((-1.0)*x9972*x9985))+(((-1.0)*x9972*x9981))+((x9974*x9980))+((x9973*x9980))+(((-1.0)*x9977*x9978))+(((-1.0)*x9967)));
evalcond[4]=((-0.1264)+((x9969*x9970))+(((0.0718)*x9967))+(((-1.0)*cj6*r10*x9970))+(((-0.02626)*x9968))+((px*sj0))+(((0.026255)*r00*x9976))+(((-1.0)*py*x9984))+(((-1.0)*x9971*x9982)));
evalcond[5]=((-0.01934)+(((0.02626)*x9967))+(((0.0718)*x9968))+(((-1.0)*px*x9984))+(((-1.0)*py*x9977))+((x9969*x9982))+(((-0.026255)*r10*x9976))+(((-1.0)*cj6*r00*x9970))+((x9970*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9987=((1.0)*cj6);
CheckValue<IkReal> x9988=IKPowWithIntegerCheck(sj3,-1);
if(!x9988.valid){
continue;
}
if( IKabs(((x9988.value)*((((r21*sj6))+(((-1.0)*r20*x9987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+(((-1.0)*cj0*r10*x9987))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9988.value)*((((r21*sj6))+(((-1.0)*r20*x9987))))))+IKsqr((((cj6*r00*sj0))+(((-1.0)*cj0*r10*x9987))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9988.value)*((((r21*sj6))+(((-1.0)*r20*x9987))))), (((cj6*r00*sj0))+(((-1.0)*cj0*r10*x9987))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9989=IKcos(j4);
IkReal x9990=IKsin(j4);
IkReal x9991=(r11*sj0);
IkReal x9992=((0.026255)*sj6);
IkReal x9993=(cj0*r01);
IkReal x9994=(cj6*sj5);
IkReal x9995=(r10*sj0);
IkReal x9996=(sj5*sj6);
IkReal x9997=(cj0*r11);
IkReal x9998=((1.0)*cj5);
IkReal x9999=((1.0)*cj6);
IkReal x10000=(cj0*r10);
IkReal x10001=((1.0)*sj0);
IkReal x10002=(cj0*r00);
IkReal x10003=(cj5*r12);
IkReal x10004=((0.026255)*cj6);
IkReal x10005=((1.0)*r21);
IkReal x10006=((1.0)*cj0);
IkReal x10007=((1.0)*x9990);
IkReal x10008=(sj3*x9990);
IkReal x10009=(cj6*r00*sj0);
IkReal x10010=((1.0)*x9989);
IkReal x10011=(cj3*x9989);
evalcond[0]=((((-1.0)*sj6*x10005))+x10008+((cj6*r20)));
evalcond[1]=((((-1.0)*sj3*x10010))+(((-1.0)*r22*x9998))+(((-1.0)*r20*x9996))+(((-1.0)*x10005*x9994)));
evalcond[2]=((((-1.0)*r01*sj6*x10001))+((sj6*x9997))+(((-1.0)*x10000*x9999))+x10009+(((-1.0)*x10010)));
evalcond[3]=((((-1.0)*cj3*x10007))+((sj6*x9993))+((sj6*x9991))+(((-1.0)*x9995*x9999))+(((-1.0)*x10002*x9999)));
evalcond[4]=((-0.0001)+(((0.0718)*sj3*x9989))+(((-1.0)*r21*x9992))+pz+(((0.02626)*x10008))+(((0.09746)*sj3))+((r20*x10004)));
evalcond[5]=(((cj0*cj5*r02))+((x10002*x9996))+((x9991*x9994))+x10011+((x9995*x9996))+((x9993*x9994))+((sj0*x10003)));
evalcond[6]=(((cj0*x10003))+(((-1.0)*r00*x10001*x9996))+(((-1.0)*r01*x10001*x9994))+((x10000*x9996))+(((-1.0)*r02*sj0*x9998))+((x9994*x9997))+(((-1.0)*x10007)));
evalcond[7]=((-0.1264)+((r00*sj0*x10004))+(((0.0718)*x9990))+(((-0.02626)*x9989))+(((-1.0)*r01*sj0*x9992))+((px*sj0))+((x9992*x9997))+(((-1.0)*py*x10006))+(((-1.0)*x10000*x10004)));
evalcond[8]=((-0.1168)+(((-1.0)*x10004*x9995))+(((-0.0718)*x10011))+(((-1.0)*x10002*x10004))+(((-0.02626)*cj3*x9990))+(((-1.0)*px*x10006))+((x9991*x9992))+(((-0.09746)*cj3))+((x9992*x9993))+(((-1.0)*py*x10001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10012=((1.0)*sj5);
CheckValue<IkReal> x10013=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x10013.valid){
continue;
}
CheckValue<IkReal> x10014 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x10012))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x10012))),IKFAST_ATAN2_MAGTHRESH);
if(!x10014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10013.value)))+(x10014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10015=IKcos(j4);
IkReal x10016=IKsin(j4);
IkReal x10017=(r11*sj0);
IkReal x10018=((0.026255)*sj6);
IkReal x10019=(cj0*r01);
IkReal x10020=(cj6*sj5);
IkReal x10021=(r10*sj0);
IkReal x10022=(sj5*sj6);
IkReal x10023=(cj0*r11);
IkReal x10024=((1.0)*cj5);
IkReal x10025=((1.0)*cj6);
IkReal x10026=(cj0*r10);
IkReal x10027=((1.0)*sj0);
IkReal x10028=(cj0*r00);
IkReal x10029=(cj5*r12);
IkReal x10030=((0.026255)*cj6);
IkReal x10031=((1.0)*r21);
IkReal x10032=((1.0)*cj0);
IkReal x10033=((1.0)*x10016);
IkReal x10034=(sj3*x10016);
IkReal x10035=(cj6*r00*sj0);
IkReal x10036=((1.0)*x10015);
IkReal x10037=(cj3*x10015);
evalcond[0]=(x10034+((cj6*r20))+(((-1.0)*sj6*x10031)));
evalcond[1]=((((-1.0)*r20*x10022))+(((-1.0)*r22*x10024))+(((-1.0)*x10020*x10031))+(((-1.0)*sj3*x10036)));
evalcond[2]=(((sj6*x10023))+(((-1.0)*r01*sj6*x10027))+(((-1.0)*x10025*x10026))+x10035+(((-1.0)*x10036)));
evalcond[3]=(((sj6*x10019))+((sj6*x10017))+(((-1.0)*x10025*x10028))+(((-1.0)*x10021*x10025))+(((-1.0)*cj3*x10033)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x10018))+(((0.0718)*sj3*x10015))+(((0.02626)*x10034))+((r20*x10030))+pz+(((0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x10029))+((x10021*x10022))+((x10017*x10020))+((x10019*x10020))+x10037+((x10022*x10028)));
evalcond[6]=(((cj0*x10029))+((x10020*x10023))+(((-1.0)*r02*sj0*x10024))+(((-1.0)*x10033))+((x10022*x10026))+(((-1.0)*r00*x10022*x10027))+(((-1.0)*r01*x10020*x10027)));
evalcond[7]=((-0.1264)+(((-1.0)*r01*sj0*x10018))+((x10018*x10023))+(((-0.02626)*x10015))+(((-1.0)*x10026*x10030))+((px*sj0))+(((0.0718)*x10016))+(((-1.0)*py*x10032))+((r00*sj0*x10030)));
evalcond[8]=((-0.1168)+((x10018*x10019))+(((-0.0718)*x10037))+(((-0.02626)*cj3*x10016))+(((-1.0)*x10028*x10030))+(((-0.09746)*cj3))+((x10017*x10018))+(((-1.0)*px*x10032))+(((-1.0)*x10021*x10030))+(((-1.0)*py*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10038=(cj0*sj5);
IkReal x10039=(cj5*cj6);
IkReal x10040=((1.0)*sj5);
IkReal x10041=((1.0)*cj0);
IkReal x10042=((1.0)*sj0);
IkReal x10043=(cj5*sj6);
IkReal x10044=(r10*x10043);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(cj3+((r21*x10039))+(((-1.0)*r22*x10040))+((r20*x10043)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r11*x10039*x10042))+(((-1.0)*x10042*x10044))+(((-1.0)*r00*x10041*x10043))+((r12*sj0*sj5))+(((-1.0)*r01*x10039*x10041))+((r02*x10038)));
evalcond[3]=(((r01*sj0*x10039))+(((-1.0)*x10041*x10044))+(((-1.0)*r11*x10039*x10041))+((r12*x10038))+((r00*sj0*x10043))+(((-1.0)*r02*sj0*x10040)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10045=(cj5*cj6);
IkReal x10046=((1.0)*sj0);
IkReal x10047=((1.0)*r22);
IkReal x10048=(cj0*sj5);
IkReal x10049=(cj5*sj6);
IkReal x10050=((1.0)*cj0);
IkReal x10051=(cj6*r20);
IkReal x10052=((1.0)*sj5);
IkReal x10053=(r21*sj6);
IkReal x10054=(x10049*x10050);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x10045))+((r20*x10049))+(((-1.0)*sj5*x10047)));
evalcond[2]=((((-1.0)*x10053))+x10051);
evalcond[3]=((((-1.0)*cj5*x10047))+(((-1.0)*r20*sj6*x10052))+(((-1.0)*cj6*r21*x10052)));
evalcond[4]=((((-1.0)*r10*x10046*x10049))+((r12*sj0*sj5))+(((-1.0)*r01*x10045*x10050))+(((-1.0)*r00*x10054))+(((-1.0)*r11*x10045*x10046))+((r02*x10048)));
evalcond[5]=((((-1.0)*r02*sj5*x10046))+((r12*x10048))+(((-1.0)*r10*x10054))+((r00*sj0*x10049))+((r01*sj0*x10045))+(((-1.0)*r11*x10045*x10050)));
evalcond[6]=((0.0001)+(((-0.026255)*x10053))+(((0.026255)*x10051))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10055=(sj0*sj6);
IkReal x10056=(cj6*r10);
IkReal x10057=((1.0)*sj0);
IkReal x10058=(cj6*r00);
IkReal x10059=(cj0*sj6);
if( IKabs((((r01*x10059))+(((-1.0)*x10056*x10057))+(((-1.0)*cj0*x10058))+((r11*x10055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x10059))+((r01*x10055))+(((-1.0)*x10057*x10058))+((cj0*x10056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x10059))+(((-1.0)*x10056*x10057))+(((-1.0)*cj0*x10058))+((r11*x10055))))+IKsqr(((((-1.0)*r11*x10059))+((r01*x10055))+(((-1.0)*x10057*x10058))+((cj0*x10056))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x10059))+(((-1.0)*x10056*x10057))+(((-1.0)*cj0*x10058))+((r11*x10055))), ((((-1.0)*r11*x10059))+((r01*x10055))+(((-1.0)*x10057*x10058))+((cj0*x10056))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10060=IKcos(j4);
IkReal x10061=IKsin(j4);
IkReal x10062=(r11*sj6);
IkReal x10063=((0.026255)*cj0);
IkReal x10064=(r01*sj6);
IkReal x10065=(sj0*sj5);
IkReal x10066=(cj6*r11);
IkReal x10067=(r10*sj6);
IkReal x10068=(cj5*r12);
IkReal x10069=(cj6*sj0);
IkReal x10070=((1.0)*sj0);
IkReal x10071=(cj5*r02);
IkReal x10072=((1.0)*r10);
IkReal x10073=(cj0*sj5);
IkReal x10074=(r00*sj6);
IkReal x10075=((0.026255)*sj0);
IkReal x10076=(cj0*cj6);
IkReal x10077=((1.0)*cj0);
IkReal x10078=(cj6*r01);
evalcond[0]=((((-1.0)*x10072*x10076))+(((-1.0)*x10064*x10070))+((r00*x10069))+x10060+((cj0*x10062)));
evalcond[1]=(((sj0*x10062))+((cj0*x10064))+(((-1.0)*r00*x10076))+(((-1.0)*x10069*x10072))+(((-1.0)*x10061)));
evalcond[2]=(((x10073*x10074))+((x10073*x10078))+((x10065*x10067))+((x10065*x10066))+((sj0*x10068))+x10060+((cj0*x10071)));
evalcond[3]=(((x10067*x10073))+((x10066*x10073))+x10061+((cj0*x10068))+(((-1.0)*x10070*x10071))+(((-1.0)*x10065*x10074))+(((-1.0)*x10065*x10078)));
evalcond[4]=((0.1264)+(((0.02626)*x10060))+(((-1.0)*x10064*x10075))+(((-1.0)*py*x10077))+(((0.026255)*r00*x10069))+(((-1.0)*cj6*r10*x10063))+((x10062*x10063))+(((-0.0718)*x10061))+((px*sj0)));
evalcond[5]=((-0.21426)+(((-0.02626)*x10061))+(((-1.0)*cj6*r00*x10063))+(((-1.0)*py*x10070))+((x10062*x10075))+(((-0.026255)*r10*x10069))+(((-0.0718)*x10060))+((x10063*x10064))+(((-1.0)*px*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10079=(cj5*cj6);
IkReal x10080=((1.0)*sj0);
IkReal x10081=((1.0)*r22);
IkReal x10082=(cj0*sj5);
IkReal x10083=(cj5*sj6);
IkReal x10084=((1.0)*cj0);
IkReal x10085=(cj6*r20);
IkReal x10086=((1.0)*sj5);
IkReal x10087=(r21*sj6);
IkReal x10088=(x10083*x10084);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x10083))+(((-1.0)*sj5*x10081))+((r21*x10079)));
evalcond[2]=(x10085+(((-1.0)*x10087)));
evalcond[3]=((((-1.0)*cj6*r21*x10086))+(((-1.0)*r20*sj6*x10086))+(((-1.0)*cj5*x10081)));
evalcond[4]=((((-1.0)*r10*x10080*x10083))+(((-1.0)*r11*x10079*x10080))+(((-1.0)*r01*x10079*x10084))+(((-1.0)*r00*x10088))+((r12*sj0*sj5))+((r02*x10082)));
evalcond[5]=((((-1.0)*r11*x10079*x10084))+((r00*sj0*x10083))+(((-1.0)*r10*x10088))+((r01*sj0*x10079))+(((-1.0)*r02*sj5*x10080))+((r12*x10082)));
evalcond[6]=((0.0001)+(((0.026255)*x10085))+(((-0.026255)*x10087))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10089=(cj0*cj6);
IkReal x10090=(sj0*sj6);
IkReal x10091=((1.0)*r11);
IkReal x10092=(cj6*sj0);
IkReal x10093=(cj0*sj6);
if( IKabs((((r00*x10089))+(((-1.0)*r01*x10093))+(((-1.0)*x10090*x10091))+((r10*x10092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x10092))+(((-1.0)*x10091*x10093))+((r10*x10089))+((r01*x10090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x10089))+(((-1.0)*r01*x10093))+(((-1.0)*x10090*x10091))+((r10*x10092))))+IKsqr(((((-1.0)*r00*x10092))+(((-1.0)*x10091*x10093))+((r10*x10089))+((r01*x10090))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x10089))+(((-1.0)*r01*x10093))+(((-1.0)*x10090*x10091))+((r10*x10092))), ((((-1.0)*r00*x10092))+(((-1.0)*x10091*x10093))+((r10*x10089))+((r01*x10090))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10094=IKcos(j4);
IkReal x10095=IKsin(j4);
IkReal x10096=(r11*sj6);
IkReal x10097=((0.026255)*cj0);
IkReal x10098=(r01*sj6);
IkReal x10099=(sj0*sj5);
IkReal x10100=(cj6*r11);
IkReal x10101=(r10*sj6);
IkReal x10102=(cj5*r12);
IkReal x10103=(cj6*sj0);
IkReal x10104=((1.0)*sj0);
IkReal x10105=(cj5*r02);
IkReal x10106=((1.0)*r10);
IkReal x10107=(cj0*sj5);
IkReal x10108=(r00*sj6);
IkReal x10109=((0.026255)*sj0);
IkReal x10110=(cj0*cj6);
IkReal x10111=((1.0)*cj0);
IkReal x10112=(cj6*r01);
evalcond[0]=((((-1.0)*x10103*x10106))+((cj0*x10098))+x10095+((sj0*x10096))+(((-1.0)*r00*x10110)));
evalcond[1]=(((r00*x10103))+(((-1.0)*x10106*x10110))+((cj0*x10096))+x10094+(((-1.0)*x10098*x10104)));
evalcond[2]=(((cj0*x10105))+((x10107*x10108))+((x10107*x10112))+((x10099*x10100))+((x10099*x10101))+((sj0*x10102))+(((-1.0)*x10094)));
evalcond[3]=(((x10101*x10107))+(((-1.0)*x10104*x10105))+((cj0*x10102))+(((-1.0)*x10099*x10108))+(((-1.0)*x10099*x10112))+x10095+((x10100*x10107)));
evalcond[4]=((0.1264)+(((-1.0)*py*x10111))+(((-1.0)*cj6*r10*x10097))+(((0.026255)*r00*x10103))+(((0.02626)*x10094))+((px*sj0))+((x10096*x10097))+(((-1.0)*x10098*x10109))+(((-0.0718)*x10095)));
evalcond[5]=((-0.01934)+(((-1.0)*py*x10104))+(((-1.0)*px*x10111))+(((-0.026255)*r10*x10103))+(((-1.0)*cj6*r00*x10097))+((x10096*x10109))+(((0.0718)*x10094))+(((0.02626)*x10095))+((x10097*x10098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10113=((1.0)*sj6);
CheckValue<IkReal> x10114=IKPowWithIntegerCheck(sj3,-1);
if(!x10114.valid){
continue;
}
if( IKabs(((x10114.value)*((((cj6*r20))+(((-1.0)*r21*x10113)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x10113))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10114.value)*((((cj6*r20))+(((-1.0)*r21*x10113))))))+IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x10113))+(((-1.0)*cj6*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10114.value)*((((cj6*r20))+(((-1.0)*r21*x10113))))), (((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*x10113))+(((-1.0)*cj6*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10115=IKcos(j4);
IkReal x10116=IKsin(j4);
IkReal x10117=(r11*sj0);
IkReal x10118=((0.026255)*sj6);
IkReal x10119=(cj0*r01);
IkReal x10120=(cj6*sj5);
IkReal x10121=(r10*sj0);
IkReal x10122=(sj5*sj6);
IkReal x10123=(cj0*r11);
IkReal x10124=((1.0)*cj5);
IkReal x10125=((1.0)*cj6);
IkReal x10126=(cj0*r10);
IkReal x10127=((1.0)*sj0);
IkReal x10128=(cj0*r00);
IkReal x10129=(cj5*r12);
IkReal x10130=((0.026255)*cj6);
IkReal x10131=((1.0)*r21);
IkReal x10132=((1.0)*cj0);
IkReal x10133=((1.0)*x10116);
IkReal x10134=((0.02626)*x10116);
IkReal x10135=(sj3*x10115);
IkReal x10136=(cj6*r00*sj0);
IkReal x10137=(cj3*x10115);
evalcond[0]=((((-1.0)*sj6*x10131))+((cj6*r20))+(((-1.0)*sj3*x10133)));
evalcond[1]=((((-1.0)*x10120*x10131))+(((-1.0)*r20*x10122))+x10135+(((-1.0)*r22*x10124)));
evalcond[2]=(x10136+x10115+(((-1.0)*x10125*x10126))+(((-1.0)*r01*sj6*x10127))+((sj6*x10123)));
evalcond[3]=((((-1.0)*x10121*x10125))+(((-1.0)*cj3*x10133))+((sj6*x10117))+((sj6*x10119))+(((-1.0)*x10125*x10128)));
evalcond[4]=((0.0001)+((r20*x10130))+(((-0.0718)*x10135))+pz+(((-1.0)*sj3*x10134))+(((-0.09746)*sj3))+(((-1.0)*r21*x10118)));
evalcond[5]=(((cj0*cj5*r02))+((x10119*x10120))+((x10122*x10128))+x10137+((x10117*x10120))+((x10121*x10122))+((sj0*x10129)));
evalcond[6]=(((x10122*x10126))+x10116+(((-1.0)*r00*x10122*x10127))+((x10120*x10123))+((cj0*x10129))+(((-1.0)*r01*x10120*x10127))+(((-1.0)*r02*sj0*x10124)));
evalcond[7]=((0.1264)+((r00*sj0*x10130))+((x10118*x10123))+(((-1.0)*r01*sj0*x10118))+(((0.02626)*x10115))+(((-1.0)*py*x10132))+(((-1.0)*x10126*x10130))+((px*sj0))+(((-0.0718)*x10116)));
evalcond[8]=((-0.1168)+(((-1.0)*x10121*x10130))+((x10117*x10118))+(((-0.0718)*x10137))+(((-1.0)*cj3*x10134))+(((-1.0)*x10128*x10130))+(((-1.0)*py*x10127))+(((-0.09746)*cj3))+((x10118*x10119))+(((-1.0)*px*x10132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10138=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x10138.valid){
continue;
}
CheckValue<IkReal> x10139 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x10139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10138.value)))+(x10139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10140=IKcos(j4);
IkReal x10141=IKsin(j4);
IkReal x10142=(r11*sj0);
IkReal x10143=((0.026255)*sj6);
IkReal x10144=(cj0*r01);
IkReal x10145=(cj6*sj5);
IkReal x10146=(r10*sj0);
IkReal x10147=(sj5*sj6);
IkReal x10148=(cj0*r11);
IkReal x10149=((1.0)*cj5);
IkReal x10150=((1.0)*cj6);
IkReal x10151=(cj0*r10);
IkReal x10152=((1.0)*sj0);
IkReal x10153=(cj0*r00);
IkReal x10154=(cj5*r12);
IkReal x10155=((0.026255)*cj6);
IkReal x10156=((1.0)*r21);
IkReal x10157=((1.0)*cj0);
IkReal x10158=((1.0)*x10141);
IkReal x10159=((0.02626)*x10141);
IkReal x10160=(sj3*x10140);
IkReal x10161=(cj6*r00*sj0);
IkReal x10162=(cj3*x10140);
evalcond[0]=((((-1.0)*sj6*x10156))+(((-1.0)*sj3*x10158))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x10147))+x10160+(((-1.0)*x10145*x10156))+(((-1.0)*r22*x10149)));
evalcond[2]=((((-1.0)*r01*sj6*x10152))+(((-1.0)*x10150*x10151))+x10161+x10140+((sj6*x10148)));
evalcond[3]=((((-1.0)*cj3*x10158))+(((-1.0)*x10150*x10153))+(((-1.0)*x10146*x10150))+((sj6*x10142))+((sj6*x10144)));
evalcond[4]=((0.0001)+(((-1.0)*sj3*x10159))+(((-0.0718)*x10160))+pz+(((-1.0)*r21*x10143))+(((-0.09746)*sj3))+((r20*x10155)));
evalcond[5]=(((cj0*cj5*r02))+((x10147*x10153))+((x10142*x10145))+x10162+((x10144*x10145))+((x10146*x10147))+((sj0*x10154)));
evalcond[6]=(((x10147*x10151))+x10141+(((-1.0)*r00*x10147*x10152))+(((-1.0)*r02*sj0*x10149))+((x10145*x10148))+((cj0*x10154))+(((-1.0)*r01*x10145*x10152)));
evalcond[7]=((0.1264)+((r00*sj0*x10155))+(((0.02626)*x10140))+(((-1.0)*py*x10157))+(((-1.0)*x10151*x10155))+((x10143*x10148))+((px*sj0))+(((-0.0718)*x10141))+(((-1.0)*r01*sj0*x10143)));
evalcond[8]=((-0.1168)+(((-1.0)*cj3*x10159))+(((-1.0)*x10153*x10155))+(((-1.0)*py*x10152))+((x10142*x10143))+((x10143*x10144))+(((-0.0718)*x10162))+(((-1.0)*px*x10157))+(((-0.09746)*cj3))+(((-1.0)*x10146*x10155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10163=(cj5*cj6);
IkReal x10164=(r11*sj0);
IkReal x10165=(cj0*sj6);
IkReal x10166=(cj6*sj5);
IkReal x10167=((1.0)*cj0);
IkReal x10168=(r10*sj0);
IkReal x10169=((1.0)*cj5);
IkReal x10170=(cj0*r02);
IkReal x10171=((1.0)*sj5);
IkReal x10172=(cj5*sj6);
IkReal x10173=(cj6*r00);
IkReal x10174=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x10171))+((r21*x10163))+((r20*x10172)));
evalcond[2]=((((-1.0)*cj6*x10168))+((sj6*x10164))+((r01*x10165))+(((-1.0)*x10167*x10173)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10165*x10169))+((sj5*x10170))+((sj5*x10174))+(((-1.0)*x10163*x10164))+(((-1.0)*sj6*x10168*x10169))+(((-1.0)*r01*x10163*x10167)));
evalcond[4]=(((sj5*sj6*x10168))+((x10164*x10166))+((cj0*r01*x10166))+((cj5*x10170))+((cj5*x10174))+((r00*sj5*x10165)));
evalcond[5]=((((-1.0)*r11*x10163*x10167))+((cj0*r12*sj5))+((r01*sj0*x10163))+(((-1.0)*r02*sj0*x10171))+((r00*sj0*x10172))+(((-1.0)*r10*x10165*x10169)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x10167))+(((0.026255)*r01*x10165))+(((-0.026255)*cj0*x10173))+(((0.026255)*sj6*x10164))+(((-0.026255)*cj6*x10168))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10175=(cj1*r20);
IkReal x10176=((1.0)*sj6);
IkReal x10177=(r20*sj1);
IkReal x10178=((1.0)*cj5*r22);
IkReal x10179=((1.0)*cj6*r21*sj5);
if( IKabs(((((-1.0)*cj1*x10178))+(((-1.0)*cj1*x10179))+(((-1.0)*cj6*x10177))+((r21*sj1*sj6))+(((-1.0)*sj5*x10175*x10176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x10176*x10177))+((cj6*x10175))+(((-1.0)*sj1*x10179))+(((-1.0)*sj1*x10178))+(((-1.0)*cj1*r21*x10176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x10178))+(((-1.0)*cj1*x10179))+(((-1.0)*cj6*x10177))+((r21*sj1*sj6))+(((-1.0)*sj5*x10175*x10176))))+IKsqr(((((-1.0)*sj5*x10176*x10177))+((cj6*x10175))+(((-1.0)*sj1*x10179))+(((-1.0)*sj1*x10178))+(((-1.0)*cj1*r21*x10176))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x10178))+(((-1.0)*cj1*x10179))+(((-1.0)*cj6*x10177))+((r21*sj1*sj6))+(((-1.0)*sj5*x10175*x10176))), ((((-1.0)*sj5*x10176*x10177))+((cj6*x10175))+(((-1.0)*sj1*x10179))+(((-1.0)*sj1*x10178))+(((-1.0)*cj1*r21*x10176))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10180=IKcos(j4);
IkReal x10181=IKsin(j4);
IkReal x10182=((1.0)*cj1);
IkReal x10183=((1.0)*cj5);
IkReal x10184=((0.02626)*cj1);
IkReal x10185=((1.0)*cj6);
IkReal x10186=(cj0*r10);
IkReal x10187=((0.026255)*cj6);
IkReal x10188=((1.0)*sj6);
IkReal x10189=(sj0*sj5);
IkReal x10190=(sj1*x10180);
IkReal x10191=(cj0*r11*sj6);
IkReal x10192=((0.0718)*x10181);
IkReal x10193=(sj1*x10181);
IkReal x10194=(cj6*r00*sj0);
IkReal x10195=(r01*sj0*sj6);
IkReal x10196=(cj1*x10180);
IkReal x10197=((1.0)*x10190);
IkReal x10198=(x10181*x10182);
IkReal x10199=(x10197+x10198);
evalcond[0]=((((-1.0)*r21*x10188))+x10193+((cj6*r20))+(((-1.0)*x10180*x10182)));
evalcond[1]=((((-1.0)*x10199))+(((-1.0)*r21*sj5*x10185))+(((-1.0)*r20*sj5*x10188))+(((-1.0)*r22*x10183)));
evalcond[2]=((((-1.0)*x10199))+x10194+x10191+(((-1.0)*x10185*x10186))+(((-1.0)*r01*sj0*x10188)));
evalcond[3]=((((0.02626)*x10193))+(((0.09736)*sj1))+((cj1*x10192))+(((-0.026255)*r21*sj6))+(((-0.1264)*cj1))+pz+(((0.0718)*x10190))+((r20*x10187))+(((-1.0)*x10180*x10184)));
evalcond[4]=((((-1.0)*r00*x10188*x10189))+((sj5*sj6*x10186))+((cj0*cj5*r12))+(((-1.0)*r01*x10185*x10189))+x10196+(((-1.0)*x10193))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x10183)));
evalcond[5]=(((sj1*x10192))+(((-0.1264)*sj1))+(((-0.09736)*cj1))+(((-0.0718)*x10196))+(((-1.0)*x10186*x10187))+(((0.026255)*x10191))+(((-0.026255)*x10195))+((px*sj0))+(((-1.0)*x10181*x10184))+(((-1.0)*cj0*py))+(((-0.02626)*x10190))+((r00*sj0*x10187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10200=(cj5*cj6);
IkReal x10201=(r11*sj0);
IkReal x10202=(cj0*sj6);
IkReal x10203=(cj6*sj5);
IkReal x10204=((1.0)*cj0);
IkReal x10205=(r10*sj0);
IkReal x10206=((1.0)*cj5);
IkReal x10207=(cj0*r02);
IkReal x10208=((1.0)*sj5);
IkReal x10209=(cj5*sj6);
IkReal x10210=(cj6*r00);
IkReal x10211=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x10208))+((r21*x10200))+((r20*x10209)));
evalcond[2]=(((sj6*x10201))+(((-1.0)*cj6*x10205))+((r01*x10202))+(((-1.0)*x10204*x10210)));
evalcond[3]=((1.0)+((sj5*x10207))+(((-1.0)*r00*x10202*x10206))+(((-1.0)*sj6*x10205*x10206))+((sj5*x10211))+(((-1.0)*r01*x10200*x10204))+(((-1.0)*x10200*x10201)));
evalcond[4]=(((r00*sj5*x10202))+((x10201*x10203))+((sj5*sj6*x10205))+((cj0*r01*x10203))+((cj5*x10207))+((cj5*x10211)));
evalcond[5]=((((-1.0)*r11*x10200*x10204))+(((-1.0)*r02*sj0*x10208))+((r00*sj0*x10209))+((cj0*r12*sj5))+((r01*sj0*x10200))+(((-1.0)*r10*x10202*x10206)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj0*x10210))+(((-1.0)*px*x10204))+(((0.026255)*sj6*x10201))+(((-0.026255)*cj6*x10205))+(((-1.0)*py*sj0))+(((0.026255)*r01*x10202)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10212=(sj1*sj6);
IkReal x10213=(r20*sj5);
IkReal x10214=(cj1*cj6);
IkReal x10215=((1.0)*r21);
IkReal x10216=(cj5*r22);
IkReal x10217=(cj1*sj6);
IkReal x10218=(cj6*sj1);
if( IKabs(((((-1.0)*x10212*x10215))+((r20*x10218))+(((-1.0)*cj1*x10216))+(((-1.0)*x10213*x10217))+(((-1.0)*sj5*x10214*x10215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x10216))+((r20*x10214))+((r21*sj5*x10218))+(((-1.0)*x10215*x10217))+((x10212*x10213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10212*x10215))+((r20*x10218))+(((-1.0)*cj1*x10216))+(((-1.0)*x10213*x10217))+(((-1.0)*sj5*x10214*x10215))))+IKsqr((((sj1*x10216))+((r20*x10214))+((r21*sj5*x10218))+(((-1.0)*x10215*x10217))+((x10212*x10213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x10212*x10215))+((r20*x10218))+(((-1.0)*cj1*x10216))+(((-1.0)*x10213*x10217))+(((-1.0)*sj5*x10214*x10215))), (((sj1*x10216))+((r20*x10214))+((r21*sj5*x10218))+(((-1.0)*x10215*x10217))+((x10212*x10213))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10219=IKcos(j4);
IkReal x10220=IKsin(j4);
IkReal x10221=((1.0)*cj1);
IkReal x10222=(cj0*sj6);
IkReal x10223=((1.0)*cj5);
IkReal x10224=((1.0)*cj6);
IkReal x10225=(cj0*r10);
IkReal x10226=((0.026255)*cj6);
IkReal x10227=((1.0)*sj6);
IkReal x10228=(sj0*sj5);
IkReal x10229=(sj1*x10219);
IkReal x10230=(cj1*x10220);
IkReal x10231=(sj1*x10220);
IkReal x10232=(cj6*r00*sj0);
IkReal x10233=(r01*sj0*sj6);
IkReal x10234=(cj1*x10219);
IkReal x10235=((1.0)*x10231);
IkReal x10236=(x10219*x10221);
IkReal x10237=(x10235+x10236);
evalcond[0]=((((-1.0)*r21*x10227))+((cj6*r20))+(((-1.0)*x10237)));
evalcond[1]=((((-1.0)*x10220*x10221))+(((-1.0)*r21*sj5*x10224))+(((-1.0)*r22*x10223))+x10229+(((-1.0)*r20*sj5*x10227)));
evalcond[2]=((((-1.0)*x10224*x10225))+(((-1.0)*r01*sj0*x10227))+x10230+x10232+(((-1.0)*x10229))+((r11*x10222)));
evalcond[3]=((((-0.02626)*x10231))+(((-0.02626)*x10234))+(((0.0718)*x10230))+(((-0.026255)*r21*sj6))+(((-0.0718)*x10229))+(((-0.1264)*cj1))+(((-0.09756)*sj1))+pz+((r20*x10226)));
evalcond[4]=(((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x10223))+(((-1.0)*x10237))+((r10*sj5*x10222))+(((-1.0)*r01*x10224*x10228))+(((-1.0)*r00*x10227*x10228)));
evalcond[5]=(((r00*sj0*x10226))+(((-0.1264)*sj1))+(((-0.026255)*x10233))+(((-0.02626)*x10229))+(((0.026255)*r11*x10222))+(((0.0718)*x10231))+(((0.0718)*x10234))+(((-1.0)*x10225*x10226))+(((0.09756)*cj1))+(((0.02626)*x10230))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10238=(cj0*sj5);
IkReal x10239=(cj5*cj6);
IkReal x10240=((1.0)*sj5);
IkReal x10241=((1.0)*cj0);
IkReal x10242=((1.0)*sj0);
IkReal x10243=(cj5*sj6);
IkReal x10244=(r10*x10243);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x10239))+(((-1.0)*r22*x10240))+((r20*x10243))+(((-1.0)*cj3)));
evalcond[2]=(sj3+(((-1.0)*r11*x10239*x10242))+((r02*x10238))+(((-1.0)*r00*x10241*x10243))+((r12*sj0*sj5))+(((-1.0)*r01*x10239*x10241))+(((-1.0)*x10242*x10244)));
evalcond[3]=((((-1.0)*x10241*x10244))+((r01*sj0*x10239))+(((-1.0)*r11*x10239*x10241))+(((-1.0)*r02*sj0*x10240))+((r12*x10238))+((r00*sj0*x10243)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x10245=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r21*x10245))+(((-1.0)*r20*sj6*x10245))+(((-1.0)*cj5*r22)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10246=(cj5*cj6);
IkReal x10247=(r11*sj0);
IkReal x10248=(cj0*sj6);
IkReal x10249=(cj6*sj5);
IkReal x10250=((1.0)*cj0);
IkReal x10251=(r10*sj0);
IkReal x10252=((1.0)*cj5);
IkReal x10253=(cj0*r02);
IkReal x10254=((1.0)*sj5);
IkReal x10255=(cj5*sj6);
IkReal x10256=(cj6*r00);
IkReal x10257=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x10246))+(((-1.0)*r22*x10254))+((r20*x10255)));
evalcond[2]=((((-1.0)*cj6*x10251))+((sj6*x10247))+(((-1.0)*x10250*x10256))+((r01*x10248)));
evalcond[3]=((1.0)+(((-1.0)*sj6*x10251*x10252))+((sj5*x10253))+((sj5*x10257))+(((-1.0)*x10246*x10247))+(((-1.0)*r01*x10246*x10250))+(((-1.0)*r00*x10248*x10252)));
evalcond[4]=(((cj5*x10253))+((cj5*x10257))+((sj5*sj6*x10251))+((cj0*r01*x10249))+((r00*sj5*x10248))+((x10247*x10249)));
evalcond[5]=(((r00*sj0*x10255))+((r01*sj0*x10246))+(((-1.0)*r10*x10248*x10252))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x10254))+(((-1.0)*r11*x10246*x10250)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x10256))+(((-0.026255)*cj6*x10251))+(((-1.0)*px*x10250))+(((0.026255)*sj6*x10247))+(((0.026255)*r01*x10248))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10258=(cj6*r20);
IkReal x10259=(r21*sj6);
if( IKabs((x10259+(((-1.0)*x10258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-6.96378830083565e-5)*x10259))+(((6.96378830083565e-5)*x10258))+(((-13.9275766016713)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10259+(((-1.0)*x10258))))+IKsqr(((-1.35598885793872)+(((-6.96378830083565e-5)*x10259))+(((6.96378830083565e-5)*x10258))+(((-13.9275766016713)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10259+(((-1.0)*x10258))), ((-1.35598885793872)+(((-6.96378830083565e-5)*x10259))+(((6.96378830083565e-5)*x10258))+(((-13.9275766016713)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10260=IKcos(j4);
IkReal x10261=IKsin(j4);
IkReal x10262=((1.0)*cj5);
IkReal x10263=(cj0*r10);
IkReal x10264=(sj5*sj6);
IkReal x10265=((1.0)*cj6);
IkReal x10266=((0.026255)*cj6);
IkReal x10267=(r21*sj6);
IkReal x10268=(cj0*r11*sj6);
IkReal x10269=(cj6*r00*sj0);
IkReal x10270=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10267))+((cj6*r20))+x10261);
evalcond[1]=((((-1.0)*r22*x10262))+(((-1.0)*x10260))+(((-1.0)*r20*x10264))+(((-1.0)*r21*sj5*x10265)));
evalcond[2]=((0.09736)+(((0.02626)*x10261))+(((-0.026255)*x10267))+(((0.0718)*x10260))+pz+((r20*x10266)));
evalcond[3]=((((-1.0)*x10263*x10265))+x10260+x10268+x10269+(((-1.0)*x10270)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r02*sj0*x10262))+((x10263*x10264))+(((-1.0)*r01*sj0*sj5*x10265))+((cj0*cj6*r11*sj5))+x10261+(((-1.0)*r00*sj0*x10264)));
evalcond[5]=((-0.1246)+(((-0.026255)*x10270))+(((0.02626)*x10260))+(((-1.0)*x10263*x10266))+((r00*sj0*x10266))+(((0.026255)*x10268))+((px*sj0))+(((-0.0718)*x10261))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10271=(cj5*cj6);
IkReal x10272=(r11*sj0);
IkReal x10273=(cj0*sj6);
IkReal x10274=(cj6*sj5);
IkReal x10275=((1.0)*cj0);
IkReal x10276=(r10*sj0);
IkReal x10277=((1.0)*cj5);
IkReal x10278=(cj0*r02);
IkReal x10279=((1.0)*sj5);
IkReal x10280=(cj5*sj6);
IkReal x10281=(cj6*r00);
IkReal x10282=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x10280))+(((-1.0)*r22*x10279))+((r21*x10271)));
evalcond[2]=((((-1.0)*x10275*x10281))+((r01*x10273))+((sj6*x10272))+(((-1.0)*cj6*x10276)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x10276*x10277))+(((-1.0)*r01*x10271*x10275))+(((-1.0)*r00*x10273*x10277))+(((-1.0)*x10271*x10272))+((sj5*x10278))+((sj5*x10282)));
evalcond[4]=(((cj0*r01*x10274))+((sj5*sj6*x10276))+((r00*sj5*x10273))+((cj5*x10278))+((cj5*x10282))+((x10272*x10274)));
evalcond[5]=((((-1.0)*r10*x10273*x10277))+(((-1.0)*r11*x10271*x10275))+((r00*sj0*x10280))+((cj0*r12*sj5))+((r01*sj0*x10271))+(((-1.0)*r02*sj0*x10279)));
evalcond[6]=((0.1148)+(((-1.0)*px*x10275))+(((0.026255)*r01*x10273))+(((0.026255)*sj6*x10272))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x10276))+(((-0.026255)*cj0*x10281)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10283=IKcos(j4);
IkReal x10284=IKsin(j4);
IkReal x10285=((1.0)*cj5);
IkReal x10286=(cj0*r10);
IkReal x10287=(sj5*sj6);
IkReal x10288=((1.0)*cj6);
IkReal x10289=((0.026255)*cj6);
IkReal x10290=(r21*sj6);
IkReal x10291=(cj0*r11*sj6);
IkReal x10292=(cj6*r00*sj0);
IkReal x10293=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10290))+((cj6*r20))+(((-1.0)*x10284)));
evalcond[1]=((((-1.0)*r20*x10287))+(((-1.0)*r21*sj5*x10288))+(((-1.0)*r22*x10285))+x10283);
evalcond[2]=((-0.09756)+((r20*x10289))+(((-0.02626)*x10284))+(((-0.026255)*x10290))+pz+(((-0.0718)*x10283)));
evalcond[3]=((((-1.0)*x10293))+x10292+x10291+x10283+(((-1.0)*x10286*x10288)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*x10287))+(((-1.0)*r02*sj0*x10285))+((cj0*cj6*r11*sj5))+x10284+(((-1.0)*r01*sj0*sj5*x10288))+((x10286*x10287)));
evalcond[5]=((-0.1246)+(((0.02626)*x10283))+((r00*sj0*x10289))+(((-0.026255)*x10293))+(((0.026255)*x10291))+(((-0.0718)*x10284))+((px*sj0))+(((-1.0)*cj0*py))+(((-1.0)*x10286*x10289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10294=(cj5*cj6);
IkReal x10295=((1.0)*sj0);
IkReal x10296=((1.0)*r22);
IkReal x10297=(cj0*sj5);
IkReal x10298=(cj5*sj6);
IkReal x10299=((1.0)*cj0);
IkReal x10300=(cj6*r20);
IkReal x10301=((1.0)*sj5);
IkReal x10302=(r21*sj6);
IkReal x10303=(x10298*x10299);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x10298))+((r21*x10294))+(((-1.0)*sj5*x10296)));
evalcond[2]=((((-1.0)*x10302))+x10300);
evalcond[3]=((((-1.0)*cj6*r21*x10301))+(((-1.0)*cj5*x10296))+(((-1.0)*r20*sj6*x10301)));
evalcond[4]=(((r12*sj0*sj5))+(((-1.0)*r10*x10295*x10298))+(((-1.0)*r00*x10303))+((r02*x10297))+(((-1.0)*r01*x10294*x10299))+(((-1.0)*r11*x10294*x10295)));
evalcond[5]=(((r00*sj0*x10298))+(((-1.0)*r10*x10303))+(((-1.0)*r02*sj5*x10295))+((r12*x10297))+((r01*sj0*x10294))+(((-1.0)*r11*x10294*x10299)));
evalcond[6]=((-0.0001)+(((0.026255)*x10300))+(((-0.026255)*x10302))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10304=(cj0*cj6);
IkReal x10305=(sj0*sj6);
IkReal x10306=((1.0)*r11);
IkReal x10307=(cj6*sj0);
IkReal x10308=(cj0*sj6);
if( IKabs((((r10*x10307))+(((-1.0)*x10305*x10306))+((r00*x10304))+(((-1.0)*r01*x10308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x10304))+((r01*x10305))+(((-1.0)*r00*x10307))+(((-1.0)*x10306*x10308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x10307))+(((-1.0)*x10305*x10306))+((r00*x10304))+(((-1.0)*r01*x10308))))+IKsqr((((r10*x10304))+((r01*x10305))+(((-1.0)*r00*x10307))+(((-1.0)*x10306*x10308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x10307))+(((-1.0)*x10305*x10306))+((r00*x10304))+(((-1.0)*r01*x10308))), (((r10*x10304))+((r01*x10305))+(((-1.0)*r00*x10307))+(((-1.0)*x10306*x10308))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10309=IKcos(j4);
IkReal x10310=IKsin(j4);
IkReal x10311=(r11*sj6);
IkReal x10312=((0.026255)*cj0);
IkReal x10313=(r01*sj6);
IkReal x10314=(sj0*sj5);
IkReal x10315=(cj6*r11);
IkReal x10316=(r10*sj6);
IkReal x10317=(cj5*r12);
IkReal x10318=(cj6*sj0);
IkReal x10319=((1.0)*sj0);
IkReal x10320=(cj5*r02);
IkReal x10321=((1.0)*r10);
IkReal x10322=(cj0*sj5);
IkReal x10323=(r00*sj6);
IkReal x10324=((0.026255)*sj0);
IkReal x10325=(cj0*cj6);
IkReal x10326=((1.0)*cj0);
IkReal x10327=(cj6*r01);
evalcond[0]=(((sj0*x10311))+(((-1.0)*x10318*x10321))+(((-1.0)*r00*x10325))+x10310+((cj0*x10313)));
evalcond[1]=((((-1.0)*x10321*x10325))+(((-1.0)*x10313*x10319))+x10309+((cj0*x10311))+((r00*x10318)));
evalcond[2]=(((sj0*x10317))+((x10322*x10327))+((x10322*x10323))+((cj0*x10320))+(((-1.0)*x10309))+((x10314*x10316))+((x10314*x10315)));
evalcond[3]=(((x10316*x10322))+(((-1.0)*x10319*x10320))+x10310+(((-1.0)*x10314*x10323))+(((-1.0)*x10314*x10327))+((cj0*x10317))+((x10315*x10322)));
evalcond[4]=((-0.1246)+(((-1.0)*cj6*r10*x10312))+(((0.026255)*r00*x10318))+(((-0.0718)*x10310))+((x10311*x10312))+(((0.02626)*x10309))+((px*sj0))+(((-1.0)*py*x10326))+(((-1.0)*x10313*x10324)));
evalcond[5]=((0.21226)+(((-1.0)*px*x10326))+(((-1.0)*py*x10319))+((x10311*x10324))+(((0.02626)*x10310))+((x10312*x10313))+(((-1.0)*cj6*r00*x10312))+(((0.0718)*x10309))+(((-0.026255)*r10*x10318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10328=(cj5*cj6);
IkReal x10329=((1.0)*sj0);
IkReal x10330=((1.0)*r22);
IkReal x10331=(cj0*sj5);
IkReal x10332=(cj5*sj6);
IkReal x10333=((1.0)*cj0);
IkReal x10334=(cj6*r20);
IkReal x10335=((1.0)*sj5);
IkReal x10336=(r21*sj6);
IkReal x10337=(x10332*x10333);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x10330))+((r20*x10332))+((r21*x10328)));
evalcond[2]=((((-1.0)*x10336))+x10334);
evalcond[3]=((((-1.0)*cj6*r21*x10335))+(((-1.0)*cj5*x10330))+(((-1.0)*r20*sj6*x10335)));
evalcond[4]=(((r02*x10331))+((r12*sj0*sj5))+(((-1.0)*r00*x10337))+(((-1.0)*r10*x10329*x10332))+(((-1.0)*r01*x10328*x10333))+(((-1.0)*r11*x10328*x10329)));
evalcond[5]=((((-1.0)*r11*x10328*x10333))+((r01*sj0*x10328))+(((-1.0)*r02*sj5*x10329))+((r12*x10331))+((r00*sj0*x10332))+(((-1.0)*r10*x10337)));
evalcond[6]=((-0.0001)+(((0.026255)*x10334))+pz+(((-0.026255)*x10336)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10338=(sj0*sj6);
IkReal x10339=(cj6*r10);
IkReal x10340=((1.0)*sj0);
IkReal x10341=(cj6*r00);
IkReal x10342=(cj0*sj6);
if( IKabs(((((-1.0)*x10339*x10340))+((r01*x10342))+((r11*x10338))+(((-1.0)*cj0*x10341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10340*x10341))+((cj0*x10339))+((r01*x10338))+(((-1.0)*r11*x10342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10339*x10340))+((r01*x10342))+((r11*x10338))+(((-1.0)*cj0*x10341))))+IKsqr(((((-1.0)*x10340*x10341))+((cj0*x10339))+((r01*x10338))+(((-1.0)*r11*x10342))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x10339*x10340))+((r01*x10342))+((r11*x10338))+(((-1.0)*cj0*x10341))), ((((-1.0)*x10340*x10341))+((cj0*x10339))+((r01*x10338))+(((-1.0)*r11*x10342))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10343=IKcos(j4);
IkReal x10344=IKsin(j4);
IkReal x10345=(r11*sj6);
IkReal x10346=((0.026255)*cj0);
IkReal x10347=(r01*sj6);
IkReal x10348=(sj0*sj5);
IkReal x10349=(cj6*r11);
IkReal x10350=(r10*sj6);
IkReal x10351=(cj5*r12);
IkReal x10352=(cj6*sj0);
IkReal x10353=((1.0)*sj0);
IkReal x10354=(cj5*r02);
IkReal x10355=((1.0)*r10);
IkReal x10356=(cj0*sj5);
IkReal x10357=(r00*sj6);
IkReal x10358=((0.026255)*sj0);
IkReal x10359=(cj0*cj6);
IkReal x10360=((1.0)*cj0);
IkReal x10361=(cj6*r01);
evalcond[0]=(((r00*x10352))+(((-1.0)*x10355*x10359))+x10343+((cj0*x10345))+(((-1.0)*x10347*x10353)));
evalcond[1]=(((sj0*x10345))+(((-1.0)*x10352*x10355))+(((-1.0)*r00*x10359))+(((-1.0)*x10344))+((cj0*x10347)));
evalcond[2]=(((cj0*x10354))+((x10348*x10350))+((x10356*x10361))+x10343+((sj0*x10351))+((x10356*x10357))+((x10348*x10349)));
evalcond[3]=(((cj0*x10351))+((x10350*x10356))+((x10349*x10356))+x10344+(((-1.0)*x10348*x10361))+(((-1.0)*x10353*x10354))+(((-1.0)*x10348*x10357)));
evalcond[4]=((-0.1246)+(((-0.0718)*x10344))+((x10345*x10346))+(((0.02626)*x10343))+(((-1.0)*py*x10360))+((px*sj0))+(((0.026255)*r00*x10352))+(((-1.0)*cj6*r10*x10346))+(((-1.0)*x10347*x10358)));
evalcond[5]=((0.01734)+(((-0.0718)*x10343))+(((-1.0)*px*x10360))+(((-0.026255)*r10*x10352))+((x10345*x10358))+((x10346*x10347))+(((-0.02626)*x10344))+(((-1.0)*cj6*r00*x10346))+(((-1.0)*py*x10353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10362=((1.0)*sj5);
IkReal x10363=((1.0)*sj6);
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(cj3,-1);
if(!x10364.valid){
continue;
}
CheckValue<IkReal> x10365=IKPowWithIntegerCheck(sj3,-1);
if(!x10365.valid){
continue;
}
if( IKabs(((x10364.value)*(((((-1.0)*cj0*r01*x10363))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10363))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10365.value)*(((((-1.0)*r20*sj6*x10362))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x10362)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10364.value)*(((((-1.0)*cj0*r01*x10363))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10363))+((cj0*cj6*r00))))))+IKsqr(((x10365.value)*(((((-1.0)*r20*sj6*x10362))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x10362))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10364.value)*(((((-1.0)*cj0*r01*x10363))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10363))+((cj0*cj6*r00))))), ((x10365.value)*(((((-1.0)*r20*sj6*x10362))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x10362))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10366=IKcos(j4);
IkReal x10367=IKsin(j4);
IkReal x10368=(r11*sj0);
IkReal x10369=((0.026255)*sj6);
IkReal x10370=(cj0*r01);
IkReal x10371=(cj5*r12);
IkReal x10372=(cj6*sj5);
IkReal x10373=(r10*sj0);
IkReal x10374=(sj5*sj6);
IkReal x10375=(cj0*r11);
IkReal x10376=((1.0)*cj5);
IkReal x10377=((1.0)*cj6);
IkReal x10378=(cj0*r10);
IkReal x10379=((1.0)*sj0);
IkReal x10380=(cj0*r00);
IkReal x10381=((0.026255)*cj6);
IkReal x10382=((1.0)*r21);
IkReal x10383=((1.0)*cj0);
IkReal x10384=(sj3*x10367);
IkReal x10385=(r00*x10381);
IkReal x10386=((1.0)*x10366);
IkReal x10387=(cj3*x10367);
IkReal x10388=((0.0718)*x10366);
evalcond[0]=((((-1.0)*sj6*x10382))+x10384+((cj6*r20)));
evalcond[1]=((((-1.0)*x10372*x10382))+(((-1.0)*r20*x10374))+(((-1.0)*sj3*x10386))+(((-1.0)*r22*x10376)));
evalcond[2]=(((sj6*x10375))+(((-1.0)*x10377*x10378))+((cj6*r00*sj0))+x10366+(((-1.0)*r01*sj6*x10379)));
evalcond[3]=(((sj6*x10370))+((sj6*x10368))+(((-1.0)*x10377*x10380))+x10387+(((-1.0)*x10373*x10377)));
evalcond[4]=((-0.0001)+(((0.02626)*x10384))+pz+((sj3*x10388))+(((-1.0)*r21*x10369))+(((0.09746)*sj3))+((r20*x10381)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x10371))+((x10368*x10372))+((x10373*x10374))+(((-1.0)*cj3*x10386))+((x10370*x10372))+((x10374*x10380)));
evalcond[6]=((((-1.0)*r01*x10372*x10379))+x10367+((x10372*x10375))+(((-1.0)*r02*sj0*x10376))+((cj0*x10371))+(((-1.0)*r00*x10374*x10379))+((x10374*x10378)));
evalcond[7]=((-0.1246)+(((0.02626)*x10366))+(((-1.0)*py*x10383))+(((-0.0718)*x10367))+(((-1.0)*x10378*x10381))+((px*sj0))+(((-1.0)*r01*sj0*x10369))+((x10369*x10375))+((sj0*x10385)));
evalcond[8]=((0.1148)+((cj3*x10388))+(((0.02626)*x10387))+((x10368*x10369))+(((-1.0)*py*x10379))+(((-1.0)*x10380*x10381))+(((-1.0)*x10373*x10381))+(((-1.0)*px*x10383))+(((0.09746)*cj3))+((x10369*x10370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10389=((1.0)*cj6);
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(sj3,-1);
if(!x10390.valid){
continue;
}
if( IKabs(((x10390.value)*((((r21*sj6))+(((-1.0)*r20*x10389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0*sj6))+(((-1.0)*r00*sj0*x10389))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10390.value)*((((r21*sj6))+(((-1.0)*r20*x10389))))))+IKsqr((((r01*sj0*sj6))+(((-1.0)*r00*sj0*x10389))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10390.value)*((((r21*sj6))+(((-1.0)*r20*x10389))))), (((r01*sj0*sj6))+(((-1.0)*r00*sj0*x10389))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10391=IKcos(j4);
IkReal x10392=IKsin(j4);
IkReal x10393=(r11*sj0);
IkReal x10394=((0.026255)*sj6);
IkReal x10395=(cj0*r01);
IkReal x10396=(cj5*r12);
IkReal x10397=(cj6*sj5);
IkReal x10398=(r10*sj0);
IkReal x10399=(sj5*sj6);
IkReal x10400=(cj0*r11);
IkReal x10401=((1.0)*cj5);
IkReal x10402=((1.0)*cj6);
IkReal x10403=(cj0*r10);
IkReal x10404=((1.0)*sj0);
IkReal x10405=(cj0*r00);
IkReal x10406=((0.026255)*cj6);
IkReal x10407=((1.0)*r21);
IkReal x10408=((1.0)*cj0);
IkReal x10409=(sj3*x10392);
IkReal x10410=(r00*x10406);
IkReal x10411=((1.0)*x10391);
IkReal x10412=(cj3*x10392);
IkReal x10413=((0.0718)*x10391);
evalcond[0]=((((-1.0)*sj6*x10407))+((cj6*r20))+x10409);
evalcond[1]=((((-1.0)*x10397*x10407))+(((-1.0)*sj3*x10411))+(((-1.0)*r22*x10401))+(((-1.0)*r20*x10399)));
evalcond[2]=((((-1.0)*x10402*x10403))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x10404))+x10391+((sj6*x10400)));
evalcond[3]=((((-1.0)*x10402*x10405))+(((-1.0)*x10398*x10402))+x10412+((sj6*x10395))+((sj6*x10393)));
evalcond[4]=((-0.0001)+((sj3*x10413))+(((-1.0)*r21*x10394))+(((0.02626)*x10409))+pz+((r20*x10406))+(((0.09746)*sj3)));
evalcond[5]=(((sj0*x10396))+((cj0*cj5*r02))+((x10395*x10397))+((x10399*x10405))+((x10393*x10397))+((x10398*x10399))+(((-1.0)*cj3*x10411)));
evalcond[6]=(((x10399*x10403))+(((-1.0)*r00*x10399*x10404))+(((-1.0)*r02*sj0*x10401))+x10392+((x10397*x10400))+(((-1.0)*r01*x10397*x10404))+((cj0*x10396)));
evalcond[7]=((-0.1246)+(((-1.0)*r01*sj0*x10394))+(((0.02626)*x10391))+(((-1.0)*py*x10408))+(((-0.0718)*x10392))+((x10394*x10400))+((px*sj0))+((sj0*x10410))+(((-1.0)*x10403*x10406)));
evalcond[8]=((0.1148)+(((-1.0)*py*x10404))+((cj3*x10413))+((x10393*x10394))+((x10394*x10395))+(((-1.0)*x10405*x10406))+(((-1.0)*x10398*x10406))+(((0.02626)*x10412))+(((0.09746)*cj3))+(((-1.0)*px*x10408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10414=((1.0)*sj5);
CheckValue<IkReal> x10415 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x10414))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x10414))),IKFAST_ATAN2_MAGTHRESH);
if(!x10415.valid){
continue;
}
CheckValue<IkReal> x10416=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x10416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10415.value)+(((1.5707963267949)*(x10416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10417=IKcos(j4);
IkReal x10418=IKsin(j4);
IkReal x10419=(r11*sj0);
IkReal x10420=((0.026255)*sj6);
IkReal x10421=(cj0*r01);
IkReal x10422=(cj5*r12);
IkReal x10423=(cj6*sj5);
IkReal x10424=(r10*sj0);
IkReal x10425=(sj5*sj6);
IkReal x10426=(cj0*r11);
IkReal x10427=((1.0)*cj5);
IkReal x10428=((1.0)*cj6);
IkReal x10429=(cj0*r10);
IkReal x10430=((1.0)*sj0);
IkReal x10431=(cj0*r00);
IkReal x10432=((0.026255)*cj6);
IkReal x10433=((1.0)*r21);
IkReal x10434=((1.0)*cj0);
IkReal x10435=(sj3*x10418);
IkReal x10436=(r00*x10432);
IkReal x10437=((1.0)*x10417);
IkReal x10438=(cj3*x10418);
IkReal x10439=((0.0718)*x10417);
evalcond[0]=((((-1.0)*sj6*x10433))+((cj6*r20))+x10435);
evalcond[1]=((((-1.0)*x10423*x10433))+(((-1.0)*r20*x10425))+(((-1.0)*sj3*x10437))+(((-1.0)*r22*x10427)));
evalcond[2]=((((-1.0)*x10428*x10429))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x10430))+x10417+((sj6*x10426)));
evalcond[3]=((((-1.0)*x10428*x10431))+x10438+((sj6*x10419))+((sj6*x10421))+(((-1.0)*x10424*x10428)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x10420))+((sj3*x10439))+pz+(((0.09746)*sj3))+(((0.02626)*x10435))+((r20*x10432)));
evalcond[5]=(((x10425*x10431))+(((-1.0)*cj3*x10437))+((cj0*cj5*r02))+((x10421*x10423))+((x10419*x10423))+((sj0*x10422))+((x10424*x10425)));
evalcond[6]=(((cj0*x10422))+((x10425*x10429))+((x10423*x10426))+(((-1.0)*r02*sj0*x10427))+x10418+(((-1.0)*r01*x10423*x10430))+(((-1.0)*r00*x10425*x10430)));
evalcond[7]=((-0.1246)+((x10420*x10426))+(((-0.0718)*x10418))+(((-1.0)*py*x10434))+(((-1.0)*r01*sj0*x10420))+((sj0*x10436))+(((0.02626)*x10417))+((px*sj0))+(((-1.0)*x10429*x10432)));
evalcond[8]=((0.1148)+(((-1.0)*px*x10434))+((x10420*x10421))+(((-1.0)*x10431*x10432))+((cj3*x10439))+(((-1.0)*py*x10430))+((x10419*x10420))+(((0.09746)*cj3))+(((0.02626)*x10438))+(((-1.0)*x10424*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10440=(cj0*sj5);
IkReal x10441=(cj5*cj6);
IkReal x10442=((1.0)*sj5);
IkReal x10443=((1.0)*cj0);
IkReal x10444=((1.0)*sj0);
IkReal x10445=(cj5*sj6);
IkReal x10446=(r10*x10445);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(cj3+((r20*x10445))+((r21*x10441))+(((-1.0)*r22*x10442)));
evalcond[2]=((((-1.0)*r01*x10441*x10443))+sj3+(((-1.0)*r11*x10441*x10444))+(((-1.0)*r00*x10443*x10445))+((r12*sj0*sj5))+((r02*x10440))+(((-1.0)*x10444*x10446)));
evalcond[3]=(((r00*sj0*x10445))+(((-1.0)*r02*sj0*x10442))+(((-1.0)*r11*x10441*x10443))+((r01*sj0*x10441))+((r12*x10440))+(((-1.0)*x10443*x10446)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10447=(cj5*cj6);
IkReal x10448=(r11*sj0);
IkReal x10449=(cj0*sj6);
IkReal x10450=(cj6*sj5);
IkReal x10451=((1.0)*cj0);
IkReal x10452=(r10*sj0);
IkReal x10453=((1.0)*cj5);
IkReal x10454=(cj0*r02);
IkReal x10455=((1.0)*sj5);
IkReal x10456=(cj5*sj6);
IkReal x10457=(cj6*r00);
IkReal x10458=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x10455))+((r21*x10447))+((r20*x10456)));
evalcond[2]=((((-1.0)*cj6*x10452))+((sj6*x10448))+(((-1.0)*x10451*x10457))+((r01*x10449)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10447*x10451))+(((-1.0)*r00*x10449*x10453))+(((-1.0)*x10447*x10448))+((sj5*x10458))+((sj5*x10454))+(((-1.0)*sj6*x10452*x10453)));
evalcond[4]=(((cj0*r01*x10450))+((r00*sj5*x10449))+((cj5*x10458))+((cj5*x10454))+((x10448*x10450))+((sj5*sj6*x10452)));
evalcond[5]=(((r01*sj0*x10447))+((cj0*r12*sj5))+(((-1.0)*r10*x10449*x10453))+(((-1.0)*r02*sj0*x10455))+(((-1.0)*r11*x10447*x10451))+((r00*sj0*x10456)));
evalcond[6]=((0.1148)+(((0.026255)*sj6*x10448))+(((-0.026255)*cj0*x10457))+(((-0.026255)*cj6*x10452))+(((-1.0)*px*x10451))+(((0.026255)*r01*x10449))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10459=IKcos(j4);
IkReal x10460=IKsin(j4);
IkReal x10461=((1.0)*cj5);
IkReal x10462=(cj0*r10);
IkReal x10463=(sj5*sj6);
IkReal x10464=((1.0)*cj6);
IkReal x10465=((0.026255)*cj6);
IkReal x10466=(r21*sj6);
IkReal x10467=((1.0)*x10460);
IkReal x10468=(cj0*r11*sj6);
IkReal x10469=(cj6*r00*sj0);
IkReal x10470=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10466))+((cj6*r20))+(((-1.0)*x10467)));
evalcond[1]=((((-1.0)*r20*x10463))+(((-1.0)*r21*sj5*x10464))+(((-1.0)*r22*x10461))+x10459);
evalcond[2]=((-0.09736)+((r20*x10465))+pz+(((-0.026255)*x10466))+(((-0.02626)*x10460))+(((-0.0718)*x10459)));
evalcond[3]=((((-1.0)*x10470))+(((-1.0)*x10459))+(((-1.0)*x10462*x10464))+x10468+x10469);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*x10463))+((cj0*cj6*r11*sj5))+((x10462*x10463))+(((-1.0)*r02*sj0*x10461))+(((-1.0)*r01*sj0*sj5*x10464))+(((-1.0)*x10467)));
evalcond[5]=((0.1246)+(((-0.02626)*x10459))+(((0.026255)*x10468))+(((-1.0)*x10462*x10465))+((r00*sj0*x10465))+(((-0.026255)*x10470))+((px*sj0))+(((0.0718)*x10460))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10471=(cj5*cj6);
IkReal x10472=(r11*sj0);
IkReal x10473=(cj0*sj6);
IkReal x10474=(cj6*sj5);
IkReal x10475=((1.0)*cj0);
IkReal x10476=(r10*sj0);
IkReal x10477=((1.0)*cj5);
IkReal x10478=(cj0*r02);
IkReal x10479=((1.0)*sj5);
IkReal x10480=(cj5*sj6);
IkReal x10481=(cj6*r00);
IkReal x10482=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x10479))+((r21*x10471))+((r20*x10480)));
evalcond[2]=((((-1.0)*cj6*x10476))+((r01*x10473))+((sj6*x10472))+(((-1.0)*x10475*x10481)));
evalcond[3]=((-1.0)+((sj5*x10482))+(((-1.0)*sj6*x10476*x10477))+(((-1.0)*r01*x10471*x10475))+((sj5*x10478))+(((-1.0)*r00*x10473*x10477))+(((-1.0)*x10471*x10472)));
evalcond[4]=(((cj5*x10482))+((sj5*sj6*x10476))+((cj0*r01*x10474))+((r00*sj5*x10473))+((x10472*x10474))+((cj5*x10478)));
evalcond[5]=((((-1.0)*r10*x10473*x10477))+((r00*sj0*x10480))+((r01*sj0*x10471))+((cj0*r12*sj5))+(((-1.0)*r11*x10471*x10475))+(((-1.0)*r02*sj0*x10479)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x10473))+(((-0.026255)*cj0*x10481))+(((-0.026255)*cj6*x10476))+(((-1.0)*py*sj0))+(((-1.0)*px*x10475))+(((0.026255)*sj6*x10472)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10483=(cj6*r20);
IkReal x10484=(r21*sj6);
if( IKabs(((((-1.0)*x10483))+x10484)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x10484))+(((6.96378830083565e-5)*x10483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10483))+x10484))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x10484))+(((6.96378830083565e-5)*x10483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x10483))+x10484), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x10484))+(((6.96378830083565e-5)*x10483))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10485=IKcos(j4);
IkReal x10486=IKsin(j4);
IkReal x10487=((1.0)*cj5);
IkReal x10488=(cj0*r10);
IkReal x10489=(sj5*sj6);
IkReal x10490=((1.0)*cj6);
IkReal x10491=((0.026255)*cj6);
IkReal x10492=(r21*sj6);
IkReal x10493=((1.0)*x10485);
IkReal x10494=(cj0*r11*sj6);
IkReal x10495=(cj6*r00*sj0);
IkReal x10496=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10492))+((cj6*r20))+x10486);
evalcond[1]=((((-1.0)*r20*x10489))+(((-1.0)*r22*x10487))+(((-1.0)*x10493))+(((-1.0)*r21*sj5*x10490)));
evalcond[2]=((0.09756)+(((0.02626)*x10486))+(((-0.026255)*x10492))+pz+(((0.0718)*x10485))+((r20*x10491)));
evalcond[3]=((((-1.0)*x10488*x10490))+(((-1.0)*x10496))+(((-1.0)*x10493))+x10495+x10494);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r02*sj0*x10487))+(((-1.0)*x10486))+(((-1.0)*r01*sj0*sj5*x10490))+(((-1.0)*r00*sj0*x10489))+((cj0*cj6*r11*sj5))+((x10488*x10489)));
evalcond[5]=((0.1246)+(((-1.0)*x10488*x10491))+(((-0.02626)*x10485))+(((0.026255)*x10494))+((r00*sj0*x10491))+(((-0.026255)*x10496))+(((0.0718)*x10486))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10497=(cj5*cj6);
IkReal x10498=((1.0)*sj0);
IkReal x10499=((1.0)*r22);
IkReal x10500=(cj0*sj5);
IkReal x10501=(cj5*sj6);
IkReal x10502=((1.0)*cj0);
IkReal x10503=(cj6*r20);
IkReal x10504=((1.0)*sj5);
IkReal x10505=(r21*sj6);
IkReal x10506=(x10501*x10502);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x10501))+((r21*x10497))+(((-1.0)*sj5*x10499)));
evalcond[2]=(x10503+(((-1.0)*x10505)));
evalcond[3]=((((-1.0)*r20*sj6*x10504))+(((-1.0)*cj5*x10499))+(((-1.0)*cj6*r21*x10504)));
evalcond[4]=((((-1.0)*r01*x10497*x10502))+(((-1.0)*r00*x10506))+(((-1.0)*r11*x10497*x10498))+((r12*sj0*sj5))+((r02*x10500))+(((-1.0)*r10*x10498*x10501)));
evalcond[5]=((((-1.0)*r02*sj5*x10498))+((r00*sj0*x10501))+(((-1.0)*r10*x10506))+((r01*sj0*x10497))+(((-1.0)*r11*x10497*x10502))+((r12*x10500)));
evalcond[6]=((0.0001)+(((-0.026255)*x10505))+pz+(((0.026255)*x10503)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10507=(cj0*cj6);
IkReal x10508=(cj6*sj0);
IkReal x10509=(cj0*sj6);
IkReal x10510=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r01*x10509))+((r00*x10507))+((r10*x10508))+(((-1.0)*r11*x10510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x10508))+(((-1.0)*r10*x10507))+((r11*x10509))+(((-1.0)*r01*x10510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x10509))+((r00*x10507))+((r10*x10508))+(((-1.0)*r11*x10510))))+IKsqr((((r00*x10508))+(((-1.0)*r10*x10507))+((r11*x10509))+(((-1.0)*r01*x10510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x10509))+((r00*x10507))+((r10*x10508))+(((-1.0)*r11*x10510))), (((r00*x10508))+(((-1.0)*r10*x10507))+((r11*x10509))+(((-1.0)*r01*x10510))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10511=IKsin(j4);
IkReal x10512=IKcos(j4);
IkReal x10513=(r11*sj6);
IkReal x10514=((0.026255)*cj0);
IkReal x10515=(r01*sj6);
IkReal x10516=(sj0*sj5);
IkReal x10517=(cj6*r11);
IkReal x10518=(r10*sj6);
IkReal x10519=(cj5*r12);
IkReal x10520=(cj6*sj0);
IkReal x10521=((1.0)*sj0);
IkReal x10522=(cj5*r02);
IkReal x10523=((1.0)*r10);
IkReal x10524=(cj0*sj5);
IkReal x10525=(r00*sj6);
IkReal x10526=((0.026255)*sj0);
IkReal x10527=(cj0*cj6);
IkReal x10528=((1.0)*cj0);
IkReal x10529=(cj6*r01);
IkReal x10530=((1.0)*x10512);
evalcond[0]=((((-1.0)*x10520*x10523))+((cj0*x10515))+(((-1.0)*r00*x10527))+x10511+((sj0*x10513)));
evalcond[1]=((((-1.0)*x10530))+(((-1.0)*x10523*x10527))+((cj0*x10513))+((r00*x10520))+(((-1.0)*x10515*x10521)));
evalcond[2]=((((-1.0)*x10530))+((cj0*x10522))+((x10524*x10529))+((x10524*x10525))+((x10516*x10518))+((x10516*x10517))+((sj0*x10519)));
evalcond[3]=(((x10517*x10524))+(((-1.0)*x10521*x10522))+((cj0*x10519))+(((-1.0)*x10511))+((x10518*x10524))+(((-1.0)*x10516*x10529))+(((-1.0)*x10516*x10525)));
evalcond[4]=((0.1246)+(((0.0718)*x10511))+(((-1.0)*py*x10528))+(((-1.0)*cj6*r10*x10514))+(((0.026255)*r00*x10520))+((px*sj0))+(((-0.02626)*x10512))+(((-1.0)*x10515*x10526))+((x10513*x10514)));
evalcond[5]=((0.21226)+(((-0.026255)*r10*x10520))+(((0.0718)*x10512))+(((-1.0)*py*x10521))+(((-1.0)*cj6*r00*x10514))+((x10514*x10515))+(((0.02626)*x10511))+(((-1.0)*px*x10528))+((x10513*x10526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10531=(cj5*cj6);
IkReal x10532=((1.0)*sj0);
IkReal x10533=((1.0)*r22);
IkReal x10534=(cj0*sj5);
IkReal x10535=(cj5*sj6);
IkReal x10536=((1.0)*cj0);
IkReal x10537=(cj6*r20);
IkReal x10538=((1.0)*sj5);
IkReal x10539=(r21*sj6);
IkReal x10540=(x10535*x10536);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x10533))+((r21*x10531))+((r20*x10535)));
evalcond[2]=((((-1.0)*x10539))+x10537);
evalcond[3]=((((-1.0)*r20*sj6*x10538))+(((-1.0)*cj6*r21*x10538))+(((-1.0)*cj5*x10533)));
evalcond[4]=(((r02*x10534))+(((-1.0)*r00*x10540))+(((-1.0)*r01*x10531*x10536))+((r12*sj0*sj5))+(((-1.0)*r10*x10532*x10535))+(((-1.0)*r11*x10531*x10532)));
evalcond[5]=(((r01*sj0*x10531))+(((-1.0)*r10*x10540))+((r12*x10534))+(((-1.0)*r02*sj5*x10532))+((r00*sj0*x10535))+(((-1.0)*r11*x10531*x10536)));
evalcond[6]=((0.0001)+(((-0.026255)*x10539))+pz+(((0.026255)*x10537)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10541=(sj0*sj6);
IkReal x10542=(cj0*sj6);
IkReal x10543=(cj6*r00);
IkReal x10544=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x10543))+((r11*x10541))+((r01*x10542))+(((-1.0)*sj0*x10544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x10542))+(((-1.0)*r01*x10541))+((sj0*x10543))+(((-1.0)*cj0*x10544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x10543))+((r11*x10541))+((r01*x10542))+(((-1.0)*sj0*x10544))))+IKsqr((((r11*x10542))+(((-1.0)*r01*x10541))+((sj0*x10543))+(((-1.0)*cj0*x10544))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x10543))+((r11*x10541))+((r01*x10542))+(((-1.0)*sj0*x10544))), (((r11*x10542))+(((-1.0)*r01*x10541))+((sj0*x10543))+(((-1.0)*cj0*x10544))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10545=IKcos(j4);
IkReal x10546=IKsin(j4);
IkReal x10547=(r11*sj6);
IkReal x10548=((0.026255)*cj0);
IkReal x10549=(r01*sj6);
IkReal x10550=(sj0*sj5);
IkReal x10551=(cj6*r11);
IkReal x10552=(r10*sj6);
IkReal x10553=(cj5*r12);
IkReal x10554=(cj6*sj0);
IkReal x10555=((1.0)*sj0);
IkReal x10556=(cj5*r02);
IkReal x10557=((1.0)*r10);
IkReal x10558=(cj0*sj5);
IkReal x10559=(r00*sj6);
IkReal x10560=((0.026255)*sj0);
IkReal x10561=(cj0*cj6);
IkReal x10562=((1.0)*cj0);
IkReal x10563=(cj6*r01);
IkReal x10564=((1.0)*x10546);
evalcond[0]=((((-1.0)*x10554*x10557))+(((-1.0)*r00*x10561))+((cj0*x10549))+((sj0*x10547))+(((-1.0)*x10564)));
evalcond[1]=(((cj0*x10547))+(((-1.0)*x10545))+(((-1.0)*x10557*x10561))+((r00*x10554))+(((-1.0)*x10549*x10555)));
evalcond[2]=(((sj0*x10553))+((cj0*x10556))+((x10558*x10559))+((x10550*x10552))+((x10550*x10551))+x10545+((x10558*x10563)));
evalcond[3]=(((x10552*x10558))+((x10551*x10558))+(((-1.0)*x10550*x10559))+((cj0*x10553))+(((-1.0)*x10564))+(((-1.0)*x10555*x10556))+(((-1.0)*x10550*x10563)));
evalcond[4]=((0.1246)+(((-1.0)*cj6*r10*x10548))+(((-1.0)*py*x10562))+(((-1.0)*x10549*x10560))+(((0.0718)*x10546))+(((0.026255)*r00*x10554))+((x10547*x10548))+((px*sj0))+(((-0.02626)*x10545)));
evalcond[5]=((0.01734)+(((-0.026255)*r10*x10554))+((x10547*x10560))+((x10548*x10549))+(((-0.0718)*x10545))+(((-0.02626)*x10546))+(((-1.0)*px*x10562))+(((-1.0)*cj6*r00*x10548))+(((-1.0)*py*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10565=((1.0)*sj6);
CheckValue<IkReal> x10566=IKPowWithIntegerCheck(cj3,-1);
if(!x10566.valid){
continue;
}
CheckValue<IkReal> x10567=IKPowWithIntegerCheck(sj3,-1);
if(!x10567.valid){
continue;
}
if( IKabs(((x10566.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10565))+(((-1.0)*cj0*r01*x10565))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10567.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10566.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10565))+(((-1.0)*cj0*r01*x10565))+((cj0*cj6*r00))))))+IKsqr(((x10567.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10566.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x10565))+(((-1.0)*cj0*r01*x10565))+((cj0*cj6*r00))))), ((x10567.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10568=IKsin(j4);
IkReal x10569=IKcos(j4);
IkReal x10570=(r11*sj0);
IkReal x10571=((0.026255)*sj6);
IkReal x10572=(cj0*r01);
IkReal x10573=(cj5*r12);
IkReal x10574=(cj6*sj5);
IkReal x10575=(r10*sj0);
IkReal x10576=(sj5*sj6);
IkReal x10577=(cj0*r11);
IkReal x10578=((1.0)*cj5);
IkReal x10579=((1.0)*cj6);
IkReal x10580=(cj0*r10);
IkReal x10581=((1.0)*sj0);
IkReal x10582=(cj0*r00);
IkReal x10583=((0.026255)*cj6);
IkReal x10584=((1.0)*r21);
IkReal x10585=((1.0)*cj0);
IkReal x10586=(sj3*x10568);
IkReal x10587=(sj3*x10569);
IkReal x10588=(r00*x10583);
IkReal x10589=(cj3*x10568);
IkReal x10590=((1.0)*x10569);
evalcond[0]=((((-1.0)*sj6*x10584))+((cj6*r20))+(((-1.0)*x10586)));
evalcond[1]=((((-1.0)*x10574*x10584))+(((-1.0)*r22*x10578))+(((-1.0)*r20*x10576))+x10587);
evalcond[2]=(((sj6*x10570))+((sj6*x10572))+(((-1.0)*x10575*x10579))+x10589+(((-1.0)*x10579*x10582)));
evalcond[3]=((((-1.0)*x10590))+((sj6*x10577))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x10581))+(((-1.0)*x10579*x10580)));
evalcond[4]=((0.0001)+(((-0.0718)*x10587))+pz+(((-0.09746)*sj3))+(((-1.0)*r21*x10571))+(((-0.02626)*x10586))+((r20*x10583)));
evalcond[5]=(((x10572*x10574))+((cj0*cj5*r02))+((x10576*x10582))+((sj0*x10573))+((x10570*x10574))+((x10575*x10576))+(((-1.0)*cj3*x10590)));
evalcond[6]=((((-1.0)*r01*x10574*x10581))+(((-1.0)*r02*sj0*x10578))+(((-1.0)*r00*x10576*x10581))+((x10576*x10580))+((cj0*x10573))+(((-1.0)*x10568))+((x10574*x10577)));
evalcond[7]=((0.1246)+(((-0.02626)*x10569))+((sj0*x10588))+(((0.0718)*x10568))+(((-1.0)*py*x10585))+((x10571*x10577))+((px*sj0))+(((-1.0)*r01*sj0*x10571))+(((-1.0)*x10580*x10583)));
evalcond[8]=((0.1148)+(((-1.0)*x10582*x10583))+(((-1.0)*x10575*x10583))+(((-1.0)*py*x10581))+((x10570*x10571))+(((0.02626)*x10589))+((x10571*x10572))+(((0.0718)*cj3*x10569))+(((0.09746)*cj3))+(((-1.0)*px*x10585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10591=((1.0)*sj6);
CheckValue<IkReal> x10592=IKPowWithIntegerCheck(sj3,-1);
if(!x10592.valid){
continue;
}
if( IKabs(((x10592.value)*(((((-1.0)*r21*x10591))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x10591))+(((-1.0)*cj0*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10592.value)*(((((-1.0)*r21*x10591))+((cj6*r20))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x10591))+(((-1.0)*cj0*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10592.value)*(((((-1.0)*r21*x10591))+((cj6*r20))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x10591))+(((-1.0)*cj0*cj6*r10))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10593=IKsin(j4);
IkReal x10594=IKcos(j4);
IkReal x10595=(r11*sj0);
IkReal x10596=((0.026255)*sj6);
IkReal x10597=(cj0*r01);
IkReal x10598=(cj5*r12);
IkReal x10599=(cj6*sj5);
IkReal x10600=(r10*sj0);
IkReal x10601=(sj5*sj6);
IkReal x10602=(cj0*r11);
IkReal x10603=((1.0)*cj5);
IkReal x10604=((1.0)*cj6);
IkReal x10605=(cj0*r10);
IkReal x10606=((1.0)*sj0);
IkReal x10607=(cj0*r00);
IkReal x10608=((0.026255)*cj6);
IkReal x10609=((1.0)*r21);
IkReal x10610=((1.0)*cj0);
IkReal x10611=(sj3*x10593);
IkReal x10612=(sj3*x10594);
IkReal x10613=(r00*x10608);
IkReal x10614=(cj3*x10593);
IkReal x10615=((1.0)*x10594);
evalcond[0]=((((-1.0)*sj6*x10609))+((cj6*r20))+(((-1.0)*x10611)));
evalcond[1]=((((-1.0)*r20*x10601))+(((-1.0)*r22*x10603))+(((-1.0)*x10599*x10609))+x10612);
evalcond[2]=((((-1.0)*x10600*x10604))+(((-1.0)*x10604*x10607))+((sj6*x10595))+((sj6*x10597))+x10614);
evalcond[3]=((((-1.0)*r01*sj6*x10606))+((cj6*r00*sj0))+(((-1.0)*x10604*x10605))+(((-1.0)*x10615))+((sj6*x10602)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x10596))+(((-0.0718)*x10612))+pz+(((-0.09746)*sj3))+((r20*x10608))+(((-0.02626)*x10611)));
evalcond[5]=(((x10601*x10607))+((x10600*x10601))+((x10597*x10599))+((cj0*cj5*r02))+(((-1.0)*cj3*x10615))+((x10595*x10599))+((sj0*x10598)));
evalcond[6]=(((x10601*x10605))+(((-1.0)*r01*x10599*x10606))+(((-1.0)*r02*sj0*x10603))+(((-1.0)*x10593))+((cj0*x10598))+(((-1.0)*r00*x10601*x10606))+((x10599*x10602)));
evalcond[7]=((0.1246)+((sj0*x10613))+(((-1.0)*py*x10610))+(((0.0718)*x10593))+(((-1.0)*r01*sj0*x10596))+((px*sj0))+(((-0.02626)*x10594))+((x10596*x10602))+(((-1.0)*x10605*x10608)));
evalcond[8]=((0.1148)+(((-1.0)*x10600*x10608))+((x10596*x10597))+(((0.0718)*cj3*x10594))+(((-1.0)*x10607*x10608))+(((-1.0)*py*x10606))+((x10595*x10596))+(((0.02626)*x10614))+(((0.09746)*cj3))+(((-1.0)*px*x10610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10616=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x10616.valid){
continue;
}
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10616.value)))+(x10617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10618=IKsin(j4);
IkReal x10619=IKcos(j4);
IkReal x10620=(r11*sj0);
IkReal x10621=((0.026255)*sj6);
IkReal x10622=(cj0*r01);
IkReal x10623=(cj5*r12);
IkReal x10624=(cj6*sj5);
IkReal x10625=(r10*sj0);
IkReal x10626=(sj5*sj6);
IkReal x10627=(cj0*r11);
IkReal x10628=((1.0)*cj5);
IkReal x10629=((1.0)*cj6);
IkReal x10630=(cj0*r10);
IkReal x10631=((1.0)*sj0);
IkReal x10632=(cj0*r00);
IkReal x10633=((0.026255)*cj6);
IkReal x10634=((1.0)*r21);
IkReal x10635=((1.0)*cj0);
IkReal x10636=(sj3*x10618);
IkReal x10637=(sj3*x10619);
IkReal x10638=(r00*x10633);
IkReal x10639=(cj3*x10618);
IkReal x10640=((1.0)*x10619);
evalcond[0]=((((-1.0)*sj6*x10634))+(((-1.0)*x10636))+((cj6*r20)));
evalcond[1]=((((-1.0)*x10624*x10634))+(((-1.0)*r22*x10628))+x10637+(((-1.0)*r20*x10626)));
evalcond[2]=((((-1.0)*x10625*x10629))+((sj6*x10620))+((sj6*x10622))+(((-1.0)*x10629*x10632))+x10639);
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*x10640))+((sj6*x10627))+(((-1.0)*r01*sj6*x10631))+(((-1.0)*x10629*x10630)));
evalcond[4]=((0.0001)+((r20*x10633))+(((-0.0718)*x10637))+pz+(((-0.09746)*sj3))+(((-0.02626)*x10636))+(((-1.0)*r21*x10621)));
evalcond[5]=(((x10622*x10624))+((x10625*x10626))+(((-1.0)*cj3*x10640))+((cj0*cj5*r02))+((x10626*x10632))+((sj0*x10623))+((x10620*x10624)));
evalcond[6]=(((cj0*x10623))+(((-1.0)*r01*x10624*x10631))+((x10626*x10630))+(((-1.0)*r02*sj0*x10628))+(((-1.0)*x10618))+(((-1.0)*r00*x10626*x10631))+((x10624*x10627)));
evalcond[7]=((0.1246)+(((-1.0)*r01*sj0*x10621))+(((-1.0)*py*x10635))+((sj0*x10638))+((x10621*x10627))+(((0.0718)*x10618))+((px*sj0))+(((-1.0)*x10630*x10633))+(((-0.02626)*x10619)));
evalcond[8]=((0.1148)+(((0.0718)*cj3*x10619))+(((-1.0)*x10625*x10633))+(((-1.0)*x10632*x10633))+(((-1.0)*py*x10631))+((x10621*x10622))+(((0.02626)*x10639))+((x10620*x10621))+(((0.09746)*cj3))+(((-1.0)*px*x10635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10641=(cj5*cj6);
IkReal x10642=(r11*sj0);
IkReal x10643=(cj0*sj6);
IkReal x10644=(cj6*sj5);
IkReal x10645=((1.0)*cj0);
IkReal x10646=(r10*sj0);
IkReal x10647=((1.0)*cj5);
IkReal x10648=(cj0*r02);
IkReal x10649=((1.0)*sj5);
IkReal x10650=(cj5*sj6);
IkReal x10651=(cj6*r00);
IkReal x10652=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=(((r21*x10641))+(((-1.0)*r22*x10649))+((r20*x10650)));
evalcond[2]=(((r01*x10643))+((sj6*x10642))+(((-1.0)*x10645*x10651))+(((-1.0)*cj6*x10646)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10641*x10645))+(((-1.0)*sj6*x10646*x10647))+((sj5*x10652))+(((-1.0)*r00*x10643*x10647))+((sj5*x10648))+(((-1.0)*x10641*x10642)));
evalcond[4]=(((cj5*x10648))+((cj0*r01*x10644))+((x10642*x10644))+((cj5*x10652))+((r00*sj5*x10643))+((sj5*sj6*x10646)));
evalcond[5]=(((r01*sj0*x10641))+(((-1.0)*r10*x10643*x10647))+((cj0*r12*sj5))+((r00*sj0*x10650))+(((-1.0)*r02*sj0*x10649))+(((-1.0)*r11*x10641*x10645)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x10646))+(((0.026255)*r01*x10643))+(((-0.026255)*cj0*x10651))+(((0.026255)*sj6*x10642))+(((-1.0)*py*sj0))+(((-1.0)*px*x10645)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10653=(cj6*r21);
IkReal x10654=(r20*sj6);
IkReal x10655=(r21*sj6);
IkReal x10656=(cj1*sj5);
IkReal x10657=(cj5*r22);
IkReal x10658=((1.0)*sj1*sj5);
IkReal x10659=((1.0)*cj6*r20);
if( IKabs((((sj1*x10655))+(((-1.0)*sj1*x10659))+((x10653*x10656))+((x10654*x10656))+((cj1*x10657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x10657))+(((-1.0)*x10653*x10658))+(((-1.0)*x10654*x10658))+(((-1.0)*cj1*x10659))+((cj1*x10655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x10655))+(((-1.0)*sj1*x10659))+((x10653*x10656))+((x10654*x10656))+((cj1*x10657))))+IKsqr(((((-1.0)*sj1*x10657))+(((-1.0)*x10653*x10658))+(((-1.0)*x10654*x10658))+(((-1.0)*cj1*x10659))+((cj1*x10655))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x10655))+(((-1.0)*sj1*x10659))+((x10653*x10656))+((x10654*x10656))+((cj1*x10657))), ((((-1.0)*sj1*x10657))+(((-1.0)*x10653*x10658))+(((-1.0)*x10654*x10658))+(((-1.0)*cj1*x10659))+((cj1*x10655))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10660=IKsin(j4);
IkReal x10661=IKcos(j4);
IkReal x10662=((1.0)*cj5);
IkReal x10663=((1.0)*cj0);
IkReal x10664=(cj6*r10);
IkReal x10665=(cj6*r20);
IkReal x10666=((1.0)*sj5);
IkReal x10667=(r21*sj6);
IkReal x10668=(cj0*sj5);
IkReal x10669=(cj1*x10661);
IkReal x10670=(sj1*x10660);
IkReal x10671=(sj1*x10661);
IkReal x10672=(cj0*r11*sj6);
IkReal x10673=(cj1*x10660);
IkReal x10674=(cj6*r00*sj0);
IkReal x10675=(r01*sj0*sj6);
IkReal x10676=(x10670+x10669);
evalcond[0]=((((-1.0)*x10667))+x10676+x10665);
evalcond[1]=((((-1.0)*cj6*r21*x10666))+(((-1.0)*r20*sj6*x10666))+(((-1.0)*r22*x10662))+(((-1.0)*x10671))+x10673);
evalcond[2]=((((-1.0)*x10673))+(((-1.0)*x10675))+(((-1.0)*x10663*x10664))+x10671+x10672+x10674);
evalcond[3]=((((0.09736)*sj1))+(((0.02626)*x10669))+(((0.026255)*x10665))+pz+(((0.02626)*x10670))+(((-0.0718)*x10673))+(((0.0718)*x10671))+(((-0.1246)*cj1))+(((-0.026255)*x10667)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*sj6*x10666))+(((-1.0)*cj6*r01*sj0*x10666))+((cj6*r11*x10668))+x10676+(((-1.0)*r02*sj0*x10662))+((r10*sj6*x10668)));
evalcond[5]=((((-0.026255)*cj0*x10664))+(((-0.1246)*sj1))+(((-0.09736)*cj1))+(((-0.0718)*x10669))+(((-1.0)*py*x10663))+(((0.026255)*x10672))+(((0.026255)*x10674))+(((0.02626)*x10671))+(((-0.0718)*x10670))+((px*sj0))+(((-0.02626)*x10673))+(((-0.026255)*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10677=(cj5*cj6);
IkReal x10678=(r11*sj0);
IkReal x10679=(cj0*sj6);
IkReal x10680=(cj6*sj5);
IkReal x10681=((1.0)*cj0);
IkReal x10682=(r10*sj0);
IkReal x10683=((1.0)*cj5);
IkReal x10684=(cj0*r02);
IkReal x10685=((1.0)*sj5);
IkReal x10686=(cj5*sj6);
IkReal x10687=(cj6*r00);
IkReal x10688=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x10685))+((r20*x10686))+((r21*x10677)));
evalcond[2]=((((-1.0)*cj6*x10682))+((sj6*x10678))+((r01*x10679))+(((-1.0)*x10681*x10687)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10679*x10683))+(((-1.0)*x10677*x10678))+(((-1.0)*r01*x10677*x10681))+(((-1.0)*sj6*x10682*x10683))+((sj5*x10684))+((sj5*x10688)));
evalcond[4]=(((cj0*r01*x10680))+((r00*sj5*x10679))+((x10678*x10680))+((sj5*sj6*x10682))+((cj5*x10684))+((cj5*x10688)));
evalcond[5]=((((-1.0)*r02*sj0*x10685))+((r00*sj0*x10686))+(((-1.0)*r10*x10679*x10683))+((cj0*r12*sj5))+(((-1.0)*r11*x10677*x10681))+((r01*sj0*x10677)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x10679))+(((-0.026255)*cj0*x10687))+(((0.026255)*sj6*x10678))+(((-0.026255)*cj6*x10682))+(((-1.0)*px*x10681))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10689=(cj5*r22);
IkReal x10690=(cj6*r20);
IkReal x10691=(r21*sj1);
IkReal x10692=(cj6*sj5);
IkReal x10693=(cj1*r21);
IkReal x10694=(r20*sj5*sj6);
if( IKabs((((cj1*x10694))+((x10692*x10693))+(((-1.0)*sj6*x10691))+((sj1*x10690))+((cj1*x10689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x10691*x10692))+((sj1*x10689))+(((-1.0)*cj1*x10690))+((sj1*x10694))+((sj6*x10693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x10694))+((x10692*x10693))+(((-1.0)*sj6*x10691))+((sj1*x10690))+((cj1*x10689))))+IKsqr((((x10691*x10692))+((sj1*x10689))+(((-1.0)*cj1*x10690))+((sj1*x10694))+((sj6*x10693))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x10694))+((x10692*x10693))+(((-1.0)*sj6*x10691))+((sj1*x10690))+((cj1*x10689))), (((x10691*x10692))+((sj1*x10689))+(((-1.0)*cj1*x10690))+((sj1*x10694))+((sj6*x10693))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKcos(j4);
IkReal x10696=IKsin(j4);
IkReal x10697=(cj0*sj6);
IkReal x10698=((1.0)*cj5);
IkReal x10699=((1.0)*cj0);
IkReal x10700=(cj6*r10);
IkReal x10701=(cj6*r20);
IkReal x10702=((1.0)*sj5);
IkReal x10703=(r21*sj6);
IkReal x10704=(sj1*x10695);
IkReal x10705=(cj1*x10696);
IkReal x10706=(cj1*x10695);
IkReal x10707=(sj1*x10696);
IkReal x10708=(cj6*r00*sj0);
IkReal x10709=(r01*sj0*sj6);
IkReal x10710=(x10705+x10704);
evalcond[0]=((((-1.0)*x10703))+(((-1.0)*x10707))+x10701+x10706);
evalcond[1]=((((-1.0)*r20*sj6*x10702))+(((-1.0)*cj6*r21*x10702))+x10710+(((-1.0)*r22*x10698)));
evalcond[2]=(((r11*x10697))+(((-1.0)*x10709))+(((-1.0)*x10699*x10700))+x10708+x10710);
evalcond[3]=((((0.026255)*x10701))+(((-0.02626)*x10707))+(((-0.0718)*x10705))+(((-0.0718)*x10704))+(((-0.09756)*sj1))+(((-0.026255)*x10703))+pz+(((-0.1246)*cj1))+(((0.02626)*x10706)));
evalcond[4]=((((-1.0)*r00*sj0*sj6*x10702))+((cj0*cj5*r12))+(((-1.0)*x10706))+(((-1.0)*cj6*r01*sj0*x10702))+(((-1.0)*r02*sj0*x10698))+((cj0*cj6*r11*sj5))+x10707+((r10*sj5*x10697)));
evalcond[5]=((((0.0718)*x10706))+(((0.026255)*x10708))+(((0.026255)*r11*x10697))+(((-0.1246)*sj1))+(((-0.0718)*x10707))+(((0.09756)*cj1))+(((-1.0)*py*x10699))+(((-0.026255)*x10709))+((px*sj0))+(((0.02626)*x10705))+(((0.02626)*x10704))+(((-0.026255)*cj0*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10711=(cj0*sj5);
IkReal x10712=(cj5*cj6);
IkReal x10713=((1.0)*sj5);
IkReal x10714=((1.0)*cj0);
IkReal x10715=((1.0)*sj0);
IkReal x10716=(cj5*sj6);
IkReal x10717=(r10*x10716);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x10716))+(((-1.0)*r22*x10713))+((r21*x10712))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*r00*x10714*x10716))+(((-1.0)*r11*x10712*x10715))+((r12*sj0*sj5))+(((-1.0)*x10715*x10717))+(((-1.0)*r01*x10712*x10714))+((r02*x10711)));
evalcond[3]=(((r12*x10711))+((r01*sj0*x10712))+(((-1.0)*r11*x10712*x10714))+(((-1.0)*r02*sj0*x10713))+((r00*sj0*x10716))+(((-1.0)*x10714*x10717)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x10718=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*sj6*x10718))+((cj6*r20)))))+(IKabs(((((-1.0)*cj6*sj5*x10718))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10719=(cj5*cj6);
IkReal x10720=((1.0)*sj0);
IkReal x10721=((1.0)*r22);
IkReal x10722=(cj0*sj5);
IkReal x10723=(cj5*sj6);
IkReal x10724=((1.0)*cj0);
IkReal x10725=(cj6*r20);
IkReal x10726=((1.0)*sj5);
IkReal x10727=(r21*sj6);
IkReal x10728=(x10723*x10724);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x10719))+((r20*x10723))+(((-1.0)*sj5*x10721)));
evalcond[2]=((((-1.0)*x10727))+x10725);
evalcond[3]=((((-1.0)*cj6*r21*x10726))+(((-1.0)*cj5*x10721))+(((-1.0)*r20*sj6*x10726)));
evalcond[4]=((((-1.0)*r00*x10728))+((r02*x10722))+(((-1.0)*r10*x10720*x10723))+((r12*sj0*sj5))+(((-1.0)*r01*x10719*x10724))+(((-1.0)*r11*x10719*x10720)));
evalcond[5]=((((-1.0)*r02*sj5*x10720))+((r01*sj0*x10719))+(((-1.0)*r11*x10719*x10724))+((r00*sj0*x10723))+((r12*x10722))+(((-1.0)*r10*x10728)));
evalcond[6]=((-0.2413)+(((-0.026255)*x10727))+(((0.026255)*x10725))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=(cj0*cj6);
IkReal x10730=(cj6*sj0);
IkReal x10731=(cj0*sj6);
IkReal x10732=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r01*x10732))+(((-1.0)*r10*x10729))+((r11*x10731))+((r00*x10730)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x10730))+(((-1.0)*r01*x10731))+(((-1.0)*r11*x10732))+((r00*x10729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x10732))+(((-1.0)*r10*x10729))+((r11*x10731))+((r00*x10730))))+IKsqr((((r10*x10730))+(((-1.0)*r01*x10731))+(((-1.0)*r11*x10732))+((r00*x10729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x10732))+(((-1.0)*r10*x10729))+((r11*x10731))+((r00*x10730))), (((r10*x10730))+(((-1.0)*r01*x10731))+(((-1.0)*r11*x10732))+((r00*x10729))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10733=IKsin(j4);
IkReal x10734=IKcos(j4);
IkReal x10735=(r11*sj6);
IkReal x10736=((0.026255)*cj0);
IkReal x10737=(r01*sj6);
IkReal x10738=(sj0*sj5);
IkReal x10739=(cj6*r11);
IkReal x10740=(r10*sj6);
IkReal x10741=(cj5*r12);
IkReal x10742=(cj6*sj0);
IkReal x10743=((1.0)*sj0);
IkReal x10744=(cj5*r02);
IkReal x10745=((1.0)*r10);
IkReal x10746=(cj0*sj5);
IkReal x10747=(r00*sj6);
IkReal x10748=((0.026255)*sj0);
IkReal x10749=(cj0*cj6);
IkReal x10750=((1.0)*cj0);
IkReal x10751=(cj6*r01);
evalcond[0]=(((cj0*x10737))+(((-1.0)*r00*x10749))+((sj0*x10735))+x10734+(((-1.0)*x10742*x10745)));
evalcond[1]=(((cj0*x10735))+(((-1.0)*x10737*x10743))+(((-1.0)*x10745*x10749))+(((-1.0)*x10733))+((r00*x10742)));
evalcond[2]=(((x10746*x10747))+((x10746*x10751))+((cj0*x10744))+((sj0*x10741))+((x10738*x10739))+x10733+((x10738*x10740)));
evalcond[3]=(((cj0*x10741))+(((-1.0)*x10738*x10747))+(((-1.0)*x10738*x10751))+((x10739*x10746))+x10734+(((-1.0)*x10743*x10744))+((x10740*x10746)));
evalcond[4]=((-0.09736)+(((-1.0)*py*x10750))+(((-1.0)*x10737*x10748))+(((-0.02626)*x10733))+(((0.026255)*r00*x10742))+((px*sj0))+((x10735*x10736))+(((-0.0718)*x10734))+(((-1.0)*cj6*r10*x10736)));
evalcond[5]=((-0.0001)+(((-1.0)*py*x10743))+(((-1.0)*cj6*r00*x10736))+(((-1.0)*px*x10750))+((x10735*x10748))+(((0.02626)*x10734))+(((-0.026255)*r10*x10742))+((x10736*x10737))+(((-0.0718)*x10733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10752=(cj5*cj6);
IkReal x10753=(r11*sj0);
IkReal x10754=(cj0*sj6);
IkReal x10755=(cj6*sj5);
IkReal x10756=((1.0)*cj0);
IkReal x10757=(r10*sj0);
IkReal x10758=((1.0)*cj5);
IkReal x10759=(cj0*r02);
IkReal x10760=((1.0)*sj5);
IkReal x10761=(cj5*sj6);
IkReal x10762=(cj6*r00);
IkReal x10763=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x10761))+(((-1.0)*r22*x10760))+((r21*x10752)));
evalcond[2]=(((sj6*x10753))+(((-1.0)*cj6*x10757))+(((-1.0)*x10756*x10762))+((r01*x10754)));
evalcond[3]=((-1.0)+((sj5*x10759))+(((-1.0)*r00*x10754*x10758))+(((-1.0)*sj6*x10757*x10758))+(((-1.0)*r01*x10752*x10756))+((sj5*x10763))+(((-1.0)*x10752*x10753)));
evalcond[4]=(((cj5*x10759))+((r00*sj5*x10754))+((x10753*x10755))+((cj5*x10763))+((sj5*sj6*x10757))+((cj0*r01*x10755)));
evalcond[5]=(((r01*sj0*x10752))+(((-1.0)*r02*sj0*x10760))+((r00*sj0*x10761))+((cj0*r12*sj5))+(((-1.0)*r10*x10754*x10758))+(((-1.0)*r11*x10752*x10756)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x10756))+(((-0.026255)*cj6*x10757))+(((0.026255)*r01*x10754))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x10753))+(((-0.026255)*cj0*x10762)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10764=(cj6*r20);
IkReal x10765=(r21*sj6);
if( IKabs(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x10764))+(((-6.96378830083565e-5)*x10765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10765))+x10764)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x10764))+(((-6.96378830083565e-5)*x10765))))+IKsqr(((((-1.0)*x10765))+x10764))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x10764))+(((-6.96378830083565e-5)*x10765))), ((((-1.0)*x10765))+x10764));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10766=IKsin(j4);
IkReal x10767=IKcos(j4);
IkReal x10768=((1.0)*cj5);
IkReal x10769=(cj0*r10);
IkReal x10770=(sj5*sj6);
IkReal x10771=((1.0)*cj6);
IkReal x10772=((0.026255)*cj6);
IkReal x10773=(r21*sj6);
IkReal x10774=((1.0)*x10766);
IkReal x10775=(cj0*r11*sj6);
IkReal x10776=(cj6*r00*sj0);
IkReal x10777=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10767))+(((-1.0)*x10773))+((cj6*r20)));
evalcond[1]=((((-1.0)*x10774))+(((-1.0)*r22*x10768))+(((-1.0)*r20*x10770))+(((-1.0)*r21*sj5*x10771)));
evalcond[2]=((-0.1264)+(((-0.02626)*x10767))+((r20*x10772))+(((-0.026255)*x10773))+pz+(((0.0718)*x10766)));
evalcond[3]=((((-1.0)*x10777))+(((-1.0)*x10774))+(((-1.0)*x10769*x10771))+x10775+x10776);
evalcond[4]=((((-1.0)*r01*sj0*sj5*x10771))+(((-1.0)*r02*sj0*x10768))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x10770))+x10767+((x10769*x10770)));
evalcond[5]=((-0.09736)+(((-0.02626)*x10766))+(((0.026255)*x10775))+(((-0.0718)*x10767))+((r00*sj0*x10772))+(((-1.0)*x10769*x10772))+(((-0.026255)*x10777))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10778=(cj5*cj6);
IkReal x10779=(r11*sj0);
IkReal x10780=(cj0*sj6);
IkReal x10781=(cj6*sj5);
IkReal x10782=((1.0)*cj0);
IkReal x10783=(r10*sj0);
IkReal x10784=((1.0)*cj5);
IkReal x10785=(cj0*r02);
IkReal x10786=((1.0)*sj5);
IkReal x10787=(cj5*sj6);
IkReal x10788=(cj6*r00);
IkReal x10789=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x10787))+((r21*x10778))+(((-1.0)*r22*x10786)));
evalcond[2]=((((-1.0)*cj6*x10783))+((sj6*x10779))+((r01*x10780))+(((-1.0)*x10782*x10788)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10780*x10784))+(((-1.0)*r01*x10778*x10782))+(((-1.0)*sj6*x10783*x10784))+((sj5*x10785))+((sj5*x10789))+(((-1.0)*x10778*x10779)));
evalcond[4]=(((r00*sj5*x10780))+((x10779*x10781))+((cj5*x10785))+((cj5*x10789))+((cj0*r01*x10781))+((sj5*sj6*x10783)));
evalcond[5]=(((r00*sj0*x10787))+((r01*sj0*x10778))+((cj0*r12*sj5))+(((-1.0)*r11*x10778*x10782))+(((-1.0)*r02*sj0*x10786))+(((-1.0)*r10*x10780*x10784)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x10788))+(((0.026255)*r01*x10780))+(((0.026255)*sj6*x10779))+(((-0.026255)*cj6*x10783))+(((-1.0)*py*sj0))+(((-1.0)*px*x10782)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10790=IKcos(j4);
IkReal x10791=IKsin(j4);
IkReal x10792=((1.0)*cj5);
IkReal x10793=(cj0*r10);
IkReal x10794=(sj5*sj6);
IkReal x10795=((1.0)*cj6);
IkReal x10796=((0.026255)*cj6);
IkReal x10797=(r21*sj6);
IkReal x10798=(cj0*r11*sj6);
IkReal x10799=(cj6*r00*sj0);
IkReal x10800=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+(((-1.0)*x10797))+x10790);
evalcond[1]=((((-1.0)*r20*x10794))+x10791+(((-1.0)*r22*x10792))+(((-1.0)*r21*sj5*x10795)));
evalcond[2]=((-0.1246)+(((-0.026255)*x10797))+((r20*x10796))+(((0.02626)*x10790))+pz+(((-0.0718)*x10791)));
evalcond[3]=((((-1.0)*x10800))+(((-1.0)*x10791))+(((-1.0)*x10793*x10795))+x10798+x10799);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x10795))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x10794))+(((-1.0)*r02*sj0*x10792))+x10790+((x10793*x10794)));
evalcond[5]=((-0.09736)+(((-0.026255)*x10800))+(((0.026255)*x10798))+((r00*sj0*x10796))+(((-0.02626)*x10791))+((px*sj0))+(((-1.0)*x10793*x10796))+(((-0.0718)*x10790))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10801=((1.0)*sj5);
IkReal x10802=((1.0)*sj6);
CheckValue<IkReal> x10803=IKPowWithIntegerCheck(sj2,-1);
if(!x10803.valid){
continue;
}
CheckValue<IkReal> x10804=IKPowWithIntegerCheck(cj2,-1);
if(!x10804.valid){
continue;
}
if( IKabs(((x10803.value)*(((((-1.0)*r20*sj6*x10801))+(((-1.0)*cj6*r21*x10801))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10804.value)*(((((-1.0)*r11*sj0*x10802))+(((-1.0)*cj0*r01*x10802))+((cj6*r10*sj0))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10803.value)*(((((-1.0)*r20*sj6*x10801))+(((-1.0)*cj6*r21*x10801))+(((-1.0)*cj5*r22))))))+IKsqr(((x10804.value)*(((((-1.0)*r11*sj0*x10802))+(((-1.0)*cj0*r01*x10802))+((cj6*r10*sj0))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10803.value)*(((((-1.0)*r20*sj6*x10801))+(((-1.0)*cj6*r21*x10801))+(((-1.0)*cj5*r22))))), ((x10804.value)*(((((-1.0)*r11*sj0*x10802))+(((-1.0)*cj0*r01*x10802))+((cj6*r10*sj0))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10805=IKcos(j4);
IkReal x10806=IKsin(j4);
IkReal x10807=(r11*sj0);
IkReal x10808=(cj0*sj6);
IkReal x10809=((0.026255)*r01);
IkReal x10810=(cj5*r12);
IkReal x10811=(cj6*sj5);
IkReal x10812=(r10*sj5);
IkReal x10813=(sj0*sj6);
IkReal x10814=((1.0)*cj5);
IkReal x10815=((1.0)*r01);
IkReal x10816=(r00*sj5);
IkReal x10817=((0.026255)*sj6);
IkReal x10818=((1.0)*py);
IkReal x10819=((0.026255)*cj6);
IkReal x10820=((1.0)*r21);
IkReal x10821=((1.0)*cj0);
IkReal x10822=((1.0)*cj6*r10);
IkReal x10823=(cj2*x10806);
IkReal x10824=(cj6*r00*sj0);
IkReal x10825=(cj2*x10805);
IkReal x10826=((1.0)*x10806);
IkReal x10827=(sj2*x10805);
evalcond[0]=((((-1.0)*x10827))+(((-1.0)*sj6*x10820))+((cj6*r20)));
evalcond[1]=((((-1.0)*x10811*x10820))+(((-1.0)*sj2*x10826))+(((-1.0)*r22*x10814))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(((sj6*x10807))+(((-1.0)*sj0*x10822))+((r01*x10808))+(((-1.0)*cj6*r00*x10821))+x10825);
evalcond[3]=((((-1.0)*x10813*x10815))+((r11*x10808))+(((-1.0)*cj6*r10*x10821))+(((-1.0)*x10826))+x10824);
evalcond[4]=((-0.1255)+(((-0.02626)*x10827))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+((r20*x10819))+pz+(((-1.0)*r21*x10817))+(((0.0718)*sj2*x10806)));
evalcond[5]=(((sj0*x10810))+((cj0*cj5*r02))+((x10807*x10811))+((cj0*r01*x10811))+((x10808*x10816))+((x10812*x10813))+x10823);
evalcond[6]=((((-1.0)*r02*sj0*x10814))+((x10808*x10812))+(((-1.0)*sj0*x10811*x10815))+((cj0*x10810))+(((-1.0)*x10813*x10816))+((cj0*r11*x10811))+x10805);
evalcond[7]=((-0.09736)+(((-1.0)*x10809*x10813))+(((0.026255)*r11*x10808))+(((-0.02626)*x10806))+(((-1.0)*cj0*x10818))+(((-1.0)*cj0*r10*x10819))+((px*sj0))+(((-0.0718)*x10805))+((r00*sj0*x10819)));
evalcond[8]=((-0.001)+(((-1.0)*r10*sj0*x10819))+(((-1.0)*sj0*x10818))+(((-0.1158)*sj2))+(((-0.0718)*x10823))+((x10807*x10817))+(((0.0009)*cj2))+(((-1.0)*px*x10821))+(((-1.0)*cj0*r00*x10819))+(((0.02626)*x10825))+((x10808*x10809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10828=((1.0)*sj6);
CheckValue<IkReal> x10829=IKPowWithIntegerCheck(sj2,-1);
if(!x10829.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x10828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10829.value)*((((cj6*r20))+(((-1.0)*r21*x10828)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x10828))))+IKsqr(((x10829.value)*((((cj6*r20))+(((-1.0)*r21*x10828))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x10828))), ((x10829.value)*((((cj6*r20))+(((-1.0)*r21*x10828))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10830=IKcos(j4);
IkReal x10831=IKsin(j4);
IkReal x10832=(r11*sj0);
IkReal x10833=(cj0*sj6);
IkReal x10834=((0.026255)*r01);
IkReal x10835=(cj5*r12);
IkReal x10836=(cj6*sj5);
IkReal x10837=(r10*sj5);
IkReal x10838=(sj0*sj6);
IkReal x10839=((1.0)*cj5);
IkReal x10840=((1.0)*r01);
IkReal x10841=(r00*sj5);
IkReal x10842=((0.026255)*sj6);
IkReal x10843=((1.0)*py);
IkReal x10844=((0.026255)*cj6);
IkReal x10845=((1.0)*r21);
IkReal x10846=((1.0)*cj0);
IkReal x10847=((1.0)*cj6*r10);
IkReal x10848=(cj2*x10831);
IkReal x10849=(cj6*r00*sj0);
IkReal x10850=(cj2*x10830);
IkReal x10851=((1.0)*x10831);
IkReal x10852=(sj2*x10830);
evalcond[0]=((((-1.0)*sj6*x10845))+((cj6*r20))+(((-1.0)*x10852)));
evalcond[1]=((((-1.0)*sj2*x10851))+(((-1.0)*x10836*x10845))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r22*x10839)));
evalcond[2]=((((-1.0)*cj6*r00*x10846))+((sj6*x10832))+((r01*x10833))+(((-1.0)*sj0*x10847))+x10850);
evalcond[3]=((((-1.0)*x10851))+(((-1.0)*x10838*x10840))+(((-1.0)*cj6*r10*x10846))+x10849+((r11*x10833)));
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((0.0718)*sj2*x10831))+(((-0.0009)*sj2))+pz+((r20*x10844))+(((-1.0)*r21*x10842))+(((-0.02626)*x10852)));
evalcond[5]=(((x10832*x10836))+((cj0*cj5*r02))+((x10833*x10841))+((cj0*r01*x10836))+((x10837*x10838))+((sj0*x10835))+x10848);
evalcond[6]=((((-1.0)*r02*sj0*x10839))+((x10833*x10837))+((cj0*x10835))+(((-1.0)*x10838*x10841))+(((-1.0)*sj0*x10836*x10840))+((cj0*r11*x10836))+x10830);
evalcond[7]=((-0.09736)+(((0.026255)*r11*x10833))+((r00*sj0*x10844))+(((-1.0)*x10834*x10838))+(((-1.0)*cj0*r10*x10844))+(((-0.0718)*x10830))+(((-1.0)*cj0*x10843))+((px*sj0))+(((-0.02626)*x10831)));
evalcond[8]=((-0.001)+(((-1.0)*r10*sj0*x10844))+((x10832*x10842))+(((-0.0718)*x10848))+(((-0.1158)*sj2))+((x10833*x10834))+(((-1.0)*cj0*r00*x10844))+(((-1.0)*px*x10846))+(((0.0009)*cj2))+(((0.02626)*x10850))+(((-1.0)*sj0*x10843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10853=((1.0)*r21);
CheckValue<IkReal> x10854=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x10854.valid){
continue;
}
CheckValue<IkReal> x10855 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x10853))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),(((cj6*r20))+(((-1.0)*sj6*x10853))),IKFAST_ATAN2_MAGTHRESH);
if(!x10855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10854.value)))+(x10855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10856=IKcos(j4);
IkReal x10857=IKsin(j4);
IkReal x10858=(r11*sj0);
IkReal x10859=(cj0*sj6);
IkReal x10860=((0.026255)*r01);
IkReal x10861=(cj5*r12);
IkReal x10862=(cj6*sj5);
IkReal x10863=(r10*sj5);
IkReal x10864=(sj0*sj6);
IkReal x10865=((1.0)*cj5);
IkReal x10866=((1.0)*r01);
IkReal x10867=(r00*sj5);
IkReal x10868=((0.026255)*sj6);
IkReal x10869=((1.0)*py);
IkReal x10870=((0.026255)*cj6);
IkReal x10871=((1.0)*r21);
IkReal x10872=((1.0)*cj0);
IkReal x10873=((1.0)*cj6*r10);
IkReal x10874=(cj2*x10857);
IkReal x10875=(cj6*r00*sj0);
IkReal x10876=(cj2*x10856);
IkReal x10877=((1.0)*x10857);
IkReal x10878=(sj2*x10856);
evalcond[0]=(((cj6*r20))+(((-1.0)*x10878))+(((-1.0)*sj6*x10871)));
evalcond[1]=((((-1.0)*r22*x10865))+(((-1.0)*x10862*x10871))+(((-1.0)*sj2*x10877))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*sj0*x10873))+((r01*x10859))+((sj6*x10858))+(((-1.0)*cj6*r00*x10872))+x10876);
evalcond[3]=(((r11*x10859))+(((-1.0)*x10864*x10866))+(((-1.0)*x10877))+(((-1.0)*cj6*r10*x10872))+x10875);
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((0.0718)*sj2*x10857))+(((-1.0)*r21*x10868))+(((-0.0009)*sj2))+((r20*x10870))+pz+(((-0.02626)*x10878)));
evalcond[5]=(((x10859*x10867))+((cj0*cj5*r02))+((x10863*x10864))+((sj0*x10861))+((x10858*x10862))+((cj0*r01*x10862))+x10874);
evalcond[6]=((((-1.0)*r02*sj0*x10865))+((x10859*x10863))+(((-1.0)*x10864*x10867))+((cj0*x10861))+(((-1.0)*sj0*x10862*x10866))+x10856+((cj0*r11*x10862)));
evalcond[7]=((-0.09736)+(((-1.0)*cj0*r10*x10870))+(((-1.0)*cj0*x10869))+(((-1.0)*x10860*x10864))+(((-0.0718)*x10856))+((r00*sj0*x10870))+((px*sj0))+(((-0.02626)*x10857))+(((0.026255)*r11*x10859)));
evalcond[8]=((-0.001)+((x10859*x10860))+(((-0.1158)*sj2))+(((-1.0)*px*x10872))+(((-1.0)*sj0*x10869))+(((0.0009)*cj2))+(((-0.0718)*x10874))+(((-1.0)*r10*sj0*x10870))+(((0.02626)*x10876))+((x10858*x10868))+(((-1.0)*cj0*r00*x10870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10879=(cj0*sj5);
IkReal x10880=(cj5*cj6);
IkReal x10881=((1.0)*sj5);
IkReal x10882=((1.0)*cj0);
IkReal x10883=((1.0)*sj0);
IkReal x10884=(cj5*sj6);
IkReal x10885=(r10*x10884);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(cj2+((r21*x10880))+(((-1.0)*r22*x10881))+((r20*x10884)));
evalcond[2]=((((-1.0)*r11*x10880*x10883))+((r02*x10879))+sj2+((r12*sj0*sj5))+(((-1.0)*r01*x10880*x10882))+(((-1.0)*x10883*x10885))+(((-1.0)*r00*x10882*x10884)));
evalcond[3]=((((-1.0)*r11*x10880*x10882))+((r12*x10879))+((r00*sj0*x10884))+(((-1.0)*r02*sj0*x10881))+(((-1.0)*x10882*x10885))+((r01*sj0*x10880)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x10886=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*sj6*x10886))+((cj6*r20)))))+(IKabs(((((-1.0)*cj6*sj5*x10886))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10887=(cj5*cj6);
IkReal x10888=((1.0)*sj0);
IkReal x10889=((1.0)*r22);
IkReal x10890=(cj0*sj5);
IkReal x10891=(cj5*sj6);
IkReal x10892=((1.0)*cj0);
IkReal x10893=(cj6*r20);
IkReal x10894=((1.0)*sj5);
IkReal x10895=(r21*sj6);
IkReal x10896=(x10891*x10892);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x10891))+((r21*x10887))+(((-1.0)*sj5*x10889)));
evalcond[2]=((((-1.0)*x10895))+x10893);
evalcond[3]=((((-1.0)*cj5*x10889))+(((-1.0)*r20*sj6*x10894))+(((-1.0)*cj6*r21*x10894)));
evalcond[4]=((((-1.0)*r00*x10896))+(((-1.0)*r10*x10888*x10891))+((r12*sj0*sj5))+(((-1.0)*r11*x10887*x10888))+((r02*x10890))+(((-1.0)*r01*x10887*x10892)));
evalcond[5]=((((-1.0)*r02*sj5*x10888))+((r00*sj0*x10891))+(((-1.0)*r11*x10887*x10892))+((r12*x10890))+((r01*sj0*x10887))+(((-1.0)*r10*x10896)));
evalcond[6]=((-0.2413)+pz+(((-0.026255)*x10895))+(((0.026255)*x10893)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10897=(cj0*cj6);
IkReal x10898=(sj0*sj6);
IkReal x10899=((1.0)*r11);
IkReal x10900=(cj6*sj0);
IkReal x10901=(cj0*sj6);
if( IKabs((((r01*x10898))+(((-1.0)*r00*x10900))+((r10*x10897))+(((-1.0)*x10899*x10901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x10901))+(((-1.0)*x10898*x10899))+((r10*x10900))+((r00*x10897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x10898))+(((-1.0)*r00*x10900))+((r10*x10897))+(((-1.0)*x10899*x10901))))+IKsqr(((((-1.0)*r01*x10901))+(((-1.0)*x10898*x10899))+((r10*x10900))+((r00*x10897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x10898))+(((-1.0)*r00*x10900))+((r10*x10897))+(((-1.0)*x10899*x10901))), ((((-1.0)*r01*x10901))+(((-1.0)*x10898*x10899))+((r10*x10900))+((r00*x10897))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10902=IKsin(j4);
IkReal x10903=IKcos(j4);
IkReal x10904=(r11*sj6);
IkReal x10905=((0.026255)*cj0);
IkReal x10906=(r01*sj6);
IkReal x10907=(sj0*sj5);
IkReal x10908=(cj6*r11);
IkReal x10909=(r10*sj6);
IkReal x10910=(cj5*r12);
IkReal x10911=(cj6*sj0);
IkReal x10912=((1.0)*sj0);
IkReal x10913=(cj5*r02);
IkReal x10914=((1.0)*r10);
IkReal x10915=(cj0*sj5);
IkReal x10916=(r00*sj6);
IkReal x10917=((0.026255)*sj0);
IkReal x10918=(cj0*cj6);
IkReal x10919=((1.0)*cj0);
IkReal x10920=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x10918))+((sj0*x10904))+(((-1.0)*x10911*x10914))+((cj0*x10906))+x10903);
evalcond[1]=((((-1.0)*x10914*x10918))+(((-1.0)*x10906*x10912))+((r00*x10911))+((cj0*x10904))+x10902);
evalcond[2]=(((sj0*x10910))+((x10915*x10920))+((x10915*x10916))+((x10907*x10909))+((x10907*x10908))+((cj0*x10913))+x10902);
evalcond[3]=(((x10909*x10915))+(((-1.0)*x10907*x10920))+(((-1.0)*x10907*x10916))+(((-1.0)*x10912*x10913))+((x10908*x10915))+(((-1.0)*x10903))+((cj0*x10910)));
evalcond[4]=((0.09756)+(((0.02626)*x10902))+(((0.026255)*r00*x10911))+(((-1.0)*x10906*x10917))+(((0.0718)*x10903))+(((-1.0)*cj6*r10*x10905))+((x10904*x10905))+(((-1.0)*py*x10919))+((px*sj0)));
evalcond[5]=((-0.0001)+(((0.02626)*x10903))+(((-1.0)*cj6*r00*x10905))+(((-0.0718)*x10902))+(((-1.0)*py*x10912))+((x10905*x10906))+(((-0.026255)*r10*x10911))+(((-1.0)*px*x10919))+((x10904*x10917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10921=(cj5*cj6);
IkReal x10922=(r11*sj0);
IkReal x10923=(cj0*sj6);
IkReal x10924=(cj6*sj5);
IkReal x10925=((1.0)*cj0);
IkReal x10926=(r10*sj0);
IkReal x10927=((1.0)*cj5);
IkReal x10928=(cj0*r02);
IkReal x10929=((1.0)*sj5);
IkReal x10930=(cj5*sj6);
IkReal x10931=(cj6*r00);
IkReal x10932=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x10929))+((r21*x10921))+((r20*x10930)));
evalcond[2]=((((-1.0)*x10925*x10931))+((sj6*x10922))+((r01*x10923))+(((-1.0)*cj6*x10926)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10921*x10925))+((sj5*x10928))+(((-1.0)*sj6*x10926*x10927))+((sj5*x10932))+(((-1.0)*r00*x10923*x10927))+(((-1.0)*x10921*x10922)));
evalcond[4]=(((cj5*x10932))+((r00*sj5*x10923))+((sj5*sj6*x10926))+((cj5*x10928))+((cj0*r01*x10924))+((x10922*x10924)));
evalcond[5]=((((-1.0)*r10*x10923*x10927))+(((-1.0)*r11*x10921*x10925))+((cj0*r12*sj5))+((r01*sj0*x10921))+(((-1.0)*r02*sj0*x10929))+((r00*sj0*x10930)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj0*x10931))+(((0.026255)*sj6*x10922))+(((-0.026255)*cj6*x10926))+(((0.026255)*r01*x10923))+(((-1.0)*px*x10925))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10933=(cj6*r20);
IkReal x10934=(r21*sj6);
if( IKabs(((1.76044568245125)+(((6.96378830083565e-5)*x10933))+(((-6.96378830083565e-5)*x10934))+(((-13.9275766016713)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10934))+x10933)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((6.96378830083565e-5)*x10933))+(((-6.96378830083565e-5)*x10934))+(((-13.9275766016713)*pz))))+IKsqr(((((-1.0)*x10934))+x10933))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((6.96378830083565e-5)*x10933))+(((-6.96378830083565e-5)*x10934))+(((-13.9275766016713)*pz))), ((((-1.0)*x10934))+x10933));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10935=IKsin(j4);
IkReal x10936=IKcos(j4);
IkReal x10937=((1.0)*cj5);
IkReal x10938=(cj0*r10);
IkReal x10939=(sj5*sj6);
IkReal x10940=((1.0)*cj6);
IkReal x10941=((0.026255)*cj6);
IkReal x10942=(r21*sj6);
IkReal x10943=((1.0)*x10936);
IkReal x10944=(cj0*r11*sj6);
IkReal x10945=(cj6*r00*sj0);
IkReal x10946=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x10943))+(((-1.0)*x10942))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x10937))+(((-1.0)*x10935))+(((-1.0)*r20*x10939))+(((-1.0)*r21*sj5*x10940)));
evalcond[2]=((-0.1264)+(((0.0718)*x10935))+((r20*x10941))+pz+(((-0.02626)*x10936))+(((-0.026255)*x10942)));
evalcond[3]=((((-1.0)*x10946))+(((-1.0)*x10938*x10940))+x10945+x10944+x10935);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x10940))+((x10938*x10939))+(((-1.0)*x10943))+(((-1.0)*r00*sj0*x10939))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x10937)));
evalcond[5]=((0.09756)+(((0.0718)*x10936))+((r00*sj0*x10941))+(((0.02626)*x10935))+(((-1.0)*x10938*x10941))+((px*sj0))+(((-1.0)*cj0*py))+(((0.026255)*x10944))+(((-0.026255)*x10946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10947=(cj5*cj6);
IkReal x10948=(r11*sj0);
IkReal x10949=(cj0*sj6);
IkReal x10950=(cj6*sj5);
IkReal x10951=((1.0)*cj0);
IkReal x10952=(r10*sj0);
IkReal x10953=((1.0)*cj5);
IkReal x10954=(cj0*r02);
IkReal x10955=((1.0)*sj5);
IkReal x10956=(cj5*sj6);
IkReal x10957=(cj6*r00);
IkReal x10958=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x10947))+(((-1.0)*r22*x10955))+((r20*x10956)));
evalcond[2]=(((r01*x10949))+(((-1.0)*cj6*x10952))+(((-1.0)*x10951*x10957))+((sj6*x10948)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x10952*x10953))+((sj5*x10954))+((sj5*x10958))+(((-1.0)*x10947*x10948))+(((-1.0)*r01*x10947*x10951))+(((-1.0)*r00*x10949*x10953)));
evalcond[4]=(((cj0*r01*x10950))+((cj5*x10954))+((cj5*x10958))+((x10948*x10950))+((sj5*sj6*x10952))+((r00*sj5*x10949)));
evalcond[5]=((((-1.0)*r11*x10947*x10951))+((r01*sj0*x10947))+(((-1.0)*r10*x10949*x10953))+((r00*sj0*x10956))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x10955)));
evalcond[6]=((0.1148)+(((-1.0)*px*x10951))+(((0.026255)*sj6*x10948))+(((-0.026255)*cj6*x10952))+(((-0.026255)*cj0*x10957))+(((-1.0)*py*sj0))+(((0.026255)*r01*x10949)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10959=IKcos(j4);
IkReal x10960=IKsin(j4);
IkReal x10961=((1.0)*cj5);
IkReal x10962=(cj0*r10);
IkReal x10963=(sj5*sj6);
IkReal x10964=((1.0)*cj6);
IkReal x10965=((0.026255)*cj6);
IkReal x10966=(r21*sj6);
IkReal x10967=(cj0*r11*sj6);
IkReal x10968=(cj6*r00*sj0);
IkReal x10969=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+(((-1.0)*x10966))+x10959);
evalcond[1]=((((-1.0)*r21*sj5*x10964))+(((-1.0)*r22*x10961))+x10960+(((-1.0)*r20*x10963)));
evalcond[2]=((-0.1246)+(((0.02626)*x10959))+((r20*x10965))+pz+(((-0.0718)*x10960))+(((-0.026255)*x10966)));
evalcond[3]=((((-1.0)*x10962*x10964))+(((-1.0)*x10969))+x10967+x10960+x10968);
evalcond[4]=((((-1.0)*r00*sj0*x10963))+((cj0*cj5*r12))+((x10962*x10963))+(((-1.0)*r01*sj0*sj5*x10964))+(((-1.0)*r02*sj0*x10961))+((cj0*cj6*r11*sj5))+(((-1.0)*x10959)));
evalcond[5]=((0.09756)+(((0.026255)*x10967))+(((0.02626)*x10960))+((r00*sj0*x10965))+(((-1.0)*x10962*x10965))+(((0.0718)*x10959))+((px*sj0))+(((-0.026255)*x10969))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10970=((1.0)*sj5);
IkReal x10971=((1.0)*sj6);
CheckValue<IkReal> x10972=IKPowWithIntegerCheck(sj2,-1);
if(!x10972.valid){
continue;
}
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(cj2,-1);
if(!x10973.valid){
continue;
}
if( IKabs(((x10972.value)*(((((-1.0)*r20*sj6*x10970))+(((-1.0)*cj6*r21*x10970))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10973.value)*(((((-1.0)*r11*sj0*x10971))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x10971))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10972.value)*(((((-1.0)*r20*sj6*x10970))+(((-1.0)*cj6*r21*x10970))+(((-1.0)*cj5*r22))))))+IKsqr(((x10973.value)*(((((-1.0)*r11*sj0*x10971))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x10971))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10972.value)*(((((-1.0)*r20*sj6*x10970))+(((-1.0)*cj6*r21*x10970))+(((-1.0)*cj5*r22))))), ((x10973.value)*(((((-1.0)*r11*sj0*x10971))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x10971))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10974=IKsin(j4);
IkReal x10975=IKcos(j4);
IkReal x10976=(r11*sj0);
IkReal x10977=(cj0*sj6);
IkReal x10978=((0.026255)*r01);
IkReal x10979=(cj5*r12);
IkReal x10980=(cj6*sj5);
IkReal x10981=(r10*sj5);
IkReal x10982=(sj0*sj6);
IkReal x10983=((1.0)*cj5);
IkReal x10984=((1.0)*r01);
IkReal x10985=(r00*sj5);
IkReal x10986=((0.026255)*sj6);
IkReal x10987=((1.0)*py);
IkReal x10988=((1.0)*sj2);
IkReal x10989=((0.026255)*cj6);
IkReal x10990=((1.0)*r21);
IkReal x10991=((1.0)*cj0);
IkReal x10992=((1.0)*cj6*r10);
IkReal x10993=(cj2*x10974);
IkReal x10994=(cj6*r00*sj0);
IkReal x10995=(cj2*x10975);
evalcond[0]=((((-1.0)*x10975*x10988))+(((-1.0)*sj6*x10990))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x10983))+(((-1.0)*x10980*x10990))+(((-1.0)*x10974*x10988))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(((r11*x10977))+(((-1.0)*cj6*r10*x10991))+(((-1.0)*x10982*x10984))+x10974+x10994);
evalcond[3]=(((r01*x10977))+(((-1.0)*sj0*x10992))+((sj6*x10976))+(((-1.0)*cj6*r00*x10991))+x10995);
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((-1.0)*r21*x10986))+(((-0.0009)*sj2))+(((-0.02626)*sj2*x10975))+pz+((r20*x10989))+(((0.0718)*sj2*x10974)));
evalcond[5]=(((cj0*r01*x10980))+((cj0*cj5*r02))+((sj0*x10979))+((x10977*x10985))+((x10981*x10982))+((x10976*x10980))+x10993);
evalcond[6]=((((-1.0)*sj0*x10980*x10984))+(((-1.0)*x10982*x10985))+((x10977*x10981))+((cj0*x10979))+((cj0*r11*x10980))+(((-1.0)*r02*sj0*x10983))+(((-1.0)*x10975)));
evalcond[7]=((0.09756)+(((0.02626)*x10974))+(((-1.0)*cj0*x10987))+(((0.026255)*r11*x10977))+(((-1.0)*cj0*r10*x10989))+(((0.0718)*x10975))+((r00*sj0*x10989))+(((-1.0)*x10978*x10982))+((px*sj0)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((0.02626)*x10995))+((x10977*x10978))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x10989))+(((-1.0)*sj0*x10987))+(((-1.0)*px*x10991))+(((-0.0718)*x10993))+((x10976*x10986))+(((-1.0)*r10*sj0*x10989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10996=((1.0)*sj6);
CheckValue<IkReal> x10997=IKPowWithIntegerCheck(sj2,-1);
if(!x10997.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r11*x10996))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10997.value)*(((((-1.0)*r21*x10996))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r11*x10996))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))+IKsqr(((x10997.value)*(((((-1.0)*r21*x10996))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r11*x10996))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))), ((x10997.value)*(((((-1.0)*r21*x10996))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10998=IKsin(j4);
IkReal x10999=IKcos(j4);
IkReal x11000=(r11*sj0);
IkReal x11001=(cj0*sj6);
IkReal x11002=((0.026255)*r01);
IkReal x11003=(cj5*r12);
IkReal x11004=(cj6*sj5);
IkReal x11005=(r10*sj5);
IkReal x11006=(sj0*sj6);
IkReal x11007=((1.0)*cj5);
IkReal x11008=((1.0)*r01);
IkReal x11009=(r00*sj5);
IkReal x11010=((0.026255)*sj6);
IkReal x11011=((1.0)*py);
IkReal x11012=((1.0)*sj2);
IkReal x11013=((0.026255)*cj6);
IkReal x11014=((1.0)*r21);
IkReal x11015=((1.0)*cj0);
IkReal x11016=((1.0)*cj6*r10);
IkReal x11017=(cj2*x10998);
IkReal x11018=(cj6*r00*sj0);
IkReal x11019=(cj2*x10999);
evalcond[0]=((((-1.0)*x10999*x11012))+(((-1.0)*sj6*x11014))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x11007))+(((-1.0)*x11004*x11014))+(((-1.0)*x10998*x11012))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*cj6*r10*x11015))+x11018+((r11*x11001))+(((-1.0)*x11006*x11008))+x10998);
evalcond[3]=((((-1.0)*cj6*r00*x11015))+x11019+((r01*x11001))+((sj6*x11000))+(((-1.0)*sj0*x11016)));
evalcond[4]=((-0.1255)+(((0.0718)*sj2*x10998))+((r20*x11013))+(((-0.1158)*cj2))+(((-0.02626)*sj2*x10999))+(((-0.0009)*sj2))+pz+(((-1.0)*r21*x11010)));
evalcond[5]=(((cj0*cj5*r02))+((x11005*x11006))+((cj0*r01*x11004))+((x11001*x11009))+x11017+((x11000*x11004))+((sj0*x11003)));
evalcond[6]=((((-1.0)*x11006*x11009))+((x11001*x11005))+(((-1.0)*x10999))+((cj0*x11003))+(((-1.0)*sj0*x11004*x11008))+((cj0*r11*x11004))+(((-1.0)*r02*sj0*x11007)));
evalcond[7]=((0.09756)+(((0.02626)*x10998))+(((-1.0)*x11002*x11006))+(((0.026255)*r11*x11001))+(((0.0718)*x10999))+(((-1.0)*cj0*r10*x11013))+(((-1.0)*cj0*x11011))+((r00*sj0*x11013))+((px*sj0)));
evalcond[8]=((-0.001)+(((-1.0)*px*x11015))+(((-1.0)*cj0*r00*x11013))+(((0.02626)*x11019))+(((-0.1158)*sj2))+((x11001*x11002))+((x11000*x11010))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x11013))+(((-0.0718)*x11017))+(((-1.0)*sj0*x11011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11020=((1.0)*r21);
CheckValue<IkReal> x11021 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x11020))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x11020))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11021.valid){
continue;
}
CheckValue<IkReal> x11022=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x11022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11021.value)+(((1.5707963267949)*(x11022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11023=IKsin(j4);
IkReal x11024=IKcos(j4);
IkReal x11025=(r11*sj0);
IkReal x11026=(cj0*sj6);
IkReal x11027=((0.026255)*r01);
IkReal x11028=(cj5*r12);
IkReal x11029=(cj6*sj5);
IkReal x11030=(r10*sj5);
IkReal x11031=(sj0*sj6);
IkReal x11032=((1.0)*cj5);
IkReal x11033=((1.0)*r01);
IkReal x11034=(r00*sj5);
IkReal x11035=((0.026255)*sj6);
IkReal x11036=((1.0)*py);
IkReal x11037=((1.0)*sj2);
IkReal x11038=((0.026255)*cj6);
IkReal x11039=((1.0)*r21);
IkReal x11040=((1.0)*cj0);
IkReal x11041=((1.0)*cj6*r10);
IkReal x11042=(cj2*x11023);
IkReal x11043=(cj6*r00*sj0);
IkReal x11044=(cj2*x11024);
evalcond[0]=((((-1.0)*sj6*x11039))+((cj6*r20))+(((-1.0)*x11024*x11037)));
evalcond[1]=((((-1.0)*x11029*x11039))+(((-1.0)*x11023*x11037))+(((-1.0)*r22*x11032))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x11043+x11023+(((-1.0)*x11031*x11033))+(((-1.0)*cj6*r10*x11040))+((r11*x11026)));
evalcond[3]=((((-1.0)*sj0*x11041))+((sj6*x11025))+((r01*x11026))+x11044+(((-1.0)*cj6*r00*x11040)));
evalcond[4]=((-0.1255)+((r20*x11038))+(((-1.0)*r21*x11035))+(((-0.02626)*sj2*x11024))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((0.0718)*sj2*x11023)));
evalcond[5]=(((cj0*cj5*r02))+((x11026*x11034))+((cj0*r01*x11029))+((x11030*x11031))+x11042+((x11025*x11029))+((sj0*x11028)));
evalcond[6]=((((-1.0)*x11024))+(((-1.0)*sj0*x11029*x11033))+((x11026*x11030))+((cj0*r11*x11029))+(((-1.0)*r02*sj0*x11032))+(((-1.0)*x11031*x11034))+((cj0*x11028)));
evalcond[7]=((0.09756)+((r00*sj0*x11038))+(((-1.0)*cj0*x11036))+(((0.02626)*x11023))+(((0.0718)*x11024))+(((-1.0)*cj0*r10*x11038))+((px*sj0))+(((-1.0)*x11027*x11031))+(((0.026255)*r11*x11026)));
evalcond[8]=((-0.001)+(((0.02626)*x11044))+(((-0.1158)*sj2))+(((-0.0718)*x11042))+((x11026*x11027))+(((-1.0)*r10*sj0*x11038))+(((-1.0)*sj0*x11036))+(((-1.0)*px*x11040))+((x11025*x11035))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x11038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11045=(cj0*sj5);
IkReal x11046=(cj5*cj6);
IkReal x11047=((1.0)*sj5);
IkReal x11048=((1.0)*cj0);
IkReal x11049=((1.0)*sj0);
IkReal x11050=(cj5*sj6);
IkReal x11051=(r10*x11050);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=(((r20*x11050))+cj2+(((-1.0)*r22*x11047))+((r21*x11046)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*x11049*x11051))+((r12*sj0*sj5))+(((-1.0)*r01*x11046*x11048))+(((-1.0)*r11*x11046*x11049))+(((-1.0)*r00*x11048*x11050))+((r02*x11045)));
evalcond[3]=(((r01*sj0*x11046))+((r00*sj0*x11050))+(((-1.0)*r11*x11046*x11048))+((r12*x11045))+(((-1.0)*r02*sj0*x11047))+(((-1.0)*x11048*x11051)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11052=(cj5*cj6);
IkReal x11053=((1.0)*sj0);
IkReal x11054=((1.0)*r22);
IkReal x11055=(cj0*sj5);
IkReal x11056=(cj5*sj6);
IkReal x11057=((1.0)*cj0);
IkReal x11058=(cj6*r20);
IkReal x11059=((1.0)*sj5);
IkReal x11060=(r21*sj6);
IkReal x11061=(x11056*x11057);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x11056))+(((-1.0)*sj5*x11054))+((r21*x11052)));
evalcond[2]=(x11058+(((-1.0)*x11060)));
evalcond[3]=((((-1.0)*cj5*x11054))+(((-1.0)*r20*sj6*x11059))+(((-1.0)*cj6*r21*x11059)));
evalcond[4]=((((-1.0)*r01*x11052*x11057))+(((-1.0)*r00*x11061))+(((-1.0)*r11*x11052*x11053))+(((-1.0)*r10*x11053*x11056))+((r12*sj0*sj5))+((r02*x11055)));
evalcond[5]=(((r12*x11055))+(((-1.0)*r11*x11052*x11057))+((r01*sj0*x11052))+(((-1.0)*r10*x11061))+((r00*sj0*x11056))+(((-1.0)*r02*sj5*x11053)));
evalcond[6]=((0.2413)+(((-0.026255)*x11060))+pz+(((0.026255)*x11058)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11062=(cj0*cj6);
IkReal x11063=(sj0*sj6);
IkReal x11064=((1.0)*r11);
IkReal x11065=(cj6*sj0);
IkReal x11066=(cj0*sj6);
if( IKabs((((r10*x11062))+((r01*x11063))+(((-1.0)*r00*x11065))+(((-1.0)*x11064*x11066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x11065))+(((-1.0)*r01*x11066))+((r00*x11062))+(((-1.0)*x11063*x11064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11062))+((r01*x11063))+(((-1.0)*r00*x11065))+(((-1.0)*x11064*x11066))))+IKsqr((((r10*x11065))+(((-1.0)*r01*x11066))+((r00*x11062))+(((-1.0)*x11063*x11064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x11062))+((r01*x11063))+(((-1.0)*r00*x11065))+(((-1.0)*x11064*x11066))), (((r10*x11065))+(((-1.0)*r01*x11066))+((r00*x11062))+(((-1.0)*x11063*x11064))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11067=IKsin(j4);
IkReal x11068=IKcos(j4);
IkReal x11069=(r11*sj6);
IkReal x11070=((0.026255)*cj0);
IkReal x11071=(r01*sj6);
IkReal x11072=(sj0*sj5);
IkReal x11073=(cj6*r11);
IkReal x11074=(r10*sj6);
IkReal x11075=(cj5*r12);
IkReal x11076=(cj6*sj0);
IkReal x11077=((1.0)*sj0);
IkReal x11078=(cj5*r02);
IkReal x11079=((1.0)*r10);
IkReal x11080=(cj0*sj5);
IkReal x11081=(r00*sj6);
IkReal x11082=((0.026255)*sj0);
IkReal x11083=(cj0*cj6);
IkReal x11084=((1.0)*cj0);
IkReal x11085=(cj6*r01);
evalcond[0]=(((sj0*x11069))+(((-1.0)*r00*x11083))+x11068+(((-1.0)*x11076*x11079))+((cj0*x11071)));
evalcond[1]=((((-1.0)*x11071*x11077))+x11067+((cj0*x11069))+((r00*x11076))+(((-1.0)*x11079*x11083)));
evalcond[2]=(((x11072*x11073))+((x11072*x11074))+x11067+((sj0*x11075))+((cj0*x11078))+((x11080*x11085))+((x11080*x11081)));
evalcond[3]=(((x11073*x11080))+((x11074*x11080))+(((-1.0)*x11072*x11081))+(((-1.0)*x11072*x11085))+(((-1.0)*x11077*x11078))+((cj0*x11075))+(((-1.0)*x11068)));
evalcond[4]=((0.09736)+(((0.02626)*x11067))+(((-1.0)*cj6*r10*x11070))+((x11069*x11070))+(((-1.0)*x11071*x11082))+(((-1.0)*py*x11084))+(((0.0718)*x11068))+(((0.026255)*r00*x11076))+((px*sj0)));
evalcond[5]=((-0.0001)+(((0.02626)*x11068))+(((-1.0)*cj6*r00*x11070))+(((-1.0)*py*x11077))+((x11069*x11082))+(((-0.0718)*x11067))+(((-1.0)*px*x11084))+(((-0.026255)*r10*x11076))+((x11070*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11086=(cj5*cj6);
IkReal x11087=(r11*sj0);
IkReal x11088=(cj0*sj6);
IkReal x11089=(cj6*sj5);
IkReal x11090=((1.0)*cj0);
IkReal x11091=(r10*sj0);
IkReal x11092=((1.0)*cj5);
IkReal x11093=(cj0*r02);
IkReal x11094=((1.0)*sj5);
IkReal x11095=(cj5*sj6);
IkReal x11096=(cj6*r00);
IkReal x11097=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x11094))+((r21*x11086))+((r20*x11095)));
evalcond[2]=(((r01*x11088))+(((-1.0)*cj6*x11091))+(((-1.0)*x11090*x11096))+((sj6*x11087)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x11086*x11090))+(((-1.0)*x11086*x11087))+(((-1.0)*sj6*x11091*x11092))+((sj5*x11097))+((sj5*x11093))+(((-1.0)*r00*x11088*x11092)));
evalcond[4]=(((x11087*x11089))+((cj0*r01*x11089))+((cj5*x11097))+((cj5*x11093))+((sj5*sj6*x11091))+((r00*sj5*x11088)));
evalcond[5]=((((-1.0)*r10*x11088*x11092))+((r01*sj0*x11086))+((r00*sj0*x11095))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x11094))+(((-1.0)*r11*x11086*x11090)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj0*x11096))+(((-0.026255)*cj6*x11091))+(((0.026255)*sj6*x11087))+(((-1.0)*px*x11090))+(((-1.0)*py*sj0))+(((0.026255)*r01*x11088)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11098=IKcos(j4);
IkReal x11099=IKsin(j4);
IkReal x11100=((1.0)*cj5);
IkReal x11101=(cj0*r10);
IkReal x11102=(sj5*sj6);
IkReal x11103=((1.0)*cj6);
IkReal x11104=((0.026255)*cj6);
IkReal x11105=(r21*sj6);
IkReal x11106=(cj0*r11*sj6);
IkReal x11107=(cj6*r00*sj0);
IkReal x11108=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x11105))+x11098+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x11102))+x11099+(((-1.0)*r22*x11100))+(((-1.0)*r21*sj5*x11103)));
evalcond[2]=((0.1264)+(((-0.0718)*x11099))+pz+((r20*x11104))+(((0.02626)*x11098))+(((-0.026255)*x11105)));
evalcond[3]=((((-1.0)*x11108))+(((-1.0)*x11101*x11103))+x11099+x11106+x11107);
evalcond[4]=((((-1.0)*r00*sj0*x11102))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x11100))+(((-1.0)*x11098))+((x11101*x11102))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x11103)));
evalcond[5]=((0.09736)+(((-1.0)*x11101*x11104))+(((0.0718)*x11098))+((px*sj0))+(((0.02626)*x11099))+((r00*sj0*x11104))+(((0.026255)*x11106))+(((-0.026255)*x11108))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11109=(cj5*cj6);
IkReal x11110=(r11*sj0);
IkReal x11111=(cj0*sj6);
IkReal x11112=(cj6*sj5);
IkReal x11113=((1.0)*cj0);
IkReal x11114=(r10*sj0);
IkReal x11115=((1.0)*cj5);
IkReal x11116=(cj0*r02);
IkReal x11117=((1.0)*sj5);
IkReal x11118=(cj5*sj6);
IkReal x11119=(cj6*r00);
IkReal x11120=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x11109))+(((-1.0)*r22*x11117))+((r20*x11118)));
evalcond[2]=((((-1.0)*x11113*x11119))+((sj6*x11110))+(((-1.0)*cj6*x11114))+((r01*x11111)));
evalcond[3]=((1.0)+(((-1.0)*sj6*x11114*x11115))+(((-1.0)*x11109*x11110))+(((-1.0)*r01*x11109*x11113))+(((-1.0)*r00*x11111*x11115))+((sj5*x11116))+((sj5*x11120)));
evalcond[4]=(((cj5*x11116))+((cj5*x11120))+((cj0*r01*x11112))+((r00*sj5*x11111))+((x11110*x11112))+((sj5*sj6*x11114)));
evalcond[5]=((((-1.0)*r11*x11109*x11113))+(((-1.0)*r10*x11111*x11115))+((r01*sj0*x11109))+(((-1.0)*r02*sj0*x11117))+((cj0*r12*sj5))+((r00*sj0*x11118)));
evalcond[6]=((0.1148)+(((-1.0)*px*x11113))+(((0.026255)*r01*x11111))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x11114))+(((0.026255)*sj6*x11110))+(((-0.026255)*cj0*x11119)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11121=(cj6*r20);
IkReal x11122=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11122))+(((6.96378830083565e-5)*x11121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11122))+x11121)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11122))+(((6.96378830083565e-5)*x11121))))+IKsqr(((((-1.0)*x11122))+x11121))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11122))+(((6.96378830083565e-5)*x11121))), ((((-1.0)*x11122))+x11121));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11123=IKsin(j4);
IkReal x11124=IKcos(j4);
IkReal x11125=((1.0)*cj5);
IkReal x11126=(cj0*r10);
IkReal x11127=(sj5*sj6);
IkReal x11128=((1.0)*cj6);
IkReal x11129=((0.026255)*cj6);
IkReal x11130=(r21*sj6);
IkReal x11131=((1.0)*x11124);
IkReal x11132=(cj0*r11*sj6);
IkReal x11133=(cj6*r00*sj0);
IkReal x11134=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x11130))+((cj6*r20))+(((-1.0)*x11131)));
evalcond[1]=((((-1.0)*x11123))+(((-1.0)*r21*sj5*x11128))+(((-1.0)*r20*x11127))+(((-1.0)*r22*x11125)));
evalcond[2]=((0.1246)+pz+(((-0.02626)*x11124))+(((-0.026255)*x11130))+(((0.0718)*x11123))+((r20*x11129)));
evalcond[3]=((((-1.0)*x11134))+x11133+x11132+x11123+(((-1.0)*x11126*x11128)));
evalcond[4]=((((-1.0)*r00*sj0*x11127))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x11125))+((cj0*cj6*r11*sj5))+(((-1.0)*x11131))+(((-1.0)*r01*sj0*sj5*x11128))+((x11126*x11127)));
evalcond[5]=((0.09736)+(((0.026255)*x11132))+(((0.02626)*x11123))+((px*sj0))+(((-0.026255)*x11134))+(((-1.0)*x11126*x11129))+(((0.0718)*x11124))+(((-1.0)*cj0*py))+((r00*sj0*x11129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11135=((1.0)*sj6);
CheckValue<IkReal> x11136=IKPowWithIntegerCheck(sj2,-1);
if(!x11136.valid){
continue;
}
CheckValue<IkReal> x11137=IKPowWithIntegerCheck(cj2,-1);
if(!x11137.valid){
continue;
}
if( IKabs(((x11136.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11137.value)*(((((-1.0)*r11*sj0*x11135))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x11135)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11136.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x11137.value)*(((((-1.0)*r11*sj0*x11135))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x11135))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11136.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x11137.value)*(((((-1.0)*r11*sj0*x11135))+((cj6*r10*sj0))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x11135))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11138=IKsin(j4);
IkReal x11139=IKcos(j4);
IkReal x11140=(r11*sj0);
IkReal x11141=(cj0*sj6);
IkReal x11142=((0.026255)*r01);
IkReal x11143=(cj0*cj5);
IkReal x11144=(cj6*sj5);
IkReal x11145=(r10*sj0);
IkReal x11146=(sj5*sj6);
IkReal x11147=((1.0)*cj5);
IkReal x11148=((1.0)*cj6);
IkReal x11149=((1.0)*sj0);
IkReal x11150=((0.026255)*sj6);
IkReal x11151=(cj0*r10);
IkReal x11152=((0.026255)*cj6);
IkReal x11153=((1.0)*r21);
IkReal x11154=((1.0)*cj0);
IkReal x11155=(cj0*r00);
IkReal x11156=(cj2*x11138);
IkReal x11157=(cj6*r00*sj0);
IkReal x11158=(cj2*x11139);
IkReal x11159=(sj2*x11138);
IkReal x11160=(sj2*x11139);
evalcond[0]=(x11160+((cj6*r20))+(((-1.0)*sj6*x11153)));
evalcond[1]=((((-1.0)*r20*x11146))+(((-1.0)*r22*x11147))+x11159+(((-1.0)*x11144*x11153)));
evalcond[2]=((((-1.0)*x11148*x11151))+((r11*x11141))+x11138+x11157+(((-1.0)*r01*sj6*x11149)));
evalcond[3]=(((r01*x11141))+((sj6*x11140))+(((-1.0)*x11148*x11155))+x11158+(((-1.0)*x11145*x11148)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((0.02626)*x11160))+(((-1.0)*r21*x11150))+pz+(((-0.0718)*x11159))+((r20*x11152))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x11143))+((r00*sj5*x11141))+((x11140*x11144))+x11156+((x11145*x11146))+((cj0*r01*x11144)));
evalcond[6]=((((-1.0)*x11139))+(((-1.0)*r00*x11146*x11149))+((r10*sj5*x11141))+(((-1.0)*r02*sj0*x11147))+((r12*x11143))+(((-1.0)*r01*x11144*x11149))+((cj0*r11*x11144)));
evalcond[7]=((0.09736)+((r00*sj0*x11152))+(((0.026255)*r11*x11141))+(((-1.0)*py*x11154))+(((-1.0)*sj0*sj6*x11142))+(((-1.0)*x11151*x11152))+(((0.02626)*x11138))+((px*sj0))+(((0.0718)*x11139)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*py*x11149))+((x11140*x11150))+(((0.0009)*cj2))+(((-0.0718)*x11156))+((x11141*x11142))+(((-1.0)*x11145*x11152))+(((-1.0)*px*x11154))+(((-1.0)*x11152*x11155))+(((0.02626)*x11158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11161=((1.0)*cj6);
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(sj2,-1);
if(!x11162.valid){
continue;
}
if( IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x11161))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11162.value)*((((r21*sj6))+(((-1.0)*r20*x11161)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x11161))+(((-1.0)*cj0*r11*sj6))))+IKsqr(((x11162.value)*((((r21*sj6))+(((-1.0)*r20*x11161))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x11161))+(((-1.0)*cj0*r11*sj6))), ((x11162.value)*((((r21*sj6))+(((-1.0)*r20*x11161))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11163=IKsin(j4);
IkReal x11164=IKcos(j4);
IkReal x11165=(r11*sj0);
IkReal x11166=(cj0*sj6);
IkReal x11167=((0.026255)*r01);
IkReal x11168=(cj0*cj5);
IkReal x11169=(cj6*sj5);
IkReal x11170=(r10*sj0);
IkReal x11171=(sj5*sj6);
IkReal x11172=((1.0)*cj5);
IkReal x11173=((1.0)*cj6);
IkReal x11174=((1.0)*sj0);
IkReal x11175=((0.026255)*sj6);
IkReal x11176=(cj0*r10);
IkReal x11177=((0.026255)*cj6);
IkReal x11178=((1.0)*r21);
IkReal x11179=((1.0)*cj0);
IkReal x11180=(cj0*r00);
IkReal x11181=(cj2*x11163);
IkReal x11182=(cj6*r00*sj0);
IkReal x11183=(cj2*x11164);
IkReal x11184=(sj2*x11163);
IkReal x11185=(sj2*x11164);
evalcond[0]=(x11185+(((-1.0)*sj6*x11178))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x11171))+(((-1.0)*r22*x11172))+(((-1.0)*x11169*x11178))+x11184);
evalcond[2]=((((-1.0)*r01*sj6*x11174))+((r11*x11166))+x11163+x11182+(((-1.0)*x11173*x11176)));
evalcond[3]=(((sj6*x11165))+((r01*x11166))+x11183+(((-1.0)*x11173*x11180))+(((-1.0)*x11170*x11173)));
evalcond[4]=((0.1255)+(((0.02626)*x11185))+(((0.1158)*cj2))+((r20*x11177))+(((-0.0718)*x11184))+(((-1.0)*r21*x11175))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x11169))+((x11165*x11169))+x11181+((r02*x11168))+((r00*sj5*x11166))+((x11170*x11171)));
evalcond[6]=(((r10*sj5*x11166))+((r12*x11168))+(((-1.0)*x11164))+(((-1.0)*r00*x11171*x11174))+((cj0*r11*x11169))+(((-1.0)*r02*sj0*x11172))+(((-1.0)*r01*x11169*x11174)));
evalcond[7]=((0.09736)+(((0.026255)*r11*x11166))+(((-1.0)*sj0*sj6*x11167))+(((-1.0)*x11176*x11177))+(((-1.0)*py*x11179))+((r00*sj0*x11177))+(((0.02626)*x11163))+(((0.0718)*x11164))+((px*sj0)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*py*x11174))+(((0.02626)*x11183))+((x11166*x11167))+((x11165*x11175))+(((-0.0718)*x11181))+(((0.0009)*cj2))+(((-1.0)*px*x11179))+(((-1.0)*x11170*x11177))+(((-1.0)*x11177*x11180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11186=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x11186.valid){
continue;
}
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11186.value)))+(x11187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11188=IKsin(j4);
IkReal x11189=IKcos(j4);
IkReal x11190=(r11*sj0);
IkReal x11191=(cj0*sj6);
IkReal x11192=((0.026255)*r01);
IkReal x11193=(cj0*cj5);
IkReal x11194=(cj6*sj5);
IkReal x11195=(r10*sj0);
IkReal x11196=(sj5*sj6);
IkReal x11197=((1.0)*cj5);
IkReal x11198=((1.0)*cj6);
IkReal x11199=((1.0)*sj0);
IkReal x11200=((0.026255)*sj6);
IkReal x11201=(cj0*r10);
IkReal x11202=((0.026255)*cj6);
IkReal x11203=((1.0)*r21);
IkReal x11204=((1.0)*cj0);
IkReal x11205=(cj0*r00);
IkReal x11206=(cj2*x11188);
IkReal x11207=(cj6*r00*sj0);
IkReal x11208=(cj2*x11189);
IkReal x11209=(sj2*x11188);
IkReal x11210=(sj2*x11189);
evalcond[0]=((((-1.0)*sj6*x11203))+x11210+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x11196))+(((-1.0)*r22*x11197))+x11209+(((-1.0)*x11194*x11203)));
evalcond[2]=(((r11*x11191))+x11207+(((-1.0)*r01*sj6*x11199))+x11188+(((-1.0)*x11198*x11201)));
evalcond[3]=((((-1.0)*x11195*x11198))+x11208+((r01*x11191))+(((-1.0)*x11198*x11205))+((sj6*x11190)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+((r20*x11202))+(((-0.0718)*x11209))+(((-1.0)*r21*x11200))+(((0.02626)*x11210))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x11194))+((r00*sj5*x11191))+((x11190*x11194))+x11206+((r02*x11193))+((x11195*x11196)));
evalcond[6]=(((r12*x11193))+(((-1.0)*r00*x11196*x11199))+(((-1.0)*r01*x11194*x11199))+(((-1.0)*r02*sj0*x11197))+(((-1.0)*x11189))+((cj0*r11*x11194))+((r10*sj5*x11191)));
evalcond[7]=((0.09736)+(((0.02626)*x11188))+(((0.0718)*x11189))+((r00*sj0*x11202))+(((-1.0)*py*x11204))+((px*sj0))+(((-1.0)*sj0*sj6*x11192))+(((0.026255)*r11*x11191))+(((-1.0)*x11201*x11202)));
evalcond[8]=((-0.001)+(((-1.0)*py*x11199))+(((-1.0)*x11195*x11202))+(((-0.1158)*sj2))+((x11190*x11200))+(((-0.0718)*x11206))+((x11191*x11192))+(((0.0009)*cj2))+(((0.02626)*x11208))+(((-1.0)*x11202*x11205))+(((-1.0)*px*x11204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11211=(cj0*sj5);
IkReal x11212=(cj5*cj6);
IkReal x11213=((1.0)*sj5);
IkReal x11214=((1.0)*cj0);
IkReal x11215=((1.0)*sj0);
IkReal x11216=(cj5*sj6);
IkReal x11217=(r10*x11216);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=(((r21*x11212))+((r20*x11216))+(((-1.0)*cj2))+(((-1.0)*r22*x11213)));
evalcond[2]=(((r02*x11211))+sj2+(((-1.0)*r11*x11212*x11215))+((r12*sj0*sj5))+(((-1.0)*x11215*x11217))+(((-1.0)*r00*x11214*x11216))+(((-1.0)*r01*x11212*x11214)));
evalcond[3]=((((-1.0)*r11*x11212*x11214))+((r00*sj0*x11216))+((r01*sj0*x11212))+((r12*x11211))+(((-1.0)*r02*sj0*x11213))+(((-1.0)*x11214*x11217)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11218=(cj5*cj6);
IkReal x11219=((1.0)*sj0);
IkReal x11220=((1.0)*r22);
IkReal x11221=(cj0*sj5);
IkReal x11222=(cj5*sj6);
IkReal x11223=((1.0)*cj0);
IkReal x11224=(cj6*r20);
IkReal x11225=((1.0)*sj5);
IkReal x11226=(r21*sj6);
IkReal x11227=(x11222*x11223);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x11218))+(((-1.0)*sj5*x11220))+((r20*x11222)));
evalcond[2]=(x11224+(((-1.0)*x11226)));
evalcond[3]=((((-1.0)*r20*sj6*x11225))+(((-1.0)*cj5*x11220))+(((-1.0)*cj6*r21*x11225)));
evalcond[4]=((((-1.0)*r10*x11219*x11222))+(((-1.0)*r00*x11227))+(((-1.0)*r01*x11218*x11223))+((r12*sj0*sj5))+((r02*x11221))+(((-1.0)*r11*x11218*x11219)));
evalcond[5]=(((r12*x11221))+(((-1.0)*r02*sj5*x11219))+((r00*sj0*x11222))+(((-1.0)*r10*x11227))+((r01*sj0*x11218))+(((-1.0)*r11*x11218*x11223)));
evalcond[6]=((0.2413)+(((0.026255)*x11224))+(((-0.026255)*x11226))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11228=(cj0*cj6);
IkReal x11229=(cj6*sj0);
IkReal x11230=(cj0*sj6);
IkReal x11231=((1.0)*sj0*sj6);
if( IKabs((((r11*x11230))+(((-1.0)*r01*x11231))+((r00*x11229))+(((-1.0)*r10*x11228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x11230))+((r10*x11229))+((r00*x11228))+(((-1.0)*r11*x11231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x11230))+(((-1.0)*r01*x11231))+((r00*x11229))+(((-1.0)*r10*x11228))))+IKsqr(((((-1.0)*r01*x11230))+((r10*x11229))+((r00*x11228))+(((-1.0)*r11*x11231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x11230))+(((-1.0)*r01*x11231))+((r00*x11229))+(((-1.0)*r10*x11228))), ((((-1.0)*r01*x11230))+((r10*x11229))+((r00*x11228))+(((-1.0)*r11*x11231))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11232=IKsin(j4);
IkReal x11233=IKcos(j4);
IkReal x11234=(r11*sj6);
IkReal x11235=((0.026255)*cj0);
IkReal x11236=(r01*sj6);
IkReal x11237=(sj0*sj5);
IkReal x11238=(cj6*r11);
IkReal x11239=(r10*sj6);
IkReal x11240=(cj5*r12);
IkReal x11241=(cj6*sj0);
IkReal x11242=((1.0)*sj0);
IkReal x11243=(cj5*r02);
IkReal x11244=((1.0)*r10);
IkReal x11245=(cj0*sj5);
IkReal x11246=(r00*sj6);
IkReal x11247=((0.026255)*sj0);
IkReal x11248=(cj0*cj6);
IkReal x11249=((1.0)*cj0);
IkReal x11250=(cj6*r01);
evalcond[0]=(x11233+((sj0*x11234))+(((-1.0)*r00*x11248))+((cj0*x11236))+(((-1.0)*x11241*x11244)));
evalcond[1]=((((-1.0)*x11232))+(((-1.0)*x11236*x11242))+(((-1.0)*x11244*x11248))+((cj0*x11234))+((r00*x11241)));
evalcond[2]=(x11232+((sj0*x11240))+((x11237*x11239))+((x11237*x11238))+((cj0*x11243))+((x11245*x11250))+((x11245*x11246)));
evalcond[3]=(((x11239*x11245))+((x11238*x11245))+x11233+(((-1.0)*x11237*x11250))+(((-1.0)*x11237*x11246))+((cj0*x11240))+(((-1.0)*x11242*x11243)));
evalcond[4]=((-0.09756)+(((-1.0)*x11236*x11247))+(((-0.02626)*x11232))+(((-1.0)*cj6*r10*x11235))+((x11234*x11235))+(((-1.0)*py*x11249))+(((0.026255)*r00*x11241))+((px*sj0))+(((-0.0718)*x11233)));
evalcond[5]=((-0.0001)+((x11234*x11247))+(((-0.026255)*r10*x11241))+(((-1.0)*py*x11242))+((x11235*x11236))+(((-1.0)*px*x11249))+(((0.02626)*x11233))+(((-1.0)*cj6*r00*x11235))+(((-0.0718)*x11232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11251=(cj5*cj6);
IkReal x11252=(r11*sj0);
IkReal x11253=(cj0*sj6);
IkReal x11254=(cj6*sj5);
IkReal x11255=((1.0)*cj0);
IkReal x11256=(r10*sj0);
IkReal x11257=((1.0)*cj5);
IkReal x11258=(cj0*r02);
IkReal x11259=((1.0)*sj5);
IkReal x11260=(cj5*sj6);
IkReal x11261=(cj6*r00);
IkReal x11262=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x11260))+((r21*x11251))+(((-1.0)*r22*x11259)));
evalcond[2]=(((sj6*x11252))+(((-1.0)*x11255*x11261))+(((-1.0)*cj6*x11256))+((r01*x11253)));
evalcond[3]=((1.0)+((sj5*x11258))+(((-1.0)*r00*x11253*x11257))+(((-1.0)*sj6*x11256*x11257))+((sj5*x11262))+(((-1.0)*x11251*x11252))+(((-1.0)*r01*x11251*x11255)));
evalcond[4]=(((cj5*x11262))+((cj0*r01*x11254))+((sj5*sj6*x11256))+((cj5*x11258))+((x11252*x11254))+((r00*sj5*x11253)));
evalcond[5]=((((-1.0)*r11*x11251*x11255))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x11259))+((r00*sj0*x11260))+(((-1.0)*r10*x11253*x11257))+((r01*sj0*x11251)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj6*x11256))+(((-1.0)*px*x11255))+(((0.026255)*r01*x11253))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x11252))+(((-0.026255)*cj0*x11261)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=((1.0)*cj5);
IkReal x11266=(cj0*r10);
IkReal x11267=(sj5*sj6);
IkReal x11268=((1.0)*cj6);
IkReal x11269=((0.026255)*cj6);
IkReal x11270=(r21*sj6);
IkReal x11271=(cj0*r11*sj6);
IkReal x11272=(cj6*r00*sj0);
IkReal x11273=(r01*sj0*sj6);
evalcond[0]=(x11263+(((-1.0)*x11270))+((cj6*r20)));
evalcond[1]=(x11264+(((-1.0)*r20*x11267))+(((-1.0)*r21*sj5*x11268))+(((-1.0)*r22*x11265)));
evalcond[2]=((0.1264)+(((0.02626)*x11263))+(((-0.026255)*x11270))+pz+((r20*x11269))+(((-0.0718)*x11264)));
evalcond[3]=((((-1.0)*x11264))+x11272+x11271+(((-1.0)*x11273))+(((-1.0)*x11266*x11268)));
evalcond[4]=((((-1.0)*r02*sj0*x11265))+x11263+((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x11268))+((cj0*cj6*r11*sj5))+((x11266*x11267))+(((-1.0)*r00*sj0*x11267)));
evalcond[5]=((-0.09756)+(((-0.026255)*x11273))+(((-0.02626)*x11264))+(((0.026255)*x11271))+((px*sj0))+((r00*sj0*x11269))+(((-0.0718)*x11263))+(((-1.0)*cj0*py))+(((-1.0)*x11266*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11274=(cj5*cj6);
IkReal x11275=(r11*sj0);
IkReal x11276=(cj0*sj6);
IkReal x11277=(cj6*sj5);
IkReal x11278=((1.0)*cj0);
IkReal x11279=(r10*sj0);
IkReal x11280=((1.0)*cj5);
IkReal x11281=(cj0*r02);
IkReal x11282=((1.0)*sj5);
IkReal x11283=(cj5*sj6);
IkReal x11284=(cj6*r00);
IkReal x11285=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x11282))+((r21*x11274))+((r20*x11283)));
evalcond[2]=((((-1.0)*x11278*x11284))+((r01*x11276))+(((-1.0)*cj6*x11279))+((sj6*x11275)));
evalcond[3]=((-1.0)+((sj5*x11285))+((sj5*x11281))+(((-1.0)*r00*x11276*x11280))+(((-1.0)*sj6*x11279*x11280))+(((-1.0)*r01*x11274*x11278))+(((-1.0)*x11274*x11275)));
evalcond[4]=(((cj5*x11285))+((cj5*x11281))+((sj5*sj6*x11279))+((cj0*r01*x11277))+((x11275*x11277))+((r00*sj5*x11276)));
evalcond[5]=((((-1.0)*r11*x11274*x11278))+((r01*sj0*x11274))+(((-1.0)*r02*sj0*x11282))+((cj0*r12*sj5))+(((-1.0)*r10*x11276*x11280))+((r00*sj0*x11283)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x11284))+(((-0.026255)*cj6*x11279))+(((-1.0)*px*x11278))+(((0.026255)*sj6*x11275))+(((-1.0)*py*sj0))+(((0.026255)*r01*x11276)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11286=(cj6*r20);
IkReal x11287=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11286))+(((-6.96378830083565e-5)*x11287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11286+(((-1.0)*x11287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11286))+(((-6.96378830083565e-5)*x11287))))+IKsqr((x11286+(((-1.0)*x11287))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11286))+(((-6.96378830083565e-5)*x11287))), (x11286+(((-1.0)*x11287))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11288=IKsin(j4);
IkReal x11289=IKcos(j4);
IkReal x11290=((1.0)*cj5);
IkReal x11291=(cj0*r10);
IkReal x11292=(sj5*sj6);
IkReal x11293=((1.0)*cj6);
IkReal x11294=((0.026255)*cj6);
IkReal x11295=(r21*sj6);
IkReal x11296=((1.0)*x11288);
IkReal x11297=(cj0*r11*sj6);
IkReal x11298=(cj6*r00*sj0);
IkReal x11299=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x11289))+(((-1.0)*x11295))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x11290))+(((-1.0)*r21*sj5*x11293))+(((-1.0)*r20*x11292))+(((-1.0)*x11296)));
evalcond[2]=((0.1246)+(((-0.026255)*x11295))+(((0.0718)*x11288))+(((-0.02626)*x11289))+((r20*x11294))+pz);
evalcond[3]=((((-1.0)*x11291*x11293))+x11298+x11297+(((-1.0)*x11299))+(((-1.0)*x11296)));
evalcond[4]=(x11289+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x11290))+(((-1.0)*r01*sj0*sj5*x11293))+((x11291*x11292))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x11292)));
evalcond[5]=((-0.09756)+(((-0.026255)*x11299))+(((-1.0)*x11291*x11294))+(((-0.02626)*x11288))+(((-0.0718)*x11289))+((px*sj0))+((r00*sj0*x11294))+(((0.026255)*x11297))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11300=((1.0)*sj6);
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(sj2,-1);
if(!x11301.valid){
continue;
}
CheckValue<IkReal> x11302=IKPowWithIntegerCheck(cj2,-1);
if(!x11302.valid){
continue;
}
if( IKabs(((x11301.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11302.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x11300))+(((-1.0)*cj0*r01*x11300))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11301.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x11302.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x11300))+(((-1.0)*cj0*r01*x11300))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11301.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x11302.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x11300))+(((-1.0)*cj0*r01*x11300))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11303=IKcos(j4);
IkReal x11304=IKsin(j4);
IkReal x11305=(r11*sj0);
IkReal x11306=(cj0*sj6);
IkReal x11307=((0.026255)*r01);
IkReal x11308=(cj0*cj5);
IkReal x11309=(cj6*sj5);
IkReal x11310=(r10*sj0);
IkReal x11311=(sj5*sj6);
IkReal x11312=((1.0)*cj5);
IkReal x11313=((1.0)*cj6);
IkReal x11314=((1.0)*sj0);
IkReal x11315=((0.026255)*sj6);
IkReal x11316=(cj0*r10);
IkReal x11317=((0.026255)*cj6);
IkReal x11318=((1.0)*r21);
IkReal x11319=((1.0)*cj0);
IkReal x11320=(cj0*r00);
IkReal x11321=(cj2*x11304);
IkReal x11322=(cj6*r00*sj0);
IkReal x11323=(cj2*x11303);
IkReal x11324=(sj2*x11304);
IkReal x11325=(sj2*x11303);
evalcond[0]=((((-1.0)*sj6*x11318))+x11325+((cj6*r20)));
evalcond[1]=((((-1.0)*x11309*x11318))+(((-1.0)*r22*x11312))+x11324+(((-1.0)*r20*x11311)));
evalcond[2]=(((r01*x11306))+x11323+(((-1.0)*x11310*x11313))+(((-1.0)*x11313*x11320))+((sj6*x11305)));
evalcond[3]=((((-1.0)*r01*sj6*x11314))+x11322+(((-1.0)*x11313*x11316))+(((-1.0)*x11304))+((r11*x11306)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-1.0)*r21*x11315))+(((0.02626)*x11325))+pz+((r20*x11317))+(((-0.0718)*x11324))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x11308))+((x11305*x11309))+x11321+((x11310*x11311))+((r00*sj5*x11306))+((cj0*r01*x11309)));
evalcond[6]=((((-1.0)*r01*x11309*x11314))+x11303+((r12*x11308))+(((-1.0)*r00*x11311*x11314))+((r10*sj5*x11306))+((cj0*r11*x11309))+(((-1.0)*r02*sj0*x11312)));
evalcond[7]=((-0.09756)+(((-1.0)*py*x11319))+(((0.026255)*r11*x11306))+(((-0.0718)*x11303))+((r00*sj0*x11317))+(((-1.0)*sj0*sj6*x11307))+((px*sj0))+(((-0.02626)*x11304))+(((-1.0)*x11316*x11317)));
evalcond[8]=((-0.001)+((x11306*x11307))+(((-1.0)*py*x11314))+(((-0.1158)*sj2))+(((-1.0)*x11317*x11320))+(((0.02626)*x11323))+(((-1.0)*x11310*x11317))+(((0.0009)*cj2))+(((-0.0718)*x11321))+((x11305*x11315))+(((-1.0)*px*x11319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11326=((1.0)*cj6);
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(sj2,-1);
if(!x11327.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r10*x11326))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11327.value)*((((r21*sj6))+(((-1.0)*r20*x11326)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r10*x11326))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))))+IKsqr(((x11327.value)*((((r21*sj6))+(((-1.0)*r20*x11326))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r10*x11326))+((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))), ((x11327.value)*((((r21*sj6))+(((-1.0)*r20*x11326))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11328=IKcos(j4);
IkReal x11329=IKsin(j4);
IkReal x11330=(r11*sj0);
IkReal x11331=(cj0*sj6);
IkReal x11332=((0.026255)*r01);
IkReal x11333=(cj0*cj5);
IkReal x11334=(cj6*sj5);
IkReal x11335=(r10*sj0);
IkReal x11336=(sj5*sj6);
IkReal x11337=((1.0)*cj5);
IkReal x11338=((1.0)*cj6);
IkReal x11339=((1.0)*sj0);
IkReal x11340=((0.026255)*sj6);
IkReal x11341=(cj0*r10);
IkReal x11342=((0.026255)*cj6);
IkReal x11343=((1.0)*r21);
IkReal x11344=((1.0)*cj0);
IkReal x11345=(cj0*r00);
IkReal x11346=(cj2*x11329);
IkReal x11347=(cj6*r00*sj0);
IkReal x11348=(cj2*x11328);
IkReal x11349=(sj2*x11329);
IkReal x11350=(sj2*x11328);
evalcond[0]=((((-1.0)*sj6*x11343))+x11350+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x11337))+x11349+(((-1.0)*x11334*x11343))+(((-1.0)*r20*x11336)));
evalcond[2]=(x11348+(((-1.0)*x11338*x11345))+((sj6*x11330))+(((-1.0)*x11335*x11338))+((r01*x11331)));
evalcond[3]=(((r11*x11331))+x11347+(((-1.0)*x11338*x11341))+(((-1.0)*r01*sj6*x11339))+(((-1.0)*x11329)));
evalcond[4]=((0.1255)+(((0.02626)*x11350))+(((0.1158)*cj2))+(((-1.0)*r21*x11340))+((r20*x11342))+pz+(((0.0009)*sj2))+(((-0.0718)*x11349)));
evalcond[5]=(((cj5*r12*sj0))+((x11335*x11336))+x11346+((cj0*r01*x11334))+((r00*sj5*x11331))+((x11330*x11334))+((r02*x11333)));
evalcond[6]=(((r12*x11333))+((cj0*r11*x11334))+(((-1.0)*r02*sj0*x11337))+x11328+(((-1.0)*r01*x11334*x11339))+(((-1.0)*r00*x11336*x11339))+((r10*sj5*x11331)));
evalcond[7]=((-0.09756)+(((-0.02626)*x11329))+(((-1.0)*py*x11344))+((r00*sj0*x11342))+(((-1.0)*sj0*sj6*x11332))+((px*sj0))+(((0.026255)*r11*x11331))+(((-0.0718)*x11328))+(((-1.0)*x11341*x11342)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*x11342*x11345))+(((-1.0)*px*x11344))+(((-1.0)*py*x11339))+(((0.0009)*cj2))+((x11330*x11340))+((x11331*x11332))+(((-1.0)*x11335*x11342))+(((-0.0718)*x11346))+(((0.02626)*x11348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11351=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x11351.valid){
continue;
}
CheckValue<IkReal> x11352 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11351.value)))+(x11352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11353=IKcos(j4);
IkReal x11354=IKsin(j4);
IkReal x11355=(r11*sj0);
IkReal x11356=(cj0*sj6);
IkReal x11357=((0.026255)*r01);
IkReal x11358=(cj0*cj5);
IkReal x11359=(cj6*sj5);
IkReal x11360=(r10*sj0);
IkReal x11361=(sj5*sj6);
IkReal x11362=((1.0)*cj5);
IkReal x11363=((1.0)*cj6);
IkReal x11364=((1.0)*sj0);
IkReal x11365=((0.026255)*sj6);
IkReal x11366=(cj0*r10);
IkReal x11367=((0.026255)*cj6);
IkReal x11368=((1.0)*r21);
IkReal x11369=((1.0)*cj0);
IkReal x11370=(cj0*r00);
IkReal x11371=(cj2*x11354);
IkReal x11372=(cj6*r00*sj0);
IkReal x11373=(cj2*x11353);
IkReal x11374=(sj2*x11354);
IkReal x11375=(sj2*x11353);
evalcond[0]=(x11375+((cj6*r20))+(((-1.0)*sj6*x11368)));
evalcond[1]=((((-1.0)*r22*x11362))+x11374+(((-1.0)*r20*x11361))+(((-1.0)*x11359*x11368)));
evalcond[2]=((((-1.0)*x11363*x11370))+x11373+(((-1.0)*x11360*x11363))+((r01*x11356))+((sj6*x11355)));
evalcond[3]=((((-1.0)*r01*sj6*x11364))+(((-1.0)*x11363*x11366))+((r11*x11356))+x11372+(((-1.0)*x11354)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-0.0718)*x11374))+(((0.02626)*x11375))+pz+(((-1.0)*r21*x11365))+(((0.0009)*sj2))+((r20*x11367)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x11358))+x11371+((x11355*x11359))+((r00*sj5*x11356))+((x11360*x11361))+((cj0*r01*x11359)));
evalcond[6]=(((r12*x11358))+x11353+((cj0*r11*x11359))+(((-1.0)*r00*x11361*x11364))+(((-1.0)*r02*sj0*x11362))+(((-1.0)*r01*x11359*x11364))+((r10*sj5*x11356)));
evalcond[7]=((-0.09756)+(((-1.0)*py*x11369))+(((-0.0718)*x11353))+((px*sj0))+(((-1.0)*sj0*sj6*x11357))+(((-1.0)*x11366*x11367))+((r00*sj0*x11367))+(((-0.02626)*x11354))+(((0.026255)*r11*x11356)));
evalcond[8]=((-0.001)+(((-1.0)*py*x11364))+((x11356*x11357))+(((-0.1158)*sj2))+(((0.0009)*cj2))+(((-0.0718)*x11371))+(((0.02626)*x11373))+(((-1.0)*x11360*x11367))+(((-1.0)*x11367*x11370))+(((-1.0)*px*x11369))+((x11355*x11365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11376=cj3*cj3;
IkReal x11377=(cj2*cj6);
IkReal x11378=((1.0)*sj5);
IkReal x11379=(cj1*sj0);
IkReal x11380=(cj2*sj6);
IkReal x11381=(r11*sj6);
IkReal x11382=(sj1*sj3);
IkReal x11383=((1.0)*cj6);
IkReal x11384=(cj0*r00);
IkReal x11385=((1.0)*cj3);
IkReal x11386=(cj5*r22);
IkReal x11387=(cj1*cj2);
IkReal x11388=(sj2*x11387);
IkReal x11389=((1.0)*x11376);
IkReal x11390=(cj0*cj1*r01);
CheckValue<IkReal> x11391=IKPowWithIntegerCheck((((cj3*sj2*x11382))+x11388+(((-1.0)*x11388*x11389))),-1);
if(!x11391.valid){
continue;
}
CheckValue<IkReal> x11392=IKPowWithIntegerCheck((x11387+((cj3*x11382))+(((-1.0)*x11387*x11389))),-1);
if(!x11392.valid){
continue;
}
if( IKabs(((x11391.value)*(((((-1.0)*x11380*x11385*x11390))+(((-1.0)*x11382*x11383*x11384))+((cj1*cj3*x11377*x11384))+(((-1.0)*cj2*x11386))+(((-1.0)*r21*x11377*x11378))+(((-1.0)*r11*x11379*x11380*x11385))+((sj0*x11381*x11382))+(((-1.0)*r10*sj0*x11382*x11383))+((cj0*r01*sj6*x11382))+(((-1.0)*r20*x11378*x11380))+((cj3*r10*x11377*x11379)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11392.value)*(((((-1.0)*cj3*cj6*r21*x11378))+((cj1*cj6*x11384))+(((-1.0)*x11379*x11381))+(((-1.0)*sj6*x11390))+(((-1.0)*cj3*r20*sj6*x11378))+((cj6*r10*x11379))+(((-1.0)*x11385*x11386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11391.value)*(((((-1.0)*x11380*x11385*x11390))+(((-1.0)*x11382*x11383*x11384))+((cj1*cj3*x11377*x11384))+(((-1.0)*cj2*x11386))+(((-1.0)*r21*x11377*x11378))+(((-1.0)*r11*x11379*x11380*x11385))+((sj0*x11381*x11382))+(((-1.0)*r10*sj0*x11382*x11383))+((cj0*r01*sj6*x11382))+(((-1.0)*r20*x11378*x11380))+((cj3*r10*x11377*x11379))))))+IKsqr(((x11392.value)*(((((-1.0)*cj3*cj6*r21*x11378))+((cj1*cj6*x11384))+(((-1.0)*x11379*x11381))+(((-1.0)*sj6*x11390))+(((-1.0)*cj3*r20*sj6*x11378))+((cj6*r10*x11379))+(((-1.0)*x11385*x11386))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11391.value)*(((((-1.0)*x11380*x11385*x11390))+(((-1.0)*x11382*x11383*x11384))+((cj1*cj3*x11377*x11384))+(((-1.0)*cj2*x11386))+(((-1.0)*r21*x11377*x11378))+(((-1.0)*r11*x11379*x11380*x11385))+((sj0*x11381*x11382))+(((-1.0)*r10*sj0*x11382*x11383))+((cj0*r01*sj6*x11382))+(((-1.0)*r20*x11378*x11380))+((cj3*r10*x11377*x11379))))), ((x11392.value)*(((((-1.0)*cj3*cj6*r21*x11378))+((cj1*cj6*x11384))+(((-1.0)*x11379*x11381))+(((-1.0)*sj6*x11390))+(((-1.0)*cj3*r20*sj6*x11378))+((cj6*r10*x11379))+(((-1.0)*x11385*x11386))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11393=IKsin(j4);
IkReal x11394=IKcos(j4);
IkReal x11395=(cj0*sj6);
IkReal x11396=((0.026255)*r01);
IkReal x11397=((1.0)*cj5);
IkReal x11398=(cj2*sj1);
IkReal x11399=((1.0)*cj3);
IkReal x11400=((0.026255)*sj6);
IkReal x11401=(r11*sj0);
IkReal x11402=((0.0718)*cj1);
IkReal x11403=(cj6*sj0);
IkReal x11404=(cj5*r12);
IkReal x11405=((1.0)*r21);
IkReal x11406=((1.0)*sj5);
IkReal x11407=((0.02626)*cj3);
IkReal x11408=(r10*sj5);
IkReal x11409=(sj0*sj6);
IkReal x11410=((0.0009)*sj2);
IkReal x11411=((1.0)*sj2);
IkReal x11412=((1.0)*py);
IkReal x11413=(cj6*sj5);
IkReal x11414=((1.0)*cj0);
IkReal x11415=(cj1*cj2);
IkReal x11416=(cj6*r20);
IkReal x11417=((0.09746)*cj3);
IkReal x11418=((0.09746)*sj3);
IkReal x11419=(cj1*sj3);
IkReal x11420=((0.02626)*sj2);
IkReal x11421=(cj2*x11393);
IkReal x11422=(cj3*x11394);
IkReal x11423=(sj2*x11393);
IkReal x11424=((0.026255)*cj0*cj6);
IkReal x11425=(cj2*x11394);
IkReal x11426=(sj1*x11394);
IkReal x11427=(cj1*x11394);
IkReal x11428=(sj1*sj3*x11393);
evalcond[0]=(x11416+x11428+(((-1.0)*sj6*x11405))+(((-1.0)*x11393*x11399*x11415))+(((-1.0)*x11411*x11427)));
evalcond[1]=((((-1.0)*cj6*r00*x11414))+x11425+((r01*x11395))+(((-1.0)*r10*x11403))+(((-1.0)*x11399*x11423))+((sj6*x11401)));
evalcond[2]=((((-1.0)*r20*sj6*x11406))+(((-1.0)*x11405*x11413))+(((-1.0)*sj3*x11426))+(((-1.0)*r22*x11397))+(((-1.0)*cj1*x11393*x11411))+((x11415*x11422)));
evalcond[3]=(((x11408*x11409))+x11421+((cj0*cj5*r02))+((cj0*r01*x11413))+((r00*sj5*x11395))+((x11401*x11413))+((sj2*x11422))+((sj0*x11404)));
evalcond[4]=((((-1.0)*r01*x11409))+((r11*x11395))+(((-1.0)*x11393*x11398*x11399))+(((-1.0)*x11393*x11419))+(((-1.0)*cj6*r10*x11414))+(((-1.0)*x11411*x11426))+((r00*x11403)));
evalcond[5]=(((x11394*x11419))+((x11398*x11422))+((cj0*x11404))+(((-1.0)*r02*sj0*x11397))+((x11395*x11408))+(((-1.0)*r00*x11406*x11409))+((cj0*r11*x11413))+(((-1.0)*r01*x11403*x11406))+(((-1.0)*sj1*x11393*x11411)));
evalcond[6]=((-0.001)+((x11400*x11401))+(((-0.1158)*sj2))+(((-1.0)*sj2*x11417))+(((-1.0)*r00*x11424))+(((-0.026255)*r10*x11403))+(((-1.0)*px*x11414))+((x11395*x11396))+(((0.0009)*cj2))+(((-0.0718)*sj2*x11422))+(((-1.0)*sj0*x11412))+(((-0.0718)*x11421))+(((0.02626)*x11425))+(((-1.0)*x11407*x11423)));
evalcond[7]=(((x11402*x11423))+(((-1.0)*x11415*x11417))+(((-0.1255)*cj1))+(((-1.0)*cj1*x11410))+(((-0.0001)*sj1))+(((-1.0)*cj2*x11402*x11422))+(((0.026255)*x11416))+((sj1*x11418))+(((0.0718)*sj3*x11426))+(((-1.0)*x11420*x11427))+pz+(((-0.1158)*x11415))+(((-1.0)*x11393*x11407*x11415))+(((-1.0)*r21*x11400))+(((0.02626)*x11428)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*x11398*x11417))+(((-0.1158)*x11398))+(((-1.0)*sj1*x11410))+(((-1.0)*x11396*x11409))+(((-1.0)*x11393*x11398*x11407))+(((-1.0)*cj1*x11418))+(((-1.0)*r10*x11424))+(((0.026255)*r00*x11403))+(((-1.0)*x11420*x11426))+(((0.026255)*r11*x11395))+(((0.0001)*cj1))+(((-1.0)*sj3*x11394*x11402))+((px*sj0))+(((-0.02626)*x11393*x11419))+(((0.0718)*sj1*x11423))+(((-1.0)*cj0*x11412))+(((-0.0718)*x11398*x11422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11429=cj1*cj1;
IkReal x11430=cj3*cj3;
IkReal x11431=cj2*cj2;
IkReal x11432=((1.0)*sj5);
IkReal x11433=(cj1*sj2);
IkReal x11434=(r20*sj6);
IkReal x11435=(sj1*sj3);
IkReal x11436=(cj6*r20);
IkReal x11437=(cj6*r21);
IkReal x11438=(r21*x11435);
IkReal x11439=(cj1*cj2*cj3);
IkReal x11440=((1.0)*r21*sj6);
IkReal x11441=((1.0)*cj5*r22);
IkReal x11442=(x11429*x11430);
CheckValue<IkReal> x11443=IKPowWithIntegerCheck(IKsign(((1.0)+((x11431*x11442))+x11442+(((-1.0)*x11430))+(((-2.0)*x11435*x11439))+(((-1.0)*x11429*x11431)))),-1);
if(!x11443.valid){
continue;
}
CheckValue<IkReal> x11444 = IKatan2WithCheck(IkReal(((((-1.0)*x11435*x11436))+((sj6*x11438))+(((-1.0)*x11433*x11441))+(((-1.0)*x11439*x11440))+((x11436*x11439))+(((-1.0)*x11432*x11433*x11437))+(((-1.0)*x11432*x11433*x11434)))),(((sj5*x11434*x11439))+((cj5*r22*x11439))+(((-1.0)*x11433*x11440))+(((-1.0)*x11432*x11434*x11435))+((sj5*x11437*x11439))+(((-1.0)*x11435*x11441))+(((-1.0)*x11432*x11435*x11437))+((x11433*x11436))),IKFAST_ATAN2_MAGTHRESH);
if(!x11444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11443.value)))+(x11444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11445=IKsin(j4);
IkReal x11446=IKcos(j4);
IkReal x11447=(cj0*sj6);
IkReal x11448=((0.026255)*r01);
IkReal x11449=((1.0)*cj5);
IkReal x11450=(cj2*sj1);
IkReal x11451=((1.0)*cj3);
IkReal x11452=((0.026255)*sj6);
IkReal x11453=(r11*sj0);
IkReal x11454=((0.0718)*cj1);
IkReal x11455=(cj6*sj0);
IkReal x11456=(cj5*r12);
IkReal x11457=((1.0)*r21);
IkReal x11458=((1.0)*sj5);
IkReal x11459=((0.02626)*cj3);
IkReal x11460=(r10*sj5);
IkReal x11461=(sj0*sj6);
IkReal x11462=((0.0009)*sj2);
IkReal x11463=((1.0)*sj2);
IkReal x11464=((1.0)*py);
IkReal x11465=(cj6*sj5);
IkReal x11466=((1.0)*cj0);
IkReal x11467=(cj1*cj2);
IkReal x11468=(cj6*r20);
IkReal x11469=((0.09746)*cj3);
IkReal x11470=((0.09746)*sj3);
IkReal x11471=(cj1*sj3);
IkReal x11472=((0.02626)*sj2);
IkReal x11473=(cj2*x11445);
IkReal x11474=(cj3*x11446);
IkReal x11475=(sj2*x11445);
IkReal x11476=((0.026255)*cj0*cj6);
IkReal x11477=(cj2*x11446);
IkReal x11478=(sj1*x11446);
IkReal x11479=(cj1*x11446);
IkReal x11480=(sj1*sj3*x11445);
evalcond[0]=((((-1.0)*x11463*x11479))+x11468+x11480+(((-1.0)*x11445*x11451*x11467))+(((-1.0)*sj6*x11457)));
evalcond[1]=(x11477+((sj6*x11453))+(((-1.0)*cj6*r00*x11466))+(((-1.0)*x11451*x11475))+(((-1.0)*r10*x11455))+((r01*x11447)));
evalcond[2]=(((x11467*x11474))+(((-1.0)*r22*x11449))+(((-1.0)*cj1*x11445*x11463))+(((-1.0)*x11457*x11465))+(((-1.0)*r20*sj6*x11458))+(((-1.0)*sj3*x11478)));
evalcond[3]=(x11473+((cj0*cj5*r02))+((sj0*x11456))+((r00*sj5*x11447))+((x11460*x11461))+((sj2*x11474))+((cj0*r01*x11465))+((x11453*x11465)));
evalcond[4]=((((-1.0)*x11463*x11478))+(((-1.0)*r01*x11461))+(((-1.0)*x11445*x11450*x11451))+((r11*x11447))+(((-1.0)*x11445*x11471))+(((-1.0)*cj6*r10*x11466))+((r00*x11455)));
evalcond[5]=((((-1.0)*sj1*x11445*x11463))+((x11450*x11474))+((cj0*x11456))+((x11447*x11460))+((cj0*r11*x11465))+((x11446*x11471))+(((-1.0)*r00*x11458*x11461))+(((-1.0)*r01*x11455*x11458))+(((-1.0)*r02*sj0*x11449)));
evalcond[6]=((-0.001)+(((-0.0718)*sj2*x11474))+(((-1.0)*px*x11466))+(((-0.026255)*r10*x11455))+(((-0.1158)*sj2))+(((-0.0718)*x11473))+((x11452*x11453))+(((-1.0)*sj2*x11469))+(((0.02626)*x11477))+((x11447*x11448))+(((0.0009)*cj2))+(((-1.0)*sj0*x11464))+(((-1.0)*r00*x11476))+(((-1.0)*x11459*x11475)));
evalcond[7]=((((0.0718)*sj3*x11478))+((x11454*x11475))+(((-0.1255)*cj1))+(((-1.0)*x11445*x11459*x11467))+(((-0.1158)*x11467))+(((-0.0001)*sj1))+(((-1.0)*cj1*x11462))+(((-1.0)*cj2*x11454*x11474))+(((-1.0)*r21*x11452))+pz+(((0.026255)*x11468))+(((-1.0)*x11472*x11479))+(((0.02626)*x11480))+(((-1.0)*x11467*x11469))+((sj1*x11470)));
evalcond[8]=((((-0.02626)*x11445*x11471))+(((-0.1255)*sj1))+(((0.0718)*sj1*x11475))+(((-1.0)*sj3*x11446*x11454))+(((0.026255)*r00*x11455))+(((-1.0)*x11445*x11450*x11459))+(((-1.0)*x11450*x11469))+(((-1.0)*cj1*x11470))+(((-1.0)*sj1*x11462))+(((-1.0)*r10*x11476))+(((-1.0)*x11472*x11478))+(((0.0001)*cj1))+((px*sj0))+(((-0.0718)*x11450*x11474))+(((-1.0)*x11448*x11461))+(((0.026255)*r11*x11447))+(((-0.1158)*x11450))+(((-1.0)*cj0*x11464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11481=(cj0*r00);
IkReal x11482=(r10*sj0);
IkReal x11483=(sj1*sj3);
IkReal x11484=((1.0)*cj2);
IkReal x11485=((1.0)*cj6);
IkReal x11486=(cj1*sj2);
IkReal x11487=(r21*sj6);
IkReal x11488=(cj3*sj2);
IkReal x11489=(cj1*cj3);
IkReal x11490=(cj6*r20);
IkReal x11491=(r11*sj0*sj6);
IkReal x11492=(cj0*r01*sj6);
IkReal x11493=(x11485*x11486);
IkReal x11494=(cj2*cj6*x11489);
CheckValue<IkReal> x11495 = IKatan2WithCheck(IkReal(((((-1.0)*x11482*x11493))+((cj2*x11490))+(((-1.0)*x11484*x11487))+(((-1.0)*x11481*x11493))+((x11486*x11491))+((x11486*x11492)))),(((x11482*x11494))+((x11483*x11491))+((x11483*x11492))+(((-1.0)*x11487*x11488))+(((-1.0)*x11484*x11489*x11491))+(((-1.0)*x11484*x11489*x11492))+(((-1.0)*x11482*x11483*x11485))+((x11488*x11490))+(((-1.0)*x11481*x11483*x11485))+((x11481*x11494))),IKFAST_ATAN2_MAGTHRESH);
if(!x11495.valid){
continue;
}
CheckValue<IkReal> x11496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11483*x11484))+x11489)),-1);
if(!x11496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11495.value)+(((1.5707963267949)*(x11496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11497=IKsin(j4);
IkReal x11498=IKcos(j4);
IkReal x11499=(cj0*sj6);
IkReal x11500=((0.026255)*r01);
IkReal x11501=((1.0)*cj5);
IkReal x11502=(cj2*sj1);
IkReal x11503=((1.0)*cj3);
IkReal x11504=((0.026255)*sj6);
IkReal x11505=(r11*sj0);
IkReal x11506=((0.0718)*cj1);
IkReal x11507=(cj6*sj0);
IkReal x11508=(cj5*r12);
IkReal x11509=((1.0)*r21);
IkReal x11510=((1.0)*sj5);
IkReal x11511=((0.02626)*cj3);
IkReal x11512=(r10*sj5);
IkReal x11513=(sj0*sj6);
IkReal x11514=((0.0009)*sj2);
IkReal x11515=((1.0)*sj2);
IkReal x11516=((1.0)*py);
IkReal x11517=(cj6*sj5);
IkReal x11518=((1.0)*cj0);
IkReal x11519=(cj1*cj2);
IkReal x11520=(cj6*r20);
IkReal x11521=((0.09746)*cj3);
IkReal x11522=((0.09746)*sj3);
IkReal x11523=(cj1*sj3);
IkReal x11524=((0.02626)*sj2);
IkReal x11525=(cj2*x11497);
IkReal x11526=(cj3*x11498);
IkReal x11527=(sj2*x11497);
IkReal x11528=((0.026255)*cj0*cj6);
IkReal x11529=(cj2*x11498);
IkReal x11530=(sj1*x11498);
IkReal x11531=(cj1*x11498);
IkReal x11532=(sj1*sj3*x11497);
evalcond[0]=((((-1.0)*sj6*x11509))+x11532+x11520+(((-1.0)*x11497*x11503*x11519))+(((-1.0)*x11515*x11531)));
evalcond[1]=(x11529+(((-1.0)*cj6*r00*x11518))+(((-1.0)*x11503*x11527))+((sj6*x11505))+(((-1.0)*r10*x11507))+((r01*x11499)));
evalcond[2]=((((-1.0)*x11509*x11517))+(((-1.0)*r20*sj6*x11510))+((x11519*x11526))+(((-1.0)*sj3*x11530))+(((-1.0)*r22*x11501))+(((-1.0)*cj1*x11497*x11515)));
evalcond[3]=(((sj2*x11526))+((cj0*cj5*r02))+x11525+((cj0*r01*x11517))+((x11512*x11513))+((r00*sj5*x11499))+((x11505*x11517))+((sj0*x11508)));
evalcond[4]=((((-1.0)*x11497*x11523))+(((-1.0)*x11497*x11502*x11503))+((r11*x11499))+((r00*x11507))+(((-1.0)*x11515*x11530))+(((-1.0)*cj6*r10*x11518))+(((-1.0)*r01*x11513)));
evalcond[5]=(((x11498*x11523))+((cj0*r11*x11517))+((x11499*x11512))+((x11502*x11526))+(((-1.0)*r01*x11507*x11510))+(((-1.0)*sj1*x11497*x11515))+(((-1.0)*r00*x11510*x11513))+(((-1.0)*r02*sj0*x11501))+((cj0*x11508)));
evalcond[6]=((-0.001)+(((-1.0)*r00*x11528))+(((-0.1158)*sj2))+(((0.02626)*x11529))+(((-0.0718)*x11525))+(((-1.0)*px*x11518))+(((-0.026255)*r10*x11507))+(((0.0009)*cj2))+(((-1.0)*x11511*x11527))+(((-1.0)*sj2*x11521))+((x11504*x11505))+((x11499*x11500))+(((-1.0)*sj0*x11516))+(((-0.0718)*sj2*x11526)));
evalcond[7]=(((sj1*x11522))+(((-0.1158)*x11519))+((x11506*x11527))+(((-1.0)*x11497*x11511*x11519))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-1.0)*x11519*x11521))+(((0.026255)*x11520))+(((-1.0)*cj1*x11514))+(((0.02626)*x11532))+pz+(((0.0718)*sj3*x11530))+(((-1.0)*cj2*x11506*x11526))+(((-1.0)*r21*x11504))+(((-1.0)*x11524*x11531)));
evalcond[8]=((((-0.1255)*sj1))+(((0.026255)*r00*x11507))+(((-1.0)*cj0*x11516))+(((-1.0)*cj1*x11522))+(((-1.0)*r10*x11528))+(((-1.0)*sj3*x11498*x11506))+(((-1.0)*sj1*x11514))+(((0.0718)*sj1*x11527))+(((-1.0)*x11500*x11513))+(((-0.0718)*x11502*x11526))+(((0.0001)*cj1))+(((-0.1158)*x11502))+((px*sj0))+(((-1.0)*x11502*x11521))+(((-1.0)*x11497*x11502*x11511))+(((0.026255)*r11*x11499))+(((-1.0)*x11524*x11530))+(((-0.02626)*x11497*x11523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x11544=IKPowWithIntegerCheck(sj2,-1);
if(!x11544.valid){
continue;
}
IkReal x11533=x11544.value;
IkReal x11534=(cj5*sj6);
IkReal x11535=(cj5*cj6);
IkReal x11536=((1.0)*cj0);
IkReal x11537=(r10*sj0);
IkReal x11538=(cj1*cj2);
IkReal x11539=(r11*sj0);
IkReal x11540=((1.0)*sj5);
IkReal x11541=(r12*sj0);
IkReal x11542=(cj0*r02*sj5);
IkReal x11543=(cj0*x11538);
CheckValue<IkReal> x11545=IKPowWithIntegerCheck(sj1,-1);
if(!x11545.valid){
continue;
}
if( IKabs((x11533*(((((-1.0)*r01*x11535*x11536))+x11542+(((-1.0)*x11535*x11539))+(((-1.0)*r00*x11534*x11536))+(((-1.0)*x11534*x11537))+((sj5*x11541)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11533*(x11545.value)*((((r20*sj2*x11534))+((r01*x11535*x11543))+(((-1.0)*r02*sj5*x11536*x11538))+(((-1.0)*x11538*x11540*x11541))+(((-1.0)*r22*sj2*x11540))+((r00*x11534*x11543))+((r21*sj2*x11535))+((x11535*x11538*x11539))+((x11534*x11537*x11538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11533*(((((-1.0)*r01*x11535*x11536))+x11542+(((-1.0)*x11535*x11539))+(((-1.0)*r00*x11534*x11536))+(((-1.0)*x11534*x11537))+((sj5*x11541))))))+IKsqr((x11533*(x11545.value)*((((r20*sj2*x11534))+((r01*x11535*x11543))+(((-1.0)*r02*sj5*x11536*x11538))+(((-1.0)*x11538*x11540*x11541))+(((-1.0)*r22*sj2*x11540))+((r00*x11534*x11543))+((r21*sj2*x11535))+((x11535*x11538*x11539))+((x11534*x11537*x11538))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x11533*(((((-1.0)*r01*x11535*x11536))+x11542+(((-1.0)*x11535*x11539))+(((-1.0)*r00*x11534*x11536))+(((-1.0)*x11534*x11537))+((sj5*x11541))))), (x11533*(x11545.value)*((((r20*sj2*x11534))+((r01*x11535*x11543))+(((-1.0)*r02*sj5*x11536*x11538))+(((-1.0)*x11538*x11540*x11541))+(((-1.0)*r22*sj2*x11540))+((r00*x11534*x11543))+((r21*sj2*x11535))+((x11535*x11538*x11539))+((x11534*x11537*x11538))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x11546=IKsin(j3);
IkReal x11547=IKcos(j3);
IkReal x11548=((1.0)*sj1);
IkReal x11549=(cj0*sj5);
IkReal x11550=(cj5*cj6);
IkReal x11551=((1.0)*sj5);
IkReal x11552=((1.0)*cj0);
IkReal x11553=((1.0)*sj0);
IkReal x11554=(cj5*sj6);
IkReal x11555=((1.0)*x11546);
evalcond[0]=(((r21*x11550))+(((-1.0)*r22*x11551))+(((-1.0)*x11547*x11548))+(((-1.0)*cj1*cj2*x11555))+((r20*x11554)));
evalcond[1]=((((-1.0)*sj2*x11555))+(((-1.0)*r10*x11553*x11554))+((r12*sj0*sj5))+((r02*x11549))+(((-1.0)*r11*x11550*x11553))+(((-1.0)*r00*x11552*x11554))+(((-1.0)*r01*x11550*x11552)));
evalcond[2]=((((-1.0)*r10*x11552*x11554))+((r00*sj0*x11554))+(((-1.0)*cj2*x11546*x11548))+((r01*sj0*x11550))+((r12*x11549))+(((-1.0)*r02*sj0*x11551))+((cj1*x11547))+(((-1.0)*r11*x11550*x11552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x11556=((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)));
j4eval[0]=x11556;
j4eval[1]=IKsign(x11556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11557=cj1*cj1;
IkReal x11558=cj3*cj3;
IkReal x11559=cj2*cj2;
IkReal x11560=(x11557*x11558);
IkReal x11561=((1.0)+(((-2.0)*cj1*cj2*cj3*sj1*sj3))+x11560+(((-1.0)*x11557*x11559))+((x11559*x11560))+(((-1.0)*x11558)));
j4eval[0]=x11561;
j4eval[1]=IKsign(x11561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11562=cj3*cj3;
IkReal x11563=(cj1*cj2);
IkReal x11564=(cj3*sj1*sj3);
IkReal x11565=(sj2*x11563);
IkReal x11566=((1.0)*x11562);
j4eval[0]=(x11565+(((-1.0)*x11565*x11566))+((sj2*x11564)));
j4eval[1]=(x11563+x11564+(((-1.0)*x11563*x11566)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11567=(cj0*sj5);
IkReal x11568=(cj5*cj6);
IkReal x11569=((1.0)*sj3);
IkReal x11570=((1.0)*cj0);
IkReal x11571=((1.0)*sj0);
IkReal x11572=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r20*x11572))+(((-1.0)*cj3*sj1))+(((-1.0)*r22*sj5))+((r21*x11568))+(((-1.0)*cj1*x11569)));
evalcond[2]=((((-1.0)*r00*x11570*x11572))+((r12*sj0*sj5))+(((-1.0)*r11*x11568*x11571))+((r02*x11567))+(((-1.0)*r01*x11568*x11570))+(((-1.0)*r10*x11571*x11572)));
evalcond[3]=((((-1.0)*r10*x11570*x11572))+((r01*sj0*x11568))+(((-1.0)*r11*x11568*x11570))+((r00*sj0*x11572))+(((-1.0)*sj1*x11569))+(((-1.0)*r02*sj5*x11571))+((r12*x11567))+((cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11573=(cj0*cj6);
IkReal x11574=((1.0)*cj5);
IkReal x11575=((1.0)*sj5);
IkReal x11576=(sj0*sj6);
IkReal x11577=(cj6*sj0);
IkReal x11578=(cj0*sj6);
if( IKabs(((((-1.0)*r10*x11575*x11576))+(((-1.0)*r11*x11575*x11577))+(((-1.0)*cj0*r02*x11574))+(((-1.0)*r00*x11575*x11578))+(((-1.0)*r01*x11573*x11575))+(((-1.0)*r12*sj0*x11574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x11578))+(((-1.0)*r11*x11576))+((r10*x11577))+((r00*x11573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x11575*x11576))+(((-1.0)*r11*x11575*x11577))+(((-1.0)*cj0*r02*x11574))+(((-1.0)*r00*x11575*x11578))+(((-1.0)*r01*x11573*x11575))+(((-1.0)*r12*sj0*x11574))))+IKsqr(((((-1.0)*r01*x11578))+(((-1.0)*r11*x11576))+((r10*x11577))+((r00*x11573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x11575*x11576))+(((-1.0)*r11*x11575*x11577))+(((-1.0)*cj0*r02*x11574))+(((-1.0)*r00*x11575*x11578))+(((-1.0)*r01*x11573*x11575))+(((-1.0)*r12*sj0*x11574))), ((((-1.0)*r01*x11578))+(((-1.0)*r11*x11576))+((r10*x11577))+((r00*x11573))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11579=IKsin(j4);
IkReal x11580=IKcos(j4);
IkReal x11581=(r11*sj0);
IkReal x11582=(sj1*sj3);
IkReal x11583=(cj0*sj6);
IkReal x11584=((0.026255)*r01);
IkReal x11585=(cj5*r12);
IkReal x11586=(cj6*sj5);
IkReal x11587=(sj0*sj6);
IkReal x11588=(r10*sj5);
IkReal x11589=((0.026255)*cj6);
IkReal x11590=(r00*sj0);
IkReal x11591=((1.0)*cj5);
IkReal x11592=(cj1*sj3);
IkReal x11593=((1.0)*r01);
IkReal x11594=(cj0*r00);
IkReal x11595=(r00*sj5);
IkReal x11596=((0.026255)*sj6);
IkReal x11597=(cj1*cj3);
IkReal x11598=((1.0)*py);
IkReal x11599=(cj3*sj1);
IkReal x11600=((1.0)*r21);
IkReal x11601=((1.0)*cj6*r10);
IkReal x11602=((0.02626)*x11579);
IkReal x11603=((1.0)*x11579);
IkReal x11604=((0.0718)*x11580);
IkReal x11605=(x11580*x11597);
evalcond[0]=(((x11579*x11582))+(((-1.0)*x11597*x11603))+((cj6*r20))+(((-1.0)*sj6*x11600)));
evalcond[1]=(((r01*x11583))+x11580+((sj6*x11581))+(((-1.0)*cj6*x11594))+(((-1.0)*sj0*x11601)));
evalcond[2]=(x11605+(((-1.0)*x11586*x11600))+(((-1.0)*x11580*x11582))+(((-1.0)*r22*x11591))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((cj0*r01*x11586))+((cj0*cj5*r02))+x11579+((sj0*x11585))+((x11583*x11595))+((x11581*x11586))+((x11587*x11588)));
evalcond[4]=(((cj6*x11590))+(((-1.0)*x11599*x11603))+(((-1.0)*x11592*x11603))+(((-1.0)*x11587*x11593))+(((-1.0)*cj0*x11601))+((r11*x11583)));
evalcond[5]=((-0.0001)+(((-1.0)*r10*sj0*x11589))+((x11581*x11596))+((x11583*x11584))+(((-0.0718)*x11579))+(((0.02626)*x11580))+(((-1.0)*sj0*x11598))+(((-1.0)*cj0*px))+(((-1.0)*x11589*x11594)));
evalcond[6]=((((-1.0)*r02*sj0*x11591))+((x11583*x11588))+((cj0*x11585))+((x11580*x11592))+((x11580*x11599))+(((-1.0)*x11587*x11595))+((cj0*r11*x11586))+(((-1.0)*sj0*x11586*x11593)));
evalcond[7]=(((r20*x11589))+(((-0.0001)*sj1))+(((-1.0)*x11597*x11602))+(((-1.0)*x11597*x11604))+(((-0.2413)*cj1))+pz+(((-1.0)*r21*x11596))+((x11582*x11604))+((x11582*x11602))+(((-0.09746)*x11597))+(((0.09746)*x11582)));
evalcond[8]=(((x11589*x11590))+(((-1.0)*x11584*x11587))+(((-1.0)*cj0*x11598))+(((-1.0)*x11599*x11604))+(((-1.0)*x11599*x11602))+(((0.026255)*r11*x11583))+(((-1.0)*x11592*x11602))+(((-1.0)*x11592*x11604))+(((0.0001)*cj1))+((px*sj0))+(((-0.2413)*sj1))+(((-1.0)*cj0*r10*x11589))+(((-0.09746)*x11599))+(((-0.09746)*x11592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11606=(cj0*sj5);
IkReal x11607=(cj5*cj6);
IkReal x11608=((1.0)*sj5);
IkReal x11609=((1.0)*cj0);
IkReal x11610=((1.0)*sj0);
IkReal x11611=(cj5*sj6);
IkReal x11612=(r10*x11611);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x11608))+((cj1*sj3))+((r21*x11607))+(((-1.0)*cj3*sj1))+((r20*x11611)));
evalcond[2]=((((-1.0)*r01*x11607*x11609))+(((-1.0)*r11*x11607*x11610))+((r12*sj0*sj5))+((r02*x11606))+(((-1.0)*x11610*x11612))+(((-1.0)*r00*x11609*x11611)));
evalcond[3]=((((-1.0)*r11*x11607*x11609))+(((-1.0)*x11609*x11612))+((r00*sj0*x11611))+((sj1*sj3))+((r01*sj0*x11607))+((cj1*cj3))+(((-1.0)*r02*sj0*x11608))+((r12*x11606)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x11613=((1.0)*sj5);
IkReal x11614=(((sj1*sj3))+((cj1*cj3)));
j4eval[0]=x11614;
j4eval[1]=IKsign(x11614);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x11613))+(((-1.0)*r20*sj6*x11613))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=(((sj1*sj3))+((cj1*cj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=((((-1.0)*cj1*sj3))+((cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11615=(cj5*cj6);
IkReal x11616=(cj0*sj6);
IkReal x11617=(r01*sj0);
IkReal x11618=((1.0)*sj0);
IkReal x11619=((1.0)*cj5);
IkReal x11620=(cj0*r12);
IkReal x11621=(r02*sj5);
IkReal x11622=((1.0)*sj5);
IkReal x11623=(cj5*sj6);
IkReal x11624=((1.0)*cj0);
IkReal x11625=(cj6*r10);
IkReal x11626=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x11615))+(((-1.0)*r22*x11622))+((r20*x11623)));
evalcond[2]=(x11626+((r11*x11616))+(((-1.0)*x11624*x11625))+(((-1.0)*sj6*x11617)));
evalcond[3]=((((-1.0)*r00*x11616*x11619))+((r12*sj0*sj5))+((cj0*x11621))+(((-1.0)*r11*x11615*x11618))+(((-1.0)*r10*x11618*x11623))+(((-1.0)*r01*x11615*x11624)));
evalcond[4]=((1.0)+((x11615*x11617))+(((-1.0)*r10*x11616*x11619))+((r00*sj0*x11623))+(((-1.0)*x11618*x11621))+(((-1.0)*r11*x11615*x11624))+((sj5*x11620)));
evalcond[5]=(((r10*sj5*x11616))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x11617*x11622))+(((-1.0)*r00*sj5*sj6*x11618))+(((-1.0)*cj5*r02*x11618))+((cj5*x11620)));
evalcond[6]=((0.0001)+(((-1.0)*py*x11624))+(((0.026255)*r11*x11616))+(((0.026255)*x11626))+(((-0.026255)*cj0*x11625))+((px*sj0))+(((-0.026255)*sj6*x11617)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11627=(cj6*r20);
IkReal x11628=(r21*sj6);
if( IKabs((x11628+(((-1.0)*x11627)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.22228412256267)+(((6.96378830083565e-5)*x11627))+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11628)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11628+(((-1.0)*x11627))))+IKsqr(((-1.22228412256267)+(((6.96378830083565e-5)*x11627))+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11628))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11628+(((-1.0)*x11627))), ((-1.22228412256267)+(((6.96378830083565e-5)*x11627))+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11628))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11629=IKcos(j4);
IkReal x11630=IKsin(j4);
IkReal x11631=(r11*sj0);
IkReal x11632=(cj0*sj6);
IkReal x11633=(cj6*sj5);
IkReal x11634=(r10*sj0);
IkReal x11635=(sj5*sj6);
IkReal x11636=((1.0)*cj6);
IkReal x11637=((0.026255)*sj6);
IkReal x11638=((0.026255)*cj6);
IkReal x11639=(cj0*r00);
IkReal x11640=((1.0)*r21);
IkReal x11641=((1.0)*x11629);
evalcond[0]=(x11630+(((-1.0)*sj6*x11640))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x11635))+(((-1.0)*x11633*x11640))+(((-1.0)*cj5*r22))+(((-1.0)*x11641)));
evalcond[2]=((0.08776)+(((0.02626)*x11630))+(((0.0718)*x11629))+pz+((r20*x11638))+(((-1.0)*r21*x11637)));
evalcond[3]=(((sj6*x11631))+(((-1.0)*x11636*x11639))+(((-1.0)*x11634*x11636))+((r01*x11632))+(((-1.0)*x11641)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x11632))+(((-1.0)*x11630))+((x11631*x11633))+((cj0*r01*x11633))+((x11634*x11635)));
evalcond[5]=((-0.0019)+(((0.0718)*x11630))+(((0.026255)*r01*x11632))+(((-1.0)*x11638*x11639))+(((-1.0)*x11634*x11638))+(((-0.02626)*x11629))+((x11631*x11637))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11642=(cj5*cj6);
IkReal x11643=(cj0*sj6);
IkReal x11644=(r01*sj0);
IkReal x11645=((1.0)*sj0);
IkReal x11646=((1.0)*cj5);
IkReal x11647=(cj0*r12);
IkReal x11648=(r02*sj5);
IkReal x11649=((1.0)*sj5);
IkReal x11650=(cj5*sj6);
IkReal x11651=((1.0)*cj0);
IkReal x11652=(cj6*r10);
IkReal x11653=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x11649))+((r21*x11642))+((r20*x11650)));
evalcond[2]=(x11653+((r11*x11643))+(((-1.0)*sj6*x11644))+(((-1.0)*x11651*x11652)));
evalcond[3]=(((r12*sj0*sj5))+((cj0*x11648))+(((-1.0)*r00*x11643*x11646))+(((-1.0)*r10*x11645*x11650))+(((-1.0)*r11*x11642*x11645))+(((-1.0)*r01*x11642*x11651)));
evalcond[4]=((-1.0)+((x11642*x11644))+((r00*sj0*x11650))+(((-1.0)*r10*x11643*x11646))+((sj5*x11647))+(((-1.0)*r11*x11642*x11651))+(((-1.0)*x11645*x11648)));
evalcond[5]=((((-1.0)*cj5*r02*x11645))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x11644*x11649))+(((-1.0)*r00*sj5*sj6*x11645))+((cj5*x11647))+((r10*sj5*x11643)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x11643))+(((0.026255)*x11653))+((px*sj0))+(((-0.026255)*cj0*x11652))+(((-1.0)*py*x11651))+(((-0.026255)*sj6*x11644)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11654=IKcos(j4);
IkReal x11655=IKsin(j4);
IkReal x11656=(r11*sj0);
IkReal x11657=(cj0*sj6);
IkReal x11658=(cj6*sj5);
IkReal x11659=(r10*sj0);
IkReal x11660=(sj5*sj6);
IkReal x11661=((1.0)*cj6);
IkReal x11662=((0.026255)*sj6);
IkReal x11663=((0.026255)*cj6);
IkReal x11664=(cj0*r00);
IkReal x11665=((1.0)*r21);
IkReal x11666=((1.0)*x11655);
evalcond[0]=((((-1.0)*x11666))+(((-1.0)*sj6*x11665))+((cj6*r20)));
evalcond[1]=(x11654+(((-1.0)*cj5*r22))+(((-1.0)*x11658*x11665))+(((-1.0)*r20*x11660)));
evalcond[2]=((-0.10716)+(((-1.0)*r21*x11662))+((r20*x11663))+pz+(((-0.02626)*x11655))+(((-0.0718)*x11654)));
evalcond[3]=((((-1.0)*x11659*x11661))+((sj6*x11656))+(((-1.0)*x11654))+((r01*x11657))+(((-1.0)*x11661*x11664)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x11657))+((cj0*cj5*r02))+((x11659*x11660))+((x11656*x11658))+(((-1.0)*x11666))+((cj0*r01*x11658)));
evalcond[5]=((-0.0019)+(((-1.0)*x11659*x11663))+(((0.0718)*x11655))+(((0.026255)*r01*x11657))+(((-0.02626)*x11654))+(((-1.0)*py*sj0))+(((-1.0)*x11663*x11664))+((x11656*x11662))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11667=(cj5*cj6);
IkReal x11668=(cj0*sj6);
IkReal x11669=(r01*sj0);
IkReal x11670=((1.0)*sj0);
IkReal x11671=((1.0)*cj5);
IkReal x11672=(cj0*r12);
IkReal x11673=(r02*sj5);
IkReal x11674=((1.0)*sj5);
IkReal x11675=(cj5*sj6);
IkReal x11676=((1.0)*cj0);
IkReal x11677=(cj6*r10);
IkReal x11678=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x11667))+((r20*x11675))+(((-1.0)*r22*x11674)));
evalcond[2]=(x11678+(((-1.0)*x11676*x11677))+(((-1.0)*sj6*x11669))+((r11*x11668)));
evalcond[3]=(((cj0*x11673))+(((-1.0)*r11*x11667*x11670))+(((-1.0)*r01*x11667*x11676))+((r12*sj0*sj5))+(((-1.0)*r00*x11668*x11671))+(((-1.0)*r10*x11670*x11675)));
evalcond[4]=((1.0)+((r00*sj0*x11675))+(((-1.0)*r11*x11667*x11676))+(((-1.0)*x11670*x11673))+((sj5*x11672))+((x11667*x11669))+(((-1.0)*r10*x11668*x11671)));
evalcond[5]=(((cj5*x11672))+(((-1.0)*cj6*x11669*x11674))+((r10*sj5*x11668))+(((-1.0)*r00*sj5*sj6*x11670))+(((-1.0)*cj5*r02*x11670))+((cj0*cj6*r11*sj5)));
evalcond[6]=((-0.0097)+(((0.026255)*x11678))+(((-0.026255)*sj6*x11669))+(((-0.026255)*cj0*x11677))+(((-1.0)*py*x11676))+(((0.026255)*r11*x11668))+((px*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11679=(cj6*r20);
IkReal x11680=(r21*sj6);
if( IKabs((x11680+(((-1.0)*x11679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-6.96378830083565e-5)*x11680))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11680+(((-1.0)*x11679))))+IKsqr(((-1.35598885793872)+(((-6.96378830083565e-5)*x11680))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11679))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11680+(((-1.0)*x11679))), ((-1.35598885793872)+(((-6.96378830083565e-5)*x11680))+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x11679))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11681=IKcos(j4);
IkReal x11682=IKsin(j4);
IkReal x11683=(r11*sj0);
IkReal x11684=(cj0*sj6);
IkReal x11685=(cj6*sj5);
IkReal x11686=(r10*sj0);
IkReal x11687=(sj5*sj6);
IkReal x11688=((1.0)*cj6);
IkReal x11689=((0.026255)*sj6);
IkReal x11690=((0.026255)*cj6);
IkReal x11691=(cj0*r00);
IkReal x11692=((1.0)*r21);
IkReal x11693=((1.0)*x11681);
evalcond[0]=(x11682+(((-1.0)*sj6*x11692))+((cj6*r20)));
evalcond[1]=((((-1.0)*x11685*x11692))+(((-1.0)*r20*x11687))+(((-1.0)*cj5*r22))+(((-1.0)*x11693)));
evalcond[2]=((0.09736)+(((0.0718)*x11681))+(((-1.0)*r21*x11689))+((r20*x11690))+pz+(((0.02626)*x11682)));
evalcond[3]=(((sj6*x11683))+(((-1.0)*x11688*x11691))+(((-1.0)*x11686*x11688))+(((-1.0)*x11693))+((r01*x11684)));
evalcond[4]=(((cj5*r12*sj0))+(((-1.0)*x11682))+((x11683*x11685))+((x11686*x11687))+((cj0*cj5*r02))+((cj0*r01*x11685))+((r00*sj5*x11684)));
evalcond[5]=((-0.0019)+(((-1.0)*x11690*x11691))+((x11683*x11689))+(((-1.0)*x11686*x11690))+(((0.0718)*x11682))+(((0.026255)*r01*x11684))+(((-0.02626)*x11681))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11694=(cj5*cj6);
IkReal x11695=(cj0*sj6);
IkReal x11696=(r01*sj0);
IkReal x11697=((1.0)*sj0);
IkReal x11698=((1.0)*cj5);
IkReal x11699=(cj0*r12);
IkReal x11700=(r02*sj5);
IkReal x11701=((1.0)*sj5);
IkReal x11702=(cj5*sj6);
IkReal x11703=((1.0)*cj0);
IkReal x11704=(cj6*r10);
IkReal x11705=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x11701))+((r20*x11702))+((r21*x11694)));
evalcond[2]=(x11705+(((-1.0)*x11703*x11704))+(((-1.0)*sj6*x11696))+((r11*x11695)));
evalcond[3]=((((-1.0)*r10*x11697*x11702))+(((-1.0)*r01*x11694*x11703))+((r12*sj0*sj5))+((cj0*x11700))+(((-1.0)*r00*x11695*x11698))+(((-1.0)*r11*x11694*x11697)));
evalcond[4]=((-1.0)+((sj5*x11699))+((r00*sj0*x11702))+((x11694*x11696))+(((-1.0)*x11697*x11700))+(((-1.0)*r10*x11695*x11698))+(((-1.0)*r11*x11694*x11703)));
evalcond[5]=((((-1.0)*cj6*x11696*x11701))+(((-1.0)*cj5*r02*x11697))+((r10*sj5*x11695))+((cj5*x11699))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x11697)));
evalcond[6]=((-0.0097)+(((0.026255)*x11705))+(((0.026255)*r11*x11695))+(((-1.0)*py*x11703))+(((-0.026255)*sj6*x11696))+((px*sj0))+(((-0.026255)*cj0*x11704)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11706=IKcos(j4);
IkReal x11707=IKsin(j4);
IkReal x11708=(r11*sj0);
IkReal x11709=(cj0*sj6);
IkReal x11710=(cj6*sj5);
IkReal x11711=(r10*sj0);
IkReal x11712=(sj5*sj6);
IkReal x11713=((1.0)*cj6);
IkReal x11714=((0.026255)*sj6);
IkReal x11715=((0.026255)*cj6);
IkReal x11716=(cj0*r00);
IkReal x11717=((1.0)*r21);
IkReal x11718=((1.0)*x11707);
evalcond[0]=((((-1.0)*x11718))+(((-1.0)*sj6*x11717))+((cj6*r20)));
evalcond[1]=(x11706+(((-1.0)*r20*x11712))+(((-1.0)*x11710*x11717))+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.09756)+(((-1.0)*r21*x11714))+((r20*x11715))+pz+(((-0.02626)*x11707))+(((-0.0718)*x11706)));
evalcond[3]=(((r01*x11709))+(((-1.0)*x11713*x11716))+((sj6*x11708))+(((-1.0)*x11706))+(((-1.0)*x11711*x11713)));
evalcond[4]=(((cj5*r12*sj0))+((x11708*x11710))+(((-1.0)*x11718))+((cj0*cj5*r02))+((cj0*r01*x11710))+((x11711*x11712))+((r00*sj5*x11709)));
evalcond[5]=((-0.0019)+((x11708*x11714))+(((0.0718)*x11707))+(((-1.0)*x11715*x11716))+(((-1.0)*py*sj0))+(((-1.0)*x11711*x11715))+(((-0.02626)*x11706))+(((0.026255)*r01*x11709))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11719=(cj5*cj6);
IkReal x11720=(cj0*sj6);
IkReal x11721=(r01*sj0);
IkReal x11722=((1.0)*sj0);
IkReal x11723=((1.0)*cj5);
IkReal x11724=(cj0*r12);
IkReal x11725=(r02*sj5);
IkReal x11726=((1.0)*sj5);
IkReal x11727=(cj5*sj6);
IkReal x11728=((1.0)*cj0);
IkReal x11729=(cj6*r10);
IkReal x11730=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x11726))+((r20*x11727))+((r21*x11719)));
evalcond[2]=(x11730+(((-1.0)*sj6*x11721))+(((-1.0)*x11728*x11729))+((r11*x11720)));
evalcond[3]=((((-1.0)*r11*x11719*x11722))+(((-1.0)*r01*x11719*x11728))+((r12*sj0*sj5))+((cj0*x11725))+(((-1.0)*r00*x11720*x11723))+(((-1.0)*r10*x11722*x11727)));
evalcond[4]=((-1.0)+((r00*sj0*x11727))+(((-1.0)*r11*x11719*x11728))+((x11719*x11721))+(((-1.0)*r10*x11720*x11723))+(((-1.0)*x11722*x11725))+((sj5*x11724)));
evalcond[5]=((((-1.0)*cj5*r02*x11722))+((r10*sj5*x11720))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x11722))+(((-1.0)*cj6*x11721*x11726))+((cj5*x11724)));
evalcond[6]=((-0.0001)+(((0.026255)*x11730))+(((-0.026255)*sj6*x11721))+((px*sj0))+(((-1.0)*py*x11728))+(((-0.026255)*cj0*x11729))+(((0.026255)*r11*x11720)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11731=IKcos(j4);
IkReal x11732=IKsin(j4);
IkReal x11733=(r11*sj0);
IkReal x11734=(cj0*sj6);
IkReal x11735=(cj6*sj5);
IkReal x11736=(r10*sj0);
IkReal x11737=(sj5*sj6);
IkReal x11738=((1.0)*cj6);
IkReal x11739=((0.026255)*sj6);
IkReal x11740=((0.026255)*cj6);
IkReal x11741=(cj0*r00);
IkReal x11742=((1.0)*r21);
IkReal x11743=((1.0)*x11732);
evalcond[0]=((((-1.0)*sj6*x11742))+(((-1.0)*x11743))+((cj6*r20)));
evalcond[1]=(x11731+(((-1.0)*r20*x11737))+(((-1.0)*cj5*r22))+(((-1.0)*x11735*x11742)));
evalcond[2]=((-0.08776)+(((-1.0)*r21*x11739))+(((-0.0718)*x11731))+(((-0.02626)*x11732))+((r20*x11740))+pz);
evalcond[3]=(((r01*x11734))+(((-1.0)*x11738*x11741))+(((-1.0)*x11731))+((sj6*x11733))+(((-1.0)*x11736*x11738)));
evalcond[4]=(((x11736*x11737))+((cj5*r12*sj0))+((r00*sj5*x11734))+((cj0*cj5*r02))+((x11733*x11735))+(((-1.0)*x11743))+((cj0*r01*x11735)));
evalcond[5]=((-0.0019)+((x11733*x11739))+(((0.0718)*x11732))+(((0.026255)*r01*x11734))+(((-0.02626)*x11731))+(((-1.0)*x11740*x11741))+(((-1.0)*py*sj0))+(((-1.0)*x11736*x11740))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11744=(cj5*cj6);
IkReal x11745=(cj0*sj6);
IkReal x11746=(r01*sj0);
IkReal x11747=((1.0)*sj0);
IkReal x11748=((1.0)*cj5);
IkReal x11749=(cj0*r12);
IkReal x11750=(r02*sj5);
IkReal x11751=((1.0)*sj5);
IkReal x11752=(cj5*sj6);
IkReal x11753=((1.0)*cj0);
IkReal x11754=(cj6*r10);
IkReal x11755=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x11751))+((r21*x11744))+((r20*x11752)));
evalcond[2]=(x11755+(((-1.0)*sj6*x11746))+(((-1.0)*x11753*x11754))+((r11*x11745)));
evalcond[3]=(((cj0*x11750))+(((-1.0)*r11*x11744*x11747))+(((-1.0)*r01*x11744*x11753))+((r12*sj0*sj5))+(((-1.0)*r00*x11745*x11748))+(((-1.0)*r10*x11747*x11752)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11745*x11748))+((x11744*x11746))+(((-1.0)*x11747*x11750))+((r00*sj0*x11752))+(((-1.0)*r11*x11744*x11753))+((sj5*x11749)));
evalcond[5]=(((cj5*x11749))+(((-1.0)*cj6*x11746*x11751))+(((-1.0)*cj5*r02*x11747))+((cj0*cj6*r11*sj5))+((r10*sj5*x11745))+(((-1.0)*r00*sj5*sj6*x11747)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x11745))+(((-1.0)*py*x11753))+(((-0.026255)*sj6*x11746))+(((-0.026255)*cj0*x11754))+((px*sj0))+(((0.026255)*x11755)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11756=(cj6*r20);
IkReal x11757=(r21*sj6);
if( IKabs((x11757+(((-1.0)*x11756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11757))+(((6.96378830083565e-5)*x11756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11757+(((-1.0)*x11756))))+IKsqr(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11757))+(((6.96378830083565e-5)*x11756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11757+(((-1.0)*x11756))), ((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11757))+(((6.96378830083565e-5)*x11756))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11758=IKcos(j4);
IkReal x11759=IKsin(j4);
IkReal x11760=(r11*sj0);
IkReal x11761=(cj0*sj6);
IkReal x11762=(cj6*sj5);
IkReal x11763=(r10*sj0);
IkReal x11764=(sj5*sj6);
IkReal x11765=((1.0)*cj6);
IkReal x11766=((0.026255)*sj6);
IkReal x11767=((0.026255)*cj6);
IkReal x11768=(cj0*r00);
IkReal x11769=((1.0)*r21);
IkReal x11770=((1.0)*x11758);
evalcond[0]=(x11759+(((-1.0)*sj6*x11769))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x11764))+(((-1.0)*cj5*r22))+(((-1.0)*x11762*x11769))+(((-1.0)*x11770)));
evalcond[2]=((0.10716)+(((-1.0)*r21*x11766))+((r20*x11767))+(((0.02626)*x11759))+(((0.0718)*x11758))+pz);
evalcond[3]=(((sj6*x11760))+(((-1.0)*x11765*x11768))+(((-1.0)*x11763*x11765))+(((-1.0)*x11770))+((r01*x11761)));
evalcond[4]=(((cj5*r12*sj0))+((x11763*x11764))+((cj0*cj5*r02))+(((-1.0)*x11759))+((r00*sj5*x11761))+((cj0*r01*x11762))+((x11760*x11762)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x11761))+(((0.0718)*x11759))+(((-0.02626)*x11758))+(((-1.0)*py*sj0))+(((-1.0)*x11763*x11767))+(((-1.0)*cj0*px))+(((-1.0)*x11767*x11768))+((x11760*x11766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11771=(cj5*cj6);
IkReal x11772=(cj0*sj6);
IkReal x11773=(r01*sj0);
IkReal x11774=((1.0)*sj0);
IkReal x11775=((1.0)*cj5);
IkReal x11776=(cj0*r12);
IkReal x11777=(r02*sj5);
IkReal x11778=((1.0)*sj5);
IkReal x11779=(cj5*sj6);
IkReal x11780=((1.0)*cj0);
IkReal x11781=(cj6*r10);
IkReal x11782=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x11779))+(((-1.0)*r22*x11778))+((r21*x11771)));
evalcond[2]=(x11782+(((-1.0)*sj6*x11773))+((r11*x11772))+(((-1.0)*x11780*x11781)));
evalcond[3]=((((-1.0)*r10*x11774*x11779))+((r12*sj0*sj5))+(((-1.0)*r11*x11771*x11774))+(((-1.0)*r01*x11771*x11780))+(((-1.0)*r00*x11772*x11775))+((cj0*x11777)));
evalcond[4]=((-1.0)+((sj5*x11776))+((r00*sj0*x11779))+(((-1.0)*x11774*x11777))+((x11771*x11773))+(((-1.0)*r11*x11771*x11780))+(((-1.0)*r10*x11772*x11775)));
evalcond[5]=(((r10*sj5*x11772))+(((-1.0)*r00*sj5*sj6*x11774))+(((-1.0)*cj6*x11773*x11778))+((cj5*x11776))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x11774)));
evalcond[6]=((0.0097)+(((-1.0)*py*x11780))+(((-0.026255)*sj6*x11773))+(((0.026255)*r11*x11772))+(((-0.026255)*cj0*x11781))+((px*sj0))+(((0.026255)*x11782)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11783=IKcos(j4);
IkReal x11784=IKsin(j4);
IkReal x11785=(r11*sj0);
IkReal x11786=(cj0*sj6);
IkReal x11787=(cj6*sj5);
IkReal x11788=(r10*sj0);
IkReal x11789=(sj5*sj6);
IkReal x11790=((1.0)*cj6);
IkReal x11791=((0.026255)*sj6);
IkReal x11792=((0.026255)*cj6);
IkReal x11793=(cj0*r00);
IkReal x11794=((1.0)*r21);
IkReal x11795=((1.0)*x11784);
evalcond[0]=((((-1.0)*sj6*x11794))+((cj6*r20))+(((-1.0)*x11795)));
evalcond[1]=(x11783+(((-1.0)*x11787*x11794))+(((-1.0)*r20*x11789))+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.09736)+(((-0.0718)*x11783))+((r20*x11792))+(((-0.02626)*x11784))+pz+(((-1.0)*r21*x11791)));
evalcond[3]=(((sj6*x11785))+(((-1.0)*x11783))+(((-1.0)*x11788*x11790))+((r01*x11786))+(((-1.0)*x11790*x11793)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x11787))+((x11788*x11789))+((r00*sj5*x11786))+((x11785*x11787))+(((-1.0)*x11795)));
evalcond[5]=((-0.0019)+((x11785*x11791))+(((-1.0)*x11792*x11793))+(((0.026255)*r01*x11786))+(((0.0718)*x11784))+(((-0.02626)*x11783))+(((-1.0)*x11788*x11792))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11796=(cj5*cj6);
IkReal x11797=(cj0*sj6);
IkReal x11798=(r01*sj0);
IkReal x11799=((1.0)*sj0);
IkReal x11800=((1.0)*cj5);
IkReal x11801=(cj0*r12);
IkReal x11802=(r02*sj5);
IkReal x11803=((1.0)*sj5);
IkReal x11804=(cj5*sj6);
IkReal x11805=((1.0)*cj0);
IkReal x11806=(cj6*r10);
IkReal x11807=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x11803))+((r20*x11804))+((r21*x11796)));
evalcond[2]=((((-1.0)*sj6*x11798))+((r11*x11797))+(((-1.0)*x11805*x11806))+x11807);
evalcond[3]=(((r12*sj0*sj5))+(((-1.0)*r10*x11799*x11804))+(((-1.0)*r11*x11796*x11799))+((cj0*x11802))+(((-1.0)*r00*x11797*x11800))+(((-1.0)*r01*x11796*x11805)));
evalcond[4]=((1.0)+(((-1.0)*r11*x11796*x11805))+(((-1.0)*r10*x11797*x11800))+((r00*sj0*x11804))+((sj5*x11801))+((x11796*x11798))+(((-1.0)*x11799*x11802)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x11799))+(((-1.0)*cj6*x11798*x11803))+(((-1.0)*cj5*r02*x11799))+((cj0*cj6*r11*sj5))+((cj5*x11801))+((r10*sj5*x11797)));
evalcond[6]=((0.0097)+(((-1.0)*py*x11805))+(((0.026255)*r11*x11797))+(((-0.026255)*cj0*x11806))+(((-0.026255)*sj6*x11798))+((px*sj0))+(((0.026255)*x11807)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11808=(cj6*r20);
IkReal x11809=(r21*sj6);
if( IKabs(((((-1.0)*x11808))+x11809)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11809))+(((6.96378830083565e-5)*x11808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11808))+x11809))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11809))+(((6.96378830083565e-5)*x11808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x11808))+x11809), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x11809))+(((6.96378830083565e-5)*x11808))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11810=IKcos(j4);
IkReal x11811=IKsin(j4);
IkReal x11812=(r11*sj0);
IkReal x11813=(cj0*sj6);
IkReal x11814=(cj6*sj5);
IkReal x11815=(r10*sj0);
IkReal x11816=(sj5*sj6);
IkReal x11817=((1.0)*cj6);
IkReal x11818=((0.026255)*sj6);
IkReal x11819=((0.026255)*cj6);
IkReal x11820=(cj0*r00);
IkReal x11821=((1.0)*r21);
IkReal x11822=((1.0)*x11810);
evalcond[0]=((((-1.0)*sj6*x11821))+((cj6*r20))+x11811);
evalcond[1]=((((-1.0)*r20*x11816))+(((-1.0)*x11814*x11821))+(((-1.0)*x11822))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09756)+(((-1.0)*r21*x11818))+pz+(((0.0718)*x11810))+((r20*x11819))+(((0.02626)*x11811)));
evalcond[3]=((((-1.0)*x11815*x11817))+((r01*x11813))+((sj6*x11812))+(((-1.0)*x11822))+(((-1.0)*x11817*x11820)));
evalcond[4]=(((cj5*r12*sj0))+((x11812*x11814))+((x11815*x11816))+((r00*sj5*x11813))+((cj0*cj5*r02))+(((-1.0)*x11811))+((cj0*r01*x11814)));
evalcond[5]=((-0.0019)+((x11812*x11818))+(((-1.0)*x11815*x11819))+(((-1.0)*x11819*x11820))+(((-0.02626)*x11810))+(((0.0718)*x11811))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((0.026255)*r01*x11813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11823=(cj5*cj6);
IkReal x11824=((1.0)*sj0);
IkReal x11825=((1.0)*r22);
IkReal x11826=(cj0*sj5);
IkReal x11827=(cj5*sj6);
IkReal x11828=((1.0)*cj0);
IkReal x11829=(cj6*r20);
IkReal x11830=((1.0)*sj5);
IkReal x11831=(r21*sj6);
IkReal x11832=(x11827*x11828);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj5*x11825))+((r20*x11827))+((r21*x11823)));
evalcond[2]=((((-1.0)*x11831))+x11829);
evalcond[3]=((((-1.0)*cj5*x11825))+(((-1.0)*cj6*r21*x11830))+(((-1.0)*r20*sj6*x11830)));
evalcond[4]=((((-1.0)*r01*x11823*x11828))+((r12*sj0*sj5))+((r02*x11826))+(((-1.0)*r10*x11824*x11827))+(((-1.0)*r11*x11823*x11824))+(((-1.0)*r00*x11832)));
evalcond[5]=((((-1.0)*r02*sj5*x11824))+((r00*sj0*x11827))+((r01*sj0*x11823))+(((-1.0)*r10*x11832))+((r12*x11826))+(((-1.0)*r11*x11823*x11828)));
evalcond[6]=((-0.0097)+(((0.026255)*x11829))+pz+(((-0.026255)*x11831)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11833=(sj0*sj6);
IkReal x11834=(cj0*sj6);
IkReal x11835=(cj6*r00);
IkReal x11836=((1.0)*cj6*r10);
if( IKabs((((r11*x11834))+(((-1.0)*cj0*x11836))+(((-1.0)*r01*x11833))+((sj0*x11835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x11835))+((r11*x11833))+((r01*x11834))+(((-1.0)*sj0*x11836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x11834))+(((-1.0)*cj0*x11836))+(((-1.0)*r01*x11833))+((sj0*x11835))))+IKsqr(((((-1.0)*cj0*x11835))+((r11*x11833))+((r01*x11834))+(((-1.0)*sj0*x11836))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x11834))+(((-1.0)*cj0*x11836))+(((-1.0)*r01*x11833))+((sj0*x11835))), ((((-1.0)*cj0*x11835))+((r11*x11833))+((r01*x11834))+(((-1.0)*sj0*x11836))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11837=IKcos(j4);
IkReal x11838=IKsin(j4);
IkReal x11839=(r11*sj6);
IkReal x11840=((0.026255)*cj0);
IkReal x11841=(r01*sj6);
IkReal x11842=(sj0*sj5);
IkReal x11843=(cj6*r11);
IkReal x11844=(r10*sj6);
IkReal x11845=(cj5*r12);
IkReal x11846=(cj6*sj0);
IkReal x11847=((1.0)*sj0);
IkReal x11848=(cj5*r02);
IkReal x11849=((1.0)*r10);
IkReal x11850=(cj0*sj5);
IkReal x11851=(r00*sj6);
IkReal x11852=((0.026255)*sj0);
IkReal x11853=(cj0*cj6);
IkReal x11854=((1.0)*cj0);
IkReal x11855=(cj6*r01);
IkReal x11856=((1.0)*x11838);
evalcond[0]=(((cj0*x11841))+(((-1.0)*r00*x11853))+(((-1.0)*x11837))+(((-1.0)*x11846*x11849))+((sj0*x11839)));
evalcond[1]=((((-1.0)*x11856))+(((-1.0)*x11849*x11853))+(((-1.0)*x11841*x11847))+((r00*x11846))+((cj0*x11839)));
evalcond[2]=((((-1.0)*x11856))+((cj0*x11848))+((x11842*x11843))+((x11842*x11844))+((sj0*x11845))+((x11850*x11851))+((x11850*x11855)));
evalcond[3]=(((cj0*x11845))+(((-1.0)*x11842*x11851))+(((-1.0)*x11842*x11855))+((x11844*x11850))+((x11843*x11850))+x11837+(((-1.0)*x11847*x11848)));
evalcond[4]=((-0.09736)+((x11839*x11840))+(((-1.0)*x11841*x11852))+(((-0.02626)*x11838))+(((0.026255)*r00*x11846))+(((-1.0)*cj6*r10*x11840))+((px*sj0))+(((-1.0)*py*x11854))+(((-0.0718)*x11837)));
evalcond[5]=((-0.0019)+((x11839*x11852))+((x11840*x11841))+(((-0.026255)*r10*x11846))+(((-0.02626)*x11837))+(((-1.0)*px*x11854))+(((0.0718)*x11838))+(((-1.0)*cj6*r00*x11840))+(((-1.0)*py*x11847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11857=(cj5*cj6);
IkReal x11858=((1.0)*sj0);
IkReal x11859=((1.0)*r22);
IkReal x11860=(cj0*sj5);
IkReal x11861=(cj5*sj6);
IkReal x11862=((1.0)*cj0);
IkReal x11863=(cj6*r20);
IkReal x11864=((1.0)*sj5);
IkReal x11865=(r21*sj6);
IkReal x11866=(x11861*x11862);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+((r21*x11857))+(((-1.0)*sj5*x11859))+((r20*x11861)));
evalcond[2]=((((-1.0)*x11865))+x11863);
evalcond[3]=((((-1.0)*r20*sj6*x11864))+(((-1.0)*cj5*x11859))+(((-1.0)*cj6*r21*x11864)));
evalcond[4]=(((r02*x11860))+(((-1.0)*r11*x11857*x11858))+(((-1.0)*r01*x11857*x11862))+(((-1.0)*r10*x11858*x11861))+((r12*sj0*sj5))+(((-1.0)*r00*x11866)));
evalcond[5]=(((r01*sj0*x11857))+(((-1.0)*r02*sj5*x11858))+((r12*x11860))+(((-1.0)*r10*x11866))+(((-1.0)*r11*x11857*x11862))+((r00*sj0*x11861)));
evalcond[6]=((-0.0097)+(((-0.026255)*x11865))+(((0.026255)*x11863))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11867=(sj0*sj6);
IkReal x11868=(cj6*r10);
IkReal x11869=((1.0)*sj0);
IkReal x11870=(cj6*r00);
IkReal x11871=(cj0*sj6);
if( IKabs((((r01*x11867))+(((-1.0)*x11869*x11870))+(((-1.0)*r11*x11871))+((cj0*x11868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11868*x11869))+((r01*x11871))+(((-1.0)*cj0*x11870))+((r11*x11867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x11867))+(((-1.0)*x11869*x11870))+(((-1.0)*r11*x11871))+((cj0*x11868))))+IKsqr(((((-1.0)*x11868*x11869))+((r01*x11871))+(((-1.0)*cj0*x11870))+((r11*x11867))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x11867))+(((-1.0)*x11869*x11870))+(((-1.0)*r11*x11871))+((cj0*x11868))), ((((-1.0)*x11868*x11869))+((r01*x11871))+(((-1.0)*cj0*x11870))+((r11*x11867))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11872=IKsin(j4);
IkReal x11873=IKcos(j4);
IkReal x11874=(r11*sj6);
IkReal x11875=((0.026255)*cj0);
IkReal x11876=(r01*sj6);
IkReal x11877=(sj0*sj5);
IkReal x11878=(cj6*r11);
IkReal x11879=(r10*sj6);
IkReal x11880=(cj5*r12);
IkReal x11881=(cj6*sj0);
IkReal x11882=((1.0)*sj0);
IkReal x11883=(cj5*r02);
IkReal x11884=((1.0)*r10);
IkReal x11885=(cj0*sj5);
IkReal x11886=(r00*sj6);
IkReal x11887=((0.026255)*sj0);
IkReal x11888=(cj0*cj6);
IkReal x11889=((1.0)*cj0);
IkReal x11890=(cj6*r01);
IkReal x11891=((1.0)*x11873);
evalcond[0]=((((-1.0)*x11884*x11888))+((r00*x11881))+((cj0*x11874))+x11872+(((-1.0)*x11876*x11882)));
evalcond[1]=((((-1.0)*x11881*x11884))+((sj0*x11874))+(((-1.0)*x11891))+(((-1.0)*r00*x11888))+((cj0*x11876)));
evalcond[2]=(((x11877*x11879))+((x11877*x11878))+(((-1.0)*x11872))+((cj0*x11883))+((x11885*x11890))+((x11885*x11886))+((sj0*x11880)));
evalcond[3]=((((-1.0)*x11877*x11886))+(((-1.0)*x11882*x11883))+(((-1.0)*x11877*x11890))+((cj0*x11880))+(((-1.0)*x11891))+((x11878*x11885))+((x11879*x11885)));
evalcond[4]=((0.09756)+(((-1.0)*py*x11889))+(((0.02626)*x11872))+(((0.0718)*x11873))+(((-1.0)*cj6*r10*x11875))+((px*sj0))+((x11874*x11875))+(((0.026255)*r00*x11881))+(((-1.0)*x11876*x11887)));
evalcond[5]=((-0.0019)+(((-0.02626)*x11873))+(((-1.0)*py*x11882))+((x11875*x11876))+((x11874*x11887))+(((0.0718)*x11872))+(((-1.0)*cj6*r00*x11875))+(((-0.026255)*r10*x11881))+(((-1.0)*px*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11892=(cj5*cj6);
IkReal x11893=((1.0)*sj0);
IkReal x11894=((1.0)*r22);
IkReal x11895=(cj0*sj5);
IkReal x11896=(cj5*sj6);
IkReal x11897=((1.0)*cj0);
IkReal x11898=(cj6*r20);
IkReal x11899=((1.0)*sj5);
IkReal x11900=(r21*sj6);
IkReal x11901=(x11896*x11897);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+((r21*x11892))+((r20*x11896))+(((-1.0)*sj5*x11894)));
evalcond[2]=((((-1.0)*x11900))+x11898);
evalcond[3]=((((-1.0)*r20*sj6*x11899))+(((-1.0)*cj5*x11894))+(((-1.0)*cj6*r21*x11899)));
evalcond[4]=((((-1.0)*r01*x11892*x11897))+(((-1.0)*r11*x11892*x11893))+(((-1.0)*r00*x11901))+((r12*sj0*sj5))+((r02*x11895))+(((-1.0)*r10*x11893*x11896)));
evalcond[5]=((((-1.0)*r11*x11892*x11897))+(((-1.0)*r02*sj5*x11893))+((r00*sj0*x11896))+((r01*sj0*x11892))+(((-1.0)*r10*x11901))+((r12*x11895)));
evalcond[6]=((-0.0001)+(((-0.026255)*x11900))+(((0.026255)*x11898))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11902=(sj0*sj6);
IkReal x11903=(cj6*r10);
IkReal x11904=((1.0)*sj0);
IkReal x11905=(cj6*r00);
IkReal x11906=(cj0*sj6);
if( IKabs(((((-1.0)*r11*x11906))+((r01*x11902))+((cj0*x11903))+(((-1.0)*x11904*x11905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x11905))+((r01*x11906))+(((-1.0)*x11903*x11904))+((r11*x11902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x11906))+((r01*x11902))+((cj0*x11903))+(((-1.0)*x11904*x11905))))+IKsqr(((((-1.0)*cj0*x11905))+((r01*x11906))+(((-1.0)*x11903*x11904))+((r11*x11902))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x11906))+((r01*x11902))+((cj0*x11903))+(((-1.0)*x11904*x11905))), ((((-1.0)*cj0*x11905))+((r01*x11906))+(((-1.0)*x11903*x11904))+((r11*x11902))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11907=IKsin(j4);
IkReal x11908=IKcos(j4);
IkReal x11909=(r11*sj6);
IkReal x11910=((0.026255)*cj0);
IkReal x11911=(r01*sj6);
IkReal x11912=(sj0*sj5);
IkReal x11913=(cj6*r11);
IkReal x11914=(r10*sj6);
IkReal x11915=(cj5*r12);
IkReal x11916=(cj6*sj0);
IkReal x11917=((1.0)*sj0);
IkReal x11918=(cj5*r02);
IkReal x11919=((1.0)*r10);
IkReal x11920=(cj0*sj5);
IkReal x11921=(r00*sj6);
IkReal x11922=((0.026255)*sj0);
IkReal x11923=(cj0*cj6);
IkReal x11924=((1.0)*cj0);
IkReal x11925=(cj6*r01);
IkReal x11926=((1.0)*x11908);
evalcond[0]=(x11907+((r00*x11916))+((cj0*x11909))+(((-1.0)*x11911*x11917))+(((-1.0)*x11919*x11923)));
evalcond[1]=((((-1.0)*r00*x11923))+(((-1.0)*x11926))+((sj0*x11909))+(((-1.0)*x11916*x11919))+((cj0*x11911)));
evalcond[2]=(((sj0*x11915))+(((-1.0)*x11907))+((x11912*x11914))+((x11912*x11913))+((cj0*x11918))+((x11920*x11925))+((x11920*x11921)));
evalcond[3]=((((-1.0)*x11917*x11918))+(((-1.0)*x11926))+(((-1.0)*x11912*x11925))+(((-1.0)*x11912*x11921))+((cj0*x11915))+((x11913*x11920))+((x11914*x11920)));
evalcond[4]=((0.08776)+(((-1.0)*cj6*r10*x11910))+(((0.0718)*x11908))+((x11909*x11910))+(((-1.0)*x11911*x11922))+(((0.02626)*x11907))+(((-1.0)*py*x11924))+((px*sj0))+(((0.026255)*r00*x11916)));
evalcond[5]=((-0.0019)+(((-0.02626)*x11908))+(((0.0718)*x11907))+(((-1.0)*cj6*r00*x11910))+(((-1.0)*px*x11924))+(((-1.0)*py*x11917))+(((-0.026255)*r10*x11916))+((x11909*x11922))+((x11910*x11911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11927=(cj5*cj6);
IkReal x11928=((1.0)*sj0);
IkReal x11929=((1.0)*r22);
IkReal x11930=(cj0*sj5);
IkReal x11931=(cj5*sj6);
IkReal x11932=((1.0)*cj0);
IkReal x11933=(cj6*r20);
IkReal x11934=((1.0)*sj5);
IkReal x11935=(r21*sj6);
IkReal x11936=(x11931*x11932);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj5*x11929))+((r21*x11927))+((r20*x11931)));
evalcond[2]=(x11933+(((-1.0)*x11935)));
evalcond[3]=((((-1.0)*cj6*r21*x11934))+(((-1.0)*r20*sj6*x11934))+(((-1.0)*cj5*x11929)));
evalcond[4]=(((r02*x11930))+(((-1.0)*r01*x11927*x11932))+((r12*sj0*sj5))+(((-1.0)*r10*x11928*x11931))+(((-1.0)*r00*x11936))+(((-1.0)*r11*x11927*x11928)));
evalcond[5]=(((r00*sj0*x11931))+(((-1.0)*r10*x11936))+((r01*sj0*x11927))+((r12*x11930))+(((-1.0)*r11*x11927*x11932))+(((-1.0)*r02*sj5*x11928)));
evalcond[6]=((-0.0001)+(((-0.026255)*x11935))+pz+(((0.026255)*x11933)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11937=(sj0*sj6);
IkReal x11938=(cj0*sj6);
IkReal x11939=(cj6*r00);
IkReal x11940=((1.0)*cj6*r10);
if( IKabs((((r11*x11938))+(((-1.0)*cj0*x11940))+((sj0*x11939))+(((-1.0)*r01*x11937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x11937))+(((-1.0)*cj0*x11939))+(((-1.0)*sj0*x11940))+((r01*x11938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x11938))+(((-1.0)*cj0*x11940))+((sj0*x11939))+(((-1.0)*r01*x11937))))+IKsqr((((r11*x11937))+(((-1.0)*cj0*x11939))+(((-1.0)*sj0*x11940))+((r01*x11938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x11938))+(((-1.0)*cj0*x11940))+((sj0*x11939))+(((-1.0)*r01*x11937))), (((r11*x11937))+(((-1.0)*cj0*x11939))+(((-1.0)*sj0*x11940))+((r01*x11938))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11941=IKcos(j4);
IkReal x11942=IKsin(j4);
IkReal x11943=(r11*sj6);
IkReal x11944=((0.026255)*cj0);
IkReal x11945=(r01*sj6);
IkReal x11946=(sj0*sj5);
IkReal x11947=(cj6*r11);
IkReal x11948=(r10*sj6);
IkReal x11949=(cj5*r12);
IkReal x11950=(cj6*sj0);
IkReal x11951=((1.0)*sj0);
IkReal x11952=(cj5*r02);
IkReal x11953=((1.0)*r10);
IkReal x11954=(cj0*sj5);
IkReal x11955=(r00*sj6);
IkReal x11956=((0.026255)*sj0);
IkReal x11957=(cj0*cj6);
IkReal x11958=((1.0)*cj0);
IkReal x11959=(cj6*r01);
IkReal x11960=((1.0)*x11942);
evalcond[0]=(((sj0*x11943))+(((-1.0)*x11941))+((cj0*x11945))+(((-1.0)*x11950*x11953))+(((-1.0)*r00*x11957)));
evalcond[1]=((((-1.0)*x11945*x11951))+(((-1.0)*x11960))+((cj0*x11943))+((r00*x11950))+(((-1.0)*x11953*x11957)));
evalcond[2]=(((x11946*x11947))+((x11946*x11948))+((sj0*x11949))+((cj0*x11952))+(((-1.0)*x11960))+((x11954*x11959))+((x11954*x11955)));
evalcond[3]=(x11941+((x11947*x11954))+(((-1.0)*x11946*x11959))+(((-1.0)*x11946*x11955))+((cj0*x11949))+((x11948*x11954))+(((-1.0)*x11951*x11952)));
evalcond[4]=((-0.10716)+(((-0.02626)*x11942))+(((-1.0)*cj6*r10*x11944))+(((-1.0)*x11945*x11956))+((x11943*x11944))+(((0.026255)*r00*x11950))+(((-0.0718)*x11941))+((px*sj0))+(((-1.0)*py*x11958)));
evalcond[5]=((-0.0019)+((x11943*x11956))+(((-0.02626)*x11941))+(((-1.0)*px*x11958))+(((-0.026255)*r10*x11950))+(((0.0718)*x11942))+((x11944*x11945))+(((-1.0)*cj6*r00*x11944))+(((-1.0)*py*x11951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11961=(cj5*cj6);
IkReal x11962=((1.0)*sj0);
IkReal x11963=((1.0)*r22);
IkReal x11964=(cj0*sj5);
IkReal x11965=(cj5*sj6);
IkReal x11966=((1.0)*cj0);
IkReal x11967=(cj6*r20);
IkReal x11968=((1.0)*sj5);
IkReal x11969=(r21*sj6);
IkReal x11970=(x11965*x11966);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x11963))+((r20*x11965))+((r21*x11961)));
evalcond[2]=(x11967+(((-1.0)*x11969)));
evalcond[3]=((((-1.0)*cj5*x11963))+(((-1.0)*r20*sj6*x11968))+(((-1.0)*cj6*r21*x11968)));
evalcond[4]=((((-1.0)*r11*x11961*x11962))+(((-1.0)*r10*x11962*x11965))+(((-1.0)*r01*x11961*x11966))+((r02*x11964))+((r12*sj0*sj5))+(((-1.0)*r00*x11970)));
evalcond[5]=((((-1.0)*r10*x11970))+(((-1.0)*r11*x11961*x11966))+((r00*sj0*x11965))+((r12*x11964))+(((-1.0)*r02*sj5*x11962))+((r01*sj0*x11961)));
evalcond[6]=((0.0097)+(((0.026255)*x11967))+(((-0.026255)*x11969))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11971=(sj0*sj6);
IkReal x11972=(cj6*r10);
IkReal x11973=((1.0)*sj0);
IkReal x11974=(cj6*r00);
IkReal x11975=(cj0*sj6);
if( IKabs((((r01*x11971))+((cj0*x11972))+(((-1.0)*r11*x11975))+(((-1.0)*x11973*x11974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x11975))+((r11*x11971))+(((-1.0)*cj0*x11974))+(((-1.0)*x11972*x11973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x11971))+((cj0*x11972))+(((-1.0)*r11*x11975))+(((-1.0)*x11973*x11974))))+IKsqr((((r01*x11975))+((r11*x11971))+(((-1.0)*cj0*x11974))+(((-1.0)*x11972*x11973))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x11971))+((cj0*x11972))+(((-1.0)*r11*x11975))+(((-1.0)*x11973*x11974))), (((r01*x11975))+((r11*x11971))+(((-1.0)*cj0*x11974))+(((-1.0)*x11972*x11973))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11976=IKsin(j4);
IkReal x11977=IKcos(j4);
IkReal x11978=(r11*sj6);
IkReal x11979=((0.026255)*cj0);
IkReal x11980=(r01*sj6);
IkReal x11981=(sj0*sj5);
IkReal x11982=(cj6*r11);
IkReal x11983=(r10*sj6);
IkReal x11984=(cj5*r12);
IkReal x11985=(cj6*sj0);
IkReal x11986=((1.0)*sj0);
IkReal x11987=(cj5*r02);
IkReal x11988=((1.0)*r10);
IkReal x11989=(cj0*sj5);
IkReal x11990=(r00*sj6);
IkReal x11991=((0.026255)*sj0);
IkReal x11992=(cj0*cj6);
IkReal x11993=((1.0)*cj0);
IkReal x11994=(cj6*r01);
IkReal x11995=((1.0)*x11977);
evalcond[0]=(x11976+(((-1.0)*x11980*x11986))+(((-1.0)*x11988*x11992))+((cj0*x11978))+((r00*x11985)));
evalcond[1]=(((cj0*x11980))+((sj0*x11978))+(((-1.0)*x11985*x11988))+(((-1.0)*r00*x11992))+(((-1.0)*x11995)));
evalcond[2]=(((cj0*x11987))+(((-1.0)*x11976))+((x11989*x11994))+((x11989*x11990))+((sj0*x11984))+((x11981*x11982))+((x11981*x11983)));
evalcond[3]=(((cj0*x11984))+((x11983*x11989))+(((-1.0)*x11986*x11987))+(((-1.0)*x11981*x11990))+(((-1.0)*x11981*x11994))+((x11982*x11989))+(((-1.0)*x11995)));
evalcond[4]=((0.09736)+(((0.02626)*x11976))+(((-1.0)*py*x11993))+(((-1.0)*cj6*r10*x11979))+(((0.026255)*r00*x11985))+(((0.0718)*x11977))+((x11978*x11979))+(((-1.0)*x11980*x11991))+((px*sj0)));
evalcond[5]=((-0.0019)+(((-0.026255)*r10*x11985))+((x11978*x11991))+(((-1.0)*cj6*r00*x11979))+((x11979*x11980))+(((0.0718)*x11976))+(((-0.02626)*x11977))+(((-1.0)*px*x11993))+(((-1.0)*py*x11986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11996=(cj5*cj6);
IkReal x11997=((1.0)*sj0);
IkReal x11998=((1.0)*r22);
IkReal x11999=(cj0*sj5);
IkReal x12000=(cj5*sj6);
IkReal x12001=((1.0)*cj0);
IkReal x12002=(cj6*r20);
IkReal x12003=((1.0)*sj5);
IkReal x12004=(r21*sj6);
IkReal x12005=(x12000*x12001);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x12000))+((r21*x11996))+(((-1.0)*sj5*x11998)));
evalcond[2]=((((-1.0)*x12004))+x12002);
evalcond[3]=((((-1.0)*r20*sj6*x12003))+(((-1.0)*cj6*r21*x12003))+(((-1.0)*cj5*x11998)));
evalcond[4]=((((-1.0)*r10*x11997*x12000))+(((-1.0)*r00*x12005))+((r12*sj0*sj5))+(((-1.0)*r01*x11996*x12001))+(((-1.0)*r11*x11996*x11997))+((r02*x11999)));
evalcond[5]=((((-1.0)*r10*x12005))+((r00*sj0*x12000))+(((-1.0)*r02*sj5*x11997))+((r01*sj0*x11996))+(((-1.0)*r11*x11996*x12001))+((r12*x11999)));
evalcond[6]=((0.0097)+(((0.026255)*x12002))+(((-0.026255)*x12004))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12006=(sj0*sj6);
IkReal x12007=(cj0*sj6);
IkReal x12008=(cj6*r00);
IkReal x12009=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*r01*x12006))+(((-1.0)*cj0*x12009))+((sj0*x12008))+((r11*x12007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x12009))+((r01*x12007))+((r11*x12006))+(((-1.0)*cj0*x12008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x12006))+(((-1.0)*cj0*x12009))+((sj0*x12008))+((r11*x12007))))+IKsqr(((((-1.0)*sj0*x12009))+((r01*x12007))+((r11*x12006))+(((-1.0)*cj0*x12008))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x12006))+(((-1.0)*cj0*x12009))+((sj0*x12008))+((r11*x12007))), ((((-1.0)*sj0*x12009))+((r01*x12007))+((r11*x12006))+(((-1.0)*cj0*x12008))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12010=IKcos(j4);
IkReal x12011=IKsin(j4);
IkReal x12012=(r11*sj6);
IkReal x12013=((0.026255)*cj0);
IkReal x12014=(r01*sj6);
IkReal x12015=(sj0*sj5);
IkReal x12016=(cj6*r11);
IkReal x12017=(r10*sj6);
IkReal x12018=(cj5*r12);
IkReal x12019=(cj6*sj0);
IkReal x12020=((1.0)*sj0);
IkReal x12021=(cj5*r02);
IkReal x12022=((1.0)*r10);
IkReal x12023=(cj0*sj5);
IkReal x12024=(r00*sj6);
IkReal x12025=((0.026255)*sj0);
IkReal x12026=(cj0*cj6);
IkReal x12027=((1.0)*cj0);
IkReal x12028=(cj6*r01);
IkReal x12029=((1.0)*x12011);
evalcond[0]=(((sj0*x12012))+((cj0*x12014))+(((-1.0)*x12010))+(((-1.0)*r00*x12026))+(((-1.0)*x12019*x12022)));
evalcond[1]=((((-1.0)*x12029))+((cj0*x12012))+(((-1.0)*x12014*x12020))+((r00*x12019))+(((-1.0)*x12022*x12026)));
evalcond[2]=(((sj0*x12018))+((x12023*x12028))+((x12023*x12024))+(((-1.0)*x12029))+((x12015*x12017))+((x12015*x12016))+((cj0*x12021)));
evalcond[3]=(((x12017*x12023))+(((-1.0)*x12015*x12028))+(((-1.0)*x12015*x12024))+((x12016*x12023))+(((-1.0)*x12020*x12021))+((cj0*x12018))+x12010);
evalcond[4]=((-0.09756)+(((-1.0)*cj6*r10*x12013))+(((-0.0718)*x12010))+(((-1.0)*py*x12027))+(((0.026255)*r00*x12019))+(((-1.0)*x12014*x12025))+((px*sj0))+(((-0.02626)*x12011))+((x12012*x12013)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x12027))+(((-1.0)*cj6*r00*x12013))+(((-1.0)*py*x12020))+(((0.0718)*x12011))+((x12012*x12025))+(((-0.026255)*r10*x12019))+(((-0.02626)*x12010))+((x12013*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12030=(cj5*cj6);
IkReal x12031=((1.0)*sj0);
IkReal x12032=((1.0)*r22);
IkReal x12033=(cj0*sj5);
IkReal x12034=(cj5*sj6);
IkReal x12035=((1.0)*cj0);
IkReal x12036=(cj6*r20);
IkReal x12037=((1.0)*sj5);
IkReal x12038=(r21*sj6);
IkReal x12039=(x12034*x12035);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x12034))+(((-1.0)*sj5*x12032))+((r21*x12030)));
evalcond[2]=((((-1.0)*x12038))+x12036);
evalcond[3]=((((-1.0)*r20*sj6*x12037))+(((-1.0)*cj6*r21*x12037))+(((-1.0)*cj5*x12032)));
evalcond[4]=((((-1.0)*r01*x12030*x12035))+((r12*sj0*sj5))+(((-1.0)*r00*x12039))+((r02*x12033))+(((-1.0)*r10*x12031*x12034))+(((-1.0)*r11*x12030*x12031)));
evalcond[5]=(((r00*sj0*x12034))+((r01*sj0*x12030))+(((-1.0)*r02*sj5*x12031))+((r12*x12033))+(((-1.0)*r11*x12030*x12035))+(((-1.0)*r10*x12039)));
evalcond[6]=((0.0001)+(((0.026255)*x12036))+(((-0.026255)*x12038))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12040=(sj0*sj6);
IkReal x12041=(cj0*sj6);
IkReal x12042=(cj6*r00);
IkReal x12043=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*r01*x12040))+((sj0*x12042))+((r11*x12041))+(((-1.0)*cj0*x12043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x12042))+((r01*x12041))+((r11*x12040))+(((-1.0)*sj0*x12043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x12040))+((sj0*x12042))+((r11*x12041))+(((-1.0)*cj0*x12043))))+IKsqr(((((-1.0)*cj0*x12042))+((r01*x12041))+((r11*x12040))+(((-1.0)*sj0*x12043))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x12040))+((sj0*x12042))+((r11*x12041))+(((-1.0)*cj0*x12043))), ((((-1.0)*cj0*x12042))+((r01*x12041))+((r11*x12040))+(((-1.0)*sj0*x12043))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12044=IKcos(j4);
IkReal x12045=IKsin(j4);
IkReal x12046=(r11*sj6);
IkReal x12047=((0.026255)*cj0);
IkReal x12048=(r01*sj6);
IkReal x12049=(sj0*sj5);
IkReal x12050=(cj6*r11);
IkReal x12051=(r10*sj6);
IkReal x12052=(cj5*r12);
IkReal x12053=(cj6*sj0);
IkReal x12054=((1.0)*sj0);
IkReal x12055=(cj5*r02);
IkReal x12056=((1.0)*r10);
IkReal x12057=(cj0*sj5);
IkReal x12058=(r00*sj6);
IkReal x12059=((0.026255)*sj0);
IkReal x12060=(cj0*cj6);
IkReal x12061=((1.0)*cj0);
IkReal x12062=(cj6*r01);
IkReal x12063=((1.0)*x12045);
evalcond[0]=(((cj0*x12048))+(((-1.0)*r00*x12060))+((sj0*x12046))+(((-1.0)*x12044))+(((-1.0)*x12053*x12056)));
evalcond[1]=((((-1.0)*x12048*x12054))+((cj0*x12046))+((r00*x12053))+(((-1.0)*x12063))+(((-1.0)*x12056*x12060)));
evalcond[2]=(((cj0*x12055))+((x12057*x12062))+((x12057*x12058))+((sj0*x12052))+(((-1.0)*x12063))+((x12049*x12051))+((x12049*x12050)));
evalcond[3]=(((cj0*x12052))+(((-1.0)*x12049*x12062))+(((-1.0)*x12054*x12055))+((x12050*x12057))+x12044+((x12051*x12057))+(((-1.0)*x12049*x12058)));
evalcond[4]=((-0.08776)+(((0.026255)*r00*x12053))+(((-1.0)*x12048*x12059))+(((-1.0)*cj6*r10*x12047))+(((-0.0718)*x12044))+(((-1.0)*py*x12061))+(((-0.02626)*x12045))+((x12046*x12047))+((px*sj0)));
evalcond[5]=((-0.0019)+(((-0.026255)*r10*x12053))+(((-1.0)*py*x12054))+(((-1.0)*cj6*r00*x12047))+(((-0.02626)*x12044))+((x12046*x12059))+((x12047*x12048))+(((-1.0)*px*x12061))+(((0.0718)*x12045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12064=(cj5*cj6);
IkReal x12065=((1.0)*sj0);
IkReal x12066=((1.0)*r22);
IkReal x12067=(cj0*sj5);
IkReal x12068=(cj5*sj6);
IkReal x12069=((1.0)*cj0);
IkReal x12070=(cj6*r20);
IkReal x12071=((1.0)*sj5);
IkReal x12072=(r21*sj6);
IkReal x12073=(x12068*x12069);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+((r21*x12064))+(((-1.0)*sj5*x12066))+((r20*x12068)));
evalcond[2]=((((-1.0)*x12072))+x12070);
evalcond[3]=((((-1.0)*r20*sj6*x12071))+(((-1.0)*cj6*r21*x12071))+(((-1.0)*cj5*x12066)));
evalcond[4]=((((-1.0)*r10*x12065*x12068))+(((-1.0)*r01*x12064*x12069))+(((-1.0)*r11*x12064*x12065))+((r12*sj0*sj5))+((r02*x12067))+(((-1.0)*r00*x12073)));
evalcond[5]=(((r12*x12067))+((r01*sj0*x12064))+(((-1.0)*r11*x12064*x12069))+(((-1.0)*r10*x12073))+(((-1.0)*r02*sj5*x12065))+((r00*sj0*x12068)));
evalcond[6]=((0.0001)+(((-0.026255)*x12072))+pz+(((0.026255)*x12070)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12074=(sj0*sj6);
IkReal x12075=(cj6*r10);
IkReal x12076=((1.0)*sj0);
IkReal x12077=(cj6*r00);
IkReal x12078=(cj0*sj6);
if( IKabs((((cj0*x12075))+(((-1.0)*x12076*x12077))+(((-1.0)*r11*x12078))+((r01*x12074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x12074))+(((-1.0)*x12075*x12076))+((r01*x12078))+(((-1.0)*cj0*x12077)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x12075))+(((-1.0)*x12076*x12077))+(((-1.0)*r11*x12078))+((r01*x12074))))+IKsqr((((r11*x12074))+(((-1.0)*x12075*x12076))+((r01*x12078))+(((-1.0)*cj0*x12077))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x12075))+(((-1.0)*x12076*x12077))+(((-1.0)*r11*x12078))+((r01*x12074))), (((r11*x12074))+(((-1.0)*x12075*x12076))+((r01*x12078))+(((-1.0)*cj0*x12077))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12079=IKsin(j4);
IkReal x12080=IKcos(j4);
IkReal x12081=(r11*sj6);
IkReal x12082=((0.026255)*cj0);
IkReal x12083=(r01*sj6);
IkReal x12084=(sj0*sj5);
IkReal x12085=(cj6*r11);
IkReal x12086=(r10*sj6);
IkReal x12087=(cj5*r12);
IkReal x12088=(cj6*sj0);
IkReal x12089=((1.0)*sj0);
IkReal x12090=(cj5*r02);
IkReal x12091=((1.0)*r10);
IkReal x12092=(cj0*sj5);
IkReal x12093=(r00*sj6);
IkReal x12094=((0.026255)*sj0);
IkReal x12095=(cj0*cj6);
IkReal x12096=((1.0)*cj0);
IkReal x12097=(cj6*r01);
IkReal x12098=((1.0)*x12080);
evalcond[0]=(((r00*x12088))+x12079+(((-1.0)*x12083*x12089))+((cj0*x12081))+(((-1.0)*x12091*x12095)));
evalcond[1]=((((-1.0)*r00*x12095))+(((-1.0)*x12088*x12091))+((sj0*x12081))+(((-1.0)*x12098))+((cj0*x12083)));
evalcond[2]=((((-1.0)*x12079))+((x12084*x12085))+((x12084*x12086))+((sj0*x12087))+((cj0*x12090))+((x12092*x12093))+((x12092*x12097)));
evalcond[3]=(((x12086*x12092))+((x12085*x12092))+(((-1.0)*x12089*x12090))+(((-1.0)*x12084*x12093))+(((-1.0)*x12084*x12097))+(((-1.0)*x12098))+((cj0*x12087)));
evalcond[4]=((0.10716)+((x12081*x12082))+(((0.02626)*x12079))+(((0.0718)*x12080))+(((0.026255)*r00*x12088))+(((-1.0)*py*x12096))+((px*sj0))+(((-1.0)*x12083*x12094))+(((-1.0)*cj6*r10*x12082)));
evalcond[5]=((-0.0019)+((x12082*x12083))+(((-0.026255)*r10*x12088))+(((0.0718)*x12079))+(((-1.0)*py*x12089))+(((-0.02626)*x12080))+(((-1.0)*cj6*r00*x12082))+(((-1.0)*px*x12096))+((x12081*x12094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12099=(cj6*r10);
IkReal x12100=((1.0)*sj0);
IkReal x12101=(sj0*sj6);
IkReal x12102=(cj6*r00);
IkReal x12103=(cj0*sj6);
CheckValue<IkReal> x12104=IKPowWithIntegerCheck(((((-1.0)*cj1*sj3))+((cj3*sj1))),-1);
if(!x12104.valid){
continue;
}
if( IKabs(((x12104.value)*(((((-1.0)*x12100*x12102))+((r01*x12101))+((cj0*x12099))+(((-1.0)*r11*x12103)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x12103))+(((-1.0)*x12099*x12100))+(((-1.0)*cj0*x12102))+((r11*x12101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12104.value)*(((((-1.0)*x12100*x12102))+((r01*x12101))+((cj0*x12099))+(((-1.0)*r11*x12103))))))+IKsqr((((r01*x12103))+(((-1.0)*x12099*x12100))+(((-1.0)*cj0*x12102))+((r11*x12101))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12104.value)*(((((-1.0)*x12100*x12102))+((r01*x12101))+((cj0*x12099))+(((-1.0)*r11*x12103))))), (((r01*x12103))+(((-1.0)*x12099*x12100))+(((-1.0)*cj0*x12102))+((r11*x12101))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12105=IKsin(j4);
IkReal x12106=IKcos(j4);
IkReal x12107=((1.0)*sj1);
IkReal x12108=(r11*sj0);
IkReal x12109=(sj1*sj3);
IkReal x12110=(cj0*sj6);
IkReal x12111=((0.026255)*r01);
IkReal x12112=(cj5*r12);
IkReal x12113=(cj6*sj5);
IkReal x12114=(r10*sj0);
IkReal x12115=(sj5*sj6);
IkReal x12116=((0.026255)*cj6);
IkReal x12117=(r00*sj0);
IkReal x12118=((1.0)*cj5);
IkReal x12119=(cj1*sj3);
IkReal x12120=((1.0)*cj6);
IkReal x12121=((1.0)*sj0);
IkReal x12122=(cj0*r00);
IkReal x12123=((0.026255)*sj6);
IkReal x12124=(cj1*cj3);
IkReal x12125=(cj0*r10);
IkReal x12126=(cj3*sj1);
IkReal x12127=((1.0)*r21);
IkReal x12128=((1.0)*cj0);
IkReal x12129=(cj3*x12106);
IkReal x12130=((0.02626)*x12105);
IkReal x12131=((1.0)*x12105);
IkReal x12132=((0.0718)*x12106);
evalcond[0]=(((x12105*x12109))+(((-1.0)*sj6*x12127))+((cj6*r20))+((x12105*x12124)));
evalcond[1]=(((r01*x12110))+(((-1.0)*x12114*x12120))+(((-1.0)*x12120*x12122))+((sj6*x12108))+(((-1.0)*x12106)));
evalcond[2]=((((-1.0)*sj3*x12106*x12107))+(((-1.0)*r22*x12118))+(((-1.0)*x12113*x12127))+(((-1.0)*r20*x12115))+(((-1.0)*x12106*x12124)));
evalcond[3]=(((cj6*x12117))+(((-1.0)*x12119*x12131))+(((-1.0)*r01*sj6*x12121))+((x12105*x12126))+(((-1.0)*x12120*x12125))+((r11*x12110)));
evalcond[4]=(((x12108*x12113))+((cj0*cj5*r02))+((sj0*x12112))+(((-1.0)*x12131))+((cj0*r01*x12113))+((x12114*x12115))+((r00*sj5*x12110)));
evalcond[5]=((-0.0019)+(((-1.0)*x12114*x12116))+((x12108*x12123))+(((-1.0)*px*x12128))+(((-1.0)*x12116*x12122))+(((0.0718)*x12105))+((x12110*x12111))+(((-1.0)*py*x12121))+(((-0.02626)*x12106)));
evalcond[6]=(((x12106*x12119))+((cj0*x12112))+(((-1.0)*r02*sj0*x12118))+((r10*sj5*x12110))+(((-1.0)*x12107*x12129))+((cj0*r11*x12113))+(((-1.0)*x12115*x12117))+(((-1.0)*r01*x12113*x12121)));
evalcond[7]=(((x12109*x12132))+((x12109*x12130))+(((-0.0001)*sj1))+(((-1.0)*r21*x12123))+((r20*x12116))+((x12124*x12132))+((x12124*x12130))+(((-0.0097)*cj1))+pz+(((0.09746)*x12124))+(((0.09746)*x12109)));
evalcond[8]=(((x12116*x12117))+(((-0.0097)*sj1))+(((-1.0)*x12116*x12125))+(((-1.0)*sj0*sj6*x12111))+(((-1.0)*x12119*x12132))+(((-1.0)*x12119*x12130))+((x12126*x12132))+((x12126*x12130))+(((0.0001)*cj1))+(((0.026255)*r11*x12110))+((px*sj0))+(((0.09746)*x12126))+(((-0.09746)*x12119))+(((-1.0)*py*x12128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12133=((1.0)*cj6);
CheckValue<IkReal> x12134=IKPowWithIntegerCheck((((sj1*sj3))+((cj1*cj3))),-1);
if(!x12134.valid){
continue;
}
if( IKabs(((x12134.value)*((((r21*sj6))+(((-1.0)*r20*x12133)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x12133))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x12133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12134.value)*((((r21*sj6))+(((-1.0)*r20*x12133))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*r10*sj0*x12133))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x12133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12134.value)*((((r21*sj6))+(((-1.0)*r20*x12133))))), (((r11*sj0*sj6))+(((-1.0)*r10*sj0*x12133))+((cj0*r01*sj6))+(((-1.0)*cj0*r00*x12133))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12135=IKsin(j4);
IkReal x12136=IKcos(j4);
IkReal x12137=((1.0)*sj1);
IkReal x12138=(r11*sj0);
IkReal x12139=(sj1*sj3);
IkReal x12140=(cj0*sj6);
IkReal x12141=((0.026255)*r01);
IkReal x12142=(cj5*r12);
IkReal x12143=(cj6*sj5);
IkReal x12144=(r10*sj0);
IkReal x12145=(sj5*sj6);
IkReal x12146=((0.026255)*cj6);
IkReal x12147=(r00*sj0);
IkReal x12148=((1.0)*cj5);
IkReal x12149=(cj1*sj3);
IkReal x12150=((1.0)*cj6);
IkReal x12151=((1.0)*sj0);
IkReal x12152=(cj0*r00);
IkReal x12153=((0.026255)*sj6);
IkReal x12154=(cj1*cj3);
IkReal x12155=(cj0*r10);
IkReal x12156=(cj3*sj1);
IkReal x12157=((1.0)*r21);
IkReal x12158=((1.0)*cj0);
IkReal x12159=(cj3*x12136);
IkReal x12160=((0.02626)*x12135);
IkReal x12161=((1.0)*x12135);
IkReal x12162=((0.0718)*x12136);
evalcond[0]=(((x12135*x12154))+(((-1.0)*sj6*x12157))+((x12135*x12139))+((cj6*r20)));
evalcond[1]=((((-1.0)*x12144*x12150))+(((-1.0)*x12150*x12152))+((r01*x12140))+(((-1.0)*x12136))+((sj6*x12138)));
evalcond[2]=((((-1.0)*r22*x12148))+(((-1.0)*x12143*x12157))+(((-1.0)*r20*x12145))+(((-1.0)*x12136*x12154))+(((-1.0)*sj3*x12136*x12137)));
evalcond[3]=((((-1.0)*r01*sj6*x12151))+((x12135*x12156))+((r11*x12140))+(((-1.0)*x12150*x12155))+((cj6*x12147))+(((-1.0)*x12149*x12161)));
evalcond[4]=(((sj0*x12142))+((cj0*cj5*r02))+(((-1.0)*x12161))+((cj0*r01*x12143))+((x12138*x12143))+((r00*sj5*x12140))+((x12144*x12145)));
evalcond[5]=((-0.0019)+((x12140*x12141))+(((-1.0)*x12144*x12146))+((x12138*x12153))+(((-1.0)*py*x12151))+(((0.0718)*x12135))+(((-1.0)*x12146*x12152))+(((-1.0)*px*x12158))+(((-0.02626)*x12136)));
evalcond[6]=((((-1.0)*x12137*x12159))+(((-1.0)*r01*x12143*x12151))+((r10*sj5*x12140))+(((-1.0)*r02*sj0*x12148))+((cj0*x12142))+((cj0*r11*x12143))+(((-1.0)*x12145*x12147))+((x12136*x12149)));
evalcond[7]=((((-0.0001)*sj1))+(((0.09746)*x12154))+((r20*x12146))+(((-0.0097)*cj1))+pz+((x12154*x12160))+((x12154*x12162))+(((-1.0)*r21*x12153))+(((0.09746)*x12139))+((x12139*x12162))+((x12139*x12160)));
evalcond[8]=((((-0.09746)*x12149))+((x12156*x12160))+((x12156*x12162))+(((0.09746)*x12156))+(((-1.0)*sj0*sj6*x12141))+(((-0.0097)*sj1))+((x12146*x12147))+(((0.026255)*r11*x12140))+(((-1.0)*py*x12158))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x12149*x12160))+(((-1.0)*x12149*x12162))+(((-1.0)*x12146*x12155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12163=((1.0)*sj5);
CheckValue<IkReal> x12164=IKPowWithIntegerCheck(IKsign((((sj1*sj3))+((cj1*cj3)))),-1);
if(!x12164.valid){
continue;
}
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x12163))+(((-1.0)*r20*sj6*x12163))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12164.value)))+(x12165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12166=IKsin(j4);
IkReal x12167=IKcos(j4);
IkReal x12168=((1.0)*sj1);
IkReal x12169=(r11*sj0);
IkReal x12170=(sj1*sj3);
IkReal x12171=(cj0*sj6);
IkReal x12172=((0.026255)*r01);
IkReal x12173=(cj5*r12);
IkReal x12174=(cj6*sj5);
IkReal x12175=(r10*sj0);
IkReal x12176=(sj5*sj6);
IkReal x12177=((0.026255)*cj6);
IkReal x12178=(r00*sj0);
IkReal x12179=((1.0)*cj5);
IkReal x12180=(cj1*sj3);
IkReal x12181=((1.0)*cj6);
IkReal x12182=((1.0)*sj0);
IkReal x12183=(cj0*r00);
IkReal x12184=((0.026255)*sj6);
IkReal x12185=(cj1*cj3);
IkReal x12186=(cj0*r10);
IkReal x12187=(cj3*sj1);
IkReal x12188=((1.0)*r21);
IkReal x12189=((1.0)*cj0);
IkReal x12190=(cj3*x12167);
IkReal x12191=((0.02626)*x12166);
IkReal x12192=((1.0)*x12166);
IkReal x12193=((0.0718)*x12167);
evalcond[0]=((((-1.0)*sj6*x12188))+((x12166*x12185))+((cj6*r20))+((x12166*x12170)));
evalcond[1]=((((-1.0)*x12167))+(((-1.0)*x12175*x12181))+((r01*x12171))+(((-1.0)*x12181*x12183))+((sj6*x12169)));
evalcond[2]=((((-1.0)*r22*x12179))+(((-1.0)*x12174*x12188))+(((-1.0)*x12167*x12185))+(((-1.0)*sj3*x12167*x12168))+(((-1.0)*r20*x12176)));
evalcond[3]=((((-1.0)*x12180*x12192))+((cj6*x12178))+((x12166*x12187))+(((-1.0)*x12181*x12186))+(((-1.0)*r01*sj6*x12182))+((r11*x12171)));
evalcond[4]=((((-1.0)*x12192))+((cj0*cj5*r02))+((x12169*x12174))+((sj0*x12173))+((cj0*r01*x12174))+((x12175*x12176))+((r00*sj5*x12171)));
evalcond[5]=((-0.0019)+(((-0.02626)*x12167))+(((0.0718)*x12166))+(((-1.0)*py*x12182))+(((-1.0)*x12177*x12183))+(((-1.0)*px*x12189))+(((-1.0)*x12175*x12177))+((x12169*x12184))+((x12171*x12172)));
evalcond[6]=((((-1.0)*r02*sj0*x12179))+((r10*sj5*x12171))+((x12167*x12180))+((cj0*r11*x12174))+((cj0*x12173))+(((-1.0)*r01*x12174*x12182))+(((-1.0)*x12168*x12190))+(((-1.0)*x12176*x12178)));
evalcond[7]=(((x12185*x12191))+((x12185*x12193))+(((-1.0)*r21*x12184))+(((0.09746)*x12170))+((r20*x12177))+(((-0.0001)*sj1))+((x12170*x12193))+((x12170*x12191))+(((-0.0097)*cj1))+(((0.09746)*x12185))+pz);
evalcond[8]=((((-1.0)*x12180*x12191))+(((-1.0)*x12180*x12193))+((x12187*x12193))+((x12187*x12191))+(((-1.0)*sj0*sj6*x12172))+(((-0.09746)*x12180))+(((-0.0097)*sj1))+(((-1.0)*py*x12189))+(((-1.0)*x12177*x12186))+(((0.09746)*x12187))+(((0.026255)*r11*x12171))+(((0.0001)*cj1))+((px*sj0))+((x12177*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12194=(cj0*sj5);
IkReal x12195=(cj5*cj6);
IkReal x12196=((1.0)*sj5);
IkReal x12197=((1.0)*sj0);
IkReal x12198=((1.0)*cj0);
IkReal x12199=(cj5*sj6);
IkReal x12200=(r10*x12199);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj1))+((r21*x12195))+((r20*x12199))+(((-1.0)*r22*x12196)));
evalcond[2]=((((-1.0)*x12197*x12200))+(((-1.0)*r01*x12195*x12198))+(((-1.0)*r00*x12198*x12199))+((r12*sj0*sj5))+((r02*x12194))+(((-1.0)*r11*x12195*x12197)));
evalcond[3]=(((r12*x12194))+cj1+(((-1.0)*r02*sj0*x12196))+((r00*sj0*x12199))+(((-1.0)*r11*x12195*x12198))+((r01*sj0*x12195))+(((-1.0)*x12198*x12200)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12201=(cj2*sj6);
IkReal x12202=((1.0)*r21);
IkReal x12203=(r20*sj5);
IkReal x12204=(sj2*sj6);
IkReal x12205=(cj2*cj6);
IkReal x12206=(cj5*r22);
IkReal x12207=(cj6*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*x12202*x12204))+((x12201*x12203))+((cj2*x12206))+((r20*x12207))+((r21*sj5*x12205)))))+(IKabs(((((-1.0)*sj2*x12206))+(((-1.0)*x12201*x12202))+(((-1.0)*x12203*x12204))+(((-1.0)*sj5*x12202*x12207))+((r20*x12205))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12208=(cj1*sj1);
j4eval[0]=x12208;
j4eval[1]=IKsign(x12208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12209=(cj5*cj6);
IkReal x12210=(cj0*sj6);
IkReal x12211=(r01*sj0);
IkReal x12212=((1.0)*sj0);
IkReal x12213=((1.0)*cj5);
IkReal x12214=(cj0*r12);
IkReal x12215=(r02*sj5);
IkReal x12216=((1.0)*sj5);
IkReal x12217=(cj5*sj6);
IkReal x12218=((1.0)*cj0);
IkReal x12219=(cj6*r10);
IkReal x12220=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x12216))+((r21*x12209))+((r20*x12217)));
evalcond[2]=(x12220+(((-1.0)*x12218*x12219))+((r11*x12210))+(((-1.0)*sj6*x12211)));
evalcond[3]=((((-1.0)*r00*x12210*x12213))+(((-1.0)*r10*x12212*x12217))+((cj0*x12215))+(((-1.0)*r11*x12209*x12212))+((r12*sj0*sj5))+(((-1.0)*r01*x12209*x12218)));
evalcond[4]=((1.0)+((r00*sj0*x12217))+((sj5*x12214))+(((-1.0)*r10*x12210*x12213))+(((-1.0)*r11*x12209*x12218))+(((-1.0)*x12212*x12215))+((x12209*x12211)));
evalcond[5]=(((cj5*x12214))+((r10*sj5*x12210))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x12211*x12216))+(((-1.0)*cj5*r02*x12212))+(((-1.0)*r00*sj5*sj6*x12212)));
evalcond[6]=((0.0001)+(((-0.026255)*cj0*x12219))+(((-1.0)*py*x12218))+(((0.026255)*x12220))+(((0.026255)*r11*x12210))+((px*sj0))+(((-0.026255)*sj6*x12211)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12221=((1.0)*r21);
IkReal x12222=(cj2*sj6);
IkReal x12223=(cj5*r22);
IkReal x12224=(cj6*sj5);
IkReal x12225=(r20*sj2);
if( IKabs(((((-1.0)*sj2*x12221*x12224))+((cj2*cj6*r20))+(((-1.0)*sj2*x12223))+(((-1.0)*sj5*sj6*x12225))+(((-1.0)*x12221*x12222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x12222))+((cj2*r21*x12224))+(((-1.0)*sj2*sj6*x12221))+((cj6*x12225))+((cj2*x12223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x12221*x12224))+((cj2*cj6*r20))+(((-1.0)*sj2*x12223))+(((-1.0)*sj5*sj6*x12225))+(((-1.0)*x12221*x12222))))+IKsqr((((r20*sj5*x12222))+((cj2*r21*x12224))+(((-1.0)*sj2*sj6*x12221))+((cj6*x12225))+((cj2*x12223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x12221*x12224))+((cj2*cj6*r20))+(((-1.0)*sj2*x12223))+(((-1.0)*sj5*sj6*x12225))+(((-1.0)*x12221*x12222))), (((r20*sj5*x12222))+((cj2*r21*x12224))+(((-1.0)*sj2*sj6*x12221))+((cj6*x12225))+((cj2*x12223))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12226=IKcos(j4);
IkReal x12227=IKsin(j4);
IkReal x12228=(r11*sj0);
IkReal x12229=((0.026255)*sj6);
IkReal x12230=(cj0*r01);
IkReal x12231=(cj6*sj5);
IkReal x12232=(r10*sj0);
IkReal x12233=(sj5*sj6);
IkReal x12234=(cj6*r20);
IkReal x12235=((1.0)*cj6);
IkReal x12236=(cj0*r00);
IkReal x12237=((0.026255)*cj6);
IkReal x12238=((1.0)*r21);
IkReal x12239=(cj2*x12226);
IkReal x12240=((0.02626)*x12227);
IkReal x12241=(cj2*x12227);
IkReal x12242=((0.0718)*x12226);
IkReal x12243=(sj2*x12226);
IkReal x12244=(sj2*x12227);
IkReal x12245=((1.0)*x12244);
evalcond[0]=(x12234+(((-1.0)*x12241))+(((-1.0)*x12243))+(((-1.0)*sj6*x12238)));
evalcond[1]=(x12239+(((-1.0)*x12231*x12238))+(((-1.0)*cj5*r22))+(((-1.0)*x12245))+(((-1.0)*r20*x12233)));
evalcond[2]=(((sj6*x12228))+x12239+((sj6*x12230))+(((-1.0)*x12232*x12235))+(((-1.0)*x12245))+(((-1.0)*x12235*x12236)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x12230*x12231))+x12243+x12241+((x12233*x12236))+((x12228*x12231))+((x12232*x12233)));
evalcond[4]=((-0.1255)+(((0.0718)*x12244))+(((0.026255)*x12234))+(((-0.21326)*cj2))+(((-0.02626)*x12243))+(((-0.0009)*sj2))+pz+(((-0.0718)*x12239))+(((-1.0)*r21*x12229))+(((-1.0)*cj2*x12240)));
evalcond[5]=((-0.001)+(((0.02626)*x12239))+(((-0.0718)*x12241))+(((0.0009)*cj2))+(((-1.0)*x12232*x12237))+(((-0.21326)*sj2))+(((-1.0)*sj2*x12242))+(((-1.0)*sj2*x12240))+((x12229*x12230))+(((-1.0)*py*sj0))+(((-1.0)*x12236*x12237))+(((-1.0)*cj0*px))+((x12228*x12229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12246=(cj5*cj6);
IkReal x12247=((1.0)*sj0);
IkReal x12248=((1.0)*r22);
IkReal x12249=(cj0*sj5);
IkReal x12250=(cj5*sj6);
IkReal x12251=((1.0)*cj0);
IkReal x12252=(cj6*r20);
IkReal x12253=((1.0)*sj5);
IkReal x12254=(r21*sj6);
IkReal x12255=(x12250*x12251);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x12250))+(((-1.0)*sj5*x12248))+((r21*x12246)));
evalcond[2]=(x12252+(((-1.0)*x12254)));
evalcond[3]=((((-1.0)*r20*sj6*x12253))+(((-1.0)*cj5*x12248))+(((-1.0)*cj6*r21*x12253)));
evalcond[4]=((((-1.0)*r10*x12247*x12250))+(((-1.0)*r01*x12246*x12251))+(((-1.0)*r11*x12246*x12247))+((r12*sj0*sj5))+((r02*x12249))+(((-1.0)*r00*x12255)));
evalcond[5]=(((r12*x12249))+(((-1.0)*r11*x12246*x12251))+((r00*sj0*x12250))+(((-1.0)*r10*x12255))+((r01*sj0*x12246))+(((-1.0)*r02*sj5*x12247)));
evalcond[6]=((-0.0001)+(((0.026255)*x12252))+pz+(((-0.026255)*x12254)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12256=((1.0)*r10);
IkReal x12257=((1.0)*cj2);
IkReal x12258=(r11*sj6);
IkReal x12259=(sj0*sj2);
IkReal x12260=(cj0*cj2);
IkReal x12261=(r01*sj6);
IkReal x12262=(cj0*x12261);
IkReal x12263=(cj6*x12259);
IkReal x12264=(cj0*cj6*sj2);
IkReal x12265=(cj2*cj6*sj0);
if( IKabs(((((-1.0)*x12256*x12263))+(((-1.0)*sj0*x12257*x12261))+((r00*x12265))+(((-1.0)*r00*x12264))+(((-1.0)*cj6*x12256*x12260))+((x12258*x12259))+((x12258*x12260))+((sj2*x12262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12259*x12261))+(((-1.0)*sj0*x12257*x12258))+(((-1.0)*x12256*x12264))+((r10*x12265))+((r00*x12263))+((cj6*r00*x12260))+((cj0*sj2*x12258))+(((-1.0)*x12257*x12262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12256*x12263))+(((-1.0)*sj0*x12257*x12261))+((r00*x12265))+(((-1.0)*r00*x12264))+(((-1.0)*cj6*x12256*x12260))+((x12258*x12259))+((x12258*x12260))+((sj2*x12262))))+IKsqr(((((-1.0)*x12259*x12261))+(((-1.0)*sj0*x12257*x12258))+(((-1.0)*x12256*x12264))+((r10*x12265))+((r00*x12263))+((cj6*r00*x12260))+((cj0*sj2*x12258))+(((-1.0)*x12257*x12262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x12256*x12263))+(((-1.0)*sj0*x12257*x12261))+((r00*x12265))+(((-1.0)*r00*x12264))+(((-1.0)*cj6*x12256*x12260))+((x12258*x12259))+((x12258*x12260))+((sj2*x12262))), ((((-1.0)*x12259*x12261))+(((-1.0)*sj0*x12257*x12258))+(((-1.0)*x12256*x12264))+((r10*x12265))+((r00*x12263))+((cj6*r00*x12260))+((cj0*sj2*x12258))+(((-1.0)*x12257*x12262))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12266=IKsin(j4);
IkReal x12267=IKcos(j4);
IkReal x12268=(r11*sj6);
IkReal x12269=((0.026255)*cj0);
IkReal x12270=(r01*sj6);
IkReal x12271=(sj0*sj5);
IkReal x12272=(cj6*r11);
IkReal x12273=(r10*sj6);
IkReal x12274=((0.026255)*sj0);
IkReal x12275=(cj0*cj5);
IkReal x12276=(cj6*r00);
IkReal x12277=((1.0)*sj0);
IkReal x12278=(cj0*sj5);
IkReal x12279=(r00*sj6);
IkReal x12280=((1.0)*cj0);
IkReal x12281=(cj6*r10);
IkReal x12282=(cj6*r01);
IkReal x12283=(cj2*x12267);
IkReal x12284=((1.0)*x12281);
IkReal x12285=((0.02626)*x12266);
IkReal x12286=(cj2*x12266);
IkReal x12287=((0.0718)*x12267);
IkReal x12288=(sj2*x12267);
IkReal x12289=(sj2*x12266);
IkReal x12290=((1.0)*x12289);
evalcond[0]=(((sj0*x12268))+(((-1.0)*x12277*x12281))+((cj0*x12270))+(((-1.0)*x12276*x12280))+(((-1.0)*x12290))+x12283);
evalcond[1]=((((-1.0)*x12280*x12281))+(((-1.0)*x12286))+(((-1.0)*x12288))+((sj0*x12276))+((cj0*x12268))+(((-1.0)*x12270*x12277)));
evalcond[2]=(((cj5*r12*sj0))+x12286+x12288+((x12278*x12282))+((r02*x12275))+((x12278*x12279))+((x12271*x12273))+((x12271*x12272)));
evalcond[3]=((((-1.0)*x12290))+(((-1.0)*x12271*x12279))+x12283+((x12272*x12278))+((x12273*x12278))+((r12*x12275))+(((-1.0)*cj5*r02*x12277))+(((-1.0)*x12271*x12282)));
evalcond[4]=((-0.1255)+(((-0.02626)*x12288))+(((-1.0)*x12269*x12281))+(((-1.0)*py*x12280))+(((-1.0)*cj2*x12285))+(((-0.21326)*cj2))+(((-0.0009)*sj2))+(((0.0718)*x12289))+((x12268*x12269))+(((-1.0)*x12270*x12274))+((px*sj0))+(((-0.0718)*x12283))+((x12274*x12276)));
evalcond[5]=((-0.001)+(((-1.0)*x12269*x12276))+((x12268*x12274))+(((0.02626)*x12283))+((x12269*x12270))+(((-1.0)*py*x12277))+(((-1.0)*sj2*x12287))+(((-1.0)*sj2*x12285))+(((0.0009)*cj2))+(((-1.0)*x12274*x12281))+(((-0.21326)*sj2))+(((-1.0)*px*x12280))+(((-0.0718)*x12286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12291=(cj5*cj6);
IkReal x12292=(cj0*sj6);
IkReal x12293=(r01*sj0);
IkReal x12294=((1.0)*sj0);
IkReal x12295=((1.0)*cj5);
IkReal x12296=(cj0*r12);
IkReal x12297=(r02*sj5);
IkReal x12298=((1.0)*sj5);
IkReal x12299=(cj5*sj6);
IkReal x12300=((1.0)*cj0);
IkReal x12301=(cj6*r10);
IkReal x12302=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=(((r21*x12291))+((r20*x12299))+(((-1.0)*r22*x12298)));
evalcond[2]=(x12302+((r11*x12292))+(((-1.0)*sj6*x12293))+(((-1.0)*x12300*x12301)));
evalcond[3]=((((-1.0)*r01*x12291*x12300))+(((-1.0)*r11*x12291*x12294))+((r12*sj0*sj5))+(((-1.0)*r00*x12292*x12295))+((cj0*x12297))+(((-1.0)*r10*x12294*x12299)));
evalcond[4]=((-1.0)+(((-1.0)*x12294*x12297))+(((-1.0)*r11*x12291*x12300))+((x12291*x12293))+((r00*sj0*x12299))+((sj5*x12296))+(((-1.0)*r10*x12292*x12295)));
evalcond[5]=((((-1.0)*cj5*r02*x12294))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x12293*x12298))+((cj5*x12296))+(((-1.0)*r00*sj5*sj6*x12294))+((r10*sj5*x12292)));
evalcond[6]=((-0.0001)+(((0.026255)*r11*x12292))+(((-1.0)*py*x12300))+(((-0.026255)*cj0*x12301))+(((-0.026255)*sj6*x12293))+(((0.026255)*x12302))+((px*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12303=(cj2*r21);
IkReal x12304=(cj6*sj5);
IkReal x12305=(cj5*r22);
IkReal x12306=(r21*sj2);
IkReal x12307=((1.0)*cj2);
IkReal x12308=(cj6*r20);
IkReal x12309=(r20*sj5*sj6);
if( IKabs(((((-1.0)*x12307*x12308))+((x12304*x12306))+((sj6*x12303))+((sj2*x12305))+((sj2*x12309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12305*x12307))+(((-1.0)*x12307*x12309))+(((-1.0)*x12303*x12304))+((sj6*x12306))+(((-1.0)*sj2*x12308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12307*x12308))+((x12304*x12306))+((sj6*x12303))+((sj2*x12305))+((sj2*x12309))))+IKsqr(((((-1.0)*x12305*x12307))+(((-1.0)*x12307*x12309))+(((-1.0)*x12303*x12304))+((sj6*x12306))+(((-1.0)*sj2*x12308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x12307*x12308))+((x12304*x12306))+((sj6*x12303))+((sj2*x12305))+((sj2*x12309))), ((((-1.0)*x12305*x12307))+(((-1.0)*x12307*x12309))+(((-1.0)*x12303*x12304))+((sj6*x12306))+(((-1.0)*sj2*x12308))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=(r11*sj0);
IkReal x12313=((0.026255)*sj6);
IkReal x12314=(cj0*r01);
IkReal x12315=(cj6*sj5);
IkReal x12316=(r10*sj0);
IkReal x12317=(sj5*sj6);
IkReal x12318=((1.0)*cj6);
IkReal x12319=(cj0*r00);
IkReal x12320=((0.026255)*cj6);
IkReal x12321=((1.0)*r21);
IkReal x12322=(sj2*x12311);
IkReal x12323=(cj2*x12310);
IkReal x12324=((0.02626)*x12310);
IkReal x12325=(cj2*x12311);
IkReal x12326=(sj2*x12310);
IkReal x12327=(x12323+x12322);
evalcond[0]=(x12327+(((-1.0)*sj6*x12321))+((cj6*r20)));
evalcond[1]=(x12326+(((-1.0)*r20*x12317))+(((-1.0)*x12315*x12321))+(((-1.0)*cj5*r22))+(((-1.0)*x12325)));
evalcond[2]=((((-1.0)*x12316*x12318))+x12325+(((-1.0)*x12318*x12319))+((sj6*x12314))+((sj6*x12312))+(((-1.0)*x12326)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+x12327+((x12314*x12315))+((x12312*x12315))+((x12316*x12317))+((x12317*x12319)));
evalcond[4]=((0.1255)+(((-1.0)*r21*x12313))+((r20*x12320))+(((-0.0718)*x12326))+pz+(((0.02626)*x12323))+(((0.02626)*x12322))+(((0.21326)*cj2))+(((0.0718)*x12325))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-1.0)*x12319*x12320))+(((-0.0718)*x12323))+(((-0.0718)*x12322))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*sj2*x12324))+(((0.02626)*x12325))+((x12312*x12313))+(((-1.0)*py*sj0))+(((-1.0)*x12316*x12320))+((x12313*x12314))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12328=(cj5*cj6);
IkReal x12329=((1.0)*sj0);
IkReal x12330=((1.0)*r22);
IkReal x12331=(cj0*sj5);
IkReal x12332=(cj5*sj6);
IkReal x12333=((1.0)*cj0);
IkReal x12334=(cj6*r20);
IkReal x12335=((1.0)*sj5);
IkReal x12336=(r21*sj6);
IkReal x12337=(x12332*x12333);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x12332))+(((-1.0)*sj5*x12330))+((r21*x12328)));
evalcond[2]=(x12334+(((-1.0)*x12336)));
evalcond[3]=((((-1.0)*cj5*x12330))+(((-1.0)*r20*sj6*x12335))+(((-1.0)*cj6*r21*x12335)));
evalcond[4]=((((-1.0)*r01*x12328*x12333))+(((-1.0)*r11*x12328*x12329))+((r12*sj0*sj5))+(((-1.0)*r00*x12337))+((r02*x12331))+(((-1.0)*r10*x12329*x12332)));
evalcond[5]=((((-1.0)*r02*sj5*x12329))+((r01*sj0*x12328))+(((-1.0)*r11*x12328*x12333))+(((-1.0)*r10*x12337))+((r12*x12331))+((r00*sj0*x12332)));
evalcond[6]=((0.0001)+(((0.026255)*x12334))+pz+(((-0.026255)*x12336)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12338=(cj0*sj6);
IkReal x12339=(r01*sj2);
IkReal x12340=(sj0*sj2);
IkReal x12341=((1.0)*cj6);
IkReal x12342=(sj0*sj6);
IkReal x12343=(cj0*sj2);
IkReal x12344=(cj6*r10);
IkReal x12345=(cj2*sj0);
IkReal x12346=(cj2*r01);
IkReal x12347=(cj0*cj2);
IkReal x12348=((1.0)*cj2*r11);
if( IKabs(((((-1.0)*x12338*x12348))+((x12344*x12347))+((r11*sj6*x12340))+(((-1.0)*r00*x12341*x12345))+(((-1.0)*r00*x12341*x12343))+((x12338*x12339))+((x12342*x12346))+(((-1.0)*r10*x12340*x12341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj2*x12338))+((cj6*r00*x12347))+((x12339*x12342))+(((-1.0)*x12342*x12348))+((x12344*x12345))+(((-1.0)*r00*x12340*x12341))+((x12343*x12344))+(((-1.0)*x12338*x12346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12338*x12348))+((x12344*x12347))+((r11*sj6*x12340))+(((-1.0)*r00*x12341*x12345))+(((-1.0)*r00*x12341*x12343))+((x12338*x12339))+((x12342*x12346))+(((-1.0)*r10*x12340*x12341))))+IKsqr(((((-1.0)*r11*sj2*x12338))+((cj6*r00*x12347))+((x12339*x12342))+(((-1.0)*x12342*x12348))+((x12344*x12345))+(((-1.0)*r00*x12340*x12341))+((x12343*x12344))+(((-1.0)*x12338*x12346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x12338*x12348))+((x12344*x12347))+((r11*sj6*x12340))+(((-1.0)*r00*x12341*x12345))+(((-1.0)*r00*x12341*x12343))+((x12338*x12339))+((x12342*x12346))+(((-1.0)*r10*x12340*x12341))), ((((-1.0)*r11*sj2*x12338))+((cj6*r00*x12347))+((x12339*x12342))+(((-1.0)*x12342*x12348))+((x12344*x12345))+(((-1.0)*r00*x12340*x12341))+((x12343*x12344))+(((-1.0)*x12338*x12346))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12349=IKcos(j4);
IkReal x12350=IKsin(j4);
IkReal x12351=(r11*sj6);
IkReal x12352=((0.026255)*cj0);
IkReal x12353=(r01*sj6);
IkReal x12354=(sj0*sj5);
IkReal x12355=(cj6*r11);
IkReal x12356=(r10*sj6);
IkReal x12357=((0.026255)*sj0);
IkReal x12358=(cj5*r12);
IkReal x12359=(cj6*r00);
IkReal x12360=((1.0)*sj0);
IkReal x12361=(cj5*r02);
IkReal x12362=(cj6*r10);
IkReal x12363=(cj0*sj5);
IkReal x12364=(r00*sj6);
IkReal x12365=((1.0)*cj0);
IkReal x12366=(cj6*r01);
IkReal x12367=(sj2*x12349);
IkReal x12368=(cj2*x12350);
IkReal x12369=(sj2*x12350);
IkReal x12370=((0.0718)*x12349);
IkReal x12371=(cj2*x12349);
IkReal x12372=(x12367+x12368);
evalcond[0]=((((-1.0)*x12353*x12360))+((cj0*x12351))+x12372+(((-1.0)*x12362*x12365))+((sj0*x12359)));
evalcond[1]=(((cj0*x12353))+(((-1.0)*x12359*x12365))+x12371+(((-1.0)*x12369))+(((-1.0)*x12360*x12362))+((sj0*x12351)));
evalcond[2]=(((x12354*x12355))+((x12354*x12356))+x12372+((cj0*x12361))+((x12363*x12364))+((x12363*x12366))+((sj0*x12358)));
evalcond[3]=(((cj0*x12358))+x12369+(((-1.0)*x12354*x12364))+(((-1.0)*x12354*x12366))+((x12356*x12363))+(((-1.0)*x12360*x12361))+(((-1.0)*x12371))+((x12355*x12363)));
evalcond[4]=((0.1255)+(((-1.0)*x12353*x12357))+((x12351*x12352))+(((0.02626)*x12367))+(((0.02626)*x12368))+(((-1.0)*py*x12365))+((cj2*x12370))+((x12357*x12359))+(((-1.0)*x12352*x12362))+((px*sj0))+(((0.21326)*cj2))+(((-0.0718)*x12369))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-1.0)*x12357*x12362))+((x12352*x12353))+(((0.02626)*x12371))+((x12351*x12357))+(((-1.0)*py*x12360))+(((-1.0)*x12352*x12359))+(((0.0009)*cj2))+(((-1.0)*px*x12365))+(((-0.21326)*sj2))+(((-0.02626)*x12369))+(((-0.0718)*x12368))+(((-0.0718)*x12367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12373=(cj1*cj2);
IkReal x12374=((1.0)*sj6);
IkReal x12375=(r01*sj0);
IkReal x12376=(cj0*r10);
IkReal x12377=(cj1*sj2);
IkReal x12378=(cj6*r00*sj0);
IkReal x12379=(cj0*r11*sj6);
IkReal x12380=((1.0)*cj6*sj2);
IkReal x12381=(r21*sj1*sj5);
IkReal x12382=(cj5*r22*sj1);
IkReal x12383=(r20*sj1*sj5);
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x12373*x12376))+(((-1.0)*x12380*x12381))+(((-1.0)*x12373*x12374*x12375))+(((-1.0)*sj2*x12374*x12383))+((x12373*x12378))+((x12373*x12379))+(((-1.0)*sj2*x12382)))),(((cj2*x12382))+(((-1.0)*x12374*x12375*x12377))+((cj2*cj6*x12381))+(((-1.0)*cj6*x12376*x12377))+((cj2*sj6*x12383))+((x12377*x12379))+((x12377*x12378))),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12386=IKcos(j4);
IkReal x12387=IKsin(j4);
IkReal x12388=((0.0718)*sj1);
IkReal x12389=(r11*sj0);
IkReal x12390=((0.02626)*sj2);
IkReal x12391=((0.026255)*sj6);
IkReal x12392=(cj0*r01);
IkReal x12393=(cj5*r12);
IkReal x12394=(cj6*sj5);
IkReal x12395=(cj1*cj2);
IkReal x12396=(cj6*r20);
IkReal x12397=(cj0*r11);
IkReal x12398=((1.0)*sj1);
IkReal x12399=((1.0)*cj5);
IkReal x12400=((0.0009)*sj2);
IkReal x12401=((1.0)*sj6);
IkReal x12402=(r01*sj0);
IkReal x12403=(cj0*r00);
IkReal x12404=(sj5*sj6);
IkReal x12405=((0.0718)*cj1);
IkReal x12406=((1.0)*py);
IkReal x12407=((0.026255)*cj6);
IkReal x12408=(cj0*r10);
IkReal x12409=(r10*sj0);
IkReal x12410=((1.0)*cj1);
IkReal x12411=(cj2*x12386);
IkReal x12412=((1.0)*cj6*r10);
IkReal x12413=(sj2*x12386);
IkReal x12414=(cj2*x12387);
IkReal x12415=(cj6*r00*sj0);
IkReal x12416=(sj2*x12387);
evalcond[0]=((((-1.0)*x12410*x12413))+x12396+(((-1.0)*r21*x12401))+(((-1.0)*x12387*x12395)));
evalcond[1]=((((-1.0)*r20*sj5*x12401))+(((-1.0)*x12410*x12416))+(((-1.0)*r22*x12399))+((x12386*x12395))+(((-1.0)*r21*x12394)));
evalcond[2]=((((-1.0)*cj6*x12403))+(((-1.0)*cj6*x12409))+((sj6*x12389))+(((-1.0)*x12416))+x12411+((sj6*x12392)));
evalcond[3]=((((-1.0)*cj6*x12408))+(((-1.0)*x12398*x12414))+(((-1.0)*x12398*x12413))+x12415+(((-1.0)*x12401*x12402))+((sj6*x12397)));
evalcond[4]=(((x12389*x12394))+((cj0*cj5*r02))+((x12404*x12409))+((x12403*x12404))+((x12392*x12394))+x12413+x12414+((sj0*x12393)));
evalcond[5]=((((-1.0)*r00*sj0*sj5*x12401))+(((-1.0)*r02*sj0*x12399))+((x12404*x12408))+((x12394*x12397))+((cj0*x12393))+(((-1.0)*x12398*x12416))+(((-1.0)*x12394*x12402))+((sj1*x12411)));
evalcond[6]=((((-1.0)*r21*x12391))+(((-1.0)*cj1*x12386*x12390))+(((-0.1255)*cj1))+(((-0.21326)*x12395))+(((-0.0718)*x12386*x12395))+(((-0.0001)*sj1))+((x12405*x12416))+pz+(((-1.0)*cj1*x12400))+(((-0.02626)*x12387*x12395))+(((0.026255)*x12396)));
evalcond[7]=((-0.001)+(((-0.0718)*x12413))+(((-0.0718)*x12414))+((x12389*x12391))+(((-1.0)*sj0*x12406))+(((-1.0)*x12407*x12409))+(((0.02626)*x12411))+((x12391*x12392))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*x12387*x12390))+(((-1.0)*cj0*px))+(((-1.0)*x12403*x12407)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*x12391*x12402))+(((-1.0)*sj1*x12400))+(((-1.0)*x12407*x12408))+((r00*sj0*x12407))+((x12391*x12397))+(((-1.0)*x12388*x12411))+((x12388*x12416))+(((-0.02626)*sj1*x12414))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*cj0*x12406))+(((-1.0)*sj1*x12386*x12390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12417=(cj0*r00);
IkReal x12418=(r10*sj0);
IkReal x12419=(cj1*cj2);
IkReal x12420=(cj1*sj2);
IkReal x12421=(cj6*r20);
IkReal x12422=(r11*sj0*sj6);
IkReal x12423=((1.0)*r21*sj6);
IkReal x12424=(cj0*r01*sj6);
IkReal x12425=((1.0)*cj6*x12420);
CheckValue<IkReal> x12426 = IKatan2WithCheck(IkReal((((x12420*x12422))+((x12420*x12424))+(((-1.0)*x12418*x12425))+((cj2*x12421))+(((-1.0)*cj2*x12423))+(((-1.0)*x12417*x12425)))),((((-1.0)*x12419*x12422))+(((-1.0)*x12419*x12424))+((cj6*x12417*x12419))+((cj6*x12418*x12419))+(((-1.0)*sj2*x12423))+((sj2*x12421))),IKFAST_ATAN2_MAGTHRESH);
if(!x12426.valid){
continue;
}
CheckValue<IkReal> x12427=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12426.value)+(((1.5707963267949)*(x12427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12428=IKcos(j4);
IkReal x12429=IKsin(j4);
IkReal x12430=((0.0718)*sj1);
IkReal x12431=(r11*sj0);
IkReal x12432=((0.02626)*sj2);
IkReal x12433=((0.026255)*sj6);
IkReal x12434=(cj0*r01);
IkReal x12435=(cj5*r12);
IkReal x12436=(cj6*sj5);
IkReal x12437=(cj1*cj2);
IkReal x12438=(cj6*r20);
IkReal x12439=(cj0*r11);
IkReal x12440=((1.0)*sj1);
IkReal x12441=((1.0)*cj5);
IkReal x12442=((0.0009)*sj2);
IkReal x12443=((1.0)*sj6);
IkReal x12444=(r01*sj0);
IkReal x12445=(cj0*r00);
IkReal x12446=(sj5*sj6);
IkReal x12447=((0.0718)*cj1);
IkReal x12448=((1.0)*py);
IkReal x12449=((0.026255)*cj6);
IkReal x12450=(cj0*r10);
IkReal x12451=(r10*sj0);
IkReal x12452=((1.0)*cj1);
IkReal x12453=(cj2*x12428);
IkReal x12454=((1.0)*cj6*r10);
IkReal x12455=(sj2*x12428);
IkReal x12456=(cj2*x12429);
IkReal x12457=(cj6*r00*sj0);
IkReal x12458=(sj2*x12429);
evalcond[0]=((((-1.0)*r21*x12443))+(((-1.0)*x12429*x12437))+(((-1.0)*x12452*x12455))+x12438);
evalcond[1]=((((-1.0)*r20*sj5*x12443))+((x12428*x12437))+(((-1.0)*r22*x12441))+(((-1.0)*r21*x12436))+(((-1.0)*x12452*x12458)));
evalcond[2]=((((-1.0)*cj6*x12445))+((sj6*x12434))+((sj6*x12431))+(((-1.0)*x12458))+x12453+(((-1.0)*cj6*x12451)));
evalcond[3]=(((sj6*x12439))+(((-1.0)*x12440*x12455))+(((-1.0)*x12440*x12456))+(((-1.0)*x12443*x12444))+x12457+(((-1.0)*cj6*x12450)));
evalcond[4]=(((sj0*x12435))+((cj0*cj5*r02))+((x12446*x12451))+((x12431*x12436))+((x12445*x12446))+x12456+x12455+((x12434*x12436)));
evalcond[5]=((((-1.0)*r00*sj0*sj5*x12443))+((x12436*x12439))+((cj0*x12435))+(((-1.0)*x12440*x12458))+(((-1.0)*x12436*x12444))+((x12446*x12450))+((sj1*x12453))+(((-1.0)*r02*sj0*x12441)));
evalcond[6]=((((-1.0)*r21*x12433))+(((-1.0)*cj1*x12428*x12432))+(((-0.1255)*cj1))+(((-0.0718)*x12428*x12437))+(((-0.0001)*sj1))+(((0.026255)*x12438))+(((-0.21326)*x12437))+pz+((x12447*x12458))+(((-1.0)*cj1*x12442))+(((-0.02626)*x12429*x12437)));
evalcond[7]=((-0.001)+(((-0.0718)*x12456))+(((-0.0718)*x12455))+(((-1.0)*x12429*x12432))+(((0.02626)*x12453))+(((0.0009)*cj2))+((x12431*x12433))+(((-0.21326)*sj2))+(((-1.0)*x12445*x12449))+(((-1.0)*x12449*x12451))+((x12433*x12434))+(((-1.0)*sj0*x12448))+(((-1.0)*cj0*px)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*sj1*x12428*x12432))+(((-1.0)*x12433*x12444))+(((-1.0)*cj0*x12448))+(((-1.0)*x12430*x12453))+(((-1.0)*sj1*x12442))+((x12430*x12458))+(((-0.02626)*sj1*x12456))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*x12449*x12450))+((x12433*x12439))+((r00*sj0*x12449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12459=(cj2*r21);
IkReal x12460=((1.0)*sj6);
IkReal x12461=(cj5*r22);
IkReal x12462=(cj6*sj5);
IkReal x12463=(r20*sj5);
IkReal x12464=(cj6*r20);
IkReal x12465=(r21*sj2);
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12466.valid){
continue;
}
CheckValue<IkReal> x12467 = IKatan2WithCheck(IkReal((((cj2*x12464))+(((-1.0)*sj2*x12461))+(((-1.0)*x12459*x12460))+(((-1.0)*sj2*x12460*x12463))+(((-1.0)*x12462*x12465)))),(((sj2*x12464))+((cj2*x12461))+(((-1.0)*x12460*x12465))+((x12459*x12462))+((cj2*sj6*x12463))),IKFAST_ATAN2_MAGTHRESH);
if(!x12467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12466.value)))+(x12467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12468=IKcos(j4);
IkReal x12469=IKsin(j4);
IkReal x12470=((0.0718)*sj1);
IkReal x12471=(r11*sj0);
IkReal x12472=((0.02626)*sj2);
IkReal x12473=((0.026255)*sj6);
IkReal x12474=(cj0*r01);
IkReal x12475=(cj5*r12);
IkReal x12476=(cj6*sj5);
IkReal x12477=(cj1*cj2);
IkReal x12478=(cj6*r20);
IkReal x12479=(cj0*r11);
IkReal x12480=((1.0)*sj1);
IkReal x12481=((1.0)*cj5);
IkReal x12482=((0.0009)*sj2);
IkReal x12483=((1.0)*sj6);
IkReal x12484=(r01*sj0);
IkReal x12485=(cj0*r00);
IkReal x12486=(sj5*sj6);
IkReal x12487=((0.0718)*cj1);
IkReal x12488=((1.0)*py);
IkReal x12489=((0.026255)*cj6);
IkReal x12490=(cj0*r10);
IkReal x12491=(r10*sj0);
IkReal x12492=((1.0)*cj1);
IkReal x12493=(cj2*x12468);
IkReal x12494=((1.0)*cj6*r10);
IkReal x12495=(sj2*x12468);
IkReal x12496=(cj2*x12469);
IkReal x12497=(cj6*r00*sj0);
IkReal x12498=(sj2*x12469);
evalcond[0]=((((-1.0)*x12469*x12477))+x12478+(((-1.0)*r21*x12483))+(((-1.0)*x12492*x12495)));
evalcond[1]=((((-1.0)*r20*sj5*x12483))+(((-1.0)*r22*x12481))+((x12468*x12477))+(((-1.0)*r21*x12476))+(((-1.0)*x12492*x12498)));
evalcond[2]=((((-1.0)*cj6*x12491))+x12493+(((-1.0)*cj6*x12485))+((sj6*x12471))+((sj6*x12474))+(((-1.0)*x12498)));
evalcond[3]=((((-1.0)*cj6*x12490))+(((-1.0)*x12483*x12484))+(((-1.0)*x12480*x12495))+(((-1.0)*x12480*x12496))+x12497+((sj6*x12479)));
evalcond[4]=(((x12474*x12476))+((cj0*cj5*r02))+((x12485*x12486))+((x12486*x12491))+((x12471*x12476))+((sj0*x12475))+x12496+x12495);
evalcond[5]=(((sj1*x12493))+((x12486*x12490))+((x12476*x12479))+((cj0*x12475))+(((-1.0)*r02*sj0*x12481))+(((-1.0)*x12480*x12498))+(((-1.0)*x12476*x12484))+(((-1.0)*r00*sj0*sj5*x12483)));
evalcond[6]=((((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.0718)*x12468*x12477))+(((-1.0)*r21*x12473))+((x12487*x12498))+(((-0.02626)*x12469*x12477))+(((-1.0)*cj1*x12482))+pz+(((0.026255)*x12478))+(((-0.21326)*x12477))+(((-1.0)*cj1*x12468*x12472)));
evalcond[7]=((-0.001)+(((-1.0)*sj0*x12488))+(((0.02626)*x12493))+((x12473*x12474))+(((-1.0)*x12485*x12489))+(((0.0009)*cj2))+(((-0.21326)*sj2))+((x12471*x12473))+(((-0.0718)*x12496))+(((-0.0718)*x12495))+(((-1.0)*x12489*x12491))+(((-1.0)*x12469*x12472))+(((-1.0)*cj0*px)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*cj0*x12488))+((r00*sj0*x12489))+(((-0.02626)*sj1*x12496))+((x12473*x12479))+((x12470*x12498))+(((-1.0)*x12473*x12484))+(((-1.0)*sj1*x12468*x12472))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*x12470*x12493))+(((-1.0)*x12489*x12490))+(((-1.0)*sj1*x12482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12499=(cj0*sj5);
IkReal x12500=(cj5*cj6);
IkReal x12501=((1.0)*sj5);
IkReal x12502=((1.0)*cj0);
IkReal x12503=((1.0)*sj0);
IkReal x12504=(cj5*sj6);
IkReal x12505=(r10*x12504);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+(((-1.0)*r22*x12501))+((r20*x12504))+((r21*x12500)));
evalcond[2]=((((-1.0)*r00*x12502*x12504))+(((-1.0)*r11*x12500*x12503))+((r12*sj0*sj5))+(((-1.0)*r01*x12500*x12502))+(((-1.0)*x12503*x12505))+((r02*x12499)));
evalcond[3]=((((-1.0)*r02*sj0*x12501))+(((-1.0)*r11*x12500*x12502))+((r00*sj0*x12504))+(((-1.0)*x12502*x12505))+((r12*x12499))+(((-1.0)*cj1))+((r01*sj0*x12500)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12506=(cj2*r21);
IkReal x12507=((1.0)*cj6);
IkReal x12508=((1.0)*cj2);
IkReal x12509=(cj5*r22);
IkReal x12510=(r20*sj2);
IkReal x12511=(sj5*sj6);
IkReal x12512=(r21*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs((((cj6*x12510))+(((-1.0)*sj6*x12512))+(((-1.0)*sj5*x12506*x12507))+(((-1.0)*x12508*x12509))+(((-1.0)*r20*x12508*x12511)))))+(IKabs(((((-1.0)*cj2*r20*x12507))+(((-1.0)*sj2*x12509))+(((-1.0)*x12510*x12511))+(((-1.0)*sj5*x12507*x12512))+((sj6*x12506))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12513=(cj1*sj1);
j4eval[0]=x12513;
j4eval[1]=IKsign(x12513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12514=(cj5*cj6);
IkReal x12515=(cj0*sj6);
IkReal x12516=(r01*sj0);
IkReal x12517=((1.0)*sj0);
IkReal x12518=((1.0)*cj5);
IkReal x12519=(cj0*r12);
IkReal x12520=(r02*sj5);
IkReal x12521=((1.0)*sj5);
IkReal x12522=(cj5*sj6);
IkReal x12523=((1.0)*cj0);
IkReal x12524=(cj6*r10);
IkReal x12525=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((r20*x12522))+(((-1.0)*r22*x12521))+((r21*x12514)));
evalcond[2]=((((-1.0)*x12523*x12524))+(((-1.0)*sj6*x12516))+x12525+((r11*x12515)));
evalcond[3]=((((-1.0)*r00*x12515*x12518))+((cj0*x12520))+(((-1.0)*r11*x12514*x12517))+(((-1.0)*r10*x12517*x12522))+((r12*sj0*sj5))+(((-1.0)*r01*x12514*x12523)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x12514*x12523))+((sj5*x12519))+(((-1.0)*r10*x12515*x12518))+(((-1.0)*x12517*x12520))+((r00*sj0*x12522))+((x12514*x12516)));
evalcond[5]=((((-1.0)*cj5*r02*x12517))+((cj5*x12519))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x12517))+((r10*sj5*x12515))+(((-1.0)*cj6*x12516*x12521)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x12515))+(((-1.0)*py*x12523))+(((-0.026255)*sj6*x12516))+(((0.026255)*x12525))+(((-0.026255)*cj0*x12524))+((px*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12526=(cj2*r21);
IkReal x12527=((1.0)*cj6);
IkReal x12528=((1.0)*cj2);
IkReal x12529=(cj5*r22);
IkReal x12530=(r20*sj2);
IkReal x12531=(sj5*sj6);
IkReal x12532=(r21*sj2);
if( IKabs(((((-1.0)*sj2*x12529))+(((-1.0)*x12530*x12531))+((sj6*x12526))+(((-1.0)*sj5*x12527*x12532))+(((-1.0)*cj2*r20*x12527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12528*x12529))+(((-1.0)*r20*x12528*x12531))+((cj6*x12530))+(((-1.0)*sj6*x12532))+(((-1.0)*sj5*x12526*x12527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x12529))+(((-1.0)*x12530*x12531))+((sj6*x12526))+(((-1.0)*sj5*x12527*x12532))+(((-1.0)*cj2*r20*x12527))))+IKsqr(((((-1.0)*x12528*x12529))+(((-1.0)*r20*x12528*x12531))+((cj6*x12530))+(((-1.0)*sj6*x12532))+(((-1.0)*sj5*x12526*x12527))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x12529))+(((-1.0)*x12530*x12531))+((sj6*x12526))+(((-1.0)*sj5*x12527*x12532))+(((-1.0)*cj2*r20*x12527))), ((((-1.0)*x12528*x12529))+(((-1.0)*r20*x12528*x12531))+((cj6*x12530))+(((-1.0)*sj6*x12532))+(((-1.0)*sj5*x12526*x12527))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12533=IKcos(j4);
IkReal x12534=IKsin(j4);
IkReal x12535=(r11*sj0);
IkReal x12536=(cj0*sj6);
IkReal x12537=(cj6*sj5);
IkReal x12538=(r10*sj0);
IkReal x12539=(sj5*sj6);
IkReal x12540=((1.0)*cj6);
IkReal x12541=((0.026255)*sj6);
IkReal x12542=((0.026255)*cj6);
IkReal x12543=(cj0*r00);
IkReal x12544=((1.0)*r21);
IkReal x12545=(cj2*x12534);
IkReal x12546=((0.02626)*x12534);
IkReal x12547=(cj2*x12533);
IkReal x12548=(sj2*x12534);
IkReal x12549=(sj2*x12533);
IkReal x12550=((1.0)*x12549);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x12544))+x12545+(((-1.0)*x12550)));
evalcond[1]=((((-1.0)*x12548))+(((-1.0)*x12547))+(((-1.0)*r20*x12539))+(((-1.0)*x12537*x12544))+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x12538*x12540))+((sj6*x12535))+(((-1.0)*x12540*x12543))+x12547+x12548+((r01*x12536)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x12536))+((x12535*x12537))+((x12538*x12539))+x12545+(((-1.0)*x12550))+((cj0*r01*x12537)));
evalcond[4]=((-0.1255)+((r20*x12542))+(((0.02626)*x12545))+(((0.0718)*x12548))+(((0.0718)*x12547))+(((-1.0)*r21*x12541))+(((-0.0009)*sj2))+pz+(((-0.02626)*x12549))+(((-0.01834)*cj2)));
evalcond[5]=((-0.001)+(((-1.0)*x12538*x12542))+(((-0.01834)*sj2))+(((0.02626)*x12547))+(((0.026255)*r01*x12536))+(((-1.0)*x12542*x12543))+(((-0.0718)*x12545))+(((0.0718)*x12549))+((x12535*x12541))+(((0.0009)*cj2))+(((-1.0)*py*sj0))+((sj2*x12546))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12551=(cj5*cj6);
IkReal x12552=((1.0)*sj0);
IkReal x12553=((1.0)*r22);
IkReal x12554=(cj0*sj5);
IkReal x12555=(cj5*sj6);
IkReal x12556=((1.0)*cj0);
IkReal x12557=(cj6*r20);
IkReal x12558=((1.0)*sj5);
IkReal x12559=(r21*sj6);
IkReal x12560=(x12555*x12556);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x12555))+(((-1.0)*sj5*x12553))+((r21*x12551)));
evalcond[2]=((((-1.0)*x12559))+x12557);
evalcond[3]=((((-1.0)*cj6*r21*x12558))+(((-1.0)*cj5*x12553))+(((-1.0)*r20*sj6*x12558)));
evalcond[4]=((((-1.0)*r01*x12551*x12556))+(((-1.0)*r10*x12552*x12555))+(((-1.0)*r00*x12560))+((r12*sj0*sj5))+((r02*x12554))+(((-1.0)*r11*x12551*x12552)));
evalcond[5]=(((r00*sj0*x12555))+((r12*x12554))+((r01*sj0*x12551))+(((-1.0)*r02*sj5*x12552))+(((-1.0)*r11*x12551*x12556))+(((-1.0)*r10*x12560)));
evalcond[6]=((-0.0001)+pz+(((0.026255)*x12557))+(((-0.026255)*x12559)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12561=(sj0*sj2);
IkReal x12562=(cj0*cj2);
IkReal x12563=(r01*sj6);
IkReal x12564=(cj6*r10);
IkReal x12565=(cj2*sj0);
IkReal x12566=(cj0*sj2);
IkReal x12567=(cj6*r00);
IkReal x12568=((1.0)*r11*sj6);
IkReal x12569=((1.0)*x12566);
if( IKabs((((x12563*x12565))+(((-1.0)*x12561*x12568))+(((-1.0)*x12562*x12568))+(((-1.0)*x12563*x12569))+((x12566*x12567))+((x12561*x12564))+((x12562*x12564))+(((-1.0)*x12565*x12567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12564*x12569))+(((-1.0)*x12565*x12568))+((x12561*x12567))+((r11*sj6*x12566))+((x12562*x12567))+(((-1.0)*x12562*x12563))+((x12564*x12565))+(((-1.0)*x12561*x12563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12563*x12565))+(((-1.0)*x12561*x12568))+(((-1.0)*x12562*x12568))+(((-1.0)*x12563*x12569))+((x12566*x12567))+((x12561*x12564))+((x12562*x12564))+(((-1.0)*x12565*x12567))))+IKsqr(((((-1.0)*x12564*x12569))+(((-1.0)*x12565*x12568))+((x12561*x12567))+((r11*sj6*x12566))+((x12562*x12567))+(((-1.0)*x12562*x12563))+((x12564*x12565))+(((-1.0)*x12561*x12563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x12563*x12565))+(((-1.0)*x12561*x12568))+(((-1.0)*x12562*x12568))+(((-1.0)*x12563*x12569))+((x12566*x12567))+((x12561*x12564))+((x12562*x12564))+(((-1.0)*x12565*x12567))), ((((-1.0)*x12564*x12569))+(((-1.0)*x12565*x12568))+((x12561*x12567))+((r11*sj6*x12566))+((x12562*x12567))+(((-1.0)*x12562*x12563))+((x12564*x12565))+(((-1.0)*x12561*x12563))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12570=IKsin(j4);
IkReal x12571=IKcos(j4);
IkReal x12572=(r11*sj6);
IkReal x12573=((0.026255)*cj0);
IkReal x12574=(r01*sj6);
IkReal x12575=(sj0*sj5);
IkReal x12576=(cj6*r11);
IkReal x12577=(r10*sj6);
IkReal x12578=(cj5*r12);
IkReal x12579=(cj6*sj0);
IkReal x12580=((1.0)*sj0);
IkReal x12581=(cj5*r02);
IkReal x12582=((1.0)*r10);
IkReal x12583=(cj0*sj5);
IkReal x12584=(r00*sj6);
IkReal x12585=((0.026255)*sj0);
IkReal x12586=(cj0*cj6);
IkReal x12587=((1.0)*cj0);
IkReal x12588=(cj6*r01);
IkReal x12589=(cj2*x12570);
IkReal x12590=(sj2*x12570);
IkReal x12591=((0.0718)*x12571);
IkReal x12592=(cj2*x12571);
IkReal x12593=(sj2*x12571);
IkReal x12594=((1.0)*x12593);
evalcond[0]=(((cj0*x12574))+(((-1.0)*x12579*x12582))+x12592+x12590+(((-1.0)*r00*x12586))+((sj0*x12572)));
evalcond[1]=(((cj0*x12572))+(((-1.0)*x12574*x12580))+(((-1.0)*x12582*x12586))+((r00*x12579))+(((-1.0)*x12594))+x12589);
evalcond[2]=(((cj0*x12581))+((x12575*x12577))+((x12575*x12576))+((x12583*x12584))+((x12583*x12588))+(((-1.0)*x12594))+x12589+((sj0*x12578)));
evalcond[3]=(((x12576*x12583))+((cj0*x12578))+(((-1.0)*x12580*x12581))+(((-1.0)*x12575*x12584))+(((-1.0)*x12575*x12588))+(((-1.0)*x12590))+(((-1.0)*x12592))+((x12577*x12583)));
evalcond[4]=((-0.1255)+(((-1.0)*x12574*x12585))+((cj2*x12591))+(((-0.02626)*x12593))+(((-1.0)*py*x12587))+(((0.02626)*x12589))+(((-0.0009)*sj2))+((x12572*x12573))+((px*sj0))+(((-0.01834)*cj2))+(((0.0718)*x12590))+(((-1.0)*cj6*r10*x12573))+(((0.026255)*r00*x12579)));
evalcond[5]=((-0.001)+((x12572*x12585))+(((-0.01834)*sj2))+(((-1.0)*cj6*r00*x12573))+(((-1.0)*py*x12580))+(((0.02626)*x12590))+(((0.02626)*x12592))+(((0.0009)*cj2))+((sj2*x12591))+((x12573*x12574))+(((-0.026255)*r10*x12579))+(((-1.0)*px*x12587))+(((-0.0718)*x12589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12595=(cj5*cj6);
IkReal x12596=(cj0*sj6);
IkReal x12597=(r01*sj0);
IkReal x12598=((1.0)*sj0);
IkReal x12599=((1.0)*cj5);
IkReal x12600=(cj0*r12);
IkReal x12601=(r02*sj5);
IkReal x12602=((1.0)*sj5);
IkReal x12603=(cj5*sj6);
IkReal x12604=((1.0)*cj0);
IkReal x12605=(cj6*r10);
IkReal x12606=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=(((r20*x12603))+((r21*x12595))+(((-1.0)*r22*x12602)));
evalcond[2]=((((-1.0)*sj6*x12597))+x12606+(((-1.0)*x12604*x12605))+((r11*x12596)));
evalcond[3]=((((-1.0)*r10*x12598*x12603))+((cj0*x12601))+((r12*sj0*sj5))+(((-1.0)*r00*x12596*x12599))+(((-1.0)*r01*x12595*x12604))+(((-1.0)*r11*x12595*x12598)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12596*x12599))+((sj5*x12600))+((r00*sj0*x12603))+((x12595*x12597))+(((-1.0)*x12598*x12601))+(((-1.0)*r11*x12595*x12604)));
evalcond[5]=(((r10*sj5*x12596))+(((-1.0)*cj5*r02*x12598))+((cj5*x12600))+(((-1.0)*r00*sj5*sj6*x12598))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x12597*x12602)));
evalcond[6]=((-0.0001)+(((-1.0)*py*x12604))+(((0.026255)*r11*x12596))+(((0.026255)*x12606))+(((-0.026255)*cj0*x12605))+((px*sj0))+(((-0.026255)*sj6*x12597)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12607=(cj5*r22);
IkReal x12608=(cj6*sj2);
IkReal x12609=(r21*sj5);
IkReal x12610=(r21*sj6);
IkReal x12611=(cj2*cj6);
IkReal x12612=(r20*sj5*sj6);
if( IKabs(((((-1.0)*cj2*x12610))+((sj2*x12612))+((r20*x12611))+((x12608*x12609))+((sj2*x12607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x12608))+((cj2*x12612))+((sj2*x12610))+((cj2*x12607))+((x12609*x12611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*x12610))+((sj2*x12612))+((r20*x12611))+((x12608*x12609))+((sj2*x12607))))+IKsqr(((((-1.0)*r20*x12608))+((cj2*x12612))+((sj2*x12610))+((cj2*x12607))+((x12609*x12611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj2*x12610))+((sj2*x12612))+((r20*x12611))+((x12608*x12609))+((sj2*x12607))), ((((-1.0)*r20*x12608))+((cj2*x12612))+((sj2*x12610))+((cj2*x12607))+((x12609*x12611))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12613=IKcos(j4);
IkReal x12614=IKsin(j4);
IkReal x12615=(r11*sj0);
IkReal x12616=(cj0*sj6);
IkReal x12617=(cj6*sj5);
IkReal x12618=(r10*sj0);
IkReal x12619=(sj5*sj6);
IkReal x12620=(cj6*r20);
IkReal x12621=((1.0)*cj6);
IkReal x12622=((0.026255)*sj6);
IkReal x12623=((0.026255)*cj6);
IkReal x12624=(cj0*r00);
IkReal x12625=((1.0)*r21);
IkReal x12626=(cj2*x12613);
IkReal x12627=(sj2*x12614);
IkReal x12628=((0.02626)*x12614);
IkReal x12629=(cj2*x12614);
IkReal x12630=((0.0718)*x12613);
IkReal x12631=(sj2*x12613);
IkReal x12632=(x12626+x12627);
evalcond[0]=((((-1.0)*x12629))+x12631+x12620+(((-1.0)*sj6*x12625)));
evalcond[1]=((((-1.0)*r20*x12619))+(((-1.0)*x12617*x12625))+x12632+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x12621*x12624))+(((-1.0)*x12618*x12621))+x12632+((r01*x12616))+((sj6*x12615)));
evalcond[3]=(((cj5*r12*sj0))+((x12618*x12619))+((cj0*cj5*r02))+(((-1.0)*x12631))+((x12615*x12617))+((cj0*r01*x12617))+((r00*sj5*x12616))+x12629);
evalcond[4]=((0.1255)+(((0.026255)*x12620))+(((-1.0)*cj2*x12628))+(((-1.0)*r21*x12622))+(((-0.0718)*x12626))+(((-0.0718)*x12627))+pz+(((0.01834)*cj2))+(((0.02626)*x12631))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-0.01834)*sj2))+((sj2*x12630))+(((0.02626)*x12626))+(((0.02626)*x12627))+(((-1.0)*x12623*x12624))+(((-0.0718)*x12629))+(((0.0009)*cj2))+((x12615*x12622))+(((0.026255)*r01*x12616))+(((-1.0)*x12618*x12623))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12633=(cj5*cj6);
IkReal x12634=((1.0)*sj0);
IkReal x12635=((1.0)*r22);
IkReal x12636=(cj0*sj5);
IkReal x12637=(cj5*sj6);
IkReal x12638=((1.0)*cj0);
IkReal x12639=(cj6*r20);
IkReal x12640=((1.0)*sj5);
IkReal x12641=(r21*sj6);
IkReal x12642=(x12637*x12638);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x12637))+(((-1.0)*sj5*x12635))+((r21*x12633)));
evalcond[2]=((((-1.0)*x12641))+x12639);
evalcond[3]=((((-1.0)*r20*sj6*x12640))+(((-1.0)*cj5*x12635))+(((-1.0)*cj6*r21*x12640)));
evalcond[4]=((((-1.0)*r01*x12633*x12638))+((r12*sj0*sj5))+(((-1.0)*r11*x12633*x12634))+((r02*x12636))+(((-1.0)*r00*x12642))+(((-1.0)*r10*x12634*x12637)));
evalcond[5]=(((r12*x12636))+((r00*sj0*x12637))+(((-1.0)*r11*x12633*x12638))+(((-1.0)*r02*sj5*x12634))+(((-1.0)*r10*x12642))+((r01*sj0*x12633)));
evalcond[6]=((0.0001)+(((-0.026255)*x12641))+pz+(((0.026255)*x12639)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12643=(cj6*r10);
IkReal x12644=(r11*sj0);
IkReal x12645=(r01*sj6);
IkReal x12646=((1.0)*sj0);
IkReal x12647=(cj2*sj6);
IkReal x12648=(cj0*r11);
IkReal x12649=(cj2*sj0);
IkReal x12650=(cj6*r00);
IkReal x12651=(sj0*sj2);
IkReal x12652=((1.0)*cj0*cj2);
IkReal x12653=((1.0)*sj2*sj6);
IkReal x12654=(sj2*x12650);
if( IKabs(((((-1.0)*x12643*x12652))+(((-1.0)*cj0*sj2*x12645))+((x12647*x12648))+(((-1.0)*x12644*x12653))+((x12649*x12650))+((x12643*x12651))+(((-1.0)*cj2*x12645*x12646))+((cj0*x12654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12645*x12652))+((x12643*x12649))+((x12645*x12651))+(((-1.0)*x12646*x12654))+((cj0*cj2*x12650))+((cj0*sj2*x12643))+(((-1.0)*x12644*x12647))+(((-1.0)*x12648*x12653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12643*x12652))+(((-1.0)*cj0*sj2*x12645))+((x12647*x12648))+(((-1.0)*x12644*x12653))+((x12649*x12650))+((x12643*x12651))+(((-1.0)*cj2*x12645*x12646))+((cj0*x12654))))+IKsqr(((((-1.0)*x12645*x12652))+((x12643*x12649))+((x12645*x12651))+(((-1.0)*x12646*x12654))+((cj0*cj2*x12650))+((cj0*sj2*x12643))+(((-1.0)*x12644*x12647))+(((-1.0)*x12648*x12653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x12643*x12652))+(((-1.0)*cj0*sj2*x12645))+((x12647*x12648))+(((-1.0)*x12644*x12653))+((x12649*x12650))+((x12643*x12651))+(((-1.0)*cj2*x12645*x12646))+((cj0*x12654))), ((((-1.0)*x12645*x12652))+((x12643*x12649))+((x12645*x12651))+(((-1.0)*x12646*x12654))+((cj0*cj2*x12650))+((cj0*sj2*x12643))+(((-1.0)*x12644*x12647))+(((-1.0)*x12648*x12653))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12655=IKcos(j4);
IkReal x12656=IKsin(j4);
IkReal x12657=(r11*sj6);
IkReal x12658=((0.026255)*cj0);
IkReal x12659=(r01*sj6);
IkReal x12660=(sj0*sj5);
IkReal x12661=(cj6*r11);
IkReal x12662=(r10*sj6);
IkReal x12663=(cj5*r12);
IkReal x12664=(cj6*sj0);
IkReal x12665=((1.0)*sj0);
IkReal x12666=(cj5*r02);
IkReal x12667=((1.0)*r10);
IkReal x12668=(cj0*sj5);
IkReal x12669=(r00*sj6);
IkReal x12670=((0.026255)*sj0);
IkReal x12671=(cj0*cj6);
IkReal x12672=((1.0)*cj0);
IkReal x12673=(cj6*r01);
IkReal x12674=(cj2*x12655);
IkReal x12675=(sj2*x12656);
IkReal x12676=((0.02626)*x12656);
IkReal x12677=(cj2*x12656);
IkReal x12678=((0.0718)*x12655);
IkReal x12679=(sj2*x12655);
IkReal x12680=(x12675+x12674);
evalcond[0]=(((sj0*x12657))+(((-1.0)*r00*x12671))+(((-1.0)*x12664*x12667))+x12680+((cj0*x12659)));
evalcond[1]=((((-1.0)*x12667*x12671))+(((-1.0)*x12659*x12665))+(((-1.0)*x12677))+x12679+((r00*x12664))+((cj0*x12657)));
evalcond[2]=(((sj0*x12663))+((x12668*x12673))+((x12668*x12669))+(((-1.0)*x12679))+x12677+((cj0*x12666))+((x12660*x12662))+((x12660*x12661)));
evalcond[3]=((((-1.0)*x12660*x12669))+(((-1.0)*x12665*x12666))+(((-1.0)*x12660*x12673))+((x12662*x12668))+((x12661*x12668))+x12680+((cj0*x12663)));
evalcond[4]=((0.1255)+(((-0.0718)*x12674))+(((-0.0718)*x12675))+(((-1.0)*cj2*x12676))+(((-1.0)*cj6*r10*x12658))+(((-1.0)*py*x12672))+(((-1.0)*x12659*x12670))+(((0.02626)*x12679))+((x12657*x12658))+(((0.01834)*cj2))+((px*sj0))+(((0.0009)*sj2))+(((0.026255)*r00*x12664)));
evalcond[5]=((-0.001)+(((-0.0718)*x12677))+(((-1.0)*px*x12672))+(((-0.01834)*sj2))+((x12658*x12659))+(((-1.0)*py*x12665))+(((0.02626)*x12675))+(((0.02626)*x12674))+(((0.0009)*cj2))+((x12657*x12670))+(((-0.026255)*r10*x12664))+((sj2*x12678))+(((-1.0)*cj6*r00*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12681=(cj0*cj1);
IkReal x12682=(cj5*r22);
IkReal x12683=(r21*sj5);
IkReal x12684=((1.0)*cj2);
IkReal x12685=(r11*sj6);
IkReal x12686=(cj1*sj0);
IkReal x12687=(cj6*r00);
IkReal x12688=(r01*sj6);
IkReal x12689=((1.0)*cj6*sj2);
IkReal x12690=(sj1*x12684);
IkReal x12691=(r20*sj5*sj6);
IkReal x12692=((1.0)*sj1*sj2);
CheckValue<IkReal> x12693 = IKatan2WithCheck(IkReal(((((-1.0)*x12681*x12684*x12685))+((cj2*x12686*x12688))+((cj2*cj6*r10*x12681))+(((-1.0)*x12682*x12692))+(((-1.0)*x12691*x12692))+(((-1.0)*x12684*x12686*x12687))+(((-1.0)*sj1*x12683*x12689)))),((((-1.0)*sj2*x12686*x12688))+(((-1.0)*r10*x12681*x12689))+(((-1.0)*x12682*x12690))+((sj2*x12686*x12687))+((sj2*x12681*x12685))+(((-1.0)*cj6*x12683*x12690))+(((-1.0)*x12690*x12691))),IKFAST_ATAN2_MAGTHRESH);
if(!x12693.valid){
continue;
}
CheckValue<IkReal> x12694=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x12694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12693.value)+(((1.5707963267949)*(x12694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12695=IKcos(j4);
IkReal x12696=IKsin(j4);
IkReal x12697=((0.0718)*sj1);
IkReal x12698=(sj0*sj6);
IkReal x12699=(cj0*sj6);
IkReal x12700=((0.026255)*r01);
IkReal x12701=(cj5*r12);
IkReal x12702=((1.0)*cj1);
IkReal x12703=(r10*sj5);
IkReal x12704=((0.026255)*r11);
IkReal x12705=((0.026255)*cj6);
IkReal x12706=(r00*sj0);
IkReal x12707=((1.0)*cj5);
IkReal x12708=(cj1*sj2);
IkReal x12709=(cj2*sj1);
IkReal x12710=((1.0)*sj0);
IkReal x12711=(cj6*r10);
IkReal x12712=((1.0)*sj1);
IkReal x12713=(sj1*sj2);
IkReal x12714=(r00*sj5);
IkReal x12715=((1.0)*cj0);
IkReal x12716=(cj6*sj5);
IkReal x12717=((1.0)*r21);
IkReal x12718=(cj2*x12695);
IkReal x12719=((0.02626)*x12696);
IkReal x12720=(cj2*x12696);
IkReal x12721=((0.02626)*x12695);
IkReal x12722=(sj2*x12696);
IkReal x12723=(sj2*x12695);
IkReal x12724=(cj1*x12720);
evalcond[0]=((((-1.0)*sj6*x12717))+x12724+((cj6*r20))+(((-1.0)*x12702*x12723)));
evalcond[1]=((((-1.0)*x12710*x12711))+(((-1.0)*cj6*r00*x12715))+((r11*x12698))+x12718+x12722+((r01*x12699)));
evalcond[2]=((((-1.0)*x12716*x12717))+(((-1.0)*x12702*x12718))+(((-1.0)*r22*x12707))+(((-1.0)*x12702*x12722))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((x12696*x12709))+((cj6*x12706))+((r11*x12699))+(((-1.0)*x12712*x12723))+(((-1.0)*r01*x12698))+(((-1.0)*x12711*x12715)));
evalcond[4]=(((x12698*x12703))+(((-1.0)*x12723))+((cj0*cj5*r02))+((cj0*r01*x12716))+((r11*sj0*x12716))+((sj0*x12701))+x12720+((x12699*x12714)));
evalcond[5]=(((x12699*x12703))+(((-1.0)*x12698*x12714))+(((-1.0)*r01*x12710*x12716))+((cj0*r11*x12716))+(((-1.0)*r02*sj0*x12707))+(((-1.0)*x12695*x12709))+(((-1.0)*x12712*x12722))+((cj0*x12701)));
evalcond[6]=((((-0.0009)*x12708))+(((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((0.0718)*cj1*x12718))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+(((0.0718)*x12696*x12708))+((cj1*cj2*x12719))+((r20*x12705))+pz+(((-1.0)*x12708*x12721)));
evalcond[7]=((-0.001)+((x12699*x12700))+((x12698*x12704))+(((-1.0)*py*x12710))+(((-0.0718)*x12720))+(((-0.01834)*sj2))+(((0.0718)*x12723))+(((-1.0)*r10*sj0*x12705))+(((0.02626)*x12718))+(((0.0009)*cj2))+(((-1.0)*px*x12715))+(((-1.0)*cj0*r00*x12705))+((sj2*x12719)));
evalcond[8]=(((x12697*x12718))+((x12699*x12704))+(((-0.1255)*sj1))+(((-1.0)*py*x12715))+(((-0.0009)*x12713))+((x12697*x12722))+(((-1.0)*cj0*r10*x12705))+((x12709*x12719))+(((-1.0)*x12698*x12700))+(((-0.01834)*x12709))+(((-1.0)*x12713*x12721))+((x12705*x12706))+(((0.0001)*cj1))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12725=(cj1*sj2);
IkReal x12726=(cj2*sj6);
IkReal x12727=(cj1*cj2);
IkReal x12728=(cj6*r20);
IkReal x12729=((1.0)*sj6);
IkReal x12730=(cj0*r01);
IkReal x12731=(cj0*cj6*r00);
IkReal x12732=((1.0)*r11*sj0);
IkReal x12733=(cj6*r10*sj0);
CheckValue<IkReal> x12734=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12734.valid){
continue;
}
CheckValue<IkReal> x12735 = IKatan2WithCheck(IkReal((((r21*x12726))+(((-1.0)*r11*sj0*x12725*x12729))+(((-1.0)*cj2*x12728))+((x12725*x12731))+((x12725*x12733))+(((-1.0)*x12725*x12729*x12730)))),(((x12727*x12731))+((x12727*x12733))+(((-1.0)*cj1*x12726*x12730))+(((-1.0)*r21*sj2*x12729))+((sj2*x12728))+(((-1.0)*cj1*x12726*x12732))),IKFAST_ATAN2_MAGTHRESH);
if(!x12735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12734.value)))+(x12735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12736=IKcos(j4);
IkReal x12737=IKsin(j4);
IkReal x12738=((0.0718)*sj1);
IkReal x12739=(sj0*sj6);
IkReal x12740=(cj0*sj6);
IkReal x12741=((0.026255)*r01);
IkReal x12742=(cj5*r12);
IkReal x12743=((1.0)*cj1);
IkReal x12744=(r10*sj5);
IkReal x12745=((0.026255)*r11);
IkReal x12746=((0.026255)*cj6);
IkReal x12747=(r00*sj0);
IkReal x12748=((1.0)*cj5);
IkReal x12749=(cj1*sj2);
IkReal x12750=(cj2*sj1);
IkReal x12751=((1.0)*sj0);
IkReal x12752=(cj6*r10);
IkReal x12753=((1.0)*sj1);
IkReal x12754=(sj1*sj2);
IkReal x12755=(r00*sj5);
IkReal x12756=((1.0)*cj0);
IkReal x12757=(cj6*sj5);
IkReal x12758=((1.0)*r21);
IkReal x12759=(cj2*x12736);
IkReal x12760=((0.02626)*x12737);
IkReal x12761=(cj2*x12737);
IkReal x12762=((0.02626)*x12736);
IkReal x12763=(sj2*x12737);
IkReal x12764=(sj2*x12736);
IkReal x12765=(cj1*x12761);
evalcond[0]=((((-1.0)*sj6*x12758))+x12765+((cj6*r20))+(((-1.0)*x12743*x12764)));
evalcond[1]=(((r11*x12739))+x12759+x12763+((r01*x12740))+(((-1.0)*cj6*r00*x12756))+(((-1.0)*x12751*x12752)));
evalcond[2]=((((-1.0)*r22*x12748))+(((-1.0)*x12757*x12758))+(((-1.0)*x12743*x12759))+(((-1.0)*x12743*x12763))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((r11*x12740))+((x12737*x12750))+(((-1.0)*x12752*x12756))+((cj6*x12747))+(((-1.0)*r01*x12739))+(((-1.0)*x12753*x12764)));
evalcond[4]=(((cj0*cj5*r02))+(((-1.0)*x12764))+((sj0*x12742))+((cj0*r01*x12757))+x12761+((r11*sj0*x12757))+((x12739*x12744))+((x12740*x12755)));
evalcond[5]=(((cj0*x12742))+((cj0*r11*x12757))+(((-1.0)*r01*x12751*x12757))+(((-1.0)*x12753*x12763))+(((-1.0)*r02*sj0*x12748))+(((-1.0)*x12739*x12755))+(((-1.0)*x12736*x12750))+((x12740*x12744)));
evalcond[6]=((((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+((cj1*cj2*x12760))+(((-0.026255)*r21*sj6))+(((0.0718)*cj1*x12759))+(((0.0718)*x12737*x12749))+pz+(((-1.0)*x12749*x12762))+((r20*x12746))+(((-0.0009)*x12749)));
evalcond[7]=((-0.001)+(((-0.01834)*sj2))+((sj2*x12760))+(((-1.0)*px*x12756))+(((-1.0)*r10*sj0*x12746))+(((0.0009)*cj2))+(((0.02626)*x12759))+(((-1.0)*cj0*r00*x12746))+(((-0.0718)*x12761))+((x12739*x12745))+((x12740*x12741))+(((-1.0)*py*x12751))+(((0.0718)*x12764)));
evalcond[8]=(((x12750*x12760))+(((-0.1255)*sj1))+(((-0.01834)*x12750))+(((-1.0)*cj0*r10*x12746))+(((-1.0)*x12754*x12762))+(((0.0001)*cj1))+((px*sj0))+((x12738*x12759))+(((-1.0)*x12739*x12741))+(((-0.0009)*x12754))+((x12738*x12763))+((x12740*x12745))+((x12746*x12747))+(((-1.0)*py*x12756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12766=(cj2*r21);
IkReal x12767=((1.0)*cj6);
IkReal x12768=((1.0)*cj2);
IkReal x12769=(cj5*r22);
IkReal x12770=(r20*sj2);
IkReal x12771=(sj5*sj6);
IkReal x12772=(r21*sj2);
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x12769))+(((-1.0)*x12770*x12771))+(((-1.0)*cj2*r20*x12767))+(((-1.0)*sj5*x12767*x12772))+((sj6*x12766)))),((((-1.0)*sj5*x12766*x12767))+(((-1.0)*r20*x12768*x12771))+(((-1.0)*sj6*x12772))+(((-1.0)*x12768*x12769))+((cj6*x12770))),IKFAST_ATAN2_MAGTHRESH);
if(!x12774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12773.value)))+(x12774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12775=IKcos(j4);
IkReal x12776=IKsin(j4);
IkReal x12777=((0.0718)*sj1);
IkReal x12778=(sj0*sj6);
IkReal x12779=(cj0*sj6);
IkReal x12780=((0.026255)*r01);
IkReal x12781=(cj5*r12);
IkReal x12782=((1.0)*cj1);
IkReal x12783=(r10*sj5);
IkReal x12784=((0.026255)*r11);
IkReal x12785=((0.026255)*cj6);
IkReal x12786=(r00*sj0);
IkReal x12787=((1.0)*cj5);
IkReal x12788=(cj1*sj2);
IkReal x12789=(cj2*sj1);
IkReal x12790=((1.0)*sj0);
IkReal x12791=(cj6*r10);
IkReal x12792=((1.0)*sj1);
IkReal x12793=(sj1*sj2);
IkReal x12794=(r00*sj5);
IkReal x12795=((1.0)*cj0);
IkReal x12796=(cj6*sj5);
IkReal x12797=((1.0)*r21);
IkReal x12798=(cj2*x12775);
IkReal x12799=((0.02626)*x12776);
IkReal x12800=(cj2*x12776);
IkReal x12801=((0.02626)*x12775);
IkReal x12802=(sj2*x12776);
IkReal x12803=(sj2*x12775);
IkReal x12804=(cj1*x12800);
evalcond[0]=((((-1.0)*sj6*x12797))+x12804+((cj6*r20))+(((-1.0)*x12782*x12803)));
evalcond[1]=(((r01*x12779))+x12802+x12798+((r11*x12778))+(((-1.0)*x12790*x12791))+(((-1.0)*cj6*r00*x12795)));
evalcond[2]=((((-1.0)*r22*x12787))+(((-1.0)*x12782*x12802))+(((-1.0)*x12796*x12797))+(((-1.0)*x12782*x12798))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=((((-1.0)*x12792*x12803))+(((-1.0)*x12791*x12795))+((x12776*x12789))+((r11*x12779))+(((-1.0)*r01*x12778))+((cj6*x12786)));
evalcond[4]=(((sj0*x12781))+((x12778*x12783))+x12800+((r11*sj0*x12796))+((cj0*cj5*r02))+((cj0*r01*x12796))+(((-1.0)*x12803))+((x12779*x12794)));
evalcond[5]=((((-1.0)*r01*x12790*x12796))+((cj0*r11*x12796))+(((-1.0)*x12792*x12802))+((cj0*x12781))+(((-1.0)*x12778*x12794))+(((-1.0)*x12775*x12789))+((x12779*x12783))+(((-1.0)*r02*sj0*x12787)));
evalcond[6]=(((r20*x12785))+(((-1.0)*x12788*x12801))+(((-0.01834)*cj1*cj2))+((cj1*cj2*x12799))+(((-0.1255)*cj1))+(((-0.0009)*x12788))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+(((0.0718)*x12776*x12788))+pz+(((0.0718)*cj1*x12798)));
evalcond[7]=((-0.001)+(((-1.0)*r10*sj0*x12785))+(((-1.0)*cj0*r00*x12785))+((x12778*x12784))+(((-0.01834)*sj2))+(((-1.0)*py*x12790))+(((0.0009)*cj2))+(((0.0718)*x12803))+(((-0.0718)*x12800))+(((0.02626)*x12798))+(((-1.0)*px*x12795))+((sj2*x12799))+((x12779*x12780)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*cj0*r10*x12785))+((x12777*x12798))+(((-1.0)*py*x12795))+((x12789*x12799))+((x12785*x12786))+(((-1.0)*x12778*x12780))+(((-0.0009)*x12793))+(((-1.0)*x12793*x12801))+(((0.0001)*cj1))+((px*sj0))+(((-0.01834)*x12789))+((x12777*x12802))+((x12779*x12784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12805=(cj0*sj5);
IkReal x12806=(cj5*cj6);
IkReal x12807=((1.0)*sj5);
IkReal x12808=((1.0)*cj0);
IkReal x12809=((1.0)*sj0);
IkReal x12810=(cj5*sj6);
IkReal x12811=(r10*x12810);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x12810))+((r21*x12806))+(((-1.0)*r22*x12807))+(((-1.0)*cj3)));
evalcond[2]=((((-1.0)*x12809*x12811))+((r02*x12805))+(((-1.0)*sj3))+(((-1.0)*r11*x12806*x12809))+((r12*sj0*sj5))+(((-1.0)*r00*x12808*x12810))+(((-1.0)*r01*x12806*x12808)));
evalcond[3]=(((r01*sj0*x12806))+((r00*sj0*x12810))+(((-1.0)*r11*x12806*x12808))+((r12*x12805))+(((-1.0)*r02*sj0*x12807))+(((-1.0)*x12808*x12811)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x12812=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x12812))+(((-1.0)*r20*sj6*x12812))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12813=(cj5*cj6);
IkReal x12814=((1.0)*sj0);
IkReal x12815=((1.0)*r22);
IkReal x12816=(cj0*sj5);
IkReal x12817=(cj5*sj6);
IkReal x12818=((1.0)*cj0);
IkReal x12819=(cj6*r20);
IkReal x12820=((1.0)*sj5);
IkReal x12821=(r21*sj6);
IkReal x12822=(x12817*x12818);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x12815))+((r20*x12817))+((r21*x12813)));
evalcond[2]=(x12819+(((-1.0)*x12821)));
evalcond[3]=((((-1.0)*cj5*x12815))+(((-1.0)*r20*sj6*x12820))+(((-1.0)*cj6*r21*x12820)));
evalcond[4]=(((r02*x12816))+(((-1.0)*r11*x12813*x12814))+(((-1.0)*r10*x12814*x12817))+((r12*sj0*sj5))+(((-1.0)*r01*x12813*x12818))+(((-1.0)*r00*x12822)));
evalcond[5]=((((-1.0)*r02*sj5*x12814))+((r01*sj0*x12813))+(((-1.0)*r11*x12813*x12818))+((r00*sj0*x12817))+(((-1.0)*r10*x12822))+((r12*x12816)));
evalcond[6]=((-0.0001)+(((-0.026255)*x12821))+(((0.026255)*x12819))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12823=(sj0*sj6);
IkReal x12824=(cj0*sj6);
IkReal x12825=(cj6*r00);
IkReal x12826=((1.0)*cj6*r10);
if( IKabs((((r01*x12824))+(((-1.0)*sj0*x12826))+(((-1.0)*cj0*x12825))+((r11*x12823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x12825))+(((-1.0)*r01*x12823))+((r11*x12824))+(((-1.0)*cj0*x12826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x12824))+(((-1.0)*sj0*x12826))+(((-1.0)*cj0*x12825))+((r11*x12823))))+IKsqr((((sj0*x12825))+(((-1.0)*r01*x12823))+((r11*x12824))+(((-1.0)*cj0*x12826))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x12824))+(((-1.0)*sj0*x12826))+(((-1.0)*cj0*x12825))+((r11*x12823))), (((sj0*x12825))+(((-1.0)*r01*x12823))+((r11*x12824))+(((-1.0)*cj0*x12826))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12827=IKcos(j4);
IkReal x12828=IKsin(j4);
IkReal x12829=(r11*sj6);
IkReal x12830=((0.026255)*cj0);
IkReal x12831=(r01*sj6);
IkReal x12832=(sj0*sj5);
IkReal x12833=(cj6*r11);
IkReal x12834=(r10*sj6);
IkReal x12835=(cj5*r12);
IkReal x12836=(cj6*sj0);
IkReal x12837=((1.0)*sj0);
IkReal x12838=(cj5*r02);
IkReal x12839=((1.0)*r10);
IkReal x12840=(cj0*sj5);
IkReal x12841=(r00*sj6);
IkReal x12842=((0.026255)*sj0);
IkReal x12843=(cj0*cj6);
IkReal x12844=((1.0)*cj0);
IkReal x12845=(cj6*r01);
IkReal x12846=((1.0)*x12828);
evalcond[0]=((((-1.0)*r00*x12843))+((sj0*x12829))+((cj0*x12831))+(((-1.0)*x12836*x12839))+(((-1.0)*x12846)));
evalcond[1]=(((cj0*x12829))+(((-1.0)*x12827))+(((-1.0)*x12839*x12843))+((r00*x12836))+(((-1.0)*x12831*x12837)));
evalcond[2]=(x12827+((x12840*x12845))+((x12840*x12841))+((cj0*x12838))+((x12832*x12833))+((x12832*x12834))+((sj0*x12835)));
evalcond[3]=(((x12833*x12840))+(((-1.0)*x12837*x12838))+(((-1.0)*x12832*x12841))+(((-1.0)*x12832*x12845))+((cj0*x12835))+(((-1.0)*x12846))+((x12834*x12840)));
evalcond[4]=((-0.1264)+(((-1.0)*x12831*x12842))+(((0.026255)*r00*x12836))+(((-1.0)*cj6*r10*x12830))+(((-1.0)*py*x12844))+(((-0.02626)*x12827))+((px*sj0))+(((0.0718)*x12828))+((x12829*x12830)));
evalcond[5]=((-0.21426)+(((-1.0)*py*x12837))+(((-1.0)*cj6*r00*x12830))+(((-1.0)*px*x12844))+((x12829*x12842))+((x12830*x12831))+(((-0.0718)*x12827))+(((-0.02626)*x12828))+(((-0.026255)*r10*x12836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12847=(cj5*cj6);
IkReal x12848=((1.0)*sj0);
IkReal x12849=((1.0)*r22);
IkReal x12850=(cj0*sj5);
IkReal x12851=(cj5*sj6);
IkReal x12852=((1.0)*cj0);
IkReal x12853=(cj6*r20);
IkReal x12854=((1.0)*sj5);
IkReal x12855=(r21*sj6);
IkReal x12856=(x12851*x12852);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x12847))+(((-1.0)*sj5*x12849))+((r20*x12851)));
evalcond[2]=(x12853+(((-1.0)*x12855)));
evalcond[3]=((((-1.0)*cj6*r21*x12854))+(((-1.0)*r20*sj6*x12854))+(((-1.0)*cj5*x12849)));
evalcond[4]=((((-1.0)*r10*x12848*x12851))+((r12*sj0*sj5))+(((-1.0)*r11*x12847*x12848))+(((-1.0)*r01*x12847*x12852))+((r02*x12850))+(((-1.0)*r00*x12856)));
evalcond[5]=((((-1.0)*r02*sj5*x12848))+(((-1.0)*r11*x12847*x12852))+(((-1.0)*r10*x12856))+((r12*x12850))+((r01*sj0*x12847))+((r00*sj0*x12851)));
evalcond[6]=((-0.0001)+(((-0.026255)*x12855))+(((0.026255)*x12853))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12857=(cj0*cj6);
IkReal x12858=(cj6*sj0);
IkReal x12859=(cj0*sj6);
IkReal x12860=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r01*x12859))+((r10*x12858))+((r00*x12857))+(((-1.0)*r11*x12860)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x12858))+(((-1.0)*r01*x12860))+((r11*x12859))+(((-1.0)*r10*x12857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x12859))+((r10*x12858))+((r00*x12857))+(((-1.0)*r11*x12860))))+IKsqr((((r00*x12858))+(((-1.0)*r01*x12860))+((r11*x12859))+(((-1.0)*r10*x12857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x12859))+((r10*x12858))+((r00*x12857))+(((-1.0)*r11*x12860))), (((r00*x12858))+(((-1.0)*r01*x12860))+((r11*x12859))+(((-1.0)*r10*x12857))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKsin(j4);
IkReal x12862=IKcos(j4);
IkReal x12863=(r11*sj6);
IkReal x12864=((0.026255)*cj0);
IkReal x12865=(r01*sj6);
IkReal x12866=(sj0*sj5);
IkReal x12867=(cj6*r11);
IkReal x12868=(r10*sj6);
IkReal x12869=(cj5*r12);
IkReal x12870=(cj6*sj0);
IkReal x12871=((1.0)*sj0);
IkReal x12872=(cj5*r02);
IkReal x12873=((1.0)*r10);
IkReal x12874=(cj0*sj5);
IkReal x12875=(r00*sj6);
IkReal x12876=((0.026255)*sj0);
IkReal x12877=(cj0*cj6);
IkReal x12878=((1.0)*cj0);
IkReal x12879=(cj6*r01);
IkReal x12880=((1.0)*x12862);
evalcond[0]=(x12861+(((-1.0)*r00*x12877))+((sj0*x12863))+((cj0*x12865))+(((-1.0)*x12870*x12873)));
evalcond[1]=((((-1.0)*x12880))+((r00*x12870))+((cj0*x12863))+(((-1.0)*x12873*x12877))+(((-1.0)*x12865*x12871)));
evalcond[2]=((((-1.0)*x12880))+((cj0*x12872))+((x12866*x12868))+((x12866*x12867))+((x12874*x12879))+((x12874*x12875))+((sj0*x12869)));
evalcond[3]=((((-1.0)*x12861))+(((-1.0)*x12871*x12872))+(((-1.0)*x12866*x12875))+(((-1.0)*x12866*x12879))+((x12867*x12874))+((cj0*x12869))+((x12868*x12874)));
evalcond[4]=((-0.1264)+(((0.0718)*x12861))+(((-0.02626)*x12862))+(((-1.0)*cj6*r10*x12864))+(((0.026255)*r00*x12870))+(((-1.0)*py*x12878))+((px*sj0))+((x12863*x12864))+(((-1.0)*x12865*x12876)));
evalcond[5]=((-0.01934)+(((-1.0)*px*x12878))+(((0.0718)*x12862))+((x12864*x12865))+(((0.02626)*x12861))+((x12863*x12876))+(((-0.026255)*r10*x12870))+(((-1.0)*cj6*r00*x12864))+(((-1.0)*py*x12871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12881=((1.0)*cj6);
CheckValue<IkReal> x12882=IKPowWithIntegerCheck(sj3,-1);
if(!x12882.valid){
continue;
}
if( IKabs(((x12882.value)*(((((-1.0)*r20*x12881))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+(((-1.0)*cj0*r10*x12881))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12882.value)*(((((-1.0)*r20*x12881))+((r21*sj6))))))+IKsqr((((cj6*r00*sj0))+(((-1.0)*cj0*r10*x12881))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12882.value)*(((((-1.0)*r20*x12881))+((r21*sj6))))), (((cj6*r00*sj0))+(((-1.0)*cj0*r10*x12881))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12883=IKcos(j4);
IkReal x12884=IKsin(j4);
IkReal x12885=(r11*sj0);
IkReal x12886=((0.026255)*sj6);
IkReal x12887=(cj0*r01);
IkReal x12888=(cj6*sj5);
IkReal x12889=(r10*sj0);
IkReal x12890=(sj5*sj6);
IkReal x12891=(cj0*r11);
IkReal x12892=((1.0)*cj5);
IkReal x12893=((1.0)*cj6);
IkReal x12894=(cj0*r10);
IkReal x12895=((1.0)*sj0);
IkReal x12896=(cj0*r00);
IkReal x12897=(cj5*r12);
IkReal x12898=((0.026255)*cj6);
IkReal x12899=((1.0)*r21);
IkReal x12900=((1.0)*cj0);
IkReal x12901=((1.0)*x12884);
IkReal x12902=(sj3*x12884);
IkReal x12903=(cj6*r00*sj0);
IkReal x12904=((1.0)*x12883);
IkReal x12905=(cj3*x12883);
evalcond[0]=(x12902+(((-1.0)*sj6*x12899))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x12892))+(((-1.0)*x12888*x12899))+(((-1.0)*sj3*x12904))+(((-1.0)*r20*x12890)));
evalcond[2]=((((-1.0)*x12893*x12894))+x12903+(((-1.0)*r01*sj6*x12895))+(((-1.0)*x12904))+((sj6*x12891)));
evalcond[3]=((((-1.0)*x12893*x12896))+(((-1.0)*x12889*x12893))+((sj6*x12885))+((sj6*x12887))+(((-1.0)*cj3*x12901)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x12886))+pz+(((0.02626)*x12902))+(((0.0718)*sj3*x12883))+(((0.09746)*sj3))+((r20*x12898)));
evalcond[5]=(x12905+((x12887*x12888))+((cj0*cj5*r02))+((x12885*x12888))+((x12890*x12896))+((x12889*x12890))+((sj0*x12897)));
evalcond[6]=((((-1.0)*r01*x12888*x12895))+((x12888*x12891))+(((-1.0)*x12901))+((x12890*x12894))+((cj0*x12897))+(((-1.0)*r00*x12890*x12895))+(((-1.0)*r02*sj0*x12892)));
evalcond[7]=((-0.1264)+(((0.0718)*x12884))+((x12886*x12891))+((r00*sj0*x12898))+(((-0.02626)*x12883))+(((-1.0)*py*x12900))+(((-1.0)*x12894*x12898))+((px*sj0))+(((-1.0)*r01*sj0*x12886)));
evalcond[8]=((-0.1168)+(((-0.02626)*cj3*x12884))+(((-1.0)*px*x12900))+(((-1.0)*x12896*x12898))+(((-1.0)*x12889*x12898))+((x12885*x12886))+(((-1.0)*py*x12895))+((x12886*x12887))+(((-0.09746)*cj3))+(((-0.0718)*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12906=((1.0)*sj5);
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x12907.valid){
continue;
}
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x12906))+(((-1.0)*cj6*r21*x12906))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12907.value)))+(x12908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12909=IKcos(j4);
IkReal x12910=IKsin(j4);
IkReal x12911=(r11*sj0);
IkReal x12912=((0.026255)*sj6);
IkReal x12913=(cj0*r01);
IkReal x12914=(cj6*sj5);
IkReal x12915=(r10*sj0);
IkReal x12916=(sj5*sj6);
IkReal x12917=(cj0*r11);
IkReal x12918=((1.0)*cj5);
IkReal x12919=((1.0)*cj6);
IkReal x12920=(cj0*r10);
IkReal x12921=((1.0)*sj0);
IkReal x12922=(cj0*r00);
IkReal x12923=(cj5*r12);
IkReal x12924=((0.026255)*cj6);
IkReal x12925=((1.0)*r21);
IkReal x12926=((1.0)*cj0);
IkReal x12927=((1.0)*x12910);
IkReal x12928=(sj3*x12910);
IkReal x12929=(cj6*r00*sj0);
IkReal x12930=((1.0)*x12909);
IkReal x12931=(cj3*x12909);
evalcond[0]=(x12928+((cj6*r20))+(((-1.0)*sj6*x12925)));
evalcond[1]=((((-1.0)*x12914*x12925))+(((-1.0)*sj3*x12930))+(((-1.0)*r22*x12918))+(((-1.0)*r20*x12916)));
evalcond[2]=(x12929+(((-1.0)*x12919*x12920))+((sj6*x12917))+(((-1.0)*r01*sj6*x12921))+(((-1.0)*x12930)));
evalcond[3]=((((-1.0)*x12919*x12922))+((sj6*x12913))+((sj6*x12911))+(((-1.0)*x12915*x12919))+(((-1.0)*cj3*x12927)));
evalcond[4]=((-0.0001)+((r20*x12924))+(((0.02626)*x12928))+(((0.0718)*sj3*x12909))+(((-1.0)*r21*x12912))+pz+(((0.09746)*sj3)));
evalcond[5]=(x12931+((x12915*x12916))+((cj0*cj5*r02))+((x12911*x12914))+((x12916*x12922))+((sj0*x12923))+((x12913*x12914)));
evalcond[6]=((((-1.0)*r00*x12916*x12921))+((x12916*x12920))+((cj0*x12923))+((x12914*x12917))+(((-1.0)*r01*x12914*x12921))+(((-1.0)*r02*sj0*x12918))+(((-1.0)*x12927)));
evalcond[7]=((-0.1264)+(((-0.02626)*x12909))+(((0.0718)*x12910))+((px*sj0))+(((-1.0)*x12920*x12924))+((r00*sj0*x12924))+((x12912*x12917))+(((-1.0)*py*x12926))+(((-1.0)*r01*sj0*x12912)));
evalcond[8]=((-0.1168)+(((-0.0718)*x12931))+(((-1.0)*px*x12926))+((x12911*x12912))+(((-1.0)*x12915*x12924))+(((-0.09746)*cj3))+(((-0.02626)*cj3*x12910))+(((-1.0)*x12922*x12924))+((x12912*x12913))+(((-1.0)*py*x12921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12932=(cj0*sj5);
IkReal x12933=(cj5*cj6);
IkReal x12934=((1.0)*sj5);
IkReal x12935=((1.0)*cj0);
IkReal x12936=((1.0)*sj0);
IkReal x12937=(cj5*sj6);
IkReal x12938=(r10*x12937);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x12937))+cj3+(((-1.0)*r22*x12934))+((r21*x12933)));
evalcond[2]=((((-1.0)*r00*x12935*x12937))+(((-1.0)*x12936*x12938))+(((-1.0)*sj3))+(((-1.0)*r11*x12933*x12936))+((r02*x12932))+((r12*sj0*sj5))+(((-1.0)*r01*x12933*x12935)));
evalcond[3]=(((r12*x12932))+(((-1.0)*r11*x12933*x12935))+(((-1.0)*r02*sj0*x12934))+(((-1.0)*x12935*x12938))+((r01*sj0*x12933))+((r00*sj0*x12937)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12939=(cj5*cj6);
IkReal x12940=((1.0)*sj0);
IkReal x12941=((1.0)*r22);
IkReal x12942=(cj0*sj5);
IkReal x12943=(cj5*sj6);
IkReal x12944=((1.0)*cj0);
IkReal x12945=(cj6*r20);
IkReal x12946=((1.0)*sj5);
IkReal x12947=(r21*sj6);
IkReal x12948=(x12943*x12944);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x12941))+((r20*x12943))+((r21*x12939)));
evalcond[2]=(x12945+(((-1.0)*x12947)));
evalcond[3]=((((-1.0)*cj5*x12941))+(((-1.0)*cj6*r21*x12946))+(((-1.0)*r20*sj6*x12946)));
evalcond[4]=((((-1.0)*r11*x12939*x12940))+(((-1.0)*r01*x12939*x12944))+((r12*sj0*sj5))+(((-1.0)*r10*x12940*x12943))+(((-1.0)*r00*x12948))+((r02*x12942)));
evalcond[5]=((((-1.0)*r11*x12939*x12944))+(((-1.0)*r10*x12948))+((r12*x12942))+((r00*sj0*x12943))+(((-1.0)*r02*sj5*x12940))+((r01*sj0*x12939)));
evalcond[6]=((0.0001)+(((0.026255)*x12945))+(((-0.026255)*x12947))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12949=(sj0*sj6);
IkReal x12950=(cj6*r10);
IkReal x12951=((1.0)*sj0);
IkReal x12952=(cj6*r00);
IkReal x12953=(cj0*sj6);
if( IKabs(((((-1.0)*cj0*x12952))+((r01*x12953))+(((-1.0)*x12950*x12951))+((r11*x12949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x12950))+((r01*x12949))+(((-1.0)*x12951*x12952))+(((-1.0)*r11*x12953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x12952))+((r01*x12953))+(((-1.0)*x12950*x12951))+((r11*x12949))))+IKsqr((((cj0*x12950))+((r01*x12949))+(((-1.0)*x12951*x12952))+(((-1.0)*r11*x12953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x12952))+((r01*x12953))+(((-1.0)*x12950*x12951))+((r11*x12949))), (((cj0*x12950))+((r01*x12949))+(((-1.0)*x12951*x12952))+(((-1.0)*r11*x12953))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12954=IKcos(j4);
IkReal x12955=IKsin(j4);
IkReal x12956=(r11*sj6);
IkReal x12957=((0.026255)*cj0);
IkReal x12958=(r01*sj6);
IkReal x12959=(sj0*sj5);
IkReal x12960=(cj6*r11);
IkReal x12961=(r10*sj6);
IkReal x12962=(cj5*r12);
IkReal x12963=(cj6*sj0);
IkReal x12964=((1.0)*sj0);
IkReal x12965=(cj5*r02);
IkReal x12966=((1.0)*r10);
IkReal x12967=(cj0*sj5);
IkReal x12968=(r00*sj6);
IkReal x12969=((0.026255)*sj0);
IkReal x12970=(cj0*cj6);
IkReal x12971=((1.0)*cj0);
IkReal x12972=(cj6*r01);
evalcond[0]=(x12954+(((-1.0)*x12958*x12964))+((cj0*x12956))+((r00*x12963))+(((-1.0)*x12966*x12970)));
evalcond[1]=(((cj0*x12958))+((sj0*x12956))+(((-1.0)*r00*x12970))+(((-1.0)*x12955))+(((-1.0)*x12963*x12966)));
evalcond[2]=(x12954+((cj0*x12965))+((x12959*x12961))+((x12959*x12960))+((x12967*x12972))+((x12967*x12968))+((sj0*x12962)));
evalcond[3]=(x12955+((cj0*x12962))+((x12961*x12967))+((x12960*x12967))+(((-1.0)*x12959*x12968))+(((-1.0)*x12959*x12972))+(((-1.0)*x12964*x12965)));
evalcond[4]=((0.1264)+(((-1.0)*x12958*x12969))+(((0.026255)*r00*x12963))+(((-1.0)*py*x12971))+(((-1.0)*cj6*r10*x12957))+(((-0.0718)*x12955))+((x12956*x12957))+((px*sj0))+(((0.02626)*x12954)));
evalcond[5]=((-0.21426)+(((-1.0)*px*x12971))+((x12956*x12969))+(((-0.02626)*x12955))+(((-0.026255)*r10*x12963))+(((-1.0)*py*x12964))+(((-0.0718)*x12954))+((x12957*x12958))+(((-1.0)*cj6*r00*x12957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12973=(cj5*cj6);
IkReal x12974=((1.0)*sj0);
IkReal x12975=((1.0)*r22);
IkReal x12976=(cj0*sj5);
IkReal x12977=(cj5*sj6);
IkReal x12978=((1.0)*cj0);
IkReal x12979=(cj6*r20);
IkReal x12980=((1.0)*sj5);
IkReal x12981=(r21*sj6);
IkReal x12982=(x12977*x12978);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x12977))+(((-1.0)*sj5*x12975))+((r21*x12973)));
evalcond[2]=(x12979+(((-1.0)*x12981)));
evalcond[3]=((((-1.0)*cj5*x12975))+(((-1.0)*r20*sj6*x12980))+(((-1.0)*cj6*r21*x12980)));
evalcond[4]=((((-1.0)*r00*x12982))+(((-1.0)*r01*x12973*x12978))+((r02*x12976))+((r12*sj0*sj5))+(((-1.0)*r10*x12974*x12977))+(((-1.0)*r11*x12973*x12974)));
evalcond[5]=((((-1.0)*r10*x12982))+((r00*sj0*x12977))+((r12*x12976))+(((-1.0)*r02*sj5*x12974))+((r01*sj0*x12973))+(((-1.0)*r11*x12973*x12978)));
evalcond[6]=((0.0001)+(((-0.026255)*x12981))+(((0.026255)*x12979))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12983=(cj0*cj6);
IkReal x12984=(sj0*sj6);
IkReal x12985=((1.0)*r11);
IkReal x12986=(cj6*sj0);
IkReal x12987=(cj0*sj6);
if( IKabs((((r10*x12986))+((r00*x12983))+(((-1.0)*r01*x12987))+(((-1.0)*x12984*x12985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x12983))+((r01*x12984))+(((-1.0)*r00*x12986))+(((-1.0)*x12985*x12987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12986))+((r00*x12983))+(((-1.0)*r01*x12987))+(((-1.0)*x12984*x12985))))+IKsqr((((r10*x12983))+((r01*x12984))+(((-1.0)*r00*x12986))+(((-1.0)*x12985*x12987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x12986))+((r00*x12983))+(((-1.0)*r01*x12987))+(((-1.0)*x12984*x12985))), (((r10*x12983))+((r01*x12984))+(((-1.0)*r00*x12986))+(((-1.0)*x12985*x12987))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12988=IKcos(j4);
IkReal x12989=IKsin(j4);
IkReal x12990=(r11*sj6);
IkReal x12991=((0.026255)*cj0);
IkReal x12992=(r01*sj6);
IkReal x12993=(sj0*sj5);
IkReal x12994=(cj6*r11);
IkReal x12995=(r10*sj6);
IkReal x12996=(cj5*r12);
IkReal x12997=(cj6*sj0);
IkReal x12998=((1.0)*sj0);
IkReal x12999=(cj5*r02);
IkReal x13000=((1.0)*r10);
IkReal x13001=(cj0*sj5);
IkReal x13002=(r00*sj6);
IkReal x13003=((0.026255)*sj0);
IkReal x13004=(cj0*cj6);
IkReal x13005=((1.0)*cj0);
IkReal x13006=(cj6*r01);
evalcond[0]=(x12989+((cj0*x12992))+(((-1.0)*r00*x13004))+((sj0*x12990))+(((-1.0)*x12997*x13000)));
evalcond[1]=(x12988+((cj0*x12990))+(((-1.0)*x12992*x12998))+((r00*x12997))+(((-1.0)*x13000*x13004)));
evalcond[2]=(((cj0*x12999))+((x12993*x12994))+((x12993*x12995))+((sj0*x12996))+((x13001*x13002))+((x13001*x13006))+(((-1.0)*x12988)));
evalcond[3]=(x12989+((cj0*x12996))+((x12994*x13001))+(((-1.0)*x12998*x12999))+((x12995*x13001))+(((-1.0)*x12993*x13006))+(((-1.0)*x12993*x13002)));
evalcond[4]=((0.1264)+(((-1.0)*cj6*r10*x12991))+((x12990*x12991))+(((-1.0)*py*x13005))+(((-0.0718)*x12989))+(((0.026255)*r00*x12997))+(((-1.0)*x12992*x13003))+(((0.02626)*x12988))+((px*sj0)));
evalcond[5]=((-0.01934)+(((-1.0)*cj6*r00*x12991))+((x12990*x13003))+(((-1.0)*py*x12998))+((x12991*x12992))+(((0.0718)*x12988))+(((0.02626)*x12989))+(((-0.026255)*r10*x12997))+(((-1.0)*px*x13005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13007=((1.0)*sj6);
CheckValue<IkReal> x13008=IKPowWithIntegerCheck(sj3,-1);
if(!x13008.valid){
continue;
}
if( IKabs(((x13008.value)*(((((-1.0)*r21*x13007))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x13007))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13008.value)*(((((-1.0)*r21*x13007))+((cj6*r20))))))+IKsqr(((((-1.0)*cj0*r11*x13007))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13008.value)*(((((-1.0)*r21*x13007))+((cj6*r20))))), ((((-1.0)*cj0*r11*x13007))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13009=IKcos(j4);
IkReal x13010=IKsin(j4);
IkReal x13011=(r11*sj0);
IkReal x13012=((0.026255)*sj6);
IkReal x13013=(cj0*r01);
IkReal x13014=(cj6*sj5);
IkReal x13015=(r10*sj0);
IkReal x13016=(sj5*sj6);
IkReal x13017=(cj0*r11);
IkReal x13018=((1.0)*cj5);
IkReal x13019=((1.0)*cj6);
IkReal x13020=(cj0*r10);
IkReal x13021=((1.0)*sj0);
IkReal x13022=(cj0*r00);
IkReal x13023=(cj5*r12);
IkReal x13024=((0.026255)*cj6);
IkReal x13025=((1.0)*r21);
IkReal x13026=((1.0)*cj0);
IkReal x13027=((1.0)*x13010);
IkReal x13028=((0.02626)*x13010);
IkReal x13029=(sj3*x13009);
IkReal x13030=(cj6*r00*sj0);
IkReal x13031=(cj3*x13009);
evalcond[0]=((((-1.0)*sj3*x13027))+(((-1.0)*sj6*x13025))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x13018))+(((-1.0)*r20*x13016))+(((-1.0)*x13014*x13025))+x13029);
evalcond[2]=(((sj6*x13017))+(((-1.0)*x13019*x13020))+x13030+x13009+(((-1.0)*r01*sj6*x13021)));
evalcond[3]=(((sj6*x13011))+((sj6*x13013))+(((-1.0)*cj3*x13027))+(((-1.0)*x13019*x13022))+(((-1.0)*x13015*x13019)));
evalcond[4]=((0.0001)+((r20*x13024))+(((-1.0)*sj3*x13028))+(((-0.0718)*x13029))+pz+(((-1.0)*r21*x13012))+(((-0.09746)*sj3)));
evalcond[5]=(((x13016*x13022))+((cj0*cj5*r02))+((x13013*x13014))+((x13015*x13016))+x13031+((sj0*x13023))+((x13011*x13014)));
evalcond[6]=(((x13016*x13020))+(((-1.0)*r00*x13016*x13021))+(((-1.0)*r02*sj0*x13018))+(((-1.0)*r01*x13014*x13021))+((cj0*x13023))+x13010+((x13014*x13017)));
evalcond[7]=((0.1264)+(((-1.0)*py*x13026))+(((-1.0)*r01*sj0*x13012))+((r00*sj0*x13024))+((x13012*x13017))+(((-0.0718)*x13010))+((px*sj0))+(((0.02626)*x13009))+(((-1.0)*x13020*x13024)));
evalcond[8]=((-0.1168)+(((-0.0718)*x13031))+(((-1.0)*py*x13021))+(((-1.0)*cj3*x13028))+((x13012*x13013))+(((-1.0)*x13015*x13024))+(((-0.09746)*cj3))+(((-1.0)*x13022*x13024))+(((-1.0)*px*x13026))+((x13011*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13032=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x13032.valid){
continue;
}
CheckValue<IkReal> x13033 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x13033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13032.value)))+(x13033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13034=IKcos(j4);
IkReal x13035=IKsin(j4);
IkReal x13036=(r11*sj0);
IkReal x13037=((0.026255)*sj6);
IkReal x13038=(cj0*r01);
IkReal x13039=(cj6*sj5);
IkReal x13040=(r10*sj0);
IkReal x13041=(sj5*sj6);
IkReal x13042=(cj0*r11);
IkReal x13043=((1.0)*cj5);
IkReal x13044=((1.0)*cj6);
IkReal x13045=(cj0*r10);
IkReal x13046=((1.0)*sj0);
IkReal x13047=(cj0*r00);
IkReal x13048=(cj5*r12);
IkReal x13049=((0.026255)*cj6);
IkReal x13050=((1.0)*r21);
IkReal x13051=((1.0)*cj0);
IkReal x13052=((1.0)*x13035);
IkReal x13053=((0.02626)*x13035);
IkReal x13054=(sj3*x13034);
IkReal x13055=(cj6*r00*sj0);
IkReal x13056=(cj3*x13034);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x13050))+(((-1.0)*sj3*x13052)));
evalcond[1]=((((-1.0)*x13039*x13050))+(((-1.0)*r22*x13043))+x13054+(((-1.0)*r20*x13041)));
evalcond[2]=(((sj6*x13042))+x13034+x13055+(((-1.0)*x13044*x13045))+(((-1.0)*r01*sj6*x13046)));
evalcond[3]=((((-1.0)*x13040*x13044))+(((-1.0)*cj3*x13052))+((sj6*x13036))+((sj6*x13038))+(((-1.0)*x13044*x13047)));
evalcond[4]=((0.0001)+((r20*x13049))+pz+(((-0.09746)*sj3))+(((-0.0718)*x13054))+(((-1.0)*sj3*x13053))+(((-1.0)*r21*x13037)));
evalcond[5]=(((x13036*x13039))+((cj0*cj5*r02))+((x13038*x13039))+((x13041*x13047))+((x13040*x13041))+x13056+((sj0*x13048)));
evalcond[6]=((((-1.0)*r01*x13039*x13046))+((cj0*x13048))+(((-1.0)*r02*sj0*x13043))+((x13041*x13045))+(((-1.0)*r00*x13041*x13046))+((x13039*x13042))+x13035);
evalcond[7]=((0.1264)+(((-0.0718)*x13035))+(((-1.0)*x13045*x13049))+((x13037*x13042))+(((0.02626)*x13034))+(((-1.0)*py*x13051))+((px*sj0))+(((-1.0)*r01*sj0*x13037))+((r00*sj0*x13049)));
evalcond[8]=((-0.1168)+(((-1.0)*x13047*x13049))+((x13036*x13037))+(((-1.0)*x13040*x13049))+(((-1.0)*px*x13051))+(((-1.0)*cj3*x13053))+((x13037*x13038))+(((-0.09746)*cj3))+(((-1.0)*py*x13046))+(((-0.0718)*x13056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13057=(cj5*cj6);
IkReal x13058=(r11*sj0);
IkReal x13059=(cj0*sj6);
IkReal x13060=(cj6*sj5);
IkReal x13061=((1.0)*cj0);
IkReal x13062=(r10*sj0);
IkReal x13063=((1.0)*cj5);
IkReal x13064=(cj0*r02);
IkReal x13065=((1.0)*sj5);
IkReal x13066=(cj5*sj6);
IkReal x13067=(cj6*r00);
IkReal x13068=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=(((r20*x13066))+((r21*x13057))+(((-1.0)*r22*x13065)));
evalcond[2]=((((-1.0)*x13061*x13067))+(((-1.0)*cj6*x13062))+((sj6*x13058))+((r01*x13059)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x13062*x13063))+(((-1.0)*r01*x13057*x13061))+(((-1.0)*r00*x13059*x13063))+((sj5*x13064))+((sj5*x13068))+(((-1.0)*x13057*x13058)));
evalcond[4]=(((sj5*sj6*x13062))+((cj0*r01*x13060))+((r00*sj5*x13059))+((x13058*x13060))+((cj5*x13064))+((cj5*x13068)));
evalcond[5]=(((r01*sj0*x13057))+(((-1.0)*r02*sj0*x13065))+(((-1.0)*r10*x13059*x13063))+((r00*sj0*x13066))+((cj0*r12*sj5))+(((-1.0)*r11*x13057*x13061)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x13061))+(((0.026255)*r01*x13059))+(((-0.026255)*cj6*x13062))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x13058))+(((-0.026255)*cj0*x13067)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13069=(cj1*r20);
IkReal x13070=((1.0)*sj6);
IkReal x13071=(r20*sj1);
IkReal x13072=((1.0)*cj5*r22);
IkReal x13073=((1.0)*cj6*r21*sj5);
if( IKabs(((((-1.0)*cj1*x13072))+(((-1.0)*cj1*x13073))+((r21*sj1*sj6))+(((-1.0)*sj5*x13069*x13070))+(((-1.0)*cj6*x13071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x13070*x13071))+((cj6*x13069))+(((-1.0)*sj1*x13073))+(((-1.0)*sj1*x13072))+(((-1.0)*cj1*r21*x13070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x13072))+(((-1.0)*cj1*x13073))+((r21*sj1*sj6))+(((-1.0)*sj5*x13069*x13070))+(((-1.0)*cj6*x13071))))+IKsqr(((((-1.0)*sj5*x13070*x13071))+((cj6*x13069))+(((-1.0)*sj1*x13073))+(((-1.0)*sj1*x13072))+(((-1.0)*cj1*r21*x13070))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x13072))+(((-1.0)*cj1*x13073))+((r21*sj1*sj6))+(((-1.0)*sj5*x13069*x13070))+(((-1.0)*cj6*x13071))), ((((-1.0)*sj5*x13070*x13071))+((cj6*x13069))+(((-1.0)*sj1*x13073))+(((-1.0)*sj1*x13072))+(((-1.0)*cj1*r21*x13070))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13074=IKcos(j4);
IkReal x13075=IKsin(j4);
IkReal x13076=((1.0)*cj1);
IkReal x13077=((1.0)*cj5);
IkReal x13078=((0.02626)*cj1);
IkReal x13079=((1.0)*cj6);
IkReal x13080=(cj0*r10);
IkReal x13081=((0.026255)*cj6);
IkReal x13082=((1.0)*sj6);
IkReal x13083=(sj0*sj5);
IkReal x13084=(sj1*x13074);
IkReal x13085=(cj0*r11*sj6);
IkReal x13086=((0.0718)*x13075);
IkReal x13087=(sj1*x13075);
IkReal x13088=(cj6*r00*sj0);
IkReal x13089=(r01*sj0*sj6);
IkReal x13090=(cj1*x13074);
IkReal x13091=((1.0)*x13084);
IkReal x13092=(x13075*x13076);
IkReal x13093=(x13091+x13092);
evalcond[0]=((((-1.0)*x13074*x13076))+x13087+((cj6*r20))+(((-1.0)*r21*x13082)));
evalcond[1]=((((-1.0)*r20*sj5*x13082))+(((-1.0)*r21*sj5*x13079))+(((-1.0)*r22*x13077))+(((-1.0)*x13093)));
evalcond[2]=(x13088+x13085+(((-1.0)*x13079*x13080))+(((-1.0)*r01*sj0*x13082))+(((-1.0)*x13093)));
evalcond[3]=(((r20*x13081))+((cj1*x13086))+(((0.09736)*sj1))+(((-0.026255)*r21*sj6))+(((-0.1264)*cj1))+pz+(((-1.0)*x13074*x13078))+(((0.02626)*x13087))+(((0.0718)*x13084)));
evalcond[4]=((((-1.0)*r01*x13079*x13083))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x13077))+x13090+((sj5*sj6*x13080))+(((-1.0)*x13087))+(((-1.0)*r00*x13082*x13083)));
evalcond[5]=(((r00*sj0*x13081))+(((-0.1264)*sj1))+(((-0.09736)*cj1))+(((-0.02626)*x13084))+((sj1*x13086))+(((-1.0)*x13075*x13078))+(((-0.0718)*x13090))+(((-1.0)*x13080*x13081))+((px*sj0))+(((-0.026255)*x13089))+(((-1.0)*cj0*py))+(((0.026255)*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13094=(cj5*cj6);
IkReal x13095=(r11*sj0);
IkReal x13096=(cj0*sj6);
IkReal x13097=(cj6*sj5);
IkReal x13098=((1.0)*cj0);
IkReal x13099=(r10*sj0);
IkReal x13100=((1.0)*cj5);
IkReal x13101=(cj0*r02);
IkReal x13102=((1.0)*sj5);
IkReal x13103=(cj5*sj6);
IkReal x13104=(cj6*r00);
IkReal x13105=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=(((r20*x13103))+(((-1.0)*r22*x13102))+((r21*x13094)));
evalcond[2]=((((-1.0)*x13098*x13104))+(((-1.0)*cj6*x13099))+((sj6*x13095))+((r01*x13096)));
evalcond[3]=((1.0)+((sj5*x13105))+((sj5*x13101))+(((-1.0)*x13094*x13095))+(((-1.0)*sj6*x13099*x13100))+(((-1.0)*r01*x13094*x13098))+(((-1.0)*r00*x13096*x13100)));
evalcond[4]=(((x13095*x13097))+((r00*sj5*x13096))+((sj5*sj6*x13099))+((cj0*r01*x13097))+((cj5*x13101))+((cj5*x13105)));
evalcond[5]=((((-1.0)*r02*sj0*x13102))+((r01*sj0*x13094))+(((-1.0)*r11*x13094*x13098))+((cj0*r12*sj5))+(((-1.0)*r10*x13096*x13100))+((r00*sj0*x13103)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x13096))+(((-0.026255)*cj0*x13104))+(((0.026255)*sj6*x13095))+(((-1.0)*px*x13098))+(((-0.026255)*cj6*x13099))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13106=(sj1*sj6);
IkReal x13107=(r20*sj5);
IkReal x13108=(cj1*cj6);
IkReal x13109=((1.0)*r21);
IkReal x13110=(cj5*r22);
IkReal x13111=(cj1*sj6);
IkReal x13112=(cj6*sj1);
if( IKabs(((((-1.0)*x13106*x13109))+(((-1.0)*cj1*x13110))+(((-1.0)*x13107*x13111))+((r20*x13112))+(((-1.0)*sj5*x13108*x13109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x13108))+((sj1*x13110))+(((-1.0)*x13109*x13111))+((x13106*x13107))+((r21*sj5*x13112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x13106*x13109))+(((-1.0)*cj1*x13110))+(((-1.0)*x13107*x13111))+((r20*x13112))+(((-1.0)*sj5*x13108*x13109))))+IKsqr((((r20*x13108))+((sj1*x13110))+(((-1.0)*x13109*x13111))+((x13106*x13107))+((r21*sj5*x13112))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x13106*x13109))+(((-1.0)*cj1*x13110))+(((-1.0)*x13107*x13111))+((r20*x13112))+(((-1.0)*sj5*x13108*x13109))), (((r20*x13108))+((sj1*x13110))+(((-1.0)*x13109*x13111))+((x13106*x13107))+((r21*sj5*x13112))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13113=IKcos(j4);
IkReal x13114=IKsin(j4);
IkReal x13115=((1.0)*cj1);
IkReal x13116=(cj0*sj6);
IkReal x13117=((1.0)*cj5);
IkReal x13118=((1.0)*cj6);
IkReal x13119=(cj0*r10);
IkReal x13120=((0.026255)*cj6);
IkReal x13121=((1.0)*sj6);
IkReal x13122=(sj0*sj5);
IkReal x13123=(sj1*x13113);
IkReal x13124=(cj1*x13114);
IkReal x13125=(sj1*x13114);
IkReal x13126=(cj6*r00*sj0);
IkReal x13127=(r01*sj0*sj6);
IkReal x13128=(cj1*x13113);
IkReal x13129=((1.0)*x13125);
IkReal x13130=(x13113*x13115);
IkReal x13131=(x13130+x13129);
evalcond[0]=((((-1.0)*r21*x13121))+((cj6*r20))+(((-1.0)*x13131)));
evalcond[1]=((((-1.0)*r20*sj5*x13121))+(((-1.0)*r21*sj5*x13118))+(((-1.0)*x13114*x13115))+x13123+(((-1.0)*r22*x13117)));
evalcond[2]=((((-1.0)*r01*sj0*x13121))+x13124+x13126+(((-1.0)*x13118*x13119))+((r11*x13116))+(((-1.0)*x13123)));
evalcond[3]=((((-0.02626)*x13128))+(((-0.02626)*x13125))+(((0.0718)*x13124))+((r20*x13120))+(((-0.026255)*r21*sj6))+(((-0.1264)*cj1))+(((-0.09756)*sj1))+pz+(((-0.0718)*x13123)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*x13121*x13122))+((r10*sj5*x13116))+(((-1.0)*r01*x13118*x13122))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x13117))+(((-1.0)*x13131)));
evalcond[5]=((((-0.02626)*x13123))+(((-0.1264)*sj1))+(((0.0718)*x13128))+(((0.0718)*x13125))+((r00*sj0*x13120))+(((0.026255)*r11*x13116))+(((-0.026255)*x13127))+(((0.09756)*cj1))+(((0.02626)*x13124))+((px*sj0))+(((-1.0)*x13119*x13120))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13132=(cj0*sj5);
IkReal x13133=(cj5*cj6);
IkReal x13134=((1.0)*sj5);
IkReal x13135=((1.0)*cj0);
IkReal x13136=((1.0)*sj0);
IkReal x13137=(cj5*sj6);
IkReal x13138=(r10*x13137);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x13137))+((r21*x13133))+(((-1.0)*r22*x13134))+(((-1.0)*cj3)));
evalcond[2]=(sj3+(((-1.0)*r01*x13133*x13135))+(((-1.0)*r00*x13135*x13137))+(((-1.0)*r11*x13133*x13136))+((r12*sj0*sj5))+(((-1.0)*x13136*x13138))+((r02*x13132)));
evalcond[3]=((((-1.0)*r02*sj0*x13134))+(((-1.0)*x13135*x13138))+((r00*sj0*x13137))+((r12*x13132))+(((-1.0)*r11*x13133*x13135))+((r01*sj0*x13133)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x13139=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x13139))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x13139))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13140=(cj5*cj6);
IkReal x13141=(r11*sj0);
IkReal x13142=(cj0*sj6);
IkReal x13143=(cj6*sj5);
IkReal x13144=((1.0)*cj0);
IkReal x13145=(r10*sj0);
IkReal x13146=((1.0)*cj5);
IkReal x13147=(cj0*r02);
IkReal x13148=((1.0)*sj5);
IkReal x13149=(cj5*sj6);
IkReal x13150=(cj6*r00);
IkReal x13151=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x13149))+(((-1.0)*r22*x13148))+((r21*x13140)));
evalcond[2]=((((-1.0)*x13144*x13150))+(((-1.0)*cj6*x13145))+((r01*x13142))+((sj6*x13141)));
evalcond[3]=((1.0)+(((-1.0)*r00*x13142*x13146))+(((-1.0)*sj6*x13145*x13146))+(((-1.0)*x13140*x13141))+((sj5*x13151))+(((-1.0)*r01*x13140*x13144))+((sj5*x13147)));
evalcond[4]=(((cj5*x13151))+((sj5*sj6*x13145))+((x13141*x13143))+((r00*sj5*x13142))+((cj0*r01*x13143))+((cj5*x13147)));
evalcond[5]=(((r01*sj0*x13140))+(((-1.0)*r02*sj0*x13148))+((r00*sj0*x13149))+(((-1.0)*r10*x13142*x13146))+(((-1.0)*r11*x13140*x13144))+((cj0*r12*sj5)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x13142))+(((0.026255)*sj6*x13141))+(((-0.026255)*cj6*x13145))+(((-0.026255)*cj0*x13150))+(((-1.0)*px*x13144))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13152=(cj6*r20);
IkReal x13153=(r21*sj6);
if( IKabs((x13153+(((-1.0)*x13152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13152))+(((-6.96378830083565e-5)*x13153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13153+(((-1.0)*x13152))))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13152))+(((-6.96378830083565e-5)*x13153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13153+(((-1.0)*x13152))), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13152))+(((-6.96378830083565e-5)*x13153))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13154=IKcos(j4);
IkReal x13155=IKsin(j4);
IkReal x13156=((1.0)*cj5);
IkReal x13157=(cj0*r10);
IkReal x13158=(sj5*sj6);
IkReal x13159=((1.0)*cj6);
IkReal x13160=((0.026255)*cj6);
IkReal x13161=(r21*sj6);
IkReal x13162=(cj0*r11*sj6);
IkReal x13163=(cj6*r00*sj0);
IkReal x13164=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+(((-1.0)*x13161))+x13155);
evalcond[1]=((((-1.0)*r22*x13156))+(((-1.0)*r20*x13158))+(((-1.0)*x13154))+(((-1.0)*r21*sj5*x13159)));
evalcond[2]=((0.09736)+((r20*x13160))+(((0.0718)*x13154))+(((0.02626)*x13155))+pz+(((-0.026255)*x13161)));
evalcond[3]=((((-1.0)*x13157*x13159))+(((-1.0)*x13164))+x13154+x13162+x13163);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*x13158))+((x13157*x13158))+(((-1.0)*r01*sj0*sj5*x13159))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x13156))+x13155);
evalcond[5]=((-0.1246)+(((-1.0)*x13157*x13160))+((r00*sj0*x13160))+(((0.026255)*x13162))+(((0.02626)*x13154))+((px*sj0))+(((-0.026255)*x13164))+(((-1.0)*cj0*py))+(((-0.0718)*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13165=(cj5*cj6);
IkReal x13166=(r11*sj0);
IkReal x13167=(cj0*sj6);
IkReal x13168=(cj6*sj5);
IkReal x13169=((1.0)*cj0);
IkReal x13170=(r10*sj0);
IkReal x13171=((1.0)*cj5);
IkReal x13172=(cj0*r02);
IkReal x13173=((1.0)*sj5);
IkReal x13174=(cj5*sj6);
IkReal x13175=(cj6*r00);
IkReal x13176=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x13174))+(((-1.0)*r22*x13173))+((r21*x13165)));
evalcond[2]=((((-1.0)*x13169*x13175))+((r01*x13167))+((sj6*x13166))+(((-1.0)*cj6*x13170)));
evalcond[3]=((-1.0)+((sj5*x13176))+((sj5*x13172))+(((-1.0)*r01*x13165*x13169))+(((-1.0)*x13165*x13166))+(((-1.0)*sj6*x13170*x13171))+(((-1.0)*r00*x13167*x13171)));
evalcond[4]=(((sj5*sj6*x13170))+((cj0*r01*x13168))+((r00*sj5*x13167))+((x13166*x13168))+((cj5*x13176))+((cj5*x13172)));
evalcond[5]=(((r01*sj0*x13165))+(((-1.0)*r10*x13167*x13171))+((cj0*r12*sj5))+(((-1.0)*r11*x13165*x13169))+((r00*sj0*x13174))+(((-1.0)*r02*sj0*x13173)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x13167))+(((-0.026255)*cj0*x13175))+(((-0.026255)*cj6*x13170))+(((-1.0)*px*x13169))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x13166)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13177=IKcos(j4);
IkReal x13178=IKsin(j4);
IkReal x13179=((1.0)*cj5);
IkReal x13180=(cj0*r10);
IkReal x13181=(sj5*sj6);
IkReal x13182=((1.0)*cj6);
IkReal x13183=((0.026255)*cj6);
IkReal x13184=(r21*sj6);
IkReal x13185=(cj0*r11*sj6);
IkReal x13186=(cj6*r00*sj0);
IkReal x13187=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13184))+(((-1.0)*x13178))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x13182))+(((-1.0)*r20*x13181))+(((-1.0)*r22*x13179))+x13177);
evalcond[2]=((-0.09756)+(((-0.0718)*x13177))+(((-0.026255)*x13184))+((r20*x13183))+(((-0.02626)*x13178))+pz);
evalcond[3]=((((-1.0)*x13187))+(((-1.0)*x13180*x13182))+x13177+x13186+x13185);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x13182))+((cj0*cj6*r11*sj5))+((x13180*x13181))+x13178+(((-1.0)*r00*sj0*x13181))+(((-1.0)*r02*sj0*x13179)));
evalcond[5]=((-0.1246)+(((-0.0718)*x13178))+(((-0.026255)*x13187))+((r00*sj0*x13183))+(((0.02626)*x13177))+(((0.026255)*x13185))+(((-1.0)*x13180*x13183))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13188=(cj5*cj6);
IkReal x13189=((1.0)*sj0);
IkReal x13190=((1.0)*r22);
IkReal x13191=(cj0*sj5);
IkReal x13192=(cj5*sj6);
IkReal x13193=((1.0)*cj0);
IkReal x13194=(cj6*r20);
IkReal x13195=((1.0)*sj5);
IkReal x13196=(r21*sj6);
IkReal x13197=(x13192*x13193);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x13188))+((r20*x13192))+(((-1.0)*sj5*x13190)));
evalcond[2]=((((-1.0)*x13196))+x13194);
evalcond[3]=((((-1.0)*r20*sj6*x13195))+(((-1.0)*cj5*x13190))+(((-1.0)*cj6*r21*x13195)));
evalcond[4]=(((r02*x13191))+((r12*sj0*sj5))+(((-1.0)*r01*x13188*x13193))+(((-1.0)*r10*x13189*x13192))+(((-1.0)*r00*x13197))+(((-1.0)*r11*x13188*x13189)));
evalcond[5]=((((-1.0)*r02*sj5*x13189))+(((-1.0)*r10*x13197))+((r12*x13191))+((r00*sj0*x13192))+(((-1.0)*r11*x13188*x13193))+((r01*sj0*x13188)));
evalcond[6]=((-0.0001)+(((-0.026255)*x13196))+(((0.026255)*x13194))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13198=(cj0*cj6);
IkReal x13199=(sj0*sj6);
IkReal x13200=((1.0)*r11);
IkReal x13201=(cj6*sj0);
IkReal x13202=(cj0*sj6);
if( IKabs(((((-1.0)*x13199*x13200))+((r10*x13201))+((r00*x13198))+(((-1.0)*r01*x13202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13198))+((r01*x13199))+(((-1.0)*r00*x13201))+(((-1.0)*x13200*x13202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x13199*x13200))+((r10*x13201))+((r00*x13198))+(((-1.0)*r01*x13202))))+IKsqr((((r10*x13198))+((r01*x13199))+(((-1.0)*r00*x13201))+(((-1.0)*x13200*x13202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x13199*x13200))+((r10*x13201))+((r00*x13198))+(((-1.0)*r01*x13202))), (((r10*x13198))+((r01*x13199))+(((-1.0)*r00*x13201))+(((-1.0)*x13200*x13202))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13203=IKcos(j4);
IkReal x13204=IKsin(j4);
IkReal x13205=(r11*sj6);
IkReal x13206=((0.026255)*cj0);
IkReal x13207=(r01*sj6);
IkReal x13208=(sj0*sj5);
IkReal x13209=(cj6*r11);
IkReal x13210=(r10*sj6);
IkReal x13211=(cj5*r12);
IkReal x13212=(cj6*sj0);
IkReal x13213=((1.0)*sj0);
IkReal x13214=(cj5*r02);
IkReal x13215=((1.0)*r10);
IkReal x13216=(cj0*sj5);
IkReal x13217=(r00*sj6);
IkReal x13218=((0.026255)*sj0);
IkReal x13219=(cj0*cj6);
IkReal x13220=((1.0)*cj0);
IkReal x13221=(cj6*r01);
evalcond[0]=(((sj0*x13205))+((cj0*x13207))+x13204+(((-1.0)*x13212*x13215))+(((-1.0)*r00*x13219)));
evalcond[1]=((((-1.0)*x13207*x13213))+((r00*x13212))+(((-1.0)*x13215*x13219))+((cj0*x13205))+x13203);
evalcond[2]=(((x13216*x13217))+((sj0*x13211))+((x13208*x13210))+((cj0*x13214))+(((-1.0)*x13203))+((x13216*x13221))+((x13208*x13209)));
evalcond[3]=(((x13210*x13216))+(((-1.0)*x13208*x13221))+(((-1.0)*x13213*x13214))+(((-1.0)*x13208*x13217))+((x13209*x13216))+((cj0*x13211))+x13204);
evalcond[4]=((-0.1246)+(((-1.0)*x13207*x13218))+(((-1.0)*py*x13220))+((x13205*x13206))+(((0.026255)*r00*x13212))+(((-0.0718)*x13204))+(((-1.0)*cj6*r10*x13206))+((px*sj0))+(((0.02626)*x13203)));
evalcond[5]=((0.21226)+((x13205*x13218))+(((0.0718)*x13203))+(((-1.0)*py*x13213))+(((-1.0)*cj6*r00*x13206))+(((-1.0)*px*x13220))+(((-0.026255)*r10*x13212))+(((0.02626)*x13204))+((x13206*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13222=(cj5*cj6);
IkReal x13223=((1.0)*sj0);
IkReal x13224=((1.0)*r22);
IkReal x13225=(cj0*sj5);
IkReal x13226=(cj5*sj6);
IkReal x13227=((1.0)*cj0);
IkReal x13228=(cj6*r20);
IkReal x13229=((1.0)*sj5);
IkReal x13230=(r21*sj6);
IkReal x13231=(x13226*x13227);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x13222))+(((-1.0)*sj5*x13224))+((r20*x13226)));
evalcond[2]=(x13228+(((-1.0)*x13230)));
evalcond[3]=((((-1.0)*cj5*x13224))+(((-1.0)*cj6*r21*x13229))+(((-1.0)*r20*sj6*x13229)));
evalcond[4]=((((-1.0)*r11*x13222*x13223))+((r02*x13225))+(((-1.0)*r00*x13231))+((r12*sj0*sj5))+(((-1.0)*r01*x13222*x13227))+(((-1.0)*r10*x13223*x13226)));
evalcond[5]=(((r01*sj0*x13222))+((r00*sj0*x13226))+(((-1.0)*r11*x13222*x13227))+(((-1.0)*r02*sj5*x13223))+(((-1.0)*r10*x13231))+((r12*x13225)));
evalcond[6]=((-0.0001)+(((0.026255)*x13228))+(((-0.026255)*x13230))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13232=(sj0*sj6);
IkReal x13233=(cj6*r10);
IkReal x13234=((1.0)*sj0);
IkReal x13235=(cj6*r00);
IkReal x13236=(cj0*sj6);
if( IKabs((((r01*x13236))+((r11*x13232))+(((-1.0)*x13233*x13234))+(((-1.0)*cj0*x13235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x13232))+(((-1.0)*x13234*x13235))+((cj0*x13233))+(((-1.0)*r11*x13236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13236))+((r11*x13232))+(((-1.0)*x13233*x13234))+(((-1.0)*cj0*x13235))))+IKsqr((((r01*x13232))+(((-1.0)*x13234*x13235))+((cj0*x13233))+(((-1.0)*r11*x13236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x13236))+((r11*x13232))+(((-1.0)*x13233*x13234))+(((-1.0)*cj0*x13235))), (((r01*x13232))+(((-1.0)*x13234*x13235))+((cj0*x13233))+(((-1.0)*r11*x13236))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13237=IKcos(j4);
IkReal x13238=IKsin(j4);
IkReal x13239=(r11*sj6);
IkReal x13240=((0.026255)*cj0);
IkReal x13241=(r01*sj6);
IkReal x13242=(sj0*sj5);
IkReal x13243=(cj6*r11);
IkReal x13244=(r10*sj6);
IkReal x13245=(cj5*r12);
IkReal x13246=(cj6*sj0);
IkReal x13247=((1.0)*sj0);
IkReal x13248=(cj5*r02);
IkReal x13249=((1.0)*r10);
IkReal x13250=(cj0*sj5);
IkReal x13251=(r00*sj6);
IkReal x13252=((0.026255)*sj0);
IkReal x13253=(cj0*cj6);
IkReal x13254=((1.0)*cj0);
IkReal x13255=(cj6*r01);
evalcond[0]=(((r00*x13246))+(((-1.0)*x13249*x13253))+((cj0*x13239))+x13237+(((-1.0)*x13241*x13247)));
evalcond[1]=((((-1.0)*r00*x13253))+(((-1.0)*x13246*x13249))+((sj0*x13239))+((cj0*x13241))+(((-1.0)*x13238)));
evalcond[2]=(((sj0*x13245))+((x13250*x13255))+((x13250*x13251))+((x13242*x13243))+((x13242*x13244))+((cj0*x13248))+x13237);
evalcond[3]=(((x13243*x13250))+(((-1.0)*x13247*x13248))+((x13244*x13250))+((cj0*x13245))+(((-1.0)*x13242*x13255))+(((-1.0)*x13242*x13251))+x13238);
evalcond[4]=((-0.1246)+(((0.02626)*x13237))+(((-1.0)*py*x13254))+(((0.026255)*r00*x13246))+(((-0.0718)*x13238))+((x13239*x13240))+(((-1.0)*cj6*r10*x13240))+((px*sj0))+(((-1.0)*x13241*x13252)));
evalcond[5]=((0.01734)+(((-1.0)*py*x13247))+((x13239*x13252))+(((-0.0718)*x13237))+(((-0.026255)*r10*x13246))+((x13240*x13241))+(((-1.0)*px*x13254))+(((-1.0)*cj6*r00*x13240))+(((-0.02626)*x13238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13256=((1.0)*sj5);
IkReal x13257=((1.0)*sj6);
CheckValue<IkReal> x13258=IKPowWithIntegerCheck(cj3,-1);
if(!x13258.valid){
continue;
}
CheckValue<IkReal> x13259=IKPowWithIntegerCheck(sj3,-1);
if(!x13259.valid){
continue;
}
if( IKabs(((x13258.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x13257))+(((-1.0)*r11*sj0*x13257))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13259.value)*(((((-1.0)*cj6*r21*x13256))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x13256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13258.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x13257))+(((-1.0)*r11*sj0*x13257))+((cj0*cj6*r00))))))+IKsqr(((x13259.value)*(((((-1.0)*cj6*r21*x13256))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x13256))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13258.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x13257))+(((-1.0)*r11*sj0*x13257))+((cj0*cj6*r00))))), ((x13259.value)*(((((-1.0)*cj6*r21*x13256))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x13256))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13260=IKcos(j4);
IkReal x13261=IKsin(j4);
IkReal x13262=(r11*sj0);
IkReal x13263=((0.026255)*sj6);
IkReal x13264=(cj0*r01);
IkReal x13265=(cj5*r12);
IkReal x13266=(cj6*sj5);
IkReal x13267=(r10*sj0);
IkReal x13268=(sj5*sj6);
IkReal x13269=(cj0*r11);
IkReal x13270=((1.0)*cj5);
IkReal x13271=((1.0)*cj6);
IkReal x13272=(cj0*r10);
IkReal x13273=((1.0)*sj0);
IkReal x13274=(cj0*r00);
IkReal x13275=((0.026255)*cj6);
IkReal x13276=((1.0)*r21);
IkReal x13277=((1.0)*cj0);
IkReal x13278=(sj3*x13261);
IkReal x13279=(r00*x13275);
IkReal x13280=((1.0)*x13260);
IkReal x13281=(cj3*x13261);
IkReal x13282=((0.0718)*x13260);
evalcond[0]=((((-1.0)*sj6*x13276))+((cj6*r20))+x13278);
evalcond[1]=((((-1.0)*sj3*x13280))+(((-1.0)*x13266*x13276))+(((-1.0)*r20*x13268))+(((-1.0)*r22*x13270)));
evalcond[2]=(((cj6*r00*sj0))+(((-1.0)*r01*sj6*x13273))+(((-1.0)*x13271*x13272))+x13260+((sj6*x13269)));
evalcond[3]=((((-1.0)*x13267*x13271))+(((-1.0)*x13271*x13274))+x13281+((sj6*x13262))+((sj6*x13264)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x13263))+(((0.02626)*x13278))+((r20*x13275))+((sj3*x13282))+pz+(((0.09746)*sj3)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x13265))+(((-1.0)*cj3*x13280))+((x13267*x13268))+((x13262*x13266))+((x13268*x13274))+((x13264*x13266)));
evalcond[6]=((((-1.0)*r01*x13266*x13273))+((x13266*x13269))+(((-1.0)*r00*x13268*x13273))+(((-1.0)*r02*sj0*x13270))+x13261+((x13268*x13272))+((cj0*x13265)));
evalcond[7]=((-0.1246)+(((-0.0718)*x13261))+(((0.02626)*x13260))+((sj0*x13279))+(((-1.0)*x13272*x13275))+((px*sj0))+(((-1.0)*r01*sj0*x13263))+(((-1.0)*py*x13277))+((x13263*x13269)));
evalcond[8]=((0.1148)+(((-1.0)*x13274*x13275))+(((-1.0)*x13267*x13275))+(((-1.0)*px*x13277))+(((0.02626)*x13281))+(((0.09746)*cj3))+((x13262*x13263))+((cj3*x13282))+(((-1.0)*py*x13273))+((x13263*x13264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13283=((1.0)*cj6);
CheckValue<IkReal> x13284=IKPowWithIntegerCheck(sj3,-1);
if(!x13284.valid){
continue;
}
if( IKabs(((x13284.value)*(((((-1.0)*r20*x13283))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*x13283))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13284.value)*(((((-1.0)*r20*x13283))+((r21*sj6))))))+IKsqr(((((-1.0)*r00*sj0*x13283))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13284.value)*(((((-1.0)*r20*x13283))+((r21*sj6))))), ((((-1.0)*r00*sj0*x13283))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13285=IKcos(j4);
IkReal x13286=IKsin(j4);
IkReal x13287=(r11*sj0);
IkReal x13288=((0.026255)*sj6);
IkReal x13289=(cj0*r01);
IkReal x13290=(cj5*r12);
IkReal x13291=(cj6*sj5);
IkReal x13292=(r10*sj0);
IkReal x13293=(sj5*sj6);
IkReal x13294=(cj0*r11);
IkReal x13295=((1.0)*cj5);
IkReal x13296=((1.0)*cj6);
IkReal x13297=(cj0*r10);
IkReal x13298=((1.0)*sj0);
IkReal x13299=(cj0*r00);
IkReal x13300=((0.026255)*cj6);
IkReal x13301=((1.0)*r21);
IkReal x13302=((1.0)*cj0);
IkReal x13303=(sj3*x13286);
IkReal x13304=(r00*x13300);
IkReal x13305=((1.0)*x13285);
IkReal x13306=(cj3*x13286);
IkReal x13307=((0.0718)*x13285);
evalcond[0]=((((-1.0)*sj6*x13301))+((cj6*r20))+x13303);
evalcond[1]=((((-1.0)*x13291*x13301))+(((-1.0)*r20*x13293))+(((-1.0)*r22*x13295))+(((-1.0)*sj3*x13305)));
evalcond[2]=((((-1.0)*x13296*x13297))+((sj6*x13294))+((cj6*r00*sj0))+x13285+(((-1.0)*r01*sj6*x13298)));
evalcond[3]=((((-1.0)*x13296*x13299))+((sj6*x13289))+((sj6*x13287))+(((-1.0)*x13292*x13296))+x13306);
evalcond[4]=((-0.0001)+(((0.02626)*x13303))+(((-1.0)*r21*x13288))+((r20*x13300))+((sj3*x13307))+pz+(((0.09746)*sj3)));
evalcond[5]=(((x13287*x13291))+((sj0*x13290))+((cj0*cj5*r02))+(((-1.0)*cj3*x13305))+((x13292*x13293))+((x13289*x13291))+((x13293*x13299)));
evalcond[6]=(((cj0*x13290))+(((-1.0)*r02*sj0*x13295))+(((-1.0)*r01*x13291*x13298))+((x13291*x13294))+(((-1.0)*r00*x13293*x13298))+x13286+((x13293*x13297)));
evalcond[7]=((-0.1246)+(((-1.0)*py*x13302))+((sj0*x13304))+(((-1.0)*x13297*x13300))+(((-0.0718)*x13286))+(((0.02626)*x13285))+((px*sj0))+((x13288*x13294))+(((-1.0)*r01*sj0*x13288)));
evalcond[8]=((0.1148)+(((-1.0)*x13292*x13300))+((x13288*x13289))+(((0.02626)*x13306))+((x13287*x13288))+((cj3*x13307))+(((-1.0)*x13299*x13300))+(((-1.0)*px*x13302))+(((0.09746)*cj3))+(((-1.0)*py*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13308=((1.0)*sj5);
CheckValue<IkReal> x13309=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x13309.valid){
continue;
}
CheckValue<IkReal> x13310 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x13308))+(((-1.0)*r20*sj6*x13308))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x13310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13309.value)))+(x13310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13311=IKcos(j4);
IkReal x13312=IKsin(j4);
IkReal x13313=(r11*sj0);
IkReal x13314=((0.026255)*sj6);
IkReal x13315=(cj0*r01);
IkReal x13316=(cj5*r12);
IkReal x13317=(cj6*sj5);
IkReal x13318=(r10*sj0);
IkReal x13319=(sj5*sj6);
IkReal x13320=(cj0*r11);
IkReal x13321=((1.0)*cj5);
IkReal x13322=((1.0)*cj6);
IkReal x13323=(cj0*r10);
IkReal x13324=((1.0)*sj0);
IkReal x13325=(cj0*r00);
IkReal x13326=((0.026255)*cj6);
IkReal x13327=((1.0)*r21);
IkReal x13328=((1.0)*cj0);
IkReal x13329=(sj3*x13312);
IkReal x13330=(r00*x13326);
IkReal x13331=((1.0)*x13311);
IkReal x13332=(cj3*x13312);
IkReal x13333=((0.0718)*x13311);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x13327))+x13329);
evalcond[1]=((((-1.0)*sj3*x13331))+(((-1.0)*r22*x13321))+(((-1.0)*x13317*x13327))+(((-1.0)*r20*x13319)));
evalcond[2]=((((-1.0)*r01*sj6*x13324))+((cj6*r00*sj0))+(((-1.0)*x13322*x13323))+((sj6*x13320))+x13311);
evalcond[3]=((((-1.0)*x13318*x13322))+(((-1.0)*x13322*x13325))+((sj6*x13315))+((sj6*x13313))+x13332);
evalcond[4]=((-0.0001)+(((-1.0)*r21*x13314))+(((0.02626)*x13329))+((r20*x13326))+pz+((sj3*x13333))+(((0.09746)*sj3)));
evalcond[5]=(((sj0*x13316))+((cj0*cj5*r02))+((x13319*x13325))+(((-1.0)*cj3*x13331))+((x13318*x13319))+((x13313*x13317))+((x13315*x13317)));
evalcond[6]=((((-1.0)*r02*sj0*x13321))+((x13317*x13320))+(((-1.0)*r01*x13317*x13324))+(((-1.0)*r00*x13319*x13324))+((x13319*x13323))+((cj0*x13316))+x13312);
evalcond[7]=((-0.1246)+(((-1.0)*r01*sj0*x13314))+(((0.02626)*x13311))+((x13314*x13320))+(((-1.0)*x13323*x13326))+(((-0.0718)*x13312))+(((-1.0)*py*x13328))+((px*sj0))+((sj0*x13330)));
evalcond[8]=((0.1148)+((x13314*x13315))+((cj3*x13333))+(((-1.0)*x13318*x13326))+(((0.02626)*x13332))+(((-1.0)*py*x13324))+(((-1.0)*x13325*x13326))+(((-1.0)*px*x13328))+(((0.09746)*cj3))+((x13313*x13314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13334=(cj0*sj5);
IkReal x13335=(cj5*cj6);
IkReal x13336=((1.0)*sj5);
IkReal x13337=((1.0)*cj0);
IkReal x13338=((1.0)*sj0);
IkReal x13339=(cj5*sj6);
IkReal x13340=(r10*x13339);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(cj3+(((-1.0)*r22*x13336))+((r20*x13339))+((r21*x13335)));
evalcond[2]=(sj3+((r02*x13334))+(((-1.0)*r01*x13335*x13337))+((r12*sj0*sj5))+(((-1.0)*r00*x13337*x13339))+(((-1.0)*x13338*x13340))+(((-1.0)*r11*x13335*x13338)));
evalcond[3]=(((r01*sj0*x13335))+(((-1.0)*r02*sj0*x13336))+((r00*sj0*x13339))+(((-1.0)*x13337*x13340))+((r12*x13334))+(((-1.0)*r11*x13335*x13337)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13341=(cj5*cj6);
IkReal x13342=(r11*sj0);
IkReal x13343=(cj0*sj6);
IkReal x13344=(cj6*sj5);
IkReal x13345=((1.0)*cj0);
IkReal x13346=(r10*sj0);
IkReal x13347=((1.0)*cj5);
IkReal x13348=(cj0*r02);
IkReal x13349=((1.0)*sj5);
IkReal x13350=(cj5*sj6);
IkReal x13351=(cj6*r00);
IkReal x13352=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x13350))+((r21*x13341))+(((-1.0)*r22*x13349)));
evalcond[2]=((((-1.0)*x13345*x13351))+(((-1.0)*cj6*x13346))+((sj6*x13342))+((r01*x13343)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13341*x13345))+(((-1.0)*x13341*x13342))+(((-1.0)*r00*x13343*x13347))+((sj5*x13352))+((sj5*x13348))+(((-1.0)*sj6*x13346*x13347)));
evalcond[4]=(((x13342*x13344))+((r00*sj5*x13343))+((sj5*sj6*x13346))+((cj5*x13348))+((cj5*x13352))+((cj0*r01*x13344)));
evalcond[5]=((((-1.0)*r10*x13343*x13347))+((cj0*r12*sj5))+((r01*sj0*x13341))+((r00*sj0*x13350))+(((-1.0)*r11*x13341*x13345))+(((-1.0)*r02*sj0*x13349)));
evalcond[6]=((0.1148)+(((0.026255)*sj6*x13342))+(((0.026255)*r01*x13343))+(((-0.026255)*cj6*x13346))+(((-1.0)*px*x13345))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x13351)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13353=IKcos(j4);
IkReal x13354=IKsin(j4);
IkReal x13355=((1.0)*cj5);
IkReal x13356=(cj0*r10);
IkReal x13357=(sj5*sj6);
IkReal x13358=((1.0)*cj6);
IkReal x13359=((0.026255)*cj6);
IkReal x13360=(r21*sj6);
IkReal x13361=((1.0)*x13354);
IkReal x13362=(cj0*r11*sj6);
IkReal x13363=(cj6*r00*sj0);
IkReal x13364=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13360))+((cj6*r20))+(((-1.0)*x13361)));
evalcond[1]=((((-1.0)*r22*x13355))+(((-1.0)*r20*x13357))+(((-1.0)*r21*sj5*x13358))+x13353);
evalcond[2]=((-0.09736)+(((-0.02626)*x13354))+(((-0.0718)*x13353))+((r20*x13359))+(((-0.026255)*x13360))+pz);
evalcond[3]=((((-1.0)*x13364))+(((-1.0)*x13356*x13358))+(((-1.0)*x13353))+x13362+x13363);
evalcond[4]=((((-1.0)*r02*sj0*x13355))+((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x13358))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x13357))+(((-1.0)*x13361))+((x13356*x13357)));
evalcond[5]=((0.1246)+(((-0.02626)*x13353))+(((-1.0)*x13356*x13359))+(((-0.026255)*x13364))+((r00*sj0*x13359))+(((0.026255)*x13362))+((px*sj0))+(((0.0718)*x13354))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13365=(cj5*cj6);
IkReal x13366=(r11*sj0);
IkReal x13367=(cj0*sj6);
IkReal x13368=(cj6*sj5);
IkReal x13369=((1.0)*cj0);
IkReal x13370=(r10*sj0);
IkReal x13371=((1.0)*cj5);
IkReal x13372=(cj0*r02);
IkReal x13373=((1.0)*sj5);
IkReal x13374=(cj5*sj6);
IkReal x13375=(cj6*r00);
IkReal x13376=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x13373))+((r20*x13374))+((r21*x13365)));
evalcond[2]=(((sj6*x13366))+((r01*x13367))+(((-1.0)*x13369*x13375))+(((-1.0)*cj6*x13370)));
evalcond[3]=((-1.0)+(((-1.0)*x13365*x13366))+(((-1.0)*sj6*x13370*x13371))+(((-1.0)*r01*x13365*x13369))+((sj5*x13376))+((sj5*x13372))+(((-1.0)*r00*x13367*x13371)));
evalcond[4]=(((cj5*x13376))+((cj5*x13372))+((x13366*x13368))+((cj0*r01*x13368))+((r00*sj5*x13367))+((sj5*sj6*x13370)));
evalcond[5]=(((r01*sj0*x13365))+((r00*sj0*x13374))+(((-1.0)*r02*sj0*x13373))+(((-1.0)*r11*x13365*x13369))+((cj0*r12*sj5))+(((-1.0)*r10*x13367*x13371)));
evalcond[6]=((0.1148)+(((-1.0)*px*x13369))+(((0.026255)*sj6*x13366))+(((0.026255)*r01*x13367))+(((-0.026255)*cj0*x13375))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x13370)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13377=(cj6*r20);
IkReal x13378=(r21*sj6);
if( IKabs((x13378+(((-1.0)*x13377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13377))+(((-6.96378830083565e-5)*x13378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13378+(((-1.0)*x13377))))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13377))+(((-6.96378830083565e-5)*x13378))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13378+(((-1.0)*x13377))), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13377))+(((-6.96378830083565e-5)*x13378))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13379=IKcos(j4);
IkReal x13380=IKsin(j4);
IkReal x13381=((1.0)*cj5);
IkReal x13382=(cj0*r10);
IkReal x13383=(sj5*sj6);
IkReal x13384=((1.0)*cj6);
IkReal x13385=((0.026255)*cj6);
IkReal x13386=(r21*sj6);
IkReal x13387=((1.0)*x13379);
IkReal x13388=(cj0*r11*sj6);
IkReal x13389=(cj6*r00*sj0);
IkReal x13390=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13386))+((cj6*r20))+x13380);
evalcond[1]=((((-1.0)*r22*x13381))+(((-1.0)*r21*sj5*x13384))+(((-1.0)*x13387))+(((-1.0)*r20*x13383)));
evalcond[2]=((0.09756)+(((0.02626)*x13380))+((r20*x13385))+(((0.0718)*x13379))+(((-0.026255)*x13386))+pz);
evalcond[3]=((((-1.0)*x13390))+(((-1.0)*x13382*x13384))+(((-1.0)*x13387))+x13388+x13389);
evalcond[4]=((((-1.0)*r02*sj0*x13381))+(((-1.0)*x13380))+((cj0*cj5*r12))+((x13382*x13383))+(((-1.0)*r01*sj0*sj5*x13384))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x13383)));
evalcond[5]=((0.1246)+(((0.0718)*x13380))+((r00*sj0*x13385))+(((-0.026255)*x13390))+(((-1.0)*x13382*x13385))+((px*sj0))+(((0.026255)*x13388))+(((-0.02626)*x13379))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13391=(cj5*cj6);
IkReal x13392=((1.0)*sj0);
IkReal x13393=((1.0)*r22);
IkReal x13394=(cj0*sj5);
IkReal x13395=(cj5*sj6);
IkReal x13396=((1.0)*cj0);
IkReal x13397=(cj6*r20);
IkReal x13398=((1.0)*sj5);
IkReal x13399=(r21*sj6);
IkReal x13400=(x13395*x13396);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x13393))+((r21*x13391))+((r20*x13395)));
evalcond[2]=((((-1.0)*x13399))+x13397);
evalcond[3]=((((-1.0)*cj5*x13393))+(((-1.0)*r20*sj6*x13398))+(((-1.0)*cj6*r21*x13398)));
evalcond[4]=((((-1.0)*r01*x13391*x13396))+(((-1.0)*r10*x13392*x13395))+((r12*sj0*sj5))+(((-1.0)*r00*x13400))+(((-1.0)*r11*x13391*x13392))+((r02*x13394)));
evalcond[5]=(((r01*sj0*x13391))+((r12*x13394))+((r00*sj0*x13395))+(((-1.0)*r10*x13400))+(((-1.0)*r02*sj5*x13392))+(((-1.0)*r11*x13391*x13396)));
evalcond[6]=((0.0001)+(((-0.026255)*x13399))+pz+(((0.026255)*x13397)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13401=(cj0*cj6);
IkReal x13402=(cj6*sj0);
IkReal x13403=(cj0*sj6);
IkReal x13404=((1.0)*sj0*sj6);
if( IKabs((((r00*x13401))+((r10*x13402))+(((-1.0)*r11*x13404))+(((-1.0)*r01*x13403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x13401))+((r00*x13402))+((r11*x13403))+(((-1.0)*r01*x13404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x13401))+((r10*x13402))+(((-1.0)*r11*x13404))+(((-1.0)*r01*x13403))))+IKsqr(((((-1.0)*r10*x13401))+((r00*x13402))+((r11*x13403))+(((-1.0)*r01*x13404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x13401))+((r10*x13402))+(((-1.0)*r11*x13404))+(((-1.0)*r01*x13403))), ((((-1.0)*r10*x13401))+((r00*x13402))+((r11*x13403))+(((-1.0)*r01*x13404))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13405=IKsin(j4);
IkReal x13406=IKcos(j4);
IkReal x13407=(r11*sj6);
IkReal x13408=((0.026255)*cj0);
IkReal x13409=(r01*sj6);
IkReal x13410=(sj0*sj5);
IkReal x13411=(cj6*r11);
IkReal x13412=(r10*sj6);
IkReal x13413=(cj5*r12);
IkReal x13414=(cj6*sj0);
IkReal x13415=((1.0)*sj0);
IkReal x13416=(cj5*r02);
IkReal x13417=((1.0)*r10);
IkReal x13418=(cj0*sj5);
IkReal x13419=(r00*sj6);
IkReal x13420=((0.026255)*sj0);
IkReal x13421=(cj0*cj6);
IkReal x13422=((1.0)*cj0);
IkReal x13423=(cj6*r01);
IkReal x13424=((1.0)*x13406);
evalcond[0]=(x13405+(((-1.0)*x13414*x13417))+((sj0*x13407))+(((-1.0)*r00*x13421))+((cj0*x13409)));
evalcond[1]=((((-1.0)*x13409*x13415))+(((-1.0)*x13424))+((cj0*x13407))+((r00*x13414))+(((-1.0)*x13417*x13421)));
evalcond[2]=(((x13418*x13419))+((cj0*x13416))+((x13410*x13412))+((x13410*x13411))+((x13418*x13423))+(((-1.0)*x13424))+((sj0*x13413)));
evalcond[3]=((((-1.0)*x13410*x13423))+(((-1.0)*x13410*x13419))+((cj0*x13413))+((x13412*x13418))+((x13411*x13418))+(((-1.0)*x13415*x13416))+(((-1.0)*x13405)));
evalcond[4]=((0.1246)+(((-1.0)*py*x13422))+(((-1.0)*cj6*r10*x13408))+(((0.0718)*x13405))+(((-1.0)*x13409*x13420))+(((0.026255)*r00*x13414))+(((-0.02626)*x13406))+((px*sj0))+((x13407*x13408)));
evalcond[5]=((0.21226)+(((0.02626)*x13405))+((x13407*x13420))+(((-1.0)*py*x13415))+(((0.0718)*x13406))+((x13408*x13409))+(((-1.0)*cj6*r00*x13408))+(((-1.0)*px*x13422))+(((-0.026255)*r10*x13414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13425=(cj5*cj6);
IkReal x13426=((1.0)*sj0);
IkReal x13427=((1.0)*r22);
IkReal x13428=(cj0*sj5);
IkReal x13429=(cj5*sj6);
IkReal x13430=((1.0)*cj0);
IkReal x13431=(cj6*r20);
IkReal x13432=((1.0)*sj5);
IkReal x13433=(r21*sj6);
IkReal x13434=(x13429*x13430);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x13427))+((r21*x13425))+((r20*x13429)));
evalcond[2]=(x13431+(((-1.0)*x13433)));
evalcond[3]=((((-1.0)*cj6*r21*x13432))+(((-1.0)*cj5*x13427))+(((-1.0)*r20*sj6*x13432)));
evalcond[4]=(((r12*sj0*sj5))+((r02*x13428))+(((-1.0)*r11*x13425*x13426))+(((-1.0)*r00*x13434))+(((-1.0)*r01*x13425*x13430))+(((-1.0)*r10*x13426*x13429)));
evalcond[5]=(((r00*sj0*x13429))+(((-1.0)*r11*x13425*x13430))+((r01*sj0*x13425))+((r12*x13428))+(((-1.0)*r02*sj5*x13426))+(((-1.0)*r10*x13434)));
evalcond[6]=((0.0001)+(((0.026255)*x13431))+pz+(((-0.026255)*x13433)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13435=(sj0*sj6);
IkReal x13436=(cj0*sj6);
IkReal x13437=(cj6*r00);
IkReal x13438=((1.0)*cj6*r10);
if( IKabs((((r01*x13436))+(((-1.0)*sj0*x13438))+(((-1.0)*cj0*x13437))+((r11*x13435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x13435))+((r11*x13436))+(((-1.0)*cj0*x13438))+((sj0*x13437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13436))+(((-1.0)*sj0*x13438))+(((-1.0)*cj0*x13437))+((r11*x13435))))+IKsqr(((((-1.0)*r01*x13435))+((r11*x13436))+(((-1.0)*cj0*x13438))+((sj0*x13437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x13436))+(((-1.0)*sj0*x13438))+(((-1.0)*cj0*x13437))+((r11*x13435))), ((((-1.0)*r01*x13435))+((r11*x13436))+(((-1.0)*cj0*x13438))+((sj0*x13437))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13439=IKcos(j4);
IkReal x13440=IKsin(j4);
IkReal x13441=(r11*sj6);
IkReal x13442=((0.026255)*cj0);
IkReal x13443=(r01*sj6);
IkReal x13444=(sj0*sj5);
IkReal x13445=(cj6*r11);
IkReal x13446=(r10*sj6);
IkReal x13447=(cj5*r12);
IkReal x13448=(cj6*sj0);
IkReal x13449=((1.0)*sj0);
IkReal x13450=(cj5*r02);
IkReal x13451=((1.0)*r10);
IkReal x13452=(cj0*sj5);
IkReal x13453=(r00*sj6);
IkReal x13454=((0.026255)*sj0);
IkReal x13455=(cj0*cj6);
IkReal x13456=((1.0)*cj0);
IkReal x13457=(cj6*r01);
IkReal x13458=((1.0)*x13440);
evalcond[0]=(((cj0*x13443))+(((-1.0)*x13448*x13451))+(((-1.0)*x13458))+(((-1.0)*r00*x13455))+((sj0*x13441)));
evalcond[1]=(((cj0*x13441))+(((-1.0)*x13439))+((r00*x13448))+(((-1.0)*x13443*x13449))+(((-1.0)*x13451*x13455)));
evalcond[2]=(x13439+((x13444*x13446))+((x13444*x13445))+((cj0*x13450))+((x13452*x13457))+((x13452*x13453))+((sj0*x13447)));
evalcond[3]=(((cj0*x13447))+(((-1.0)*x13444*x13453))+(((-1.0)*x13444*x13457))+(((-1.0)*x13458))+(((-1.0)*x13449*x13450))+((x13445*x13452))+((x13446*x13452)));
evalcond[4]=((0.1246)+(((0.0718)*x13440))+(((-1.0)*py*x13456))+(((-1.0)*x13443*x13454))+(((0.026255)*r00*x13448))+(((-0.02626)*x13439))+(((-1.0)*cj6*r10*x13442))+((px*sj0))+((x13441*x13442)));
evalcond[5]=((0.01734)+((x13441*x13454))+(((-0.0718)*x13439))+(((-1.0)*cj6*r00*x13442))+((x13442*x13443))+(((-1.0)*px*x13456))+(((-1.0)*py*x13449))+(((-0.026255)*r10*x13448))+(((-0.02626)*x13440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13459=((1.0)*sj6);
CheckValue<IkReal> x13460=IKPowWithIntegerCheck(cj3,-1);
if(!x13460.valid){
continue;
}
CheckValue<IkReal> x13461=IKPowWithIntegerCheck(sj3,-1);
if(!x13461.valid){
continue;
}
if( IKabs(((x13460.value)*(((((-1.0)*cj0*r01*x13459))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13459))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13461.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13460.value)*(((((-1.0)*cj0*r01*x13459))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13459))+((cj0*cj6*r00))))))+IKsqr(((x13461.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13460.value)*(((((-1.0)*cj0*r01*x13459))+((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13459))+((cj0*cj6*r00))))), ((x13461.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13462=IKsin(j4);
IkReal x13463=IKcos(j4);
IkReal x13464=(r11*sj0);
IkReal x13465=((0.026255)*sj6);
IkReal x13466=(cj0*r01);
IkReal x13467=(cj5*r12);
IkReal x13468=(cj6*sj5);
IkReal x13469=(r10*sj0);
IkReal x13470=(sj5*sj6);
IkReal x13471=(cj0*r11);
IkReal x13472=((1.0)*cj5);
IkReal x13473=((1.0)*cj6);
IkReal x13474=(cj0*r10);
IkReal x13475=((1.0)*sj0);
IkReal x13476=(cj0*r00);
IkReal x13477=((0.026255)*cj6);
IkReal x13478=((1.0)*r21);
IkReal x13479=((1.0)*cj0);
IkReal x13480=(sj3*x13462);
IkReal x13481=(sj3*x13463);
IkReal x13482=(r00*x13477);
IkReal x13483=(cj3*x13462);
IkReal x13484=((1.0)*x13463);
evalcond[0]=((((-1.0)*x13480))+(((-1.0)*sj6*x13478))+((cj6*r20)));
evalcond[1]=(x13481+(((-1.0)*r20*x13470))+(((-1.0)*x13468*x13478))+(((-1.0)*r22*x13472)));
evalcond[2]=(x13483+(((-1.0)*x13469*x13473))+((sj6*x13466))+((sj6*x13464))+(((-1.0)*x13473*x13476)));
evalcond[3]=((((-1.0)*x13484))+((cj6*r00*sj0))+((sj6*x13471))+(((-1.0)*x13473*x13474))+(((-1.0)*r01*sj6*x13475)));
evalcond[4]=((0.0001)+(((-0.02626)*x13480))+(((-0.0718)*x13481))+(((-1.0)*r21*x13465))+pz+(((-0.09746)*sj3))+((r20*x13477)));
evalcond[5]=(((x13466*x13468))+((x13470*x13476))+((cj0*cj5*r02))+((x13464*x13468))+((sj0*x13467))+(((-1.0)*cj3*x13484))+((x13469*x13470)));
evalcond[6]=(((x13470*x13474))+(((-1.0)*r00*x13470*x13475))+(((-1.0)*r01*x13468*x13475))+((cj0*x13467))+(((-1.0)*x13462))+((x13468*x13471))+(((-1.0)*r02*sj0*x13472)));
evalcond[7]=((0.1246)+(((-1.0)*py*x13479))+(((-1.0)*x13474*x13477))+(((-0.02626)*x13463))+(((0.0718)*x13462))+((px*sj0))+((x13465*x13471))+((sj0*x13482))+(((-1.0)*r01*sj0*x13465)));
evalcond[8]=((0.1148)+(((0.0718)*cj3*x13463))+(((-1.0)*py*x13475))+((x13464*x13465))+(((-1.0)*px*x13479))+((x13465*x13466))+(((-1.0)*x13469*x13477))+(((-1.0)*x13476*x13477))+(((0.09746)*cj3))+(((0.02626)*x13483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13485=((1.0)*sj6);
CheckValue<IkReal> x13486=IKPowWithIntegerCheck(sj3,-1);
if(!x13486.valid){
continue;
}
if( IKabs(((x13486.value)*(((((-1.0)*r21*x13485))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x13485))+(((-1.0)*cj0*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13486.value)*(((((-1.0)*r21*x13485))+((cj6*r20))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x13485))+(((-1.0)*cj0*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13486.value)*(((((-1.0)*r21*x13485))+((cj6*r20))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x13485))+(((-1.0)*cj0*cj6*r10))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13487=IKsin(j4);
IkReal x13488=IKcos(j4);
IkReal x13489=(r11*sj0);
IkReal x13490=((0.026255)*sj6);
IkReal x13491=(cj0*r01);
IkReal x13492=(cj5*r12);
IkReal x13493=(cj6*sj5);
IkReal x13494=(r10*sj0);
IkReal x13495=(sj5*sj6);
IkReal x13496=(cj0*r11);
IkReal x13497=((1.0)*cj5);
IkReal x13498=((1.0)*cj6);
IkReal x13499=(cj0*r10);
IkReal x13500=((1.0)*sj0);
IkReal x13501=(cj0*r00);
IkReal x13502=((0.026255)*cj6);
IkReal x13503=((1.0)*r21);
IkReal x13504=((1.0)*cj0);
IkReal x13505=(sj3*x13487);
IkReal x13506=(sj3*x13488);
IkReal x13507=(r00*x13502);
IkReal x13508=(cj3*x13487);
IkReal x13509=((1.0)*x13488);
evalcond[0]=((((-1.0)*sj6*x13503))+(((-1.0)*x13505))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x13495))+x13506+(((-1.0)*x13493*x13503))+(((-1.0)*r22*x13497)));
evalcond[2]=(((sj6*x13491))+x13508+((sj6*x13489))+(((-1.0)*x13494*x13498))+(((-1.0)*x13498*x13501)));
evalcond[3]=(((sj6*x13496))+((cj6*r00*sj0))+(((-1.0)*x13509))+(((-1.0)*r01*sj6*x13500))+(((-1.0)*x13498*x13499)));
evalcond[4]=((0.0001)+((r20*x13502))+(((-1.0)*r21*x13490))+pz+(((-0.0718)*x13506))+(((-0.09746)*sj3))+(((-0.02626)*x13505)));
evalcond[5]=(((x13491*x13493))+((x13495*x13501))+((cj0*cj5*r02))+(((-1.0)*cj3*x13509))+((x13494*x13495))+((x13489*x13493))+((sj0*x13492)));
evalcond[6]=((((-1.0)*r01*x13493*x13500))+(((-1.0)*x13487))+((cj0*x13492))+(((-1.0)*r02*sj0*x13497))+((x13493*x13496))+(((-1.0)*r00*x13495*x13500))+((x13495*x13499)));
evalcond[7]=((0.1246)+(((-1.0)*py*x13504))+(((0.0718)*x13487))+((x13490*x13496))+(((-0.02626)*x13488))+(((-1.0)*x13499*x13502))+(((-1.0)*r01*sj0*x13490))+((sj0*x13507))+((px*sj0)));
evalcond[8]=((0.1148)+(((-1.0)*py*x13500))+(((-1.0)*x13494*x13502))+((x13490*x13491))+(((0.02626)*x13508))+(((-1.0)*x13501*x13502))+(((0.0718)*cj3*x13488))+(((0.09746)*cj3))+((x13489*x13490))+(((-1.0)*px*x13504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x13510.valid){
continue;
}
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13510.value)))+(x13511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13512=IKsin(j4);
IkReal x13513=IKcos(j4);
IkReal x13514=(r11*sj0);
IkReal x13515=((0.026255)*sj6);
IkReal x13516=(cj0*r01);
IkReal x13517=(cj5*r12);
IkReal x13518=(cj6*sj5);
IkReal x13519=(r10*sj0);
IkReal x13520=(sj5*sj6);
IkReal x13521=(cj0*r11);
IkReal x13522=((1.0)*cj5);
IkReal x13523=((1.0)*cj6);
IkReal x13524=(cj0*r10);
IkReal x13525=((1.0)*sj0);
IkReal x13526=(cj0*r00);
IkReal x13527=((0.026255)*cj6);
IkReal x13528=((1.0)*r21);
IkReal x13529=((1.0)*cj0);
IkReal x13530=(sj3*x13512);
IkReal x13531=(sj3*x13513);
IkReal x13532=(r00*x13527);
IkReal x13533=(cj3*x13512);
IkReal x13534=((1.0)*x13513);
evalcond[0]=((((-1.0)*sj6*x13528))+(((-1.0)*x13530))+((cj6*r20)));
evalcond[1]=((((-1.0)*x13518*x13528))+x13531+(((-1.0)*r22*x13522))+(((-1.0)*r20*x13520)));
evalcond[2]=(x13533+((sj6*x13516))+((sj6*x13514))+(((-1.0)*x13523*x13526))+(((-1.0)*x13519*x13523)));
evalcond[3]=(((sj6*x13521))+((cj6*r00*sj0))+(((-1.0)*r01*sj6*x13525))+(((-1.0)*x13523*x13524))+(((-1.0)*x13534)));
evalcond[4]=((0.0001)+((r20*x13527))+(((-1.0)*r21*x13515))+pz+(((-0.02626)*x13530))+(((-0.09746)*sj3))+(((-0.0718)*x13531)));
evalcond[5]=(((x13520*x13526))+((cj0*cj5*r02))+((x13519*x13520))+(((-1.0)*cj3*x13534))+((sj0*x13517))+((x13514*x13518))+((x13516*x13518)));
evalcond[6]=(((x13520*x13524))+((cj0*x13517))+((x13518*x13521))+(((-1.0)*r01*x13518*x13525))+(((-1.0)*r00*x13520*x13525))+(((-1.0)*x13512))+(((-1.0)*r02*sj0*x13522)));
evalcond[7]=((0.1246)+(((-1.0)*py*x13529))+(((-1.0)*r01*sj0*x13515))+((sj0*x13532))+((x13515*x13521))+((px*sj0))+(((-1.0)*x13524*x13527))+(((-0.02626)*x13513))+(((0.0718)*x13512)));
evalcond[8]=((0.1148)+(((-1.0)*py*x13525))+((x13515*x13516))+(((0.0718)*cj3*x13513))+(((-1.0)*x13526*x13527))+(((0.02626)*x13533))+(((0.09746)*cj3))+((x13514*x13515))+(((-1.0)*px*x13529))+(((-1.0)*x13519*x13527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13535=(cj5*cj6);
IkReal x13536=(r11*sj0);
IkReal x13537=(cj0*sj6);
IkReal x13538=(cj6*sj5);
IkReal x13539=((1.0)*cj0);
IkReal x13540=(r10*sj0);
IkReal x13541=((1.0)*cj5);
IkReal x13542=(cj0*r02);
IkReal x13543=((1.0)*sj5);
IkReal x13544=(cj5*sj6);
IkReal x13545=(cj6*r00);
IkReal x13546=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=(((r20*x13544))+(((-1.0)*r22*x13543))+((r21*x13535)));
evalcond[2]=((((-1.0)*x13539*x13545))+(((-1.0)*cj6*x13540))+((sj6*x13536))+((r01*x13537)));
evalcond[3]=((1.0)+(((-1.0)*x13535*x13536))+(((-1.0)*r00*x13537*x13541))+((sj5*x13542))+((sj5*x13546))+(((-1.0)*r01*x13535*x13539))+(((-1.0)*sj6*x13540*x13541)));
evalcond[4]=(((r00*sj5*x13537))+((cj0*r01*x13538))+((x13536*x13538))+((sj5*sj6*x13540))+((cj5*x13542))+((cj5*x13546)));
evalcond[5]=(((r00*sj0*x13544))+((r01*sj0*x13535))+(((-1.0)*r02*sj0*x13543))+(((-1.0)*r10*x13537*x13541))+((cj0*r12*sj5))+(((-1.0)*r11*x13535*x13539)));
evalcond[6]=((0.1148)+(((-1.0)*px*x13539))+(((0.026255)*r01*x13537))+(((-0.026255)*cj6*x13540))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x13536))+(((-0.026255)*cj0*x13545)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13547=(cj6*r21);
IkReal x13548=(r20*sj6);
IkReal x13549=(r21*sj6);
IkReal x13550=(cj1*sj5);
IkReal x13551=(cj5*r22);
IkReal x13552=((1.0)*sj1*sj5);
IkReal x13553=((1.0)*cj6*r20);
if( IKabs((((sj1*x13549))+((x13548*x13550))+((x13547*x13550))+(((-1.0)*sj1*x13553))+((cj1*x13551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x13547*x13552))+(((-1.0)*sj1*x13551))+(((-1.0)*x13548*x13552))+(((-1.0)*cj1*x13553))+((cj1*x13549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x13549))+((x13548*x13550))+((x13547*x13550))+(((-1.0)*sj1*x13553))+((cj1*x13551))))+IKsqr(((((-1.0)*x13547*x13552))+(((-1.0)*sj1*x13551))+(((-1.0)*x13548*x13552))+(((-1.0)*cj1*x13553))+((cj1*x13549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x13549))+((x13548*x13550))+((x13547*x13550))+(((-1.0)*sj1*x13553))+((cj1*x13551))), ((((-1.0)*x13547*x13552))+(((-1.0)*sj1*x13551))+(((-1.0)*x13548*x13552))+(((-1.0)*cj1*x13553))+((cj1*x13549))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13554=IKsin(j4);
IkReal x13555=IKcos(j4);
IkReal x13556=((1.0)*cj5);
IkReal x13557=((1.0)*cj0);
IkReal x13558=(cj6*r10);
IkReal x13559=(cj6*r20);
IkReal x13560=((1.0)*sj5);
IkReal x13561=(r21*sj6);
IkReal x13562=(cj0*sj5);
IkReal x13563=(cj1*x13555);
IkReal x13564=(sj1*x13554);
IkReal x13565=(sj1*x13555);
IkReal x13566=(cj0*r11*sj6);
IkReal x13567=(cj1*x13554);
IkReal x13568=(cj6*r00*sj0);
IkReal x13569=(r01*sj0*sj6);
IkReal x13570=(x13564+x13563);
evalcond[0]=(x13570+x13559+(((-1.0)*x13561)));
evalcond[1]=(x13567+(((-1.0)*cj6*r21*x13560))+(((-1.0)*r20*sj6*x13560))+(((-1.0)*x13565))+(((-1.0)*r22*x13556)));
evalcond[2]=((((-1.0)*x13557*x13558))+x13568+x13565+x13566+(((-1.0)*x13567))+(((-1.0)*x13569)));
evalcond[3]=((((-0.026255)*x13561))+(((0.09736)*sj1))+(((-0.0718)*x13567))+(((0.026255)*x13559))+pz+(((0.0718)*x13565))+(((0.02626)*x13564))+(((0.02626)*x13563))+(((-0.1246)*cj1)));
evalcond[4]=(x13570+((cj6*r11*x13562))+(((-1.0)*r00*sj0*sj6*x13560))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x13556))+(((-1.0)*cj6*r01*sj0*x13560))+((r10*sj6*x13562)));
evalcond[5]=((((-0.026255)*cj0*x13558))+(((-0.026255)*x13569))+(((-0.1246)*sj1))+(((-0.09736)*cj1))+(((-0.02626)*x13567))+(((0.026255)*x13568))+(((0.026255)*x13566))+(((-0.0718)*x13563))+(((-0.0718)*x13564))+(((0.02626)*x13565))+((px*sj0))+(((-1.0)*py*x13557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13571=(cj5*cj6);
IkReal x13572=(r11*sj0);
IkReal x13573=(cj0*sj6);
IkReal x13574=(cj6*sj5);
IkReal x13575=((1.0)*cj0);
IkReal x13576=(r10*sj0);
IkReal x13577=((1.0)*cj5);
IkReal x13578=(cj0*r02);
IkReal x13579=((1.0)*sj5);
IkReal x13580=(cj5*sj6);
IkReal x13581=(cj6*r00);
IkReal x13582=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x13579))+((r21*x13571))+((r20*x13580)));
evalcond[2]=(((sj6*x13572))+(((-1.0)*x13575*x13581))+(((-1.0)*cj6*x13576))+((r01*x13573)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x13571*x13575))+((sj5*x13578))+(((-1.0)*x13571*x13572))+(((-1.0)*r00*x13573*x13577))+((sj5*x13582))+(((-1.0)*sj6*x13576*x13577)));
evalcond[4]=(((cj5*x13578))+((sj5*sj6*x13576))+((cj0*r01*x13574))+((x13572*x13574))+((cj5*x13582))+((r00*sj5*x13573)));
evalcond[5]=((((-1.0)*r11*x13571*x13575))+((r00*sj0*x13580))+((cj0*r12*sj5))+((r01*sj0*x13571))+(((-1.0)*r10*x13573*x13577))+(((-1.0)*r02*sj0*x13579)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x13581))+(((0.026255)*r01*x13573))+(((-1.0)*px*x13575))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x13572))+(((-0.026255)*cj6*x13576)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13583=(cj5*r22);
IkReal x13584=(cj6*r20);
IkReal x13585=(r21*sj1);
IkReal x13586=(cj6*sj5);
IkReal x13587=(cj1*r21);
IkReal x13588=(r20*sj5*sj6);
if( IKabs((((sj1*x13584))+((cj1*x13583))+((cj1*x13588))+(((-1.0)*sj6*x13585))+((x13586*x13587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x13584))+((sj1*x13588))+((sj1*x13583))+((x13585*x13586))+((sj6*x13587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x13584))+((cj1*x13583))+((cj1*x13588))+(((-1.0)*sj6*x13585))+((x13586*x13587))))+IKsqr(((((-1.0)*cj1*x13584))+((sj1*x13588))+((sj1*x13583))+((x13585*x13586))+((sj6*x13587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x13584))+((cj1*x13583))+((cj1*x13588))+(((-1.0)*sj6*x13585))+((x13586*x13587))), ((((-1.0)*cj1*x13584))+((sj1*x13588))+((sj1*x13583))+((x13585*x13586))+((sj6*x13587))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13589=IKcos(j4);
IkReal x13590=IKsin(j4);
IkReal x13591=(cj0*sj6);
IkReal x13592=((1.0)*cj5);
IkReal x13593=((1.0)*cj0);
IkReal x13594=(cj6*r10);
IkReal x13595=(cj6*r20);
IkReal x13596=((1.0)*sj5);
IkReal x13597=(r21*sj6);
IkReal x13598=(sj1*x13589);
IkReal x13599=(cj1*x13590);
IkReal x13600=(cj1*x13589);
IkReal x13601=(sj1*x13590);
IkReal x13602=(cj6*r00*sj0);
IkReal x13603=(r01*sj0*sj6);
IkReal x13604=(x13599+x13598);
evalcond[0]=((((-1.0)*x13601))+x13595+x13600+(((-1.0)*x13597)));
evalcond[1]=(x13604+(((-1.0)*r20*sj6*x13596))+(((-1.0)*r22*x13592))+(((-1.0)*cj6*r21*x13596)));
evalcond[2]=((((-1.0)*x13603))+x13602+x13604+((r11*x13591))+(((-1.0)*x13593*x13594)));
evalcond[3]=((((-0.0718)*x13599))+(((-0.0718)*x13598))+(((-0.09756)*sj1))+(((0.026255)*x13595))+pz+(((-0.02626)*x13601))+(((0.02626)*x13600))+(((-0.026255)*x13597))+(((-0.1246)*cj1)));
evalcond[4]=((((-1.0)*r00*sj0*sj6*x13596))+(((-1.0)*x13600))+x13601+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x13592))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*r01*sj0*x13596))+((r10*sj5*x13591)));
evalcond[5]=((((-0.1246)*sj1))+(((0.0718)*x13600))+(((-0.0718)*x13601))+(((0.02626)*x13599))+(((0.02626)*x13598))+(((0.09756)*cj1))+(((0.026255)*x13602))+(((0.026255)*r11*x13591))+((px*sj0))+(((-0.026255)*x13603))+(((-0.026255)*cj0*x13594))+(((-1.0)*py*x13593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13605=(cj0*sj5);
IkReal x13606=(cj5*cj6);
IkReal x13607=((1.0)*sj5);
IkReal x13608=((1.0)*cj0);
IkReal x13609=((1.0)*sj0);
IkReal x13610=(cj5*sj6);
IkReal x13611=(r10*x13610);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x13610))+(((-1.0)*r22*x13607))+((r21*x13606))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r00*x13608*x13610))+(((-1.0)*x13609*x13611))+(((-1.0)*sj2))+(((-1.0)*r11*x13606*x13609))+((r12*sj0*sj5))+((r02*x13605))+(((-1.0)*r01*x13606*x13608)));
evalcond[3]=((((-1.0)*x13608*x13611))+((r00*sj0*x13610))+((r12*x13605))+(((-1.0)*r11*x13606*x13608))+(((-1.0)*r02*sj0*x13607))+((r01*sj0*x13606)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x13612=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*sj6*x13612))+((cj6*r20)))))+(IKabs(((((-1.0)*cj6*sj5*x13612))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13613=(cj5*cj6);
IkReal x13614=((1.0)*sj0);
IkReal x13615=((1.0)*r22);
IkReal x13616=(cj0*sj5);
IkReal x13617=(cj5*sj6);
IkReal x13618=((1.0)*cj0);
IkReal x13619=(cj6*r20);
IkReal x13620=((1.0)*sj5);
IkReal x13621=(r21*sj6);
IkReal x13622=(x13617*x13618);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x13615))+((r21*x13613))+((r20*x13617)));
evalcond[2]=(x13619+(((-1.0)*x13621)));
evalcond[3]=((((-1.0)*cj6*r21*x13620))+(((-1.0)*cj5*x13615))+(((-1.0)*r20*sj6*x13620)));
evalcond[4]=((((-1.0)*r01*x13613*x13618))+(((-1.0)*r00*x13622))+((r12*sj0*sj5))+(((-1.0)*r10*x13614*x13617))+(((-1.0)*r11*x13613*x13614))+((r02*x13616)));
evalcond[5]=(((r00*sj0*x13617))+(((-1.0)*r10*x13622))+(((-1.0)*r11*x13613*x13618))+((r12*x13616))+(((-1.0)*r02*sj5*x13614))+((r01*sj0*x13613)));
evalcond[6]=((-0.2413)+(((0.026255)*x13619))+pz+(((-0.026255)*x13621)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13623=(cj0*cj6);
IkReal x13624=(cj6*sj0);
IkReal x13625=(cj0*sj6);
IkReal x13626=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r01*x13626))+(((-1.0)*r10*x13623))+((r11*x13625))+((r00*x13624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13624))+(((-1.0)*r01*x13625))+(((-1.0)*r11*x13626))+((r00*x13623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x13626))+(((-1.0)*r10*x13623))+((r11*x13625))+((r00*x13624))))+IKsqr((((r10*x13624))+(((-1.0)*r01*x13625))+(((-1.0)*r11*x13626))+((r00*x13623))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x13626))+(((-1.0)*r10*x13623))+((r11*x13625))+((r00*x13624))), (((r10*x13624))+(((-1.0)*r01*x13625))+(((-1.0)*r11*x13626))+((r00*x13623))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13627=IKsin(j4);
IkReal x13628=IKcos(j4);
IkReal x13629=(r11*sj6);
IkReal x13630=((0.026255)*cj0);
IkReal x13631=(r01*sj6);
IkReal x13632=(sj0*sj5);
IkReal x13633=(cj6*r11);
IkReal x13634=(r10*sj6);
IkReal x13635=(cj5*r12);
IkReal x13636=(cj6*sj0);
IkReal x13637=((1.0)*sj0);
IkReal x13638=(cj5*r02);
IkReal x13639=((1.0)*r10);
IkReal x13640=(cj0*sj5);
IkReal x13641=(r00*sj6);
IkReal x13642=((0.026255)*sj0);
IkReal x13643=(cj0*cj6);
IkReal x13644=((1.0)*cj0);
IkReal x13645=(cj6*r01);
evalcond[0]=((((-1.0)*x13636*x13639))+x13628+((cj0*x13631))+((sj0*x13629))+(((-1.0)*r00*x13643)));
evalcond[1]=(((cj0*x13629))+(((-1.0)*x13631*x13637))+(((-1.0)*x13639*x13643))+((r00*x13636))+(((-1.0)*x13627)));
evalcond[2]=(((x13632*x13634))+((x13632*x13633))+x13627+((cj0*x13638))+((sj0*x13635))+((x13640*x13641))+((x13640*x13645)));
evalcond[3]=(x13628+((x13633*x13640))+((cj0*x13635))+((x13634*x13640))+(((-1.0)*x13637*x13638))+(((-1.0)*x13632*x13645))+(((-1.0)*x13632*x13641)));
evalcond[4]=((-0.09736)+(((-1.0)*x13631*x13642))+(((-0.02626)*x13627))+(((-1.0)*cj6*r10*x13630))+(((-1.0)*py*x13644))+(((-0.0718)*x13628))+((px*sj0))+((x13629*x13630))+(((0.026255)*r00*x13636)));
evalcond[5]=((-0.0001)+(((-1.0)*cj6*r00*x13630))+(((-1.0)*py*x13637))+(((-0.026255)*r10*x13636))+((x13629*x13642))+(((-0.0718)*x13627))+((x13630*x13631))+(((-1.0)*px*x13644))+(((0.02626)*x13628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13646=(cj5*cj6);
IkReal x13647=(r11*sj0);
IkReal x13648=(cj0*sj6);
IkReal x13649=(cj6*sj5);
IkReal x13650=((1.0)*cj0);
IkReal x13651=(r10*sj0);
IkReal x13652=((1.0)*cj5);
IkReal x13653=(cj0*r02);
IkReal x13654=((1.0)*sj5);
IkReal x13655=(cj5*sj6);
IkReal x13656=(cj6*r00);
IkReal x13657=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x13655))+(((-1.0)*r22*x13654))+((r21*x13646)));
evalcond[2]=(((sj6*x13647))+((r01*x13648))+(((-1.0)*cj6*x13651))+(((-1.0)*x13650*x13656)));
evalcond[3]=((-1.0)+((sj5*x13653))+((sj5*x13657))+(((-1.0)*sj6*x13651*x13652))+(((-1.0)*x13646*x13647))+(((-1.0)*r00*x13648*x13652))+(((-1.0)*r01*x13646*x13650)));
evalcond[4]=(((cj5*x13657))+((cj5*x13653))+((cj0*r01*x13649))+((x13647*x13649))+((r00*sj5*x13648))+((sj5*sj6*x13651)));
evalcond[5]=(((r01*sj0*x13646))+(((-1.0)*r10*x13648*x13652))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x13654))+((r00*sj0*x13655))+(((-1.0)*r11*x13646*x13650)));
evalcond[6]=((-0.1168)+(((0.026255)*sj6*x13647))+(((-0.026255)*cj6*x13651))+(((-1.0)*px*x13650))+(((0.026255)*r01*x13648))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x13656)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13658=(cj6*r20);
IkReal x13659=(r21*sj6);
if( IKabs(((1.76044568245125)+(((6.96378830083565e-5)*x13658))+(((-6.96378830083565e-5)*x13659))+(((-13.9275766016713)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13658+(((-1.0)*x13659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((6.96378830083565e-5)*x13658))+(((-6.96378830083565e-5)*x13659))+(((-13.9275766016713)*pz))))+IKsqr((x13658+(((-1.0)*x13659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((6.96378830083565e-5)*x13658))+(((-6.96378830083565e-5)*x13659))+(((-13.9275766016713)*pz))), (x13658+(((-1.0)*x13659))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13660=IKsin(j4);
IkReal x13661=IKcos(j4);
IkReal x13662=((1.0)*cj5);
IkReal x13663=(cj0*r10);
IkReal x13664=(sj5*sj6);
IkReal x13665=((1.0)*cj6);
IkReal x13666=((0.026255)*cj6);
IkReal x13667=(r21*sj6);
IkReal x13668=((1.0)*x13660);
IkReal x13669=(cj0*r11*sj6);
IkReal x13670=(cj6*r00*sj0);
IkReal x13671=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13667))+(((-1.0)*x13661))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x13664))+(((-1.0)*r22*x13662))+(((-1.0)*r21*sj5*x13665))+(((-1.0)*x13668)));
evalcond[2]=((-0.1264)+(((-0.02626)*x13661))+(((-0.026255)*x13667))+pz+(((0.0718)*x13660))+((r20*x13666)));
evalcond[3]=(x13669+x13670+(((-1.0)*x13668))+(((-1.0)*x13663*x13665))+(((-1.0)*x13671)));
evalcond[4]=((((-1.0)*r00*sj0*x13664))+x13661+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x13662))+(((-1.0)*r01*sj0*sj5*x13665))+((cj0*cj6*r11*sj5))+((x13663*x13664)));
evalcond[5]=((-0.09736)+(((-0.026255)*x13671))+(((0.026255)*x13669))+(((-0.02626)*x13660))+((r00*sj0*x13666))+(((-1.0)*x13663*x13666))+((px*sj0))+(((-0.0718)*x13661))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13672=(cj5*cj6);
IkReal x13673=(r11*sj0);
IkReal x13674=(cj0*sj6);
IkReal x13675=(cj6*sj5);
IkReal x13676=((1.0)*cj0);
IkReal x13677=(r10*sj0);
IkReal x13678=((1.0)*cj5);
IkReal x13679=(cj0*r02);
IkReal x13680=((1.0)*sj5);
IkReal x13681=(cj5*sj6);
IkReal x13682=(cj6*r00);
IkReal x13683=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x13680))+((r21*x13672))+((r20*x13681)));
evalcond[2]=((((-1.0)*x13676*x13682))+((r01*x13674))+((sj6*x13673))+(((-1.0)*cj6*x13677)));
evalcond[3]=((1.0)+(((-1.0)*x13672*x13673))+(((-1.0)*r00*x13674*x13678))+((sj5*x13679))+(((-1.0)*sj6*x13677*x13678))+((sj5*x13683))+(((-1.0)*r01*x13672*x13676)));
evalcond[4]=(((cj0*r01*x13675))+((r00*sj5*x13674))+((sj5*sj6*x13677))+((cj5*x13683))+((cj5*x13679))+((x13673*x13675)));
evalcond[5]=((((-1.0)*r02*sj0*x13680))+((r01*sj0*x13672))+(((-1.0)*r10*x13674*x13678))+(((-1.0)*r11*x13672*x13676))+((cj0*r12*sj5))+((r00*sj0*x13681)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x13677))+(((0.026255)*sj6*x13673))+(((0.026255)*r01*x13674))+(((-1.0)*py*sj0))+(((-1.0)*px*x13676))+(((-0.026255)*cj0*x13682)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13684=IKcos(j4);
IkReal x13685=IKsin(j4);
IkReal x13686=((1.0)*cj5);
IkReal x13687=(cj0*r10);
IkReal x13688=(sj5*sj6);
IkReal x13689=((1.0)*cj6);
IkReal x13690=((0.026255)*cj6);
IkReal x13691=(r21*sj6);
IkReal x13692=(cj0*r11*sj6);
IkReal x13693=(cj6*r00*sj0);
IkReal x13694=(r01*sj0*sj6);
evalcond[0]=(x13684+((cj6*r20))+(((-1.0)*x13691)));
evalcond[1]=(x13685+(((-1.0)*r22*x13686))+(((-1.0)*r21*sj5*x13689))+(((-1.0)*r20*x13688)));
evalcond[2]=((-0.1246)+((r20*x13690))+pz+(((0.02626)*x13684))+(((-0.0718)*x13685))+(((-0.026255)*x13691)));
evalcond[3]=(x13692+x13693+(((-1.0)*x13685))+(((-1.0)*x13687*x13689))+(((-1.0)*x13694)));
evalcond[4]=((((-1.0)*r02*sj0*x13686))+x13684+((cj0*cj5*r12))+((x13687*x13688))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x13689))+(((-1.0)*r00*sj0*x13688)));
evalcond[5]=((-0.09736)+(((-0.02626)*x13685))+(((-1.0)*x13687*x13690))+(((-0.0718)*x13684))+(((0.026255)*x13692))+((px*sj0))+(((-0.026255)*x13694))+(((-1.0)*cj0*py))+((r00*sj0*x13690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13695=((1.0)*sj5);
IkReal x13696=((1.0)*sj6);
CheckValue<IkReal> x13697=IKPowWithIntegerCheck(sj2,-1);
if(!x13697.valid){
continue;
}
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(cj2,-1);
if(!x13698.valid){
continue;
}
if( IKabs(((x13697.value)*(((((-1.0)*r20*sj6*x13695))+(((-1.0)*cj6*r21*x13695))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13698.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13696))+(((-1.0)*cj0*r01*x13696))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13697.value)*(((((-1.0)*r20*sj6*x13695))+(((-1.0)*cj6*r21*x13695))+(((-1.0)*cj5*r22))))))+IKsqr(((x13698.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13696))+(((-1.0)*cj0*r01*x13696))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13697.value)*(((((-1.0)*r20*sj6*x13695))+(((-1.0)*cj6*r21*x13695))+(((-1.0)*cj5*r22))))), ((x13698.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13696))+(((-1.0)*cj0*r01*x13696))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13699=IKcos(j4);
IkReal x13700=IKsin(j4);
IkReal x13701=(r11*sj0);
IkReal x13702=(cj0*sj6);
IkReal x13703=((0.026255)*r01);
IkReal x13704=(cj5*r12);
IkReal x13705=(cj6*sj5);
IkReal x13706=(r10*sj5);
IkReal x13707=(sj0*sj6);
IkReal x13708=((1.0)*cj5);
IkReal x13709=((1.0)*r01);
IkReal x13710=(r00*sj5);
IkReal x13711=((0.026255)*sj6);
IkReal x13712=((1.0)*py);
IkReal x13713=((0.026255)*cj6);
IkReal x13714=((1.0)*r21);
IkReal x13715=((1.0)*cj0);
IkReal x13716=((1.0)*cj6*r10);
IkReal x13717=(cj2*x13700);
IkReal x13718=(cj6*r00*sj0);
IkReal x13719=(cj2*x13699);
IkReal x13720=((1.0)*x13700);
IkReal x13721=(sj2*x13699);
evalcond[0]=((((-1.0)*sj6*x13714))+(((-1.0)*x13721))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x13708))+(((-1.0)*sj2*x13720))+(((-1.0)*x13705*x13714))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*sj0*x13716))+x13719+((r01*x13702))+(((-1.0)*cj6*r00*x13715))+((sj6*x13701)));
evalcond[3]=(x13718+(((-1.0)*cj6*r10*x13715))+(((-1.0)*x13707*x13709))+(((-1.0)*x13720))+((r11*x13702)));
evalcond[4]=((-0.1255)+((r20*x13713))+(((0.0718)*sj2*x13700))+(((-0.1158)*cj2))+(((-1.0)*r21*x13711))+(((-0.0009)*sj2))+pz+(((-0.02626)*x13721)));
evalcond[5]=(((x13702*x13710))+((sj0*x13704))+((cj0*cj5*r02))+x13717+((x13706*x13707))+((cj0*r01*x13705))+((x13701*x13705)));
evalcond[6]=(((x13702*x13706))+(((-1.0)*sj0*x13705*x13709))+(((-1.0)*r02*sj0*x13708))+x13699+(((-1.0)*x13707*x13710))+((cj0*r11*x13705))+((cj0*x13704)));
evalcond[7]=((-0.09736)+(((-1.0)*x13703*x13707))+(((-0.0718)*x13699))+(((-0.02626)*x13700))+(((-1.0)*cj0*r10*x13713))+((px*sj0))+(((0.026255)*r11*x13702))+(((-1.0)*cj0*x13712))+((r00*sj0*x13713)));
evalcond[8]=((-0.001)+((x13702*x13703))+(((-1.0)*sj0*x13712))+(((-0.1158)*sj2))+(((-0.0718)*x13717))+(((0.02626)*x13719))+(((0.0009)*cj2))+(((-1.0)*px*x13715))+(((-1.0)*r10*sj0*x13713))+(((-1.0)*cj0*r00*x13713))+((x13701*x13711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13722=((1.0)*sj6);
CheckValue<IkReal> x13723=IKPowWithIntegerCheck(sj2,-1);
if(!x13723.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x13722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13723.value)*((((cj6*r20))+(((-1.0)*r21*x13722)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x13722))))+IKsqr(((x13723.value)*((((cj6*r20))+(((-1.0)*r21*x13722))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x13722))), ((x13723.value)*((((cj6*r20))+(((-1.0)*r21*x13722))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13724=IKcos(j4);
IkReal x13725=IKsin(j4);
IkReal x13726=(r11*sj0);
IkReal x13727=(cj0*sj6);
IkReal x13728=((0.026255)*r01);
IkReal x13729=(cj5*r12);
IkReal x13730=(cj6*sj5);
IkReal x13731=(r10*sj5);
IkReal x13732=(sj0*sj6);
IkReal x13733=((1.0)*cj5);
IkReal x13734=((1.0)*r01);
IkReal x13735=(r00*sj5);
IkReal x13736=((0.026255)*sj6);
IkReal x13737=((1.0)*py);
IkReal x13738=((0.026255)*cj6);
IkReal x13739=((1.0)*r21);
IkReal x13740=((1.0)*cj0);
IkReal x13741=((1.0)*cj6*r10);
IkReal x13742=(cj2*x13725);
IkReal x13743=(cj6*r00*sj0);
IkReal x13744=(cj2*x13724);
IkReal x13745=((1.0)*x13725);
IkReal x13746=(sj2*x13724);
evalcond[0]=((((-1.0)*x13746))+(((-1.0)*sj6*x13739))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x13733))+(((-1.0)*x13730*x13739))+(((-1.0)*sj2*x13745))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*cj6*r00*x13740))+(((-1.0)*sj0*x13741))+x13744+((r01*x13727))+((sj6*x13726)));
evalcond[3]=(x13743+((r11*x13727))+(((-1.0)*cj6*r10*x13740))+(((-1.0)*x13745))+(((-1.0)*x13732*x13734)));
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((0.0718)*sj2*x13725))+(((-0.02626)*x13746))+((r20*x13738))+(((-0.0009)*sj2))+(((-1.0)*r21*x13736))+pz);
evalcond[5]=(((cj0*r01*x13730))+((sj0*x13729))+((cj0*cj5*r02))+x13742+((x13731*x13732))+((x13727*x13735))+((x13726*x13730)));
evalcond[6]=((((-1.0)*r02*sj0*x13733))+x13724+(((-1.0)*sj0*x13730*x13734))+(((-1.0)*x13732*x13735))+((cj0*x13729))+((x13727*x13731))+((cj0*r11*x13730)));
evalcond[7]=((-0.09736)+(((-1.0)*x13728*x13732))+(((0.026255)*r11*x13727))+(((-1.0)*cj0*x13737))+(((-1.0)*cj0*r10*x13738))+(((-0.0718)*x13724))+((px*sj0))+(((-0.02626)*x13725))+((r00*sj0*x13738)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-0.0718)*x13742))+((x13727*x13728))+(((-1.0)*r10*sj0*x13738))+(((0.0009)*cj2))+((x13726*x13736))+(((-1.0)*px*x13740))+(((0.02626)*x13744))+(((-1.0)*cj0*r00*x13738))+(((-1.0)*sj0*x13737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13747=((1.0)*r21);
CheckValue<IkReal> x13748=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x13748.valid){
continue;
}
CheckValue<IkReal> x13749 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x13747))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x13747))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13748.value)))+(x13749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13750=IKcos(j4);
IkReal x13751=IKsin(j4);
IkReal x13752=(r11*sj0);
IkReal x13753=(cj0*sj6);
IkReal x13754=((0.026255)*r01);
IkReal x13755=(cj5*r12);
IkReal x13756=(cj6*sj5);
IkReal x13757=(r10*sj5);
IkReal x13758=(sj0*sj6);
IkReal x13759=((1.0)*cj5);
IkReal x13760=((1.0)*r01);
IkReal x13761=(r00*sj5);
IkReal x13762=((0.026255)*sj6);
IkReal x13763=((1.0)*py);
IkReal x13764=((0.026255)*cj6);
IkReal x13765=((1.0)*r21);
IkReal x13766=((1.0)*cj0);
IkReal x13767=((1.0)*cj6*r10);
IkReal x13768=(cj2*x13751);
IkReal x13769=(cj6*r00*sj0);
IkReal x13770=(cj2*x13750);
IkReal x13771=((1.0)*x13751);
IkReal x13772=(sj2*x13750);
evalcond[0]=((((-1.0)*x13772))+((cj6*r20))+(((-1.0)*sj6*x13765)));
evalcond[1]=((((-1.0)*r22*x13759))+(((-1.0)*x13756*x13765))+(((-1.0)*sj2*x13771))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x13770+(((-1.0)*cj6*r00*x13766))+((sj6*x13752))+(((-1.0)*sj0*x13767))+((r01*x13753)));
evalcond[3]=(((r11*x13753))+(((-1.0)*x13771))+(((-1.0)*x13758*x13760))+x13769+(((-1.0)*cj6*r10*x13766)));
evalcond[4]=((-0.1255)+(((-0.02626)*x13772))+(((-1.0)*r21*x13762))+(((-0.1158)*cj2))+((r20*x13764))+(((-0.0009)*sj2))+pz+(((0.0718)*sj2*x13751)));
evalcond[5]=(((cj0*cj5*r02))+x13768+((cj0*r01*x13756))+((x13757*x13758))+((x13752*x13756))+((x13753*x13761))+((sj0*x13755)));
evalcond[6]=((((-1.0)*r02*sj0*x13759))+x13750+(((-1.0)*x13758*x13761))+((x13753*x13757))+((cj0*x13755))+((cj0*r11*x13756))+(((-1.0)*sj0*x13756*x13760)));
evalcond[7]=((-0.09736)+(((-1.0)*cj0*r10*x13764))+(((-1.0)*x13754*x13758))+(((-0.02626)*x13751))+(((-0.0718)*x13750))+(((-1.0)*cj0*x13763))+((r00*sj0*x13764))+((px*sj0))+(((0.026255)*r11*x13753)));
evalcond[8]=((-0.001)+(((-1.0)*cj0*r00*x13764))+(((-0.1158)*sj2))+(((-0.0718)*x13768))+(((0.02626)*x13770))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x13764))+(((-1.0)*px*x13766))+(((-1.0)*sj0*x13763))+((x13753*x13754))+((x13752*x13762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13773=(cj0*sj5);
IkReal x13774=(cj5*cj6);
IkReal x13775=((1.0)*sj5);
IkReal x13776=((1.0)*cj0);
IkReal x13777=((1.0)*sj0);
IkReal x13778=(cj5*sj6);
IkReal x13779=(r10*x13778);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(cj2+(((-1.0)*r22*x13775))+((r20*x13778))+((r21*x13774)));
evalcond[2]=((((-1.0)*x13777*x13779))+sj2+(((-1.0)*r00*x13776*x13778))+((r12*sj0*sj5))+(((-1.0)*r11*x13774*x13777))+(((-1.0)*r01*x13774*x13776))+((r02*x13773)));
evalcond[3]=((((-1.0)*r02*sj0*x13775))+((r01*sj0*x13774))+(((-1.0)*r11*x13774*x13776))+(((-1.0)*x13776*x13779))+((r00*sj0*x13778))+((r12*x13773)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x13780=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*sj5*x13780))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))))+(IKabs(((((-1.0)*sj6*x13780))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13781=(cj5*cj6);
IkReal x13782=((1.0)*sj0);
IkReal x13783=((1.0)*r22);
IkReal x13784=(cj0*sj5);
IkReal x13785=(cj5*sj6);
IkReal x13786=((1.0)*cj0);
IkReal x13787=(cj6*r20);
IkReal x13788=((1.0)*sj5);
IkReal x13789=(r21*sj6);
IkReal x13790=(x13785*x13786);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x13783))+((r21*x13781))+((r20*x13785)));
evalcond[2]=(x13787+(((-1.0)*x13789)));
evalcond[3]=((((-1.0)*cj6*r21*x13788))+(((-1.0)*r20*sj6*x13788))+(((-1.0)*cj5*x13783)));
evalcond[4]=((((-1.0)*r11*x13781*x13782))+((r12*sj0*sj5))+(((-1.0)*r00*x13790))+((r02*x13784))+(((-1.0)*r01*x13781*x13786))+(((-1.0)*r10*x13782*x13785)));
evalcond[5]=((((-1.0)*r02*sj5*x13782))+(((-1.0)*r11*x13781*x13786))+(((-1.0)*r10*x13790))+((r00*sj0*x13785))+((r12*x13784))+((r01*sj0*x13781)));
evalcond[6]=((-0.2413)+(((0.026255)*x13787))+(((-0.026255)*x13789))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13791=(cj0*cj6);
IkReal x13792=(sj0*sj6);
IkReal x13793=((1.0)*r11);
IkReal x13794=(cj6*sj0);
IkReal x13795=(cj0*sj6);
if( IKabs((((r01*x13792))+(((-1.0)*r00*x13794))+((r10*x13791))+(((-1.0)*x13793*x13795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13791))+(((-1.0)*x13792*x13793))+(((-1.0)*r01*x13795))+((r10*x13794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13792))+(((-1.0)*r00*x13794))+((r10*x13791))+(((-1.0)*x13793*x13795))))+IKsqr((((r00*x13791))+(((-1.0)*x13792*x13793))+(((-1.0)*r01*x13795))+((r10*x13794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x13792))+(((-1.0)*r00*x13794))+((r10*x13791))+(((-1.0)*x13793*x13795))), (((r00*x13791))+(((-1.0)*x13792*x13793))+(((-1.0)*r01*x13795))+((r10*x13794))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13796=IKsin(j4);
IkReal x13797=IKcos(j4);
IkReal x13798=(r11*sj6);
IkReal x13799=((0.026255)*cj0);
IkReal x13800=(r01*sj6);
IkReal x13801=(sj0*sj5);
IkReal x13802=(cj6*r11);
IkReal x13803=(r10*sj6);
IkReal x13804=(cj5*r12);
IkReal x13805=(cj6*sj0);
IkReal x13806=((1.0)*sj0);
IkReal x13807=(cj5*r02);
IkReal x13808=((1.0)*r10);
IkReal x13809=(cj0*sj5);
IkReal x13810=(r00*sj6);
IkReal x13811=((0.026255)*sj0);
IkReal x13812=(cj0*cj6);
IkReal x13813=((1.0)*cj0);
IkReal x13814=(cj6*r01);
evalcond[0]=((((-1.0)*x13805*x13808))+x13797+((cj0*x13800))+(((-1.0)*r00*x13812))+((sj0*x13798)));
evalcond[1]=(((cj0*x13798))+(((-1.0)*x13808*x13812))+x13796+((r00*x13805))+(((-1.0)*x13800*x13806)));
evalcond[2]=(x13796+((cj0*x13807))+((sj0*x13804))+((x13809*x13814))+((x13809*x13810))+((x13801*x13803))+((x13801*x13802)));
evalcond[3]=((((-1.0)*x13806*x13807))+((cj0*x13804))+((x13803*x13809))+(((-1.0)*x13797))+((x13802*x13809))+(((-1.0)*x13801*x13810))+(((-1.0)*x13801*x13814)));
evalcond[4]=((0.09756)+(((-1.0)*cj6*r10*x13799))+(((-1.0)*py*x13813))+(((0.02626)*x13796))+(((0.026255)*r00*x13805))+(((0.0718)*x13797))+((px*sj0))+((x13798*x13799))+(((-1.0)*x13800*x13811)));
evalcond[5]=((-0.0001)+(((-0.0718)*x13796))+(((-0.026255)*r10*x13805))+((x13798*x13811))+((x13799*x13800))+(((-1.0)*py*x13806))+(((0.02626)*x13797))+(((-1.0)*px*x13813))+(((-1.0)*cj6*r00*x13799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13815=(cj5*cj6);
IkReal x13816=(r11*sj0);
IkReal x13817=(cj0*sj6);
IkReal x13818=(cj6*sj5);
IkReal x13819=((1.0)*cj0);
IkReal x13820=(r10*sj0);
IkReal x13821=((1.0)*cj5);
IkReal x13822=(cj0*r02);
IkReal x13823=((1.0)*sj5);
IkReal x13824=(cj5*sj6);
IkReal x13825=(cj6*r00);
IkReal x13826=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x13823))+((r21*x13815))+((r20*x13824)));
evalcond[2]=((((-1.0)*cj6*x13820))+((r01*x13817))+((sj6*x13816))+(((-1.0)*x13819*x13825)));
evalcond[3]=((1.0)+(((-1.0)*x13815*x13816))+(((-1.0)*r01*x13815*x13819))+(((-1.0)*r00*x13817*x13821))+((sj5*x13822))+((sj5*x13826))+(((-1.0)*sj6*x13820*x13821)));
evalcond[4]=(((x13816*x13818))+((cj0*r01*x13818))+((cj5*x13822))+((cj5*x13826))+((r00*sj5*x13817))+((sj5*sj6*x13820)));
evalcond[5]=(((r00*sj0*x13824))+(((-1.0)*r10*x13817*x13821))+((cj0*r12*sj5))+((r01*sj0*x13815))+(((-1.0)*r11*x13815*x13819))+(((-1.0)*r02*sj0*x13823)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x13819))+(((0.026255)*r01*x13817))+(((-0.026255)*cj6*x13820))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x13825))+(((0.026255)*sj6*x13816)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13827=(cj6*r20);
IkReal x13828=(r21*sj6);
if( IKabs(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13827))+(((-6.96378830083565e-5)*x13828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13827+(((-1.0)*x13828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13827))+(((-6.96378830083565e-5)*x13828))))+IKsqr((x13827+(((-1.0)*x13828))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x13827))+(((-6.96378830083565e-5)*x13828))), (x13827+(((-1.0)*x13828))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13829=IKsin(j4);
IkReal x13830=IKcos(j4);
IkReal x13831=((1.0)*cj5);
IkReal x13832=(cj0*r10);
IkReal x13833=(sj5*sj6);
IkReal x13834=((1.0)*cj6);
IkReal x13835=((0.026255)*cj6);
IkReal x13836=(r21*sj6);
IkReal x13837=((1.0)*x13830);
IkReal x13838=(cj0*r11*sj6);
IkReal x13839=(cj6*r00*sj0);
IkReal x13840=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13837))+((cj6*r20))+(((-1.0)*x13836)));
evalcond[1]=((((-1.0)*r21*sj5*x13834))+(((-1.0)*r20*x13833))+(((-1.0)*x13829))+(((-1.0)*r22*x13831)));
evalcond[2]=((-0.1264)+(((-0.026255)*x13836))+(((0.0718)*x13829))+pz+((r20*x13835))+(((-0.02626)*x13830)));
evalcond[3]=(x13838+x13839+x13829+(((-1.0)*x13832*x13834))+(((-1.0)*x13840)));
evalcond[4]=((((-1.0)*x13837))+(((-1.0)*r02*sj0*x13831))+(((-1.0)*r00*sj0*x13833))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x13834))+((x13832*x13833)));
evalcond[5]=((0.09756)+(((0.026255)*x13838))+(((-1.0)*x13832*x13835))+(((0.0718)*x13830))+((r00*sj0*x13835))+(((0.02626)*x13829))+((px*sj0))+(((-1.0)*cj0*py))+(((-0.026255)*x13840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13841=(cj5*cj6);
IkReal x13842=(r11*sj0);
IkReal x13843=(cj0*sj6);
IkReal x13844=(cj6*sj5);
IkReal x13845=((1.0)*cj0);
IkReal x13846=(r10*sj0);
IkReal x13847=((1.0)*cj5);
IkReal x13848=(cj0*r02);
IkReal x13849=((1.0)*sj5);
IkReal x13850=(cj5*sj6);
IkReal x13851=(cj6*r00);
IkReal x13852=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x13841))+(((-1.0)*r22*x13849))+((r20*x13850)));
evalcond[2]=((((-1.0)*x13845*x13851))+((sj6*x13842))+((r01*x13843))+(((-1.0)*cj6*x13846)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13843*x13847))+(((-1.0)*r01*x13841*x13845))+((sj5*x13848))+(((-1.0)*sj6*x13846*x13847))+((sj5*x13852))+(((-1.0)*x13841*x13842)));
evalcond[4]=(((cj0*r01*x13844))+((r00*sj5*x13843))+((sj5*sj6*x13846))+((cj5*x13852))+((x13842*x13844))+((cj5*x13848)));
evalcond[5]=((((-1.0)*r02*sj0*x13849))+(((-1.0)*r10*x13843*x13847))+((r01*sj0*x13841))+((cj0*r12*sj5))+((r00*sj0*x13850))+(((-1.0)*r11*x13841*x13845)));
evalcond[6]=((0.1148)+(((0.026255)*sj6*x13842))+(((0.026255)*r01*x13843))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x13851))+(((-1.0)*px*x13845))+(((-0.026255)*cj6*x13846)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13853=IKcos(j4);
IkReal x13854=IKsin(j4);
IkReal x13855=((1.0)*cj5);
IkReal x13856=(cj0*r10);
IkReal x13857=(sj5*sj6);
IkReal x13858=((1.0)*cj6);
IkReal x13859=((0.026255)*cj6);
IkReal x13860=(r21*sj6);
IkReal x13861=(cj0*r11*sj6);
IkReal x13862=(cj6*r00*sj0);
IkReal x13863=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x13860))+x13853+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x13858))+x13854+(((-1.0)*r20*x13857))+(((-1.0)*r22*x13855)));
evalcond[2]=((-0.1246)+(((-0.0718)*x13854))+pz+(((0.02626)*x13853))+((r20*x13859))+(((-0.026255)*x13860)));
evalcond[3]=((((-1.0)*x13863))+x13854+x13861+x13862+(((-1.0)*x13856*x13858)));
evalcond[4]=((((-1.0)*x13853))+((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x13858))+((cj0*cj6*r11*sj5))+((x13856*x13857))+(((-1.0)*r02*sj0*x13855))+(((-1.0)*r00*sj0*x13857)));
evalcond[5]=((0.09756)+(((-1.0)*x13856*x13859))+(((0.0718)*x13853))+(((0.026255)*x13861))+(((0.02626)*x13854))+((px*sj0))+(((-0.026255)*x13863))+((r00*sj0*x13859))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13864=((1.0)*sj5);
IkReal x13865=((1.0)*sj6);
CheckValue<IkReal> x13866=IKPowWithIntegerCheck(sj2,-1);
if(!x13866.valid){
continue;
}
CheckValue<IkReal> x13867=IKPowWithIntegerCheck(cj2,-1);
if(!x13867.valid){
continue;
}
if( IKabs(((x13866.value)*(((((-1.0)*r20*sj6*x13864))+(((-1.0)*cj6*r21*x13864))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13867.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13865))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x13865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13866.value)*(((((-1.0)*r20*sj6*x13864))+(((-1.0)*cj6*r21*x13864))+(((-1.0)*cj5*r22))))))+IKsqr(((x13867.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13865))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x13865))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13866.value)*(((((-1.0)*r20*sj6*x13864))+(((-1.0)*cj6*r21*x13864))+(((-1.0)*cj5*r22))))), ((x13867.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x13865))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x13865))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13868=IKsin(j4);
IkReal x13869=IKcos(j4);
IkReal x13870=(r11*sj0);
IkReal x13871=(cj0*sj6);
IkReal x13872=((0.026255)*r01);
IkReal x13873=(cj5*r12);
IkReal x13874=(cj6*sj5);
IkReal x13875=(r10*sj5);
IkReal x13876=(sj0*sj6);
IkReal x13877=((1.0)*cj5);
IkReal x13878=((1.0)*r01);
IkReal x13879=(r00*sj5);
IkReal x13880=((0.026255)*sj6);
IkReal x13881=((1.0)*py);
IkReal x13882=((1.0)*sj2);
IkReal x13883=((0.026255)*cj6);
IkReal x13884=((1.0)*r21);
IkReal x13885=((1.0)*cj0);
IkReal x13886=((1.0)*cj6*r10);
IkReal x13887=(cj2*x13868);
IkReal x13888=(cj6*r00*sj0);
IkReal x13889=(cj2*x13869);
evalcond[0]=((((-1.0)*x13869*x13882))+((cj6*r20))+(((-1.0)*sj6*x13884)));
evalcond[1]=((((-1.0)*x13868*x13882))+(((-1.0)*r22*x13877))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*x13874*x13884)));
evalcond[2]=(x13888+x13868+((r11*x13871))+(((-1.0)*x13876*x13878))+(((-1.0)*cj6*r10*x13885)));
evalcond[3]=(x13889+((sj6*x13870))+(((-1.0)*sj0*x13886))+((r01*x13871))+(((-1.0)*cj6*r00*x13885)));
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((-1.0)*r21*x13880))+((r20*x13883))+(((-0.0009)*sj2))+pz+(((0.0718)*sj2*x13868))+(((-0.02626)*sj2*x13869)));
evalcond[5]=(((cj0*cj5*r02))+x13887+((x13871*x13879))+((x13870*x13874))+((x13875*x13876))+((cj0*r01*x13874))+((sj0*x13873)));
evalcond[6]=((((-1.0)*x13869))+((x13871*x13875))+(((-1.0)*sj0*x13874*x13878))+((cj0*x13873))+(((-1.0)*x13876*x13879))+((cj0*r11*x13874))+(((-1.0)*r02*sj0*x13877)));
evalcond[7]=((0.09756)+(((0.0718)*x13869))+((r00*sj0*x13883))+(((0.02626)*x13868))+(((-1.0)*cj0*r10*x13883))+(((-1.0)*cj0*x13881))+((px*sj0))+(((-1.0)*x13872*x13876))+(((0.026255)*r11*x13871)));
evalcond[8]=((-0.001)+((x13870*x13880))+(((-0.1158)*sj2))+((x13871*x13872))+(((-1.0)*px*x13885))+(((-1.0)*sj0*x13881))+(((-1.0)*cj0*r00*x13883))+(((0.02626)*x13889))+(((0.0009)*cj2))+(((-0.0718)*x13887))+(((-1.0)*r10*sj0*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13890=((1.0)*sj6);
CheckValue<IkReal> x13891=IKPowWithIntegerCheck(sj2,-1);
if(!x13891.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r11*x13890))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13891.value)*(((((-1.0)*r21*x13890))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r11*x13890))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))+IKsqr(((x13891.value)*(((((-1.0)*r21*x13890))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r11*x13890))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))), ((x13891.value)*(((((-1.0)*r21*x13890))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13892=IKsin(j4);
IkReal x13893=IKcos(j4);
IkReal x13894=(r11*sj0);
IkReal x13895=(cj0*sj6);
IkReal x13896=((0.026255)*r01);
IkReal x13897=(cj5*r12);
IkReal x13898=(cj6*sj5);
IkReal x13899=(r10*sj5);
IkReal x13900=(sj0*sj6);
IkReal x13901=((1.0)*cj5);
IkReal x13902=((1.0)*r01);
IkReal x13903=(r00*sj5);
IkReal x13904=((0.026255)*sj6);
IkReal x13905=((1.0)*py);
IkReal x13906=((1.0)*sj2);
IkReal x13907=((0.026255)*cj6);
IkReal x13908=((1.0)*r21);
IkReal x13909=((1.0)*cj0);
IkReal x13910=((1.0)*cj6*r10);
IkReal x13911=(cj2*x13892);
IkReal x13912=(cj6*r00*sj0);
IkReal x13913=(cj2*x13893);
evalcond[0]=((((-1.0)*sj6*x13908))+(((-1.0)*x13893*x13906))+((cj6*r20)));
evalcond[1]=((((-1.0)*x13898*x13908))+(((-1.0)*r22*x13901))+(((-1.0)*x13892*x13906))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x13892+x13912+(((-1.0)*cj6*r10*x13909))+((r11*x13895))+(((-1.0)*x13900*x13902)));
evalcond[3]=(x13913+(((-1.0)*sj0*x13910))+((r01*x13895))+((sj6*x13894))+(((-1.0)*cj6*r00*x13909)));
evalcond[4]=((-0.1255)+(((0.0718)*sj2*x13892))+(((-0.1158)*cj2))+(((-0.02626)*sj2*x13893))+(((-0.0009)*sj2))+((r20*x13907))+pz+(((-1.0)*r21*x13904)));
evalcond[5]=(((cj0*cj5*r02))+((x13895*x13903))+((x13899*x13900))+((sj0*x13897))+x13911+((x13894*x13898))+((cj0*r01*x13898)));
evalcond[6]=((((-1.0)*x13900*x13903))+(((-1.0)*r02*sj0*x13901))+((x13895*x13899))+(((-1.0)*x13893))+(((-1.0)*sj0*x13898*x13902))+((cj0*x13897))+((cj0*r11*x13898)));
evalcond[7]=((0.09756)+(((-1.0)*cj0*x13905))+(((0.02626)*x13892))+(((-1.0)*x13896*x13900))+(((-1.0)*cj0*r10*x13907))+((r00*sj0*x13907))+(((0.026255)*r11*x13895))+((px*sj0))+(((0.0718)*x13893)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+((x13894*x13904))+(((-0.0718)*x13911))+(((-1.0)*sj0*x13905))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x13907))+((x13895*x13896))+(((-1.0)*cj0*r00*x13907))+(((-1.0)*px*x13909))+(((0.02626)*x13913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13914=((1.0)*r21);
CheckValue<IkReal> x13915 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x13914))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x13914))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13915.valid){
continue;
}
CheckValue<IkReal> x13916=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x13916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13915.value)+(((1.5707963267949)*(x13916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13917=IKsin(j4);
IkReal x13918=IKcos(j4);
IkReal x13919=(r11*sj0);
IkReal x13920=(cj0*sj6);
IkReal x13921=((0.026255)*r01);
IkReal x13922=(cj5*r12);
IkReal x13923=(cj6*sj5);
IkReal x13924=(r10*sj5);
IkReal x13925=(sj0*sj6);
IkReal x13926=((1.0)*cj5);
IkReal x13927=((1.0)*r01);
IkReal x13928=(r00*sj5);
IkReal x13929=((0.026255)*sj6);
IkReal x13930=((1.0)*py);
IkReal x13931=((1.0)*sj2);
IkReal x13932=((0.026255)*cj6);
IkReal x13933=((1.0)*r21);
IkReal x13934=((1.0)*cj0);
IkReal x13935=((1.0)*cj6*r10);
IkReal x13936=(cj2*x13917);
IkReal x13937=(cj6*r00*sj0);
IkReal x13938=(cj2*x13918);
evalcond[0]=((((-1.0)*x13918*x13931))+((cj6*r20))+(((-1.0)*sj6*x13933)));
evalcond[1]=((((-1.0)*r22*x13926))+(((-1.0)*x13917*x13931))+(((-1.0)*x13923*x13933))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=((((-1.0)*x13925*x13927))+x13937+x13917+((r11*x13920))+(((-1.0)*cj6*r10*x13934)));
evalcond[3]=(x13938+(((-1.0)*sj0*x13935))+((sj6*x13919))+((r01*x13920))+(((-1.0)*cj6*r00*x13934)));
evalcond[4]=((-0.1255)+((r20*x13932))+(((-0.1158)*cj2))+(((-0.02626)*sj2*x13918))+(((-0.0009)*sj2))+(((0.0718)*sj2*x13917))+pz+(((-1.0)*r21*x13929)));
evalcond[5]=(((sj0*x13922))+((cj0*cj5*r02))+((cj0*r01*x13923))+x13936+((x13920*x13928))+((x13924*x13925))+((x13919*x13923)));
evalcond[6]=((((-1.0)*sj0*x13923*x13927))+(((-1.0)*x13925*x13928))+((cj0*x13922))+(((-1.0)*x13918))+((x13920*x13924))+((cj0*r11*x13923))+(((-1.0)*r02*sj0*x13926)));
evalcond[7]=((0.09756)+(((-1.0)*cj0*x13930))+(((0.026255)*r11*x13920))+(((0.0718)*x13918))+(((-1.0)*x13921*x13925))+(((-1.0)*cj0*r10*x13932))+((px*sj0))+(((0.02626)*x13917))+((r00*sj0*x13932)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((0.02626)*x13938))+(((-1.0)*sj0*x13930))+((x13920*x13921))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x13932))+(((-0.0718)*x13936))+(((-1.0)*cj0*r00*x13932))+((x13919*x13929))+(((-1.0)*px*x13934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13939=(cj0*sj5);
IkReal x13940=(cj5*cj6);
IkReal x13941=((1.0)*sj5);
IkReal x13942=((1.0)*cj0);
IkReal x13943=((1.0)*sj0);
IkReal x13944=(cj5*sj6);
IkReal x13945=(r10*x13944);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=(cj2+((r20*x13944))+(((-1.0)*r22*x13941))+((r21*x13940)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*x13943*x13945))+(((-1.0)*r00*x13942*x13944))+((r12*sj0*sj5))+(((-1.0)*r01*x13940*x13942))+(((-1.0)*r11*x13940*x13943))+((r02*x13939)));
evalcond[3]=((((-1.0)*r02*sj0*x13941))+((r01*sj0*x13940))+((r00*sj0*x13944))+(((-1.0)*x13942*x13945))+(((-1.0)*r11*x13940*x13942))+((r12*x13939)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13946=(cj5*cj6);
IkReal x13947=((1.0)*sj0);
IkReal x13948=((1.0)*r22);
IkReal x13949=(cj0*sj5);
IkReal x13950=(cj5*sj6);
IkReal x13951=((1.0)*cj0);
IkReal x13952=(cj6*r20);
IkReal x13953=((1.0)*sj5);
IkReal x13954=(r21*sj6);
IkReal x13955=(x13950*x13951);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x13948))+((r20*x13950))+((r21*x13946)));
evalcond[2]=(x13952+(((-1.0)*x13954)));
evalcond[3]=((((-1.0)*r20*sj6*x13953))+(((-1.0)*cj6*r21*x13953))+(((-1.0)*cj5*x13948)));
evalcond[4]=((((-1.0)*r00*x13955))+(((-1.0)*r01*x13946*x13951))+((r12*sj0*sj5))+(((-1.0)*r10*x13947*x13950))+(((-1.0)*r11*x13946*x13947))+((r02*x13949)));
evalcond[5]=(((r01*sj0*x13946))+(((-1.0)*r11*x13946*x13951))+((r00*sj0*x13950))+(((-1.0)*r10*x13955))+(((-1.0)*r02*sj5*x13947))+((r12*x13949)));
evalcond[6]=((0.2413)+(((0.026255)*x13952))+(((-0.026255)*x13954))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13956=(cj0*cj6);
IkReal x13957=(sj0*sj6);
IkReal x13958=((1.0)*r11);
IkReal x13959=(cj6*sj0);
IkReal x13960=(cj0*sj6);
if( IKabs((((r01*x13957))+(((-1.0)*r00*x13959))+((r10*x13956))+(((-1.0)*x13958*x13960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x13957*x13958))+((r00*x13956))+(((-1.0)*r01*x13960))+((r10*x13959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13957))+(((-1.0)*r00*x13959))+((r10*x13956))+(((-1.0)*x13958*x13960))))+IKsqr(((((-1.0)*x13957*x13958))+((r00*x13956))+(((-1.0)*r01*x13960))+((r10*x13959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x13957))+(((-1.0)*r00*x13959))+((r10*x13956))+(((-1.0)*x13958*x13960))), ((((-1.0)*x13957*x13958))+((r00*x13956))+(((-1.0)*r01*x13960))+((r10*x13959))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13961=IKsin(j4);
IkReal x13962=IKcos(j4);
IkReal x13963=(r11*sj6);
IkReal x13964=((0.026255)*cj0);
IkReal x13965=(r01*sj6);
IkReal x13966=(sj0*sj5);
IkReal x13967=(cj6*r11);
IkReal x13968=(r10*sj6);
IkReal x13969=(cj5*r12);
IkReal x13970=(cj6*sj0);
IkReal x13971=((1.0)*sj0);
IkReal x13972=(cj5*r02);
IkReal x13973=((1.0)*r10);
IkReal x13974=(cj0*sj5);
IkReal x13975=(r00*sj6);
IkReal x13976=((0.026255)*sj0);
IkReal x13977=(cj0*cj6);
IkReal x13978=((1.0)*cj0);
IkReal x13979=(cj6*r01);
evalcond[0]=(x13962+((cj0*x13965))+(((-1.0)*x13970*x13973))+((sj0*x13963))+(((-1.0)*r00*x13977)));
evalcond[1]=((((-1.0)*x13973*x13977))+x13961+((cj0*x13963))+(((-1.0)*x13965*x13971))+((r00*x13970)));
evalcond[2]=(x13961+((x13974*x13975))+((x13974*x13979))+((cj0*x13972))+((x13966*x13968))+((x13966*x13967))+((sj0*x13969)));
evalcond[3]=((((-1.0)*x13971*x13972))+((cj0*x13969))+(((-1.0)*x13962))+((x13968*x13974))+((x13967*x13974))+(((-1.0)*x13966*x13975))+(((-1.0)*x13966*x13979)));
evalcond[4]=((0.09736)+((x13963*x13964))+(((-1.0)*py*x13978))+(((0.0718)*x13962))+(((-1.0)*cj6*r10*x13964))+(((0.026255)*r00*x13970))+(((-1.0)*x13965*x13976))+(((0.02626)*x13961))+((px*sj0)));
evalcond[5]=((-0.0001)+(((-1.0)*py*x13971))+((x13963*x13976))+(((-0.0718)*x13961))+(((-1.0)*px*x13978))+(((0.02626)*x13962))+(((-1.0)*cj6*r00*x13964))+(((-0.026255)*r10*x13970))+((x13964*x13965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13980=(cj5*cj6);
IkReal x13981=(r11*sj0);
IkReal x13982=(cj0*sj6);
IkReal x13983=(cj6*sj5);
IkReal x13984=((1.0)*cj0);
IkReal x13985=(r10*sj0);
IkReal x13986=((1.0)*cj5);
IkReal x13987=(cj0*r02);
IkReal x13988=((1.0)*sj5);
IkReal x13989=(cj5*sj6);
IkReal x13990=(cj6*r00);
IkReal x13991=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x13989))+((r21*x13980))+(((-1.0)*r22*x13988)));
evalcond[2]=(((sj6*x13981))+((r01*x13982))+(((-1.0)*x13984*x13990))+(((-1.0)*cj6*x13985)));
evalcond[3]=((-1.0)+(((-1.0)*x13980*x13981))+(((-1.0)*r01*x13980*x13984))+(((-1.0)*r00*x13982*x13986))+((sj5*x13991))+((sj5*x13987))+(((-1.0)*sj6*x13985*x13986)));
evalcond[4]=(((cj0*r01*x13983))+((r00*sj5*x13982))+((x13981*x13983))+((cj5*x13987))+((sj5*sj6*x13985))+((cj5*x13991)));
evalcond[5]=(((r00*sj0*x13989))+((cj0*r12*sj5))+(((-1.0)*r10*x13982*x13986))+(((-1.0)*r02*sj0*x13988))+((r01*sj0*x13980))+(((-1.0)*r11*x13980*x13984)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj6*x13985))+(((-1.0)*px*x13984))+(((-0.026255)*cj0*x13990))+(((-1.0)*py*sj0))+(((0.026255)*r01*x13982))+(((0.026255)*sj6*x13981)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13992=IKcos(j4);
IkReal x13993=IKsin(j4);
IkReal x13994=((1.0)*cj5);
IkReal x13995=(cj0*r10);
IkReal x13996=(sj5*sj6);
IkReal x13997=((1.0)*cj6);
IkReal x13998=((0.026255)*cj6);
IkReal x13999=(r21*sj6);
IkReal x14000=(cj0*r11*sj6);
IkReal x14001=(cj6*r00*sj0);
IkReal x14002=(r01*sj0*sj6);
evalcond[0]=(x13992+((cj6*r20))+(((-1.0)*x13999)));
evalcond[1]=(x13993+(((-1.0)*r22*x13994))+(((-1.0)*r21*sj5*x13997))+(((-1.0)*r20*x13996)));
evalcond[2]=((0.1264)+(((-0.026255)*x13999))+((r20*x13998))+pz+(((0.02626)*x13992))+(((-0.0718)*x13993)));
evalcond[3]=(x13993+(((-1.0)*x14002))+x14000+x14001+(((-1.0)*x13995*x13997)));
evalcond[4]=(((x13995*x13996))+(((-1.0)*r01*sj0*sj5*x13997))+((cj0*cj5*r12))+(((-1.0)*r00*sj0*x13996))+(((-1.0)*r02*sj0*x13994))+((cj0*cj6*r11*sj5))+(((-1.0)*x13992)));
evalcond[5]=((0.09736)+(((0.0718)*x13992))+(((0.026255)*x14000))+((px*sj0))+(((-0.026255)*x14002))+(((0.02626)*x13993))+((r00*sj0*x13998))+(((-1.0)*x13995*x13998))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14003=(cj5*cj6);
IkReal x14004=(r11*sj0);
IkReal x14005=(cj0*sj6);
IkReal x14006=(cj6*sj5);
IkReal x14007=((1.0)*cj0);
IkReal x14008=(r10*sj0);
IkReal x14009=((1.0)*cj5);
IkReal x14010=(cj0*r02);
IkReal x14011=((1.0)*sj5);
IkReal x14012=(cj5*sj6);
IkReal x14013=(cj6*r00);
IkReal x14014=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x14003))+((r20*x14012))+(((-1.0)*r22*x14011)));
evalcond[2]=((((-1.0)*x14007*x14013))+((sj6*x14004))+(((-1.0)*cj6*x14008))+((r01*x14005)));
evalcond[3]=((1.0)+(((-1.0)*r01*x14003*x14007))+(((-1.0)*r00*x14005*x14009))+(((-1.0)*x14003*x14004))+((sj5*x14014))+((sj5*x14010))+(((-1.0)*sj6*x14008*x14009)));
evalcond[4]=(((cj5*x14010))+((cj5*x14014))+((cj0*r01*x14006))+((sj5*sj6*x14008))+((x14004*x14006))+((r00*sj5*x14005)));
evalcond[5]=((((-1.0)*r10*x14005*x14009))+((cj0*r12*sj5))+((r01*sj0*x14003))+(((-1.0)*r02*sj0*x14011))+((r00*sj0*x14012))+(((-1.0)*r11*x14003*x14007)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x14005))+(((-0.026255)*cj0*x14013))+(((-1.0)*py*sj0))+(((-1.0)*px*x14007))+(((0.026255)*sj6*x14004))+(((-0.026255)*cj6*x14008)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14015=(cj6*r20);
IkReal x14016=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14015))+(((-6.96378830083565e-5)*x14016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14016))+x14015)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14015))+(((-6.96378830083565e-5)*x14016))))+IKsqr(((((-1.0)*x14016))+x14015))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14015))+(((-6.96378830083565e-5)*x14016))), ((((-1.0)*x14016))+x14015));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14017=IKsin(j4);
IkReal x14018=IKcos(j4);
IkReal x14019=((1.0)*cj5);
IkReal x14020=(cj0*r10);
IkReal x14021=(sj5*sj6);
IkReal x14022=((1.0)*cj6);
IkReal x14023=((0.026255)*cj6);
IkReal x14024=(r21*sj6);
IkReal x14025=((1.0)*x14018);
IkReal x14026=(cj0*r11*sj6);
IkReal x14027=(cj6*r00*sj0);
IkReal x14028=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x14024))+(((-1.0)*x14025))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x14022))+(((-1.0)*r20*x14021))+(((-1.0)*x14017))+(((-1.0)*r22*x14019)));
evalcond[2]=((0.1246)+(((-0.026255)*x14024))+((r20*x14023))+(((0.0718)*x14017))+(((-0.02626)*x14018))+pz);
evalcond[3]=((((-1.0)*x14028))+(((-1.0)*x14020*x14022))+x14017+x14026+x14027);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x14022))+((cj0*cj6*r11*sj5))+(((-1.0)*x14025))+((x14020*x14021))+(((-1.0)*r02*sj0*x14019))+(((-1.0)*r00*sj0*x14021)));
evalcond[5]=((0.09736)+((r00*sj0*x14023))+(((0.026255)*x14026))+(((0.02626)*x14017))+(((-0.026255)*x14028))+(((-1.0)*x14020*x14023))+(((0.0718)*x14018))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14029=((1.0)*sj6);
CheckValue<IkReal> x14030=IKPowWithIntegerCheck(sj2,-1);
if(!x14030.valid){
continue;
}
CheckValue<IkReal> x14031=IKPowWithIntegerCheck(cj2,-1);
if(!x14031.valid){
continue;
}
if( IKabs(((x14030.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14031.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x14029))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x14029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14030.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x14031.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x14029))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x14029))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14030.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x14031.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x14029))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x14029))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14032=IKsin(j4);
IkReal x14033=IKcos(j4);
IkReal x14034=(r11*sj0);
IkReal x14035=(cj0*sj6);
IkReal x14036=((0.026255)*r01);
IkReal x14037=(cj0*cj5);
IkReal x14038=(cj6*sj5);
IkReal x14039=(r10*sj0);
IkReal x14040=(sj5*sj6);
IkReal x14041=((1.0)*cj5);
IkReal x14042=((1.0)*cj6);
IkReal x14043=((1.0)*sj0);
IkReal x14044=((0.026255)*sj6);
IkReal x14045=(cj0*r10);
IkReal x14046=((0.026255)*cj6);
IkReal x14047=((1.0)*r21);
IkReal x14048=((1.0)*cj0);
IkReal x14049=(cj0*r00);
IkReal x14050=(cj2*x14032);
IkReal x14051=(cj6*r00*sj0);
IkReal x14052=(cj2*x14033);
IkReal x14053=(sj2*x14032);
IkReal x14054=(sj2*x14033);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x14047))+x14054);
evalcond[1]=((((-1.0)*x14038*x14047))+(((-1.0)*r20*x14040))+(((-1.0)*r22*x14041))+x14053);
evalcond[2]=(((r11*x14035))+(((-1.0)*x14042*x14045))+(((-1.0)*r01*sj6*x14043))+x14051+x14032);
evalcond[3]=(((r01*x14035))+(((-1.0)*x14042*x14049))+((sj6*x14034))+(((-1.0)*x14039*x14042))+x14052);
evalcond[4]=((0.1255)+(((-0.0718)*x14053))+(((0.1158)*cj2))+(((-1.0)*r21*x14044))+(((0.02626)*x14054))+((r20*x14046))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x14034*x14038))+((cj0*r01*x14038))+((r00*sj5*x14035))+((x14039*x14040))+x14050+((r02*x14037)));
evalcond[6]=(((cj0*r11*x14038))+(((-1.0)*r02*sj0*x14041))+(((-1.0)*x14033))+(((-1.0)*r01*x14038*x14043))+(((-1.0)*r00*x14040*x14043))+((r12*x14037))+((r10*sj5*x14035)));
evalcond[7]=((0.09736)+(((-1.0)*x14045*x14046))+(((-1.0)*py*x14048))+((r00*sj0*x14046))+(((0.026255)*r11*x14035))+(((0.02626)*x14032))+((px*sj0))+(((-1.0)*sj0*sj6*x14036))+(((0.0718)*x14033)));
evalcond[8]=((-0.001)+(((-0.0718)*x14050))+(((-0.1158)*sj2))+(((-1.0)*py*x14043))+(((0.02626)*x14052))+(((-1.0)*px*x14048))+(((0.0009)*cj2))+(((-1.0)*x14039*x14046))+((x14035*x14036))+(((-1.0)*x14046*x14049))+((x14034*x14044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14055=((1.0)*cj6);
CheckValue<IkReal> x14056=IKPowWithIntegerCheck(sj2,-1);
if(!x14056.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0*x14055))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14056.value)*(((((-1.0)*r20*x14055))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0*x14055))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))+IKsqr(((x14056.value)*(((((-1.0)*r20*x14055))+((r21*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0*x14055))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))), ((x14056.value)*(((((-1.0)*r20*x14055))+((r21*sj6))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14057=IKsin(j4);
IkReal x14058=IKcos(j4);
IkReal x14059=(r11*sj0);
IkReal x14060=(cj0*sj6);
IkReal x14061=((0.026255)*r01);
IkReal x14062=(cj0*cj5);
IkReal x14063=(cj6*sj5);
IkReal x14064=(r10*sj0);
IkReal x14065=(sj5*sj6);
IkReal x14066=((1.0)*cj5);
IkReal x14067=((1.0)*cj6);
IkReal x14068=((1.0)*sj0);
IkReal x14069=((0.026255)*sj6);
IkReal x14070=(cj0*r10);
IkReal x14071=((0.026255)*cj6);
IkReal x14072=((1.0)*r21);
IkReal x14073=((1.0)*cj0);
IkReal x14074=(cj0*r00);
IkReal x14075=(cj2*x14057);
IkReal x14076=(cj6*r00*sj0);
IkReal x14077=(cj2*x14058);
IkReal x14078=(sj2*x14057);
IkReal x14079=(sj2*x14058);
evalcond[0]=((((-1.0)*sj6*x14072))+((cj6*r20))+x14079);
evalcond[1]=((((-1.0)*r20*x14065))+(((-1.0)*r22*x14066))+x14078+(((-1.0)*x14063*x14072)));
evalcond[2]=((((-1.0)*r01*sj6*x14068))+((r11*x14060))+(((-1.0)*x14067*x14070))+x14057+x14076);
evalcond[3]=((((-1.0)*x14064*x14067))+((sj6*x14059))+((r01*x14060))+(((-1.0)*x14067*x14074))+x14077);
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-0.0718)*x14078))+pz+((r20*x14071))+(((-1.0)*r21*x14069))+(((0.0009)*sj2))+(((0.02626)*x14079)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x14062))+((r00*sj5*x14060))+((cj0*r01*x14063))+((x14059*x14063))+x14075+((x14064*x14065)));
evalcond[6]=((((-1.0)*r01*x14063*x14068))+(((-1.0)*x14058))+(((-1.0)*r02*sj0*x14066))+((r10*sj5*x14060))+((cj0*r11*x14063))+((r12*x14062))+(((-1.0)*r00*x14065*x14068)));
evalcond[7]=((0.09736)+(((-1.0)*sj0*sj6*x14061))+(((0.0718)*x14058))+(((0.02626)*x14057))+((r00*sj0*x14071))+(((-1.0)*x14070*x14071))+((px*sj0))+(((-1.0)*py*x14073))+(((0.026255)*r11*x14060)));
evalcond[8]=((-0.001)+(((-1.0)*px*x14073))+((x14060*x14061))+(((-0.1158)*sj2))+(((-1.0)*x14064*x14071))+(((0.0009)*cj2))+(((-0.0718)*x14075))+(((-1.0)*py*x14068))+((x14059*x14069))+(((-1.0)*x14071*x14074))+(((0.02626)*x14077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14080=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x14080.valid){
continue;
}
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14080.value)))+(x14081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14082=IKsin(j4);
IkReal x14083=IKcos(j4);
IkReal x14084=(r11*sj0);
IkReal x14085=(cj0*sj6);
IkReal x14086=((0.026255)*r01);
IkReal x14087=(cj0*cj5);
IkReal x14088=(cj6*sj5);
IkReal x14089=(r10*sj0);
IkReal x14090=(sj5*sj6);
IkReal x14091=((1.0)*cj5);
IkReal x14092=((1.0)*cj6);
IkReal x14093=((1.0)*sj0);
IkReal x14094=((0.026255)*sj6);
IkReal x14095=(cj0*r10);
IkReal x14096=((0.026255)*cj6);
IkReal x14097=((1.0)*r21);
IkReal x14098=((1.0)*cj0);
IkReal x14099=(cj0*r00);
IkReal x14100=(cj2*x14082);
IkReal x14101=(cj6*r00*sj0);
IkReal x14102=(cj2*x14083);
IkReal x14103=(sj2*x14082);
IkReal x14104=(sj2*x14083);
evalcond[0]=((((-1.0)*sj6*x14097))+((cj6*r20))+x14104);
evalcond[1]=((((-1.0)*r22*x14091))+(((-1.0)*x14088*x14097))+x14103+(((-1.0)*r20*x14090)));
evalcond[2]=((((-1.0)*x14092*x14095))+((r11*x14085))+(((-1.0)*r01*sj6*x14093))+x14101+x14082);
evalcond[3]=((((-1.0)*x14089*x14092))+((r01*x14085))+(((-1.0)*x14092*x14099))+((sj6*x14084))+x14102);
evalcond[4]=((0.1255)+(((0.1158)*cj2))+((r20*x14096))+(((-0.0718)*x14103))+pz+(((-1.0)*r21*x14094))+(((0.02626)*x14104))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x14084*x14088))+((r02*x14087))+((r00*sj5*x14085))+((x14089*x14090))+((cj0*r01*x14088))+x14100);
evalcond[6]=((((-1.0)*r02*sj0*x14091))+((r10*sj5*x14085))+(((-1.0)*x14083))+(((-1.0)*r01*x14088*x14093))+((cj0*r11*x14088))+((r12*x14087))+(((-1.0)*r00*x14090*x14093)));
evalcond[7]=((0.09736)+(((-1.0)*py*x14098))+(((0.0718)*x14083))+(((-1.0)*x14095*x14096))+(((0.026255)*r11*x14085))+((px*sj0))+(((0.02626)*x14082))+(((-1.0)*sj0*sj6*x14086))+((r00*sj0*x14096)));
evalcond[8]=((-0.001)+(((-1.0)*x14089*x14096))+(((-0.1158)*sj2))+(((-1.0)*px*x14098))+((x14084*x14094))+(((-1.0)*x14096*x14099))+(((-0.0718)*x14100))+(((0.0009)*cj2))+(((-1.0)*py*x14093))+(((0.02626)*x14102))+((x14085*x14086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14105=(cj0*sj5);
IkReal x14106=(cj5*cj6);
IkReal x14107=((1.0)*sj5);
IkReal x14108=((1.0)*cj0);
IkReal x14109=((1.0)*sj0);
IkReal x14110=(cj5*sj6);
IkReal x14111=(r10*x14110);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x14107))+((r20*x14110))+((r21*x14106))+(((-1.0)*cj2)));
evalcond[2]=(((r02*x14105))+sj2+((r12*sj0*sj5))+(((-1.0)*r01*x14106*x14108))+(((-1.0)*r11*x14106*x14109))+(((-1.0)*r00*x14108*x14110))+(((-1.0)*x14109*x14111)));
evalcond[3]=((((-1.0)*x14108*x14111))+(((-1.0)*r02*sj0*x14107))+((r01*sj0*x14106))+(((-1.0)*r11*x14106*x14108))+((r00*sj0*x14110))+((r12*x14105)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14112=(cj5*cj6);
IkReal x14113=((1.0)*sj0);
IkReal x14114=((1.0)*r22);
IkReal x14115=(cj0*sj5);
IkReal x14116=(cj5*sj6);
IkReal x14117=((1.0)*cj0);
IkReal x14118=(cj6*r20);
IkReal x14119=((1.0)*sj5);
IkReal x14120=(r21*sj6);
IkReal x14121=(x14116*x14117);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x14114))+((r20*x14116))+((r21*x14112)));
evalcond[2]=((((-1.0)*x14120))+x14118);
evalcond[3]=((((-1.0)*cj6*r21*x14119))+(((-1.0)*cj5*x14114))+(((-1.0)*r20*sj6*x14119)));
evalcond[4]=(((r02*x14115))+(((-1.0)*r01*x14112*x14117))+(((-1.0)*r10*x14113*x14116))+(((-1.0)*r00*x14121))+((r12*sj0*sj5))+(((-1.0)*r11*x14112*x14113)));
evalcond[5]=((((-1.0)*r10*x14121))+(((-1.0)*r11*x14112*x14117))+(((-1.0)*r02*sj5*x14113))+((r01*sj0*x14112))+((r12*x14115))+((r00*sj0*x14116)));
evalcond[6]=((0.2413)+(((0.026255)*x14118))+pz+(((-0.026255)*x14120)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14122=(cj0*cj6);
IkReal x14123=(cj6*sj0);
IkReal x14124=(cj0*sj6);
IkReal x14125=((1.0)*sj0*sj6);
if( IKabs((((r00*x14123))+(((-1.0)*r01*x14125))+(((-1.0)*r10*x14122))+((r11*x14124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x14125))+((r00*x14122))+(((-1.0)*r01*x14124))+((r10*x14123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x14123))+(((-1.0)*r01*x14125))+(((-1.0)*r10*x14122))+((r11*x14124))))+IKsqr(((((-1.0)*r11*x14125))+((r00*x14122))+(((-1.0)*r01*x14124))+((r10*x14123))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x14123))+(((-1.0)*r01*x14125))+(((-1.0)*r10*x14122))+((r11*x14124))), ((((-1.0)*r11*x14125))+((r00*x14122))+(((-1.0)*r01*x14124))+((r10*x14123))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14126=IKsin(j4);
IkReal x14127=IKcos(j4);
IkReal x14128=(r11*sj6);
IkReal x14129=((0.026255)*cj0);
IkReal x14130=(r01*sj6);
IkReal x14131=(sj0*sj5);
IkReal x14132=(cj6*r11);
IkReal x14133=(r10*sj6);
IkReal x14134=(cj5*r12);
IkReal x14135=(cj6*sj0);
IkReal x14136=((1.0)*sj0);
IkReal x14137=(cj5*r02);
IkReal x14138=((1.0)*r10);
IkReal x14139=(cj0*sj5);
IkReal x14140=(r00*sj6);
IkReal x14141=((0.026255)*sj0);
IkReal x14142=(cj0*cj6);
IkReal x14143=((1.0)*cj0);
IkReal x14144=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x14142))+((sj0*x14128))+(((-1.0)*x14135*x14138))+x14127+((cj0*x14130)));
evalcond[1]=(((cj0*x14128))+(((-1.0)*x14138*x14142))+(((-1.0)*x14126))+(((-1.0)*x14130*x14136))+((r00*x14135)));
evalcond[2]=(((x14139*x14144))+((x14139*x14140))+x14126+((cj0*x14137))+((sj0*x14134))+((x14131*x14133))+((x14131*x14132)));
evalcond[3]=((((-1.0)*x14131*x14140))+(((-1.0)*x14131*x14144))+((x14132*x14139))+(((-1.0)*x14136*x14137))+x14127+((cj0*x14134))+((x14133*x14139)));
evalcond[4]=((-0.09756)+(((0.026255)*r00*x14135))+(((-1.0)*x14130*x14141))+(((-0.0718)*x14127))+((x14128*x14129))+(((-0.02626)*x14126))+((px*sj0))+(((-1.0)*cj6*r10*x14129))+(((-1.0)*py*x14143)));
evalcond[5]=((-0.0001)+(((-1.0)*px*x14143))+(((-0.0718)*x14126))+((x14128*x14141))+(((-1.0)*py*x14136))+((x14129*x14130))+(((-0.026255)*r10*x14135))+(((0.02626)*x14127))+(((-1.0)*cj6*r00*x14129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14145=(cj5*cj6);
IkReal x14146=(r11*sj0);
IkReal x14147=(cj0*sj6);
IkReal x14148=(cj6*sj5);
IkReal x14149=((1.0)*cj0);
IkReal x14150=(r10*sj0);
IkReal x14151=((1.0)*cj5);
IkReal x14152=(cj0*r02);
IkReal x14153=((1.0)*sj5);
IkReal x14154=(cj5*sj6);
IkReal x14155=(cj6*r00);
IkReal x14156=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x14153))+((r21*x14145))+((r20*x14154)));
evalcond[2]=(((sj6*x14146))+((r01*x14147))+(((-1.0)*cj6*x14150))+(((-1.0)*x14149*x14155)));
evalcond[3]=((1.0)+(((-1.0)*r00*x14147*x14151))+(((-1.0)*sj6*x14150*x14151))+((sj5*x14156))+((sj5*x14152))+(((-1.0)*x14145*x14146))+(((-1.0)*r01*x14145*x14149)));
evalcond[4]=(((cj0*r01*x14148))+((x14146*x14148))+((cj5*x14156))+((cj5*x14152))+((sj5*sj6*x14150))+((r00*sj5*x14147)));
evalcond[5]=(((r01*sj0*x14145))+(((-1.0)*r10*x14147*x14151))+(((-1.0)*r11*x14145*x14149))+((r00*sj0*x14154))+(((-1.0)*r02*sj0*x14153))+((cj0*r12*sj5)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x14147))+(((-0.026255)*cj0*x14155))+(((-0.026255)*cj6*x14150))+(((-1.0)*px*x14149))+(((0.026255)*sj6*x14146))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14157=IKcos(j4);
IkReal x14158=IKsin(j4);
IkReal x14159=((1.0)*cj5);
IkReal x14160=(cj0*r10);
IkReal x14161=(sj5*sj6);
IkReal x14162=((1.0)*cj6);
IkReal x14163=((0.026255)*cj6);
IkReal x14164=(r21*sj6);
IkReal x14165=(cj0*r11*sj6);
IkReal x14166=(cj6*r00*sj0);
IkReal x14167=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+x14157+(((-1.0)*x14164)));
evalcond[1]=((((-1.0)*r22*x14159))+x14158+(((-1.0)*r21*sj5*x14162))+(((-1.0)*r20*x14161)));
evalcond[2]=((0.1264)+(((-0.0718)*x14158))+pz+(((-0.026255)*x14164))+((r20*x14163))+(((0.02626)*x14157)));
evalcond[3]=(x14165+x14166+(((-1.0)*x14160*x14162))+(((-1.0)*x14167))+(((-1.0)*x14158)));
evalcond[4]=(((x14160*x14161))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x14159))+(((-1.0)*r00*sj0*x14161))+(((-1.0)*r01*sj0*sj5*x14162))+((cj0*cj6*r11*sj5))+x14157);
evalcond[5]=((-0.09756)+(((-0.0718)*x14157))+((r00*sj0*x14163))+(((-0.026255)*x14167))+((px*sj0))+(((0.026255)*x14165))+(((-1.0)*x14160*x14163))+(((-1.0)*cj0*py))+(((-0.02626)*x14158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14168=(cj5*cj6);
IkReal x14169=(r11*sj0);
IkReal x14170=(cj0*sj6);
IkReal x14171=(cj6*sj5);
IkReal x14172=((1.0)*cj0);
IkReal x14173=(r10*sj0);
IkReal x14174=((1.0)*cj5);
IkReal x14175=(cj0*r02);
IkReal x14176=((1.0)*sj5);
IkReal x14177=(cj5*sj6);
IkReal x14178=(cj6*r00);
IkReal x14179=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x14177))+(((-1.0)*r22*x14176))+((r21*x14168)));
evalcond[2]=((((-1.0)*cj6*x14173))+((r01*x14170))+((sj6*x14169))+(((-1.0)*x14172*x14178)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14168*x14172))+(((-1.0)*x14168*x14169))+(((-1.0)*r00*x14170*x14174))+(((-1.0)*sj6*x14173*x14174))+((sj5*x14179))+((sj5*x14175)));
evalcond[4]=(((cj5*x14179))+((cj5*x14175))+((cj0*r01*x14171))+((sj5*sj6*x14173))+((r00*sj5*x14170))+((x14169*x14171)));
evalcond[5]=((((-1.0)*r02*sj0*x14176))+((r01*sj0*x14168))+((cj0*r12*sj5))+(((-1.0)*r10*x14170*x14174))+(((-1.0)*r11*x14168*x14172))+((r00*sj0*x14177)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x14170))+(((0.026255)*sj6*x14169))+(((-0.026255)*cj0*x14178))+(((-1.0)*px*x14172))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x14173)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14180=(cj6*r20);
IkReal x14181=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14180))+(((-6.96378830083565e-5)*x14181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14180+(((-1.0)*x14181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14180))+(((-6.96378830083565e-5)*x14181))))+IKsqr((x14180+(((-1.0)*x14181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14180))+(((-6.96378830083565e-5)*x14181))), (x14180+(((-1.0)*x14181))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14182=IKsin(j4);
IkReal x14183=IKcos(j4);
IkReal x14184=((1.0)*cj5);
IkReal x14185=(cj0*r10);
IkReal x14186=(sj5*sj6);
IkReal x14187=((1.0)*cj6);
IkReal x14188=((0.026255)*cj6);
IkReal x14189=(r21*sj6);
IkReal x14190=((1.0)*x14182);
IkReal x14191=(cj0*r11*sj6);
IkReal x14192=(cj6*r00*sj0);
IkReal x14193=(r01*sj0*sj6);
evalcond[0]=(((cj6*r20))+(((-1.0)*x14183))+(((-1.0)*x14189)));
evalcond[1]=((((-1.0)*r22*x14184))+(((-1.0)*x14190))+(((-1.0)*r20*x14186))+(((-1.0)*r21*sj5*x14187)));
evalcond[2]=((0.1246)+((r20*x14188))+(((-0.02626)*x14183))+(((-0.026255)*x14189))+pz+(((0.0718)*x14182)));
evalcond[3]=((((-1.0)*x14193))+(((-1.0)*x14185*x14187))+(((-1.0)*x14190))+x14191+x14192);
evalcond[4]=((((-1.0)*r00*sj0*x14186))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+((x14185*x14186))+x14183+(((-1.0)*r01*sj0*sj5*x14187))+(((-1.0)*r02*sj0*x14184)));
evalcond[5]=((-0.09756)+((r00*sj0*x14188))+(((-1.0)*x14185*x14188))+(((-0.0718)*x14183))+(((-0.026255)*x14193))+(((-0.02626)*x14182))+((px*sj0))+(((-1.0)*cj0*py))+(((0.026255)*x14191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14194=((1.0)*sj6);
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(sj2,-1);
if(!x14195.valid){
continue;
}
CheckValue<IkReal> x14196=IKPowWithIntegerCheck(cj2,-1);
if(!x14196.valid){
continue;
}
if( IKabs(((x14195.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14196.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x14194))+(((-1.0)*r11*sj0*x14194))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14195.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x14196.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x14194))+(((-1.0)*r11*sj0*x14194))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14195.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x14196.value)*((((cj6*r10*sj0))+(((-1.0)*cj0*r01*x14194))+(((-1.0)*r11*sj0*x14194))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14197=IKcos(j4);
IkReal x14198=IKsin(j4);
IkReal x14199=(r11*sj0);
IkReal x14200=(cj0*sj6);
IkReal x14201=((0.026255)*r01);
IkReal x14202=(cj0*cj5);
IkReal x14203=(cj6*sj5);
IkReal x14204=(r10*sj0);
IkReal x14205=(sj5*sj6);
IkReal x14206=((1.0)*cj5);
IkReal x14207=((1.0)*cj6);
IkReal x14208=((1.0)*sj0);
IkReal x14209=((0.026255)*sj6);
IkReal x14210=(cj0*r10);
IkReal x14211=((0.026255)*cj6);
IkReal x14212=((1.0)*r21);
IkReal x14213=((1.0)*cj0);
IkReal x14214=(cj0*r00);
IkReal x14215=(cj2*x14198);
IkReal x14216=(cj6*r00*sj0);
IkReal x14217=(cj2*x14197);
IkReal x14218=(sj2*x14198);
IkReal x14219=(sj2*x14197);
evalcond[0]=((((-1.0)*sj6*x14212))+((cj6*r20))+x14219);
evalcond[1]=((((-1.0)*r20*x14205))+(((-1.0)*r22*x14206))+(((-1.0)*x14203*x14212))+x14218);
evalcond[2]=((((-1.0)*x14207*x14214))+((sj6*x14199))+(((-1.0)*x14204*x14207))+((r01*x14200))+x14217);
evalcond[3]=((((-1.0)*x14198))+(((-1.0)*x14207*x14210))+(((-1.0)*r01*sj6*x14208))+((r11*x14200))+x14216);
evalcond[4]=((0.1255)+(((0.1158)*cj2))+(((-1.0)*r21*x14209))+(((0.02626)*x14219))+pz+(((-0.0718)*x14218))+((r20*x14211))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x14203))+((r00*sj5*x14200))+((x14204*x14205))+((r02*x14202))+((x14199*x14203))+x14215);
evalcond[6]=((((-1.0)*r00*x14205*x14208))+(((-1.0)*r02*sj0*x14206))+((cj0*r11*x14203))+x14197+(((-1.0)*r01*x14203*x14208))+((r12*x14202))+((r10*sj5*x14200)));
evalcond[7]=((-0.09756)+(((-1.0)*x14210*x14211))+(((-1.0)*py*x14213))+(((-0.0718)*x14197))+(((-1.0)*sj0*sj6*x14201))+((r00*sj0*x14211))+(((-0.02626)*x14198))+((px*sj0))+(((0.026255)*r11*x14200)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*x14211*x14214))+(((-1.0)*py*x14208))+(((-1.0)*x14204*x14211))+(((0.0009)*cj2))+((x14199*x14209))+(((0.02626)*x14217))+((x14200*x14201))+(((-0.0718)*x14215))+(((-1.0)*px*x14213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14220=((1.0)*cj6);
CheckValue<IkReal> x14221=IKPowWithIntegerCheck(sj2,-1);
if(!x14221.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x14220))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14221.value)*((((r21*sj6))+(((-1.0)*r20*x14220)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x14220))+(((-1.0)*r01*sj0*sj6))))+IKsqr(((x14221.value)*((((r21*sj6))+(((-1.0)*r20*x14220))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x14220))+(((-1.0)*r01*sj0*sj6))), ((x14221.value)*((((r21*sj6))+(((-1.0)*r20*x14220))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14222=IKcos(j4);
IkReal x14223=IKsin(j4);
IkReal x14224=(r11*sj0);
IkReal x14225=(cj0*sj6);
IkReal x14226=((0.026255)*r01);
IkReal x14227=(cj0*cj5);
IkReal x14228=(cj6*sj5);
IkReal x14229=(r10*sj0);
IkReal x14230=(sj5*sj6);
IkReal x14231=((1.0)*cj5);
IkReal x14232=((1.0)*cj6);
IkReal x14233=((1.0)*sj0);
IkReal x14234=((0.026255)*sj6);
IkReal x14235=(cj0*r10);
IkReal x14236=((0.026255)*cj6);
IkReal x14237=((1.0)*r21);
IkReal x14238=((1.0)*cj0);
IkReal x14239=(cj0*r00);
IkReal x14240=(cj2*x14223);
IkReal x14241=(cj6*r00*sj0);
IkReal x14242=(cj2*x14222);
IkReal x14243=(sj2*x14223);
IkReal x14244=(sj2*x14222);
evalcond[0]=((((-1.0)*sj6*x14237))+((cj6*r20))+x14244);
evalcond[1]=((((-1.0)*x14228*x14237))+(((-1.0)*r20*x14230))+(((-1.0)*r22*x14231))+x14243);
evalcond[2]=((((-1.0)*x14232*x14239))+(((-1.0)*x14229*x14232))+((sj6*x14224))+((r01*x14225))+x14242);
evalcond[3]=((((-1.0)*x14232*x14235))+(((-1.0)*r01*sj6*x14233))+((r11*x14225))+(((-1.0)*x14223))+x14241);
evalcond[4]=((0.1255)+(((0.02626)*x14244))+((r20*x14236))+(((0.1158)*cj2))+(((-1.0)*r21*x14234))+(((-0.0718)*x14243))+pz+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r02*x14227))+((x14224*x14228))+((x14229*x14230))+((r00*sj5*x14225))+x14240+((cj0*r01*x14228)));
evalcond[6]=((((-1.0)*r00*x14230*x14233))+((cj0*r11*x14228))+(((-1.0)*r02*sj0*x14231))+(((-1.0)*r01*x14228*x14233))+((r10*sj5*x14225))+x14222+((r12*x14227)));
evalcond[7]=((-0.09756)+(((-1.0)*py*x14238))+(((-1.0)*sj0*sj6*x14226))+(((-0.0718)*x14222))+(((0.026255)*r11*x14225))+((px*sj0))+(((-1.0)*x14235*x14236))+((r00*sj0*x14236))+(((-0.02626)*x14223)));
evalcond[8]=((-0.001)+(((0.02626)*x14242))+(((-1.0)*py*x14233))+(((-0.1158)*sj2))+((x14224*x14234))+(((-1.0)*x14236*x14239))+(((-1.0)*x14229*x14236))+(((-0.0718)*x14240))+((x14225*x14226))+(((0.0009)*cj2))+(((-1.0)*px*x14238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14245=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x14245.valid){
continue;
}
CheckValue<IkReal> x14246 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x14246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14245.value)))+(x14246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14247=IKcos(j4);
IkReal x14248=IKsin(j4);
IkReal x14249=(r11*sj0);
IkReal x14250=(cj0*sj6);
IkReal x14251=((0.026255)*r01);
IkReal x14252=(cj0*cj5);
IkReal x14253=(cj6*sj5);
IkReal x14254=(r10*sj0);
IkReal x14255=(sj5*sj6);
IkReal x14256=((1.0)*cj5);
IkReal x14257=((1.0)*cj6);
IkReal x14258=((1.0)*sj0);
IkReal x14259=((0.026255)*sj6);
IkReal x14260=(cj0*r10);
IkReal x14261=((0.026255)*cj6);
IkReal x14262=((1.0)*r21);
IkReal x14263=((1.0)*cj0);
IkReal x14264=(cj0*r00);
IkReal x14265=(cj2*x14248);
IkReal x14266=(cj6*r00*sj0);
IkReal x14267=(cj2*x14247);
IkReal x14268=(sj2*x14248);
IkReal x14269=(sj2*x14247);
evalcond[0]=((((-1.0)*sj6*x14262))+((cj6*r20))+x14269);
evalcond[1]=((((-1.0)*x14253*x14262))+(((-1.0)*r20*x14255))+(((-1.0)*r22*x14256))+x14268);
evalcond[2]=((((-1.0)*x14257*x14264))+(((-1.0)*x14254*x14257))+((sj6*x14249))+x14267+((r01*x14250)));
evalcond[3]=((((-1.0)*x14257*x14260))+(((-1.0)*x14248))+(((-1.0)*r01*sj6*x14258))+((r11*x14250))+x14266);
evalcond[4]=((0.1255)+(((0.02626)*x14269))+(((0.1158)*cj2))+(((-0.0718)*x14268))+((r20*x14261))+pz+(((-1.0)*r21*x14259))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((x14249*x14253))+((cj0*r01*x14253))+((r02*x14252))+((x14254*x14255))+((r00*sj5*x14250))+x14265);
evalcond[6]=(((cj0*r11*x14253))+(((-1.0)*r00*x14255*x14258))+((r12*x14252))+(((-1.0)*r01*x14253*x14258))+((r10*sj5*x14250))+(((-1.0)*r02*sj0*x14256))+x14247);
evalcond[7]=((-0.09756)+(((-0.02626)*x14248))+((r00*sj0*x14261))+(((-1.0)*x14260*x14261))+(((-0.0718)*x14247))+(((0.026255)*r11*x14250))+(((-1.0)*sj0*sj6*x14251))+((px*sj0))+(((-1.0)*py*x14263)));
evalcond[8]=((-0.001)+(((0.02626)*x14267))+(((-0.1158)*sj2))+(((-0.0718)*x14265))+(((-1.0)*x14261*x14264))+(((-1.0)*px*x14263))+(((-1.0)*x14254*x14261))+((x14249*x14259))+(((0.0009)*cj2))+((x14250*x14251))+(((-1.0)*py*x14258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14270=cj3*cj3;
IkReal x14271=(cj2*cj6);
IkReal x14272=((1.0)*sj5);
IkReal x14273=(cj1*sj0);
IkReal x14274=(cj2*sj6);
IkReal x14275=(r11*sj6);
IkReal x14276=(sj1*sj3);
IkReal x14277=((1.0)*cj6);
IkReal x14278=(cj0*r00);
IkReal x14279=((1.0)*cj3);
IkReal x14280=(cj5*r22);
IkReal x14281=(cj1*cj2);
IkReal x14282=(sj2*x14281);
IkReal x14283=((1.0)*x14270);
IkReal x14284=(cj0*cj1*r01);
CheckValue<IkReal> x14285=IKPowWithIntegerCheck(((((-1.0)*x14282*x14283))+((cj3*sj2*x14276))+x14282),-1);
if(!x14285.valid){
continue;
}
CheckValue<IkReal> x14286=IKPowWithIntegerCheck((((cj3*x14276))+x14281+(((-1.0)*x14281*x14283))),-1);
if(!x14286.valid){
continue;
}
if( IKabs(((x14285.value)*(((((-1.0)*r21*x14271*x14272))+((cj0*r01*sj6*x14276))+((sj0*x14275*x14276))+((cj3*r10*x14271*x14273))+(((-1.0)*r10*sj0*x14276*x14277))+((cj1*cj3*x14271*x14278))+(((-1.0)*x14276*x14277*x14278))+(((-1.0)*x14274*x14279*x14284))+(((-1.0)*r11*x14273*x14274*x14279))+(((-1.0)*r20*x14272*x14274))+(((-1.0)*cj2*x14280)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14286.value)*(((((-1.0)*x14273*x14275))+(((-1.0)*cj3*cj6*r21*x14272))+(((-1.0)*sj6*x14284))+(((-1.0)*cj3*r20*sj6*x14272))+(((-1.0)*x14279*x14280))+((cj1*cj6*x14278))+((cj6*r10*x14273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14285.value)*(((((-1.0)*r21*x14271*x14272))+((cj0*r01*sj6*x14276))+((sj0*x14275*x14276))+((cj3*r10*x14271*x14273))+(((-1.0)*r10*sj0*x14276*x14277))+((cj1*cj3*x14271*x14278))+(((-1.0)*x14276*x14277*x14278))+(((-1.0)*x14274*x14279*x14284))+(((-1.0)*r11*x14273*x14274*x14279))+(((-1.0)*r20*x14272*x14274))+(((-1.0)*cj2*x14280))))))+IKsqr(((x14286.value)*(((((-1.0)*x14273*x14275))+(((-1.0)*cj3*cj6*r21*x14272))+(((-1.0)*sj6*x14284))+(((-1.0)*cj3*r20*sj6*x14272))+(((-1.0)*x14279*x14280))+((cj1*cj6*x14278))+((cj6*r10*x14273))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14285.value)*(((((-1.0)*r21*x14271*x14272))+((cj0*r01*sj6*x14276))+((sj0*x14275*x14276))+((cj3*r10*x14271*x14273))+(((-1.0)*r10*sj0*x14276*x14277))+((cj1*cj3*x14271*x14278))+(((-1.0)*x14276*x14277*x14278))+(((-1.0)*x14274*x14279*x14284))+(((-1.0)*r11*x14273*x14274*x14279))+(((-1.0)*r20*x14272*x14274))+(((-1.0)*cj2*x14280))))), ((x14286.value)*(((((-1.0)*x14273*x14275))+(((-1.0)*cj3*cj6*r21*x14272))+(((-1.0)*sj6*x14284))+(((-1.0)*cj3*r20*sj6*x14272))+(((-1.0)*x14279*x14280))+((cj1*cj6*x14278))+((cj6*r10*x14273))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14287=IKsin(j4);
IkReal x14288=IKcos(j4);
IkReal x14289=(cj0*sj6);
IkReal x14290=((0.026255)*r01);
IkReal x14291=((1.0)*cj5);
IkReal x14292=(cj2*sj1);
IkReal x14293=((1.0)*cj3);
IkReal x14294=((0.026255)*sj6);
IkReal x14295=(r11*sj0);
IkReal x14296=((0.0718)*cj1);
IkReal x14297=(cj6*sj0);
IkReal x14298=(cj5*r12);
IkReal x14299=((1.0)*r21);
IkReal x14300=((1.0)*sj5);
IkReal x14301=((0.02626)*cj3);
IkReal x14302=(r10*sj5);
IkReal x14303=(sj0*sj6);
IkReal x14304=((0.0009)*sj2);
IkReal x14305=((1.0)*sj2);
IkReal x14306=((1.0)*py);
IkReal x14307=(cj6*sj5);
IkReal x14308=((1.0)*cj0);
IkReal x14309=(cj1*cj2);
IkReal x14310=(cj6*r20);
IkReal x14311=((0.09746)*cj3);
IkReal x14312=((0.09746)*sj3);
IkReal x14313=(cj1*sj3);
IkReal x14314=((0.02626)*sj2);
IkReal x14315=(cj2*x14287);
IkReal x14316=(cj3*x14288);
IkReal x14317=(sj2*x14287);
IkReal x14318=((0.026255)*cj0*cj6);
IkReal x14319=(cj2*x14288);
IkReal x14320=(sj1*x14288);
IkReal x14321=(cj1*x14288);
IkReal x14322=(sj1*sj3*x14287);
evalcond[0]=((((-1.0)*sj6*x14299))+(((-1.0)*x14305*x14321))+(((-1.0)*x14287*x14293*x14309))+x14310+x14322);
evalcond[1]=((((-1.0)*x14293*x14317))+((r01*x14289))+((sj6*x14295))+(((-1.0)*r10*x14297))+(((-1.0)*cj6*r00*x14308))+x14319);
evalcond[2]=((((-1.0)*r22*x14291))+((x14309*x14316))+(((-1.0)*r20*sj6*x14300))+(((-1.0)*x14299*x14307))+(((-1.0)*cj1*x14287*x14305))+(((-1.0)*sj3*x14320)));
evalcond[3]=(((cj0*cj5*r02))+((sj2*x14316))+((x14302*x14303))+((r00*sj5*x14289))+((sj0*x14298))+x14315+((cj0*r01*x14307))+((x14295*x14307)));
evalcond[4]=((((-1.0)*r01*x14303))+((r00*x14297))+(((-1.0)*x14305*x14320))+(((-1.0)*cj6*r10*x14308))+((r11*x14289))+(((-1.0)*x14287*x14292*x14293))+(((-1.0)*x14287*x14313)));
evalcond[5]=((((-1.0)*r00*x14300*x14303))+(((-1.0)*sj1*x14287*x14305))+(((-1.0)*r02*sj0*x14291))+((x14292*x14316))+((x14289*x14302))+((cj0*x14298))+((x14288*x14313))+((cj0*r11*x14307))+(((-1.0)*r01*x14297*x14300)));
evalcond[6]=((-0.001)+((x14289*x14290))+(((-0.1158)*sj2))+(((-1.0)*px*x14308))+(((-1.0)*sj2*x14311))+(((-0.0718)*sj2*x14316))+(((0.02626)*x14319))+(((-0.0718)*x14315))+((x14294*x14295))+(((0.0009)*cj2))+(((-1.0)*x14301*x14317))+(((-0.026255)*r10*x14297))+(((-1.0)*sj0*x14306))+(((-1.0)*r00*x14318)));
evalcond[7]=((((-1.0)*x14287*x14301*x14309))+(((-1.0)*cj1*x14304))+(((-0.1158)*x14309))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-1.0)*x14309*x14311))+((sj1*x14312))+(((0.02626)*x14322))+(((-1.0)*cj2*x14296*x14316))+pz+(((0.026255)*x14310))+(((-1.0)*r21*x14294))+((x14296*x14317))+(((-1.0)*x14314*x14321))+(((0.0718)*sj3*x14320)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*sj1*x14304))+(((-0.1158)*x14292))+(((0.026255)*r00*x14297))+(((0.026255)*r11*x14289))+(((-1.0)*cj1*x14312))+(((-1.0)*x14287*x14292*x14301))+(((-1.0)*x14292*x14311))+(((-1.0)*r10*x14318))+(((0.0718)*sj1*x14317))+(((-1.0)*cj0*x14306))+(((-1.0)*x14290*x14303))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*sj3*x14288*x14296))+(((-0.0718)*x14292*x14316))+(((-1.0)*x14314*x14320))+(((-0.02626)*x14287*x14313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14323=cj1*cj1;
IkReal x14324=cj3*cj3;
IkReal x14325=cj2*cj2;
IkReal x14326=((1.0)*sj5);
IkReal x14327=(cj1*sj2);
IkReal x14328=(r20*sj6);
IkReal x14329=(sj1*sj3);
IkReal x14330=(cj6*r20);
IkReal x14331=(cj6*r21);
IkReal x14332=(r21*x14329);
IkReal x14333=(cj1*cj2*cj3);
IkReal x14334=((1.0)*r21*sj6);
IkReal x14335=((1.0)*cj5*r22);
IkReal x14336=(x14323*x14324);
CheckValue<IkReal> x14337=IKPowWithIntegerCheck(IKsign(((1.0)+((x14325*x14336))+(((-1.0)*x14323*x14325))+(((-2.0)*x14329*x14333))+x14336+(((-1.0)*x14324)))),-1);
if(!x14337.valid){
continue;
}
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal((((sj6*x14332))+(((-1.0)*x14327*x14335))+(((-1.0)*x14326*x14327*x14331))+(((-1.0)*x14326*x14327*x14328))+(((-1.0)*x14329*x14330))+(((-1.0)*x14333*x14334))+((x14330*x14333)))),((((-1.0)*x14327*x14334))+((sj5*x14331*x14333))+(((-1.0)*x14326*x14329*x14331))+(((-1.0)*x14329*x14335))+((cj5*r22*x14333))+((sj5*x14328*x14333))+((x14327*x14330))+(((-1.0)*x14326*x14328*x14329))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14337.value)))+(x14338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14339=IKsin(j4);
IkReal x14340=IKcos(j4);
IkReal x14341=(cj0*sj6);
IkReal x14342=((0.026255)*r01);
IkReal x14343=((1.0)*cj5);
IkReal x14344=(cj2*sj1);
IkReal x14345=((1.0)*cj3);
IkReal x14346=((0.026255)*sj6);
IkReal x14347=(r11*sj0);
IkReal x14348=((0.0718)*cj1);
IkReal x14349=(cj6*sj0);
IkReal x14350=(cj5*r12);
IkReal x14351=((1.0)*r21);
IkReal x14352=((1.0)*sj5);
IkReal x14353=((0.02626)*cj3);
IkReal x14354=(r10*sj5);
IkReal x14355=(sj0*sj6);
IkReal x14356=((0.0009)*sj2);
IkReal x14357=((1.0)*sj2);
IkReal x14358=((1.0)*py);
IkReal x14359=(cj6*sj5);
IkReal x14360=((1.0)*cj0);
IkReal x14361=(cj1*cj2);
IkReal x14362=(cj6*r20);
IkReal x14363=((0.09746)*cj3);
IkReal x14364=((0.09746)*sj3);
IkReal x14365=(cj1*sj3);
IkReal x14366=((0.02626)*sj2);
IkReal x14367=(cj2*x14339);
IkReal x14368=(cj3*x14340);
IkReal x14369=(sj2*x14339);
IkReal x14370=((0.026255)*cj0*cj6);
IkReal x14371=(cj2*x14340);
IkReal x14372=(sj1*x14340);
IkReal x14373=(cj1*x14340);
IkReal x14374=(sj1*sj3*x14339);
evalcond[0]=((((-1.0)*sj6*x14351))+(((-1.0)*x14357*x14373))+(((-1.0)*x14339*x14345*x14361))+x14374+x14362);
evalcond[1]=((((-1.0)*x14345*x14369))+((r01*x14341))+((sj6*x14347))+(((-1.0)*cj6*r00*x14360))+x14371+(((-1.0)*r10*x14349)));
evalcond[2]=((((-1.0)*x14351*x14359))+(((-1.0)*r20*sj6*x14352))+(((-1.0)*r22*x14343))+(((-1.0)*cj1*x14339*x14357))+(((-1.0)*sj3*x14372))+((x14361*x14368)));
evalcond[3]=(((x14347*x14359))+((cj0*cj5*r02))+((sj2*x14368))+((r00*sj5*x14341))+((x14354*x14355))+((sj0*x14350))+x14367+((cj0*r01*x14359)));
evalcond[4]=((((-1.0)*cj6*r10*x14360))+((r00*x14349))+(((-1.0)*r01*x14355))+((r11*x14341))+(((-1.0)*x14357*x14372))+(((-1.0)*x14339*x14365))+(((-1.0)*x14339*x14344*x14345)));
evalcond[5]=(((x14344*x14368))+(((-1.0)*r01*x14349*x14352))+((cj0*x14350))+(((-1.0)*r00*x14352*x14355))+(((-1.0)*sj1*x14339*x14357))+((x14341*x14354))+((x14340*x14365))+((cj0*r11*x14359))+(((-1.0)*r02*sj0*x14343)));
evalcond[6]=((-0.001)+(((-0.1158)*sj2))+(((-0.026255)*r10*x14349))+(((-0.0718)*sj2*x14368))+(((-1.0)*sj2*x14363))+((x14341*x14342))+((x14346*x14347))+(((-1.0)*px*x14360))+(((-0.0718)*x14367))+(((0.0009)*cj2))+(((0.02626)*x14371))+(((-1.0)*x14353*x14369))+(((-1.0)*sj0*x14358))+(((-1.0)*r00*x14370)));
evalcond[7]=((((-0.1158)*x14361))+((x14348*x14369))+(((-1.0)*x14361*x14363))+(((-0.1255)*cj1))+(((-1.0)*cj2*x14348*x14368))+(((0.0718)*sj3*x14372))+(((-1.0)*x14339*x14353*x14361))+(((-0.0001)*sj1))+(((-1.0)*r21*x14346))+((sj1*x14364))+pz+(((0.02626)*x14374))+(((0.026255)*x14362))+(((-1.0)*cj1*x14356))+(((-1.0)*x14366*x14373)));
evalcond[8]=((((-1.0)*x14344*x14363))+(((-0.1255)*sj1))+(((-0.0718)*x14344*x14368))+(((-1.0)*sj1*x14356))+(((-1.0)*x14339*x14344*x14353))+(((-1.0)*cj1*x14364))+(((-0.02626)*x14339*x14365))+(((0.026255)*r00*x14349))+(((-0.1158)*x14344))+(((0.0718)*sj1*x14369))+(((-1.0)*x14342*x14355))+(((-1.0)*cj0*x14358))+(((-1.0)*r10*x14370))+(((-1.0)*sj3*x14340*x14348))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x14341))+(((-1.0)*x14366*x14372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14375=(cj0*r00);
IkReal x14376=(r10*sj0);
IkReal x14377=(sj1*sj3);
IkReal x14378=((1.0)*cj2);
IkReal x14379=((1.0)*cj6);
IkReal x14380=(cj1*sj2);
IkReal x14381=(r21*sj6);
IkReal x14382=(cj3*sj2);
IkReal x14383=(cj1*cj3);
IkReal x14384=(cj6*r20);
IkReal x14385=(r11*sj0*sj6);
IkReal x14386=(cj0*r01*sj6);
IkReal x14387=(x14379*x14380);
IkReal x14388=(cj2*cj6*x14383);
CheckValue<IkReal> x14389=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14377*x14378))+x14383)),-1);
if(!x14389.valid){
continue;
}
CheckValue<IkReal> x14390 = IKatan2WithCheck(IkReal(((((-1.0)*x14375*x14387))+(((-1.0)*x14378*x14381))+(((-1.0)*x14376*x14387))+((x14380*x14385))+((x14380*x14386))+((cj2*x14384)))),(((x14375*x14388))+((x14376*x14388))+((x14377*x14386))+((x14377*x14385))+(((-1.0)*x14381*x14382))+(((-1.0)*x14376*x14377*x14379))+((x14382*x14384))+(((-1.0)*x14375*x14377*x14379))+(((-1.0)*x14378*x14383*x14386))+(((-1.0)*x14378*x14383*x14385))),IKFAST_ATAN2_MAGTHRESH);
if(!x14390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14389.value)))+(x14390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14391=IKsin(j4);
IkReal x14392=IKcos(j4);
IkReal x14393=(cj0*sj6);
IkReal x14394=((0.026255)*r01);
IkReal x14395=((1.0)*cj5);
IkReal x14396=(cj2*sj1);
IkReal x14397=((1.0)*cj3);
IkReal x14398=((0.026255)*sj6);
IkReal x14399=(r11*sj0);
IkReal x14400=((0.0718)*cj1);
IkReal x14401=(cj6*sj0);
IkReal x14402=(cj5*r12);
IkReal x14403=((1.0)*r21);
IkReal x14404=((1.0)*sj5);
IkReal x14405=((0.02626)*cj3);
IkReal x14406=(r10*sj5);
IkReal x14407=(sj0*sj6);
IkReal x14408=((0.0009)*sj2);
IkReal x14409=((1.0)*sj2);
IkReal x14410=((1.0)*py);
IkReal x14411=(cj6*sj5);
IkReal x14412=((1.0)*cj0);
IkReal x14413=(cj1*cj2);
IkReal x14414=(cj6*r20);
IkReal x14415=((0.09746)*cj3);
IkReal x14416=((0.09746)*sj3);
IkReal x14417=(cj1*sj3);
IkReal x14418=((0.02626)*sj2);
IkReal x14419=(cj2*x14391);
IkReal x14420=(cj3*x14392);
IkReal x14421=(sj2*x14391);
IkReal x14422=((0.026255)*cj0*cj6);
IkReal x14423=(cj2*x14392);
IkReal x14424=(sj1*x14392);
IkReal x14425=(cj1*x14392);
IkReal x14426=(sj1*sj3*x14391);
evalcond[0]=(x14426+x14414+(((-1.0)*sj6*x14403))+(((-1.0)*x14409*x14425))+(((-1.0)*x14391*x14397*x14413)));
evalcond[1]=(((r01*x14393))+((sj6*x14399))+(((-1.0)*cj6*r00*x14412))+(((-1.0)*x14397*x14421))+x14423+(((-1.0)*r10*x14401)));
evalcond[2]=((((-1.0)*r20*sj6*x14404))+(((-1.0)*cj1*x14391*x14409))+(((-1.0)*x14403*x14411))+(((-1.0)*r22*x14395))+(((-1.0)*sj3*x14424))+((x14413*x14420)));
evalcond[3]=(((cj0*cj5*r02))+((sj0*x14402))+((x14399*x14411))+((sj2*x14420))+((r00*sj5*x14393))+x14419+((x14406*x14407))+((cj0*r01*x14411)));
evalcond[4]=((((-1.0)*r01*x14407))+((r11*x14393))+((r00*x14401))+(((-1.0)*cj6*r10*x14412))+(((-1.0)*x14391*x14417))+(((-1.0)*x14409*x14424))+(((-1.0)*x14391*x14396*x14397)));
evalcond[5]=(((cj0*r11*x14411))+((cj0*x14402))+(((-1.0)*r01*x14401*x14404))+(((-1.0)*r00*x14404*x14407))+((x14392*x14417))+(((-1.0)*sj1*x14391*x14409))+(((-1.0)*r02*sj0*x14395))+((x14393*x14406))+((x14396*x14420)));
evalcond[6]=((-0.001)+((x14393*x14394))+(((-1.0)*sj0*x14410))+(((-1.0)*x14405*x14421))+(((-0.026255)*r10*x14401))+(((-0.1158)*sj2))+(((0.02626)*x14423))+(((0.0009)*cj2))+((x14398*x14399))+(((-0.0718)*sj2*x14420))+(((-0.0718)*x14419))+(((-1.0)*r00*x14422))+(((-1.0)*sj2*x14415))+(((-1.0)*px*x14412)));
evalcond[7]=((((0.026255)*x14414))+(((-1.0)*cj1*x14408))+(((-1.0)*x14391*x14405*x14413))+((x14400*x14421))+(((-0.1255)*cj1))+((sj1*x14416))+(((-0.0001)*sj1))+(((-1.0)*r21*x14398))+(((-1.0)*x14418*x14425))+(((-1.0)*cj2*x14400*x14420))+(((0.02626)*x14426))+(((-1.0)*x14413*x14415))+(((0.0718)*sj3*x14424))+pz+(((-0.1158)*x14413)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*cj1*x14416))+(((-1.0)*x14394*x14407))+(((-1.0)*r10*x14422))+(((-1.0)*x14391*x14396*x14405))+(((-1.0)*x14418*x14424))+(((0.0718)*sj1*x14421))+(((-1.0)*cj0*x14410))+(((0.026255)*r00*x14401))+(((-0.1158)*x14396))+(((-1.0)*sj3*x14392*x14400))+(((-0.02626)*x14391*x14417))+(((-0.0718)*x14396*x14420))+(((0.0001)*cj1))+((px*sj0))+(((0.026255)*r11*x14393))+(((-1.0)*sj1*x14408))+(((-1.0)*x14396*x14415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x14427=(cj5*sj6);
IkReal x14428=(sj0*sj1);
IkReal x14429=(cj5*cj6);
IkReal x14430=((1.0)*cj1);
IkReal x14431=(r22*sj5);
IkReal x14432=(r02*sj5);
IkReal x14433=(cj0*r11);
IkReal x14434=((1.0)*sj1);
IkReal x14435=(cj0*r10);
IkReal x14436=(cj0*r12*sj5);
CheckValue<IkReal> x14437=IKPowWithIntegerCheck(cj2,-1);
if(!x14437.valid){
continue;
}
if( IKabs(((x14437.value)*((((r00*x14427*x14428))+(((-1.0)*x14429*x14433*x14434))+((sj1*x14436))+(((-1.0)*x14428*x14432))+((cj1*r20*x14427))+((cj1*r21*x14429))+(((-1.0)*x14427*x14434*x14435))+((r01*x14428*x14429))+(((-1.0)*x14430*x14431)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj0*x14429*x14430))+((cj1*x14429*x14433))+(((-1.0)*x14431*x14434))+((r21*sj1*x14429))+((r20*sj1*x14427))+(((-1.0)*r00*sj0*x14427*x14430))+((cj1*sj0*x14432))+((cj1*x14427*x14435))+(((-1.0)*x14430*x14436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14437.value)*((((r00*x14427*x14428))+(((-1.0)*x14429*x14433*x14434))+((sj1*x14436))+(((-1.0)*x14428*x14432))+((cj1*r20*x14427))+((cj1*r21*x14429))+(((-1.0)*x14427*x14434*x14435))+((r01*x14428*x14429))+(((-1.0)*x14430*x14431))))))+IKsqr(((((-1.0)*r01*sj0*x14429*x14430))+((cj1*x14429*x14433))+(((-1.0)*x14431*x14434))+((r21*sj1*x14429))+((r20*sj1*x14427))+(((-1.0)*r00*sj0*x14427*x14430))+((cj1*sj0*x14432))+((cj1*x14427*x14435))+(((-1.0)*x14430*x14436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x14437.value)*((((r00*x14427*x14428))+(((-1.0)*x14429*x14433*x14434))+((sj1*x14436))+(((-1.0)*x14428*x14432))+((cj1*r20*x14427))+((cj1*r21*x14429))+(((-1.0)*x14427*x14434*x14435))+((r01*x14428*x14429))+(((-1.0)*x14430*x14431))))), ((((-1.0)*r01*sj0*x14429*x14430))+((cj1*x14429*x14433))+(((-1.0)*x14431*x14434))+((r21*sj1*x14429))+((r20*sj1*x14427))+(((-1.0)*r00*sj0*x14427*x14430))+((cj1*sj0*x14432))+((cj1*x14427*x14435))+(((-1.0)*x14430*x14436))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x14438=IKsin(j3);
IkReal x14439=IKcos(j3);
IkReal x14440=((1.0)*sj1);
IkReal x14441=(cj0*sj5);
IkReal x14442=(cj5*cj6);
IkReal x14443=((1.0)*sj5);
IkReal x14444=((1.0)*cj0);
IkReal x14445=((1.0)*sj0);
IkReal x14446=(cj5*sj6);
IkReal x14447=((1.0)*x14438);
evalcond[0]=((((-1.0)*x14439*x14440))+((r20*x14446))+(((-1.0)*r22*x14443))+(((-1.0)*cj1*cj2*x14447))+((r21*x14442)));
evalcond[1]=((((-1.0)*r11*x14442*x14445))+((r12*sj0*sj5))+(((-1.0)*sj2*x14447))+(((-1.0)*r01*x14442*x14444))+(((-1.0)*r10*x14445*x14446))+(((-1.0)*r00*x14444*x14446))+((r02*x14441)));
evalcond[2]=((((-1.0)*r11*x14442*x14444))+((r12*x14441))+(((-1.0)*r02*sj0*x14443))+((r00*sj0*x14446))+(((-1.0)*cj2*x14438*x14440))+((cj1*x14439))+(((-1.0)*r10*x14444*x14446))+((r01*sj0*x14442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x14448=((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)));
j4eval[0]=x14448;
j4eval[1]=IKsign(x14448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14449=cj1*cj1;
IkReal x14450=cj3*cj3;
IkReal x14451=cj2*cj2;
IkReal x14452=(x14449*x14450);
IkReal x14453=((1.0)+(((-2.0)*cj1*cj2*cj3*sj1*sj3))+((x14451*x14452))+(((-1.0)*x14449*x14451))+(((-1.0)*x14450))+x14452);
j4eval[0]=x14453;
j4eval[1]=IKsign(x14453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14454=cj3*cj3;
IkReal x14455=(cj1*cj2);
IkReal x14456=(cj3*sj1*sj3);
IkReal x14457=(sj2*x14455);
IkReal x14458=((1.0)*x14454);
j4eval[0]=((((-1.0)*x14457*x14458))+x14457+((sj2*x14456)));
j4eval[1]=(x14455+x14456+(((-1.0)*x14455*x14458)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14459=(cj0*sj5);
IkReal x14460=(cj5*cj6);
IkReal x14461=((1.0)*sj3);
IkReal x14462=((1.0)*cj0);
IkReal x14463=((1.0)*sj0);
IkReal x14464=(cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((r21*x14460))+(((-1.0)*cj1*x14461))+(((-1.0)*cj3*sj1))+(((-1.0)*r22*sj5))+((r20*x14464)));
evalcond[2]=((((-1.0)*r00*x14462*x14464))+(((-1.0)*r01*x14460*x14462))+(((-1.0)*r10*x14463*x14464))+((r12*sj0*sj5))+(((-1.0)*r11*x14460*x14463))+((r02*x14459)));
evalcond[3]=((((-1.0)*r10*x14462*x14464))+(((-1.0)*r02*sj5*x14463))+((r00*sj0*x14464))+((r12*x14459))+(((-1.0)*r11*x14460*x14462))+((cj1*cj3))+((r01*sj0*x14460))+(((-1.0)*sj1*x14461)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14465=(cj0*cj6);
IkReal x14466=((1.0)*cj5);
IkReal x14467=((1.0)*sj5);
IkReal x14468=(sj0*sj6);
IkReal x14469=(cj6*sj0);
IkReal x14470=(cj0*sj6);
if( IKabs(((((-1.0)*r12*sj0*x14466))+(((-1.0)*r11*x14467*x14469))+(((-1.0)*r01*x14465*x14467))+(((-1.0)*r00*x14467*x14470))+(((-1.0)*r10*x14467*x14468))+(((-1.0)*cj0*r02*x14466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x14468))+(((-1.0)*r01*x14470))+((r00*x14465))+((r10*x14469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj0*x14466))+(((-1.0)*r11*x14467*x14469))+(((-1.0)*r01*x14465*x14467))+(((-1.0)*r00*x14467*x14470))+(((-1.0)*r10*x14467*x14468))+(((-1.0)*cj0*r02*x14466))))+IKsqr(((((-1.0)*r11*x14468))+(((-1.0)*r01*x14470))+((r00*x14465))+((r10*x14469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r12*sj0*x14466))+(((-1.0)*r11*x14467*x14469))+(((-1.0)*r01*x14465*x14467))+(((-1.0)*r00*x14467*x14470))+(((-1.0)*r10*x14467*x14468))+(((-1.0)*cj0*r02*x14466))), ((((-1.0)*r11*x14468))+(((-1.0)*r01*x14470))+((r00*x14465))+((r10*x14469))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14471=IKsin(j4);
IkReal x14472=IKcos(j4);
IkReal x14473=(r11*sj0);
IkReal x14474=(sj1*sj3);
IkReal x14475=(cj0*sj6);
IkReal x14476=((0.026255)*r01);
IkReal x14477=(cj5*r12);
IkReal x14478=(cj6*sj5);
IkReal x14479=(sj0*sj6);
IkReal x14480=(r10*sj5);
IkReal x14481=((0.026255)*cj6);
IkReal x14482=(r00*sj0);
IkReal x14483=((1.0)*cj5);
IkReal x14484=(cj1*sj3);
IkReal x14485=((1.0)*r01);
IkReal x14486=(cj0*r00);
IkReal x14487=(r00*sj5);
IkReal x14488=((0.026255)*sj6);
IkReal x14489=(cj1*cj3);
IkReal x14490=((1.0)*py);
IkReal x14491=(cj3*sj1);
IkReal x14492=((1.0)*r21);
IkReal x14493=((1.0)*cj6*r10);
IkReal x14494=((0.02626)*x14471);
IkReal x14495=((1.0)*x14471);
IkReal x14496=((0.0718)*x14472);
IkReal x14497=(x14472*x14489);
evalcond[0]=(((x14471*x14474))+((cj6*r20))+(((-1.0)*x14489*x14495))+(((-1.0)*sj6*x14492)));
evalcond[1]=(((sj6*x14473))+(((-1.0)*sj0*x14493))+((r01*x14475))+(((-1.0)*cj6*x14486))+x14472);
evalcond[2]=((((-1.0)*r22*x14483))+(((-1.0)*x14478*x14492))+x14497+(((-1.0)*x14472*x14474))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((cj0*cj5*r02))+((x14473*x14478))+((x14475*x14487))+((x14479*x14480))+x14471+((sj0*x14477))+((cj0*r01*x14478)));
evalcond[4]=((((-1.0)*x14491*x14495))+(((-1.0)*x14479*x14485))+(((-1.0)*cj0*x14493))+((r11*x14475))+((cj6*x14482))+(((-1.0)*x14484*x14495)));
evalcond[5]=((-0.0001)+(((-1.0)*x14481*x14486))+(((-1.0)*sj0*x14490))+(((0.02626)*x14472))+(((-1.0)*r10*sj0*x14481))+((x14475*x14476))+(((-0.0718)*x14471))+(((-1.0)*cj0*px))+((x14473*x14488)));
evalcond[6]=(((x14472*x14484))+(((-1.0)*x14479*x14487))+(((-1.0)*sj0*x14478*x14485))+((x14475*x14480))+((cj0*r11*x14478))+(((-1.0)*r02*sj0*x14483))+((cj0*x14477))+((x14472*x14491)));
evalcond[7]=((((-1.0)*r21*x14488))+(((-0.0001)*sj1))+((x14474*x14494))+((x14474*x14496))+(((0.09746)*x14474))+(((-0.2413)*cj1))+pz+((r20*x14481))+(((-1.0)*x14489*x14494))+(((-1.0)*x14489*x14496))+(((-0.09746)*x14489)));
evalcond[8]=((((-1.0)*x14491*x14494))+(((-1.0)*x14491*x14496))+(((-1.0)*cj0*r10*x14481))+(((-1.0)*x14476*x14479))+(((-1.0)*cj0*x14490))+(((0.026255)*r11*x14475))+((x14481*x14482))+(((0.0001)*cj1))+((px*sj0))+(((-0.09746)*x14491))+(((-0.2413)*sj1))+(((-1.0)*x14484*x14496))+(((-1.0)*x14484*x14494))+(((-0.09746)*x14484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14498=(cj0*sj5);
IkReal x14499=(cj5*cj6);
IkReal x14500=((1.0)*sj5);
IkReal x14501=((1.0)*cj0);
IkReal x14502=((1.0)*sj0);
IkReal x14503=(cj5*sj6);
IkReal x14504=(r10*x14503);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x14499))+((r20*x14503))+((cj1*sj3))+(((-1.0)*cj3*sj1))+(((-1.0)*r22*x14500)));
evalcond[2]=((((-1.0)*x14502*x14504))+((r02*x14498))+((r12*sj0*sj5))+(((-1.0)*r00*x14501*x14503))+(((-1.0)*r01*x14499*x14501))+(((-1.0)*r11*x14499*x14502)));
evalcond[3]=(((r12*x14498))+(((-1.0)*x14501*x14504))+((sj1*sj3))+((r00*sj0*x14503))+(((-1.0)*r02*sj0*x14500))+((r01*sj0*x14499))+((cj1*cj3))+(((-1.0)*r11*x14499*x14501)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x14505=((1.0)*sj5);
IkReal x14506=(((sj1*sj3))+((cj1*cj3)));
j4eval[0]=x14506;
j4eval[1]=IKsign(x14506);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x14505))+(((-1.0)*cj6*r21*x14505))+(((-1.0)*cj5*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=(((sj1*sj3))+((cj1*cj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=((((-1.0)*cj1*sj3))+((cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14507=(cj5*cj6);
IkReal x14508=(cj0*sj6);
IkReal x14509=(r01*sj0);
IkReal x14510=((1.0)*sj0);
IkReal x14511=((1.0)*cj5);
IkReal x14512=(cj0*r12);
IkReal x14513=(r02*sj5);
IkReal x14514=((1.0)*sj5);
IkReal x14515=(cj5*sj6);
IkReal x14516=((1.0)*cj0);
IkReal x14517=(cj6*r10);
IkReal x14518=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x14514))+((r20*x14515))+((r21*x14507)));
evalcond[2]=(x14518+((r11*x14508))+(((-1.0)*x14516*x14517))+(((-1.0)*sj6*x14509)));
evalcond[3]=((((-1.0)*r00*x14508*x14511))+((cj0*x14513))+((r12*sj0*sj5))+(((-1.0)*r01*x14507*x14516))+(((-1.0)*r10*x14510*x14515))+(((-1.0)*r11*x14507*x14510)));
evalcond[4]=((1.0)+((sj5*x14512))+((x14507*x14509))+(((-1.0)*x14510*x14513))+(((-1.0)*r10*x14508*x14511))+(((-1.0)*r11*x14507*x14516))+((r00*sj0*x14515)));
evalcond[5]=(((cj5*x14512))+(((-1.0)*r00*sj5*sj6*x14510))+((cj0*cj6*r11*sj5))+(((-1.0)*cj5*r02*x14510))+((r10*sj5*x14508))+(((-1.0)*cj6*x14509*x14514)));
evalcond[6]=((0.0001)+(((-1.0)*py*x14516))+(((0.026255)*r11*x14508))+(((-0.026255)*sj6*x14509))+((px*sj0))+(((0.026255)*x14518))+(((-0.026255)*cj0*x14517)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14519=(cj6*r20);
IkReal x14520=(r21*sj6);
if( IKabs((x14520+(((-1.0)*x14519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.22228412256267)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14520))+(((6.96378830083565e-5)*x14519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14520+(((-1.0)*x14519))))+IKsqr(((-1.22228412256267)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14520))+(((6.96378830083565e-5)*x14519))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14520+(((-1.0)*x14519))), ((-1.22228412256267)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14520))+(((6.96378830083565e-5)*x14519))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14521=IKcos(j4);
IkReal x14522=IKsin(j4);
IkReal x14523=(r11*sj0);
IkReal x14524=(cj0*sj6);
IkReal x14525=(cj6*sj5);
IkReal x14526=(r10*sj0);
IkReal x14527=(sj5*sj6);
IkReal x14528=((1.0)*cj6);
IkReal x14529=((0.026255)*sj6);
IkReal x14530=((0.026255)*cj6);
IkReal x14531=(cj0*r00);
IkReal x14532=((1.0)*r21);
IkReal x14533=((1.0)*x14521);
evalcond[0]=((((-1.0)*sj6*x14532))+x14522+((cj6*r20)));
evalcond[1]=((((-1.0)*x14533))+(((-1.0)*r20*x14527))+(((-1.0)*cj5*r22))+(((-1.0)*x14525*x14532)));
evalcond[2]=((0.08776)+(((0.02626)*x14522))+pz+(((0.0718)*x14521))+((r20*x14530))+(((-1.0)*r21*x14529)));
evalcond[3]=((((-1.0)*x14533))+((r01*x14524))+((sj6*x14523))+(((-1.0)*x14526*x14528))+(((-1.0)*x14528*x14531)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x14524))+(((-1.0)*x14522))+((cj0*cj5*r02))+((x14523*x14525))+((cj0*r01*x14525))+((x14526*x14527)));
evalcond[5]=((-0.0019)+(((-1.0)*x14526*x14530))+(((-0.02626)*x14521))+(((-1.0)*x14530*x14531))+((x14523*x14529))+(((-1.0)*py*sj0))+(((0.0718)*x14522))+(((0.026255)*r01*x14524))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14534=(cj5*cj6);
IkReal x14535=(cj0*sj6);
IkReal x14536=(r01*sj0);
IkReal x14537=((1.0)*sj0);
IkReal x14538=((1.0)*cj5);
IkReal x14539=(cj0*r12);
IkReal x14540=(r02*sj5);
IkReal x14541=((1.0)*sj5);
IkReal x14542=(cj5*sj6);
IkReal x14543=((1.0)*cj0);
IkReal x14544=(cj6*r10);
IkReal x14545=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(((r21*x14534))+((r20*x14542))+(((-1.0)*r22*x14541)));
evalcond[2]=(((r11*x14535))+(((-1.0)*x14543*x14544))+x14545+(((-1.0)*sj6*x14536)));
evalcond[3]=((((-1.0)*r00*x14535*x14538))+(((-1.0)*r01*x14534*x14543))+((cj0*x14540))+((r12*sj0*sj5))+(((-1.0)*r10*x14537*x14542))+(((-1.0)*r11*x14534*x14537)));
evalcond[4]=((-1.0)+((sj5*x14539))+((x14534*x14536))+(((-1.0)*r10*x14535*x14538))+((r00*sj0*x14542))+(((-1.0)*r11*x14534*x14543))+(((-1.0)*x14537*x14540)));
evalcond[5]=((((-1.0)*cj6*x14536*x14541))+((r10*sj5*x14535))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x14537))+((cj5*x14539))+(((-1.0)*cj5*r02*x14537)));
evalcond[6]=((0.0001)+(((-0.026255)*cj0*x14544))+(((0.026255)*r11*x14535))+(((0.026255)*x14545))+(((-0.026255)*sj6*x14536))+((px*sj0))+(((-1.0)*py*x14543)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14546=IKcos(j4);
IkReal x14547=IKsin(j4);
IkReal x14548=(r11*sj0);
IkReal x14549=(cj0*sj6);
IkReal x14550=(cj6*sj5);
IkReal x14551=(r10*sj0);
IkReal x14552=(sj5*sj6);
IkReal x14553=((1.0)*cj6);
IkReal x14554=((0.026255)*sj6);
IkReal x14555=((0.026255)*cj6);
IkReal x14556=(cj0*r00);
IkReal x14557=((1.0)*r21);
IkReal x14558=((1.0)*x14547);
evalcond[0]=((((-1.0)*x14558))+((cj6*r20))+(((-1.0)*sj6*x14557)));
evalcond[1]=((((-1.0)*x14550*x14557))+x14546+(((-1.0)*r20*x14552))+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.10716)+(((-0.0718)*x14546))+((r20*x14555))+(((-0.02626)*x14547))+(((-1.0)*r21*x14554))+pz);
evalcond[3]=(((sj6*x14548))+((r01*x14549))+(((-1.0)*x14553*x14556))+(((-1.0)*x14546))+(((-1.0)*x14551*x14553)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x14550))+(((-1.0)*x14558))+((r00*sj5*x14549))+((x14551*x14552))+((x14548*x14550)));
evalcond[5]=((-0.0019)+(((0.026255)*r01*x14549))+(((-0.02626)*x14546))+(((0.0718)*x14547))+(((-1.0)*x14551*x14555))+(((-1.0)*py*sj0))+((x14548*x14554))+(((-1.0)*x14555*x14556))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14559=(cj5*cj6);
IkReal x14560=(cj0*sj6);
IkReal x14561=(r01*sj0);
IkReal x14562=((1.0)*sj0);
IkReal x14563=((1.0)*cj5);
IkReal x14564=(cj0*r12);
IkReal x14565=(r02*sj5);
IkReal x14566=((1.0)*sj5);
IkReal x14567=(cj5*sj6);
IkReal x14568=((1.0)*cj0);
IkReal x14569=(cj6*r10);
IkReal x14570=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x14567))+(((-1.0)*r22*x14566))+((r21*x14559)));
evalcond[2]=((((-1.0)*sj6*x14561))+x14570+((r11*x14560))+(((-1.0)*x14568*x14569)));
evalcond[3]=(((cj0*x14565))+(((-1.0)*r11*x14559*x14562))+((r12*sj0*sj5))+(((-1.0)*r00*x14560*x14563))+(((-1.0)*r01*x14559*x14568))+(((-1.0)*r10*x14562*x14567)));
evalcond[4]=((1.0)+((sj5*x14564))+(((-1.0)*x14562*x14565))+(((-1.0)*r11*x14559*x14568))+(((-1.0)*r10*x14560*x14563))+((r00*sj0*x14567))+((x14559*x14561)));
evalcond[5]=(((cj5*x14564))+(((-1.0)*cj6*x14561*x14566))+(((-1.0)*cj5*r02*x14562))+((cj0*cj6*r11*sj5))+((r10*sj5*x14560))+(((-1.0)*r00*sj5*sj6*x14562)));
evalcond[6]=((-0.0097)+(((-1.0)*py*x14568))+(((0.026255)*r11*x14560))+((px*sj0))+(((0.026255)*x14570))+(((-0.026255)*sj6*x14561))+(((-0.026255)*cj0*x14569)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14571=(cj6*r20);
IkReal x14572=(r21*sj6);
if( IKabs((x14572+(((-1.0)*x14571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14571))+(((-6.96378830083565e-5)*x14572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14572+(((-1.0)*x14571))))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14571))+(((-6.96378830083565e-5)*x14572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14572+(((-1.0)*x14571))), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14571))+(((-6.96378830083565e-5)*x14572))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14573=IKcos(j4);
IkReal x14574=IKsin(j4);
IkReal x14575=(r11*sj0);
IkReal x14576=(cj0*sj6);
IkReal x14577=(cj6*sj5);
IkReal x14578=(r10*sj0);
IkReal x14579=(sj5*sj6);
IkReal x14580=((1.0)*cj6);
IkReal x14581=((0.026255)*sj6);
IkReal x14582=((0.026255)*cj6);
IkReal x14583=(cj0*r00);
IkReal x14584=((1.0)*r21);
IkReal x14585=((1.0)*x14573);
evalcond[0]=(x14574+((cj6*r20))+(((-1.0)*sj6*x14584)));
evalcond[1]=((((-1.0)*x14585))+(((-1.0)*r20*x14579))+(((-1.0)*x14577*x14584))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09736)+((r20*x14582))+(((0.02626)*x14574))+pz+(((-1.0)*r21*x14581))+(((0.0718)*x14573)));
evalcond[3]=((((-1.0)*x14578*x14580))+(((-1.0)*x14585))+((sj6*x14575))+(((-1.0)*x14580*x14583))+((r01*x14576)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x14576))+((cj0*cj5*r02))+((cj0*r01*x14577))+((x14578*x14579))+(((-1.0)*x14574))+((x14575*x14577)));
evalcond[5]=((-0.0019)+((x14575*x14581))+(((-1.0)*x14578*x14582))+(((0.026255)*r01*x14576))+(((-1.0)*py*sj0))+(((-1.0)*x14582*x14583))+(((-0.02626)*x14573))+(((-1.0)*cj0*px))+(((0.0718)*x14574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14586=(cj5*cj6);
IkReal x14587=(cj0*sj6);
IkReal x14588=(r01*sj0);
IkReal x14589=((1.0)*sj0);
IkReal x14590=((1.0)*cj5);
IkReal x14591=(cj0*r12);
IkReal x14592=(r02*sj5);
IkReal x14593=((1.0)*sj5);
IkReal x14594=(cj5*sj6);
IkReal x14595=((1.0)*cj0);
IkReal x14596=(cj6*r10);
IkReal x14597=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x14594))+((r21*x14586))+(((-1.0)*r22*x14593)));
evalcond[2]=((((-1.0)*x14595*x14596))+x14597+((r11*x14587))+(((-1.0)*sj6*x14588)));
evalcond[3]=((((-1.0)*r10*x14589*x14594))+(((-1.0)*r00*x14587*x14590))+(((-1.0)*r01*x14586*x14595))+((r12*sj0*sj5))+((cj0*x14592))+(((-1.0)*r11*x14586*x14589)));
evalcond[4]=((-1.0)+((r00*sj0*x14594))+((x14586*x14588))+(((-1.0)*x14589*x14592))+((sj5*x14591))+(((-1.0)*r11*x14586*x14595))+(((-1.0)*r10*x14587*x14590)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x14589))+((cj5*x14591))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x14588*x14593))+((r10*sj5*x14587))+(((-1.0)*cj5*r02*x14589)));
evalcond[6]=((-0.0097)+(((-1.0)*py*x14595))+(((-0.026255)*cj0*x14596))+(((0.026255)*r11*x14587))+(((-0.026255)*sj6*x14588))+(((0.026255)*x14597))+((px*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14598=IKcos(j4);
IkReal x14599=IKsin(j4);
IkReal x14600=(r11*sj0);
IkReal x14601=(cj0*sj6);
IkReal x14602=(cj6*sj5);
IkReal x14603=(r10*sj0);
IkReal x14604=(sj5*sj6);
IkReal x14605=((1.0)*cj6);
IkReal x14606=((0.026255)*sj6);
IkReal x14607=((0.026255)*cj6);
IkReal x14608=(cj0*r00);
IkReal x14609=((1.0)*r21);
IkReal x14610=((1.0)*x14599);
evalcond[0]=(((cj6*r20))+(((-1.0)*x14610))+(((-1.0)*sj6*x14609)));
evalcond[1]=(x14598+(((-1.0)*r20*x14604))+(((-1.0)*cj5*r22))+(((-1.0)*x14602*x14609)));
evalcond[2]=((-0.09756)+(((-1.0)*r21*x14606))+(((-0.02626)*x14599))+pz+((r20*x14607))+(((-0.0718)*x14598)));
evalcond[3]=((((-1.0)*x14598))+((r01*x14601))+(((-1.0)*x14605*x14608))+((sj6*x14600))+(((-1.0)*x14603*x14605)));
evalcond[4]=(((cj5*r12*sj0))+((x14600*x14602))+((r00*sj5*x14601))+((cj0*cj5*r02))+((x14603*x14604))+((cj0*r01*x14602))+(((-1.0)*x14610)));
evalcond[5]=((-0.0019)+((x14600*x14606))+(((0.0718)*x14599))+(((-1.0)*x14607*x14608))+(((-0.02626)*x14598))+(((-1.0)*py*sj0))+(((0.026255)*r01*x14601))+(((-1.0)*cj0*px))+(((-1.0)*x14603*x14607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14611=(cj5*cj6);
IkReal x14612=(cj0*sj6);
IkReal x14613=(r01*sj0);
IkReal x14614=((1.0)*sj0);
IkReal x14615=((1.0)*cj5);
IkReal x14616=(cj0*r12);
IkReal x14617=(r02*sj5);
IkReal x14618=((1.0)*sj5);
IkReal x14619=(cj5*sj6);
IkReal x14620=((1.0)*cj0);
IkReal x14621=(cj6*r10);
IkReal x14622=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x14618))+((r21*x14611))+((r20*x14619)));
evalcond[2]=((((-1.0)*x14620*x14621))+x14622+(((-1.0)*sj6*x14613))+((r11*x14612)));
evalcond[3]=((((-1.0)*r00*x14612*x14615))+((cj0*x14617))+((r12*sj0*sj5))+(((-1.0)*r10*x14614*x14619))+(((-1.0)*r01*x14611*x14620))+(((-1.0)*r11*x14611*x14614)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x14611*x14620))+(((-1.0)*r10*x14612*x14615))+(((-1.0)*x14614*x14617))+((x14611*x14613))+((r00*sj0*x14619))+((sj5*x14616)));
evalcond[5]=((((-1.0)*cj5*r02*x14614))+((cj5*x14616))+(((-1.0)*r00*sj5*sj6*x14614))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x14613*x14618))+((r10*sj5*x14612)));
evalcond[6]=((-0.0001)+(((-1.0)*py*x14620))+(((0.026255)*r11*x14612))+(((-0.026255)*sj6*x14613))+((px*sj0))+(((-0.026255)*cj0*x14621))+(((0.026255)*x14622)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14623=IKcos(j4);
IkReal x14624=IKsin(j4);
IkReal x14625=(r11*sj0);
IkReal x14626=(cj0*sj6);
IkReal x14627=(cj6*sj5);
IkReal x14628=(r10*sj0);
IkReal x14629=(sj5*sj6);
IkReal x14630=((1.0)*cj6);
IkReal x14631=((0.026255)*sj6);
IkReal x14632=((0.026255)*cj6);
IkReal x14633=(cj0*r00);
IkReal x14634=((1.0)*r21);
IkReal x14635=((1.0)*x14624);
evalcond[0]=((((-1.0)*x14635))+((cj6*r20))+(((-1.0)*sj6*x14634)));
evalcond[1]=((((-1.0)*x14627*x14634))+(((-1.0)*r20*x14629))+x14623+(((-1.0)*cj5*r22)));
evalcond[2]=((-0.08776)+(((-1.0)*r21*x14631))+(((-0.02626)*x14624))+((r20*x14632))+pz+(((-0.0718)*x14623)));
evalcond[3]=((((-1.0)*x14628*x14630))+((sj6*x14625))+(((-1.0)*x14623))+(((-1.0)*x14630*x14633))+((r01*x14626)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+(((-1.0)*x14635))+((x14628*x14629))+((x14625*x14627))+((cj0*r01*x14627))+((r00*sj5*x14626)));
evalcond[5]=((-0.0019)+(((0.0718)*x14624))+(((0.026255)*r01*x14626))+(((-1.0)*x14628*x14632))+(((-0.02626)*x14623))+((x14625*x14631))+(((-1.0)*py*sj0))+(((-1.0)*x14632*x14633))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14636=(cj5*cj6);
IkReal x14637=(cj0*sj6);
IkReal x14638=(r01*sj0);
IkReal x14639=((1.0)*sj0);
IkReal x14640=((1.0)*cj5);
IkReal x14641=(cj0*r12);
IkReal x14642=(r02*sj5);
IkReal x14643=((1.0)*sj5);
IkReal x14644=(cj5*sj6);
IkReal x14645=((1.0)*cj0);
IkReal x14646=(cj6*r10);
IkReal x14647=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x14643))+((r20*x14644))+((r21*x14636)));
evalcond[2]=((((-1.0)*sj6*x14638))+((r11*x14637))+x14647+(((-1.0)*x14645*x14646)));
evalcond[3]=((((-1.0)*r00*x14637*x14640))+(((-1.0)*r11*x14636*x14639))+((cj0*x14642))+(((-1.0)*r10*x14639*x14644))+((r12*sj0*sj5))+(((-1.0)*r01*x14636*x14645)));
evalcond[4]=((1.0)+(((-1.0)*r11*x14636*x14645))+(((-1.0)*r10*x14637*x14640))+((r00*sj0*x14644))+((sj5*x14641))+(((-1.0)*x14639*x14642))+((x14636*x14638)));
evalcond[5]=((((-1.0)*cj5*r02*x14639))+((cj5*x14641))+((cj0*cj6*r11*sj5))+((r10*sj5*x14637))+(((-1.0)*cj6*x14638*x14643))+(((-1.0)*r00*sj5*sj6*x14639)));
evalcond[6]=((-0.0001)+(((-0.026255)*sj6*x14638))+(((-0.026255)*cj0*x14646))+(((0.026255)*r11*x14637))+(((0.026255)*x14647))+((px*sj0))+(((-1.0)*py*x14645)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14648=(cj6*r20);
IkReal x14649=(r21*sj6);
if( IKabs(((((-1.0)*x14648))+x14649)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14649))+(((6.96378830083565e-5)*x14648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14648))+x14649))+IKsqr(((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14649))+(((6.96378830083565e-5)*x14648))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x14648))+x14649), ((-1.4924791086351)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x14649))+(((6.96378830083565e-5)*x14648))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14650=IKcos(j4);
IkReal x14651=IKsin(j4);
IkReal x14652=(r11*sj0);
IkReal x14653=(cj0*sj6);
IkReal x14654=(cj6*sj5);
IkReal x14655=(r10*sj0);
IkReal x14656=(sj5*sj6);
IkReal x14657=((1.0)*cj6);
IkReal x14658=((0.026255)*sj6);
IkReal x14659=((0.026255)*cj6);
IkReal x14660=(cj0*r00);
IkReal x14661=((1.0)*r21);
IkReal x14662=((1.0)*x14650);
evalcond[0]=(x14651+((cj6*r20))+(((-1.0)*sj6*x14661)));
evalcond[1]=((((-1.0)*x14654*x14661))+(((-1.0)*r20*x14656))+(((-1.0)*cj5*r22))+(((-1.0)*x14662)));
evalcond[2]=((0.10716)+(((0.02626)*x14651))+(((0.0718)*x14650))+pz+((r20*x14659))+(((-1.0)*r21*x14658)));
evalcond[3]=(((sj6*x14652))+(((-1.0)*x14655*x14657))+((r01*x14653))+(((-1.0)*x14657*x14660))+(((-1.0)*x14662)));
evalcond[4]=(((cj5*r12*sj0))+((cj0*cj5*r02))+(((-1.0)*x14651))+((x14655*x14656))+((cj0*r01*x14654))+((r00*sj5*x14653))+((x14652*x14654)));
evalcond[5]=((-0.0019)+(((-1.0)*x14655*x14659))+(((-1.0)*x14659*x14660))+(((0.026255)*r01*x14653))+(((0.0718)*x14651))+(((-0.02626)*x14650))+(((-1.0)*py*sj0))+((x14652*x14658))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14663=(cj5*cj6);
IkReal x14664=(cj0*sj6);
IkReal x14665=(r01*sj0);
IkReal x14666=((1.0)*sj0);
IkReal x14667=((1.0)*cj5);
IkReal x14668=(cj0*r12);
IkReal x14669=(r02*sj5);
IkReal x14670=((1.0)*sj5);
IkReal x14671=(cj5*sj6);
IkReal x14672=((1.0)*cj0);
IkReal x14673=(cj6*r10);
IkReal x14674=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x14671))+((r21*x14663))+(((-1.0)*r22*x14670)));
evalcond[2]=((((-1.0)*x14672*x14673))+(((-1.0)*sj6*x14665))+x14674+((r11*x14664)));
evalcond[3]=((((-1.0)*r01*x14663*x14672))+((r12*sj0*sj5))+(((-1.0)*r11*x14663*x14666))+((cj0*x14669))+(((-1.0)*r10*x14666*x14671))+(((-1.0)*r00*x14664*x14667)));
evalcond[4]=((-1.0)+((x14663*x14665))+(((-1.0)*x14666*x14669))+(((-1.0)*r11*x14663*x14672))+((r00*sj0*x14671))+((sj5*x14668))+(((-1.0)*r10*x14664*x14667)));
evalcond[5]=(((cj5*x14668))+(((-1.0)*r00*sj5*sj6*x14666))+((cj0*cj6*r11*sj5))+((r10*sj5*x14664))+(((-1.0)*cj5*r02*x14666))+(((-1.0)*cj6*x14665*x14670)));
evalcond[6]=((0.0097)+(((-0.026255)*cj0*x14673))+(((0.026255)*x14674))+(((-0.026255)*sj6*x14665))+(((0.026255)*r11*x14664))+((px*sj0))+(((-1.0)*py*x14672)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14675=IKcos(j4);
IkReal x14676=IKsin(j4);
IkReal x14677=(r11*sj0);
IkReal x14678=(cj0*sj6);
IkReal x14679=(cj6*sj5);
IkReal x14680=(r10*sj0);
IkReal x14681=(sj5*sj6);
IkReal x14682=((1.0)*cj6);
IkReal x14683=((0.026255)*sj6);
IkReal x14684=((0.026255)*cj6);
IkReal x14685=(cj0*r00);
IkReal x14686=((1.0)*r21);
IkReal x14687=((1.0)*x14676);
evalcond[0]=((((-1.0)*sj6*x14686))+(((-1.0)*x14687))+((cj6*r20)));
evalcond[1]=(x14675+(((-1.0)*cj5*r22))+(((-1.0)*x14679*x14686))+(((-1.0)*r20*x14681)));
evalcond[2]=((-0.09736)+(((-0.0718)*x14675))+(((-1.0)*r21*x14683))+((r20*x14684))+pz+(((-0.02626)*x14676)));
evalcond[3]=(((sj6*x14677))+(((-1.0)*x14682*x14685))+(((-1.0)*x14675))+(((-1.0)*x14680*x14682))+((r01*x14678)));
evalcond[4]=(((cj5*r12*sj0))+((r00*sj5*x14678))+((cj0*cj5*r02))+((x14680*x14681))+(((-1.0)*x14687))+((cj0*r01*x14679))+((x14677*x14679)));
evalcond[5]=((-0.0019)+(((-1.0)*x14684*x14685))+(((-1.0)*x14680*x14684))+(((0.0718)*x14676))+((x14677*x14683))+(((-1.0)*py*sj0))+(((-0.02626)*x14675))+(((0.026255)*r01*x14678))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14688=(cj5*cj6);
IkReal x14689=(cj0*sj6);
IkReal x14690=(r01*sj0);
IkReal x14691=((1.0)*sj0);
IkReal x14692=((1.0)*cj5);
IkReal x14693=(cj0*r12);
IkReal x14694=(r02*sj5);
IkReal x14695=((1.0)*sj5);
IkReal x14696=(cj5*sj6);
IkReal x14697=((1.0)*cj0);
IkReal x14698=(cj6*r10);
IkReal x14699=(cj6*r00*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x14696))+(((-1.0)*r22*x14695))+((r21*x14688)));
evalcond[2]=((((-1.0)*sj6*x14690))+((r11*x14689))+(((-1.0)*x14697*x14698))+x14699);
evalcond[3]=(((cj0*x14694))+(((-1.0)*r11*x14688*x14691))+(((-1.0)*r10*x14691*x14696))+(((-1.0)*r00*x14689*x14692))+((r12*sj0*sj5))+(((-1.0)*r01*x14688*x14697)));
evalcond[4]=((1.0)+(((-1.0)*r11*x14688*x14697))+((r00*sj0*x14696))+((x14688*x14690))+((sj5*x14693))+(((-1.0)*x14691*x14694))+(((-1.0)*r10*x14689*x14692)));
evalcond[5]=((((-1.0)*cj5*r02*x14691))+((r10*sj5*x14689))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x14691))+((cj5*x14693))+(((-1.0)*cj6*x14690*x14695)));
evalcond[6]=((0.0097)+(((0.026255)*x14699))+(((-0.026255)*cj0*x14698))+(((-1.0)*py*x14697))+((px*sj0))+(((-0.026255)*sj6*x14690))+(((0.026255)*r11*x14689)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14700=(cj6*r20);
IkReal x14701=(r21*sj6);
if( IKabs(((((-1.0)*x14700))+x14701)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14700))+(((-6.96378830083565e-5)*x14701)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14700))+x14701))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14700))+(((-6.96378830083565e-5)*x14701))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x14700))+x14701), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x14700))+(((-6.96378830083565e-5)*x14701))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14702=IKcos(j4);
IkReal x14703=IKsin(j4);
IkReal x14704=(r11*sj0);
IkReal x14705=(cj0*sj6);
IkReal x14706=(cj6*sj5);
IkReal x14707=(r10*sj0);
IkReal x14708=(sj5*sj6);
IkReal x14709=((1.0)*cj6);
IkReal x14710=((0.026255)*sj6);
IkReal x14711=((0.026255)*cj6);
IkReal x14712=(cj0*r00);
IkReal x14713=((1.0)*r21);
IkReal x14714=((1.0)*x14702);
evalcond[0]=((((-1.0)*sj6*x14713))+((cj6*r20))+x14703);
evalcond[1]=((((-1.0)*r20*x14708))+(((-1.0)*x14706*x14713))+(((-1.0)*x14714))+(((-1.0)*cj5*r22)));
evalcond[2]=((0.09756)+((r20*x14711))+(((0.02626)*x14703))+pz+(((-1.0)*r21*x14710))+(((0.0718)*x14702)));
evalcond[3]=(((r01*x14705))+(((-1.0)*x14714))+(((-1.0)*x14709*x14712))+((sj6*x14704))+(((-1.0)*x14707*x14709)));
evalcond[4]=(((cj5*r12*sj0))+((x14707*x14708))+((cj0*cj5*r02))+(((-1.0)*x14703))+((r00*sj5*x14705))+((x14704*x14706))+((cj0*r01*x14706)));
evalcond[5]=((-0.0019)+(((-0.02626)*x14702))+(((-1.0)*x14707*x14711))+(((0.026255)*r01*x14705))+(((-1.0)*py*sj0))+(((-1.0)*x14711*x14712))+(((-1.0)*cj0*px))+(((0.0718)*x14703))+((x14704*x14710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14715=(cj5*cj6);
IkReal x14716=((1.0)*sj0);
IkReal x14717=((1.0)*r22);
IkReal x14718=(cj0*sj5);
IkReal x14719=(cj5*sj6);
IkReal x14720=((1.0)*cj0);
IkReal x14721=(cj6*r20);
IkReal x14722=((1.0)*sj5);
IkReal x14723=(r21*sj6);
IkReal x14724=(x14719*x14720);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x14719))+((r21*x14715))+(((-1.0)*sj5*x14717)));
evalcond[2]=((((-1.0)*x14723))+x14721);
evalcond[3]=((((-1.0)*r20*sj6*x14722))+(((-1.0)*cj5*x14717))+(((-1.0)*cj6*r21*x14722)));
evalcond[4]=(((r02*x14718))+(((-1.0)*r00*x14724))+(((-1.0)*r01*x14715*x14720))+((r12*sj0*sj5))+(((-1.0)*r11*x14715*x14716))+(((-1.0)*r10*x14716*x14719)));
evalcond[5]=(((r12*x14718))+(((-1.0)*r02*sj5*x14716))+(((-1.0)*r11*x14715*x14720))+((r01*sj0*x14715))+((r00*sj0*x14719))+(((-1.0)*r10*x14724)));
evalcond[6]=((-0.0097)+pz+(((0.026255)*x14721))+(((-0.026255)*x14723)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14725=(sj0*sj6);
IkReal x14726=(cj0*sj6);
IkReal x14727=(cj6*r00);
IkReal x14728=((1.0)*cj6*r10);
if( IKabs((((sj0*x14727))+((r11*x14726))+(((-1.0)*r01*x14725))+(((-1.0)*cj0*x14728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x14728))+((r01*x14726))+((r11*x14725))+(((-1.0)*cj0*x14727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x14727))+((r11*x14726))+(((-1.0)*r01*x14725))+(((-1.0)*cj0*x14728))))+IKsqr(((((-1.0)*sj0*x14728))+((r01*x14726))+((r11*x14725))+(((-1.0)*cj0*x14727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj0*x14727))+((r11*x14726))+(((-1.0)*r01*x14725))+(((-1.0)*cj0*x14728))), ((((-1.0)*sj0*x14728))+((r01*x14726))+((r11*x14725))+(((-1.0)*cj0*x14727))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14729=IKcos(j4);
IkReal x14730=IKsin(j4);
IkReal x14731=(r11*sj6);
IkReal x14732=((0.026255)*cj0);
IkReal x14733=(r01*sj6);
IkReal x14734=(sj0*sj5);
IkReal x14735=(cj6*r11);
IkReal x14736=(r10*sj6);
IkReal x14737=(cj5*r12);
IkReal x14738=(cj6*sj0);
IkReal x14739=((1.0)*sj0);
IkReal x14740=(cj5*r02);
IkReal x14741=((1.0)*r10);
IkReal x14742=(cj0*sj5);
IkReal x14743=(r00*sj6);
IkReal x14744=((0.026255)*sj0);
IkReal x14745=(cj0*cj6);
IkReal x14746=((1.0)*cj0);
IkReal x14747=(cj6*r01);
IkReal x14748=((1.0)*x14730);
evalcond[0]=((((-1.0)*x14729))+((cj0*x14733))+((sj0*x14731))+(((-1.0)*r00*x14745))+(((-1.0)*x14738*x14741)));
evalcond[1]=(((cj0*x14731))+((r00*x14738))+(((-1.0)*x14748))+(((-1.0)*x14741*x14745))+(((-1.0)*x14733*x14739)));
evalcond[2]=(((sj0*x14737))+((x14742*x14743))+((x14742*x14747))+((x14734*x14736))+((x14734*x14735))+(((-1.0)*x14748))+((cj0*x14740)));
evalcond[3]=(((cj0*x14737))+((x14735*x14742))+((x14736*x14742))+(((-1.0)*x14734*x14747))+(((-1.0)*x14734*x14743))+(((-1.0)*x14739*x14740))+x14729);
evalcond[4]=((-0.09736)+(((-1.0)*py*x14746))+(((-1.0)*cj6*r10*x14732))+(((0.026255)*r00*x14738))+(((-0.0718)*x14729))+(((-1.0)*x14733*x14744))+((x14731*x14732))+((px*sj0))+(((-0.02626)*x14730)));
evalcond[5]=((-0.0019)+(((-1.0)*cj6*r00*x14732))+(((0.0718)*x14730))+((x14731*x14744))+(((-0.026255)*r10*x14738))+(((-1.0)*py*x14739))+((x14732*x14733))+(((-1.0)*px*x14746))+(((-0.02626)*x14729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14749=(cj5*cj6);
IkReal x14750=((1.0)*sj0);
IkReal x14751=((1.0)*r22);
IkReal x14752=(cj0*sj5);
IkReal x14753=(cj5*sj6);
IkReal x14754=((1.0)*cj0);
IkReal x14755=(cj6*r20);
IkReal x14756=((1.0)*sj5);
IkReal x14757=(r21*sj6);
IkReal x14758=(x14753*x14754);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x14751))+((r20*x14753))+((r21*x14749)));
evalcond[2]=(x14755+(((-1.0)*x14757)));
evalcond[3]=((((-1.0)*cj5*x14751))+(((-1.0)*r20*sj6*x14756))+(((-1.0)*cj6*r21*x14756)));
evalcond[4]=((((-1.0)*r00*x14758))+(((-1.0)*r10*x14750*x14753))+(((-1.0)*r11*x14749*x14750))+((r02*x14752))+((r12*sj0*sj5))+(((-1.0)*r01*x14749*x14754)));
evalcond[5]=(((r01*sj0*x14749))+(((-1.0)*r11*x14749*x14754))+(((-1.0)*r10*x14758))+((r00*sj0*x14753))+(((-1.0)*r02*sj5*x14750))+((r12*x14752)));
evalcond[6]=((-0.0097)+(((-0.026255)*x14757))+pz+(((0.026255)*x14755)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14759=(sj0*sj6);
IkReal x14760=(cj6*r10);
IkReal x14761=((1.0)*sj0);
IkReal x14762=(cj6*r00);
IkReal x14763=(cj0*sj6);
if( IKabs((((cj0*x14760))+(((-1.0)*r11*x14763))+(((-1.0)*x14761*x14762))+((r01*x14759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14760*x14761))+((r01*x14763))+(((-1.0)*cj0*x14762))+((r11*x14759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x14760))+(((-1.0)*r11*x14763))+(((-1.0)*x14761*x14762))+((r01*x14759))))+IKsqr(((((-1.0)*x14760*x14761))+((r01*x14763))+(((-1.0)*cj0*x14762))+((r11*x14759))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*x14760))+(((-1.0)*r11*x14763))+(((-1.0)*x14761*x14762))+((r01*x14759))), ((((-1.0)*x14760*x14761))+((r01*x14763))+(((-1.0)*cj0*x14762))+((r11*x14759))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14764=IKsin(j4);
IkReal x14765=IKcos(j4);
IkReal x14766=(r11*sj6);
IkReal x14767=((0.026255)*cj0);
IkReal x14768=(r01*sj6);
IkReal x14769=(sj0*sj5);
IkReal x14770=(cj6*r11);
IkReal x14771=(r10*sj6);
IkReal x14772=(cj5*r12);
IkReal x14773=(cj6*sj0);
IkReal x14774=((1.0)*sj0);
IkReal x14775=(cj5*r02);
IkReal x14776=((1.0)*r10);
IkReal x14777=(cj0*sj5);
IkReal x14778=(r00*sj6);
IkReal x14779=((0.026255)*sj0);
IkReal x14780=(cj0*cj6);
IkReal x14781=((1.0)*cj0);
IkReal x14782=(cj6*r01);
IkReal x14783=((1.0)*x14765);
evalcond[0]=((((-1.0)*x14768*x14774))+(((-1.0)*x14776*x14780))+((cj0*x14766))+((r00*x14773))+x14764);
evalcond[1]=(((sj0*x14766))+(((-1.0)*x14773*x14776))+((cj0*x14768))+(((-1.0)*r00*x14780))+(((-1.0)*x14783)));
evalcond[2]=(((x14777*x14778))+(((-1.0)*x14764))+((cj0*x14775))+((x14769*x14770))+((x14769*x14771))+((sj0*x14772))+((x14777*x14782)));
evalcond[3]=(((x14770*x14777))+((cj0*x14772))+((x14771*x14777))+(((-1.0)*x14769*x14782))+(((-1.0)*x14774*x14775))+(((-1.0)*x14769*x14778))+(((-1.0)*x14783)));
evalcond[4]=((0.09756)+((x14766*x14767))+(((-1.0)*x14768*x14779))+(((0.02626)*x14764))+(((-1.0)*py*x14781))+(((0.026255)*r00*x14773))+((px*sj0))+(((0.0718)*x14765))+(((-1.0)*cj6*r10*x14767)));
evalcond[5]=((-0.0019)+(((-0.02626)*x14765))+((x14767*x14768))+(((-1.0)*py*x14774))+((x14766*x14779))+(((-1.0)*cj6*r00*x14767))+(((0.0718)*x14764))+(((-0.026255)*r10*x14773))+(((-1.0)*px*x14781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14784=(cj5*cj6);
IkReal x14785=((1.0)*sj0);
IkReal x14786=((1.0)*r22);
IkReal x14787=(cj0*sj5);
IkReal x14788=(cj5*sj6);
IkReal x14789=((1.0)*cj0);
IkReal x14790=(cj6*r20);
IkReal x14791=((1.0)*sj5);
IkReal x14792=(r21*sj6);
IkReal x14793=(x14788*x14789);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x14786))+((r20*x14788))+((r21*x14784)));
evalcond[2]=((((-1.0)*x14792))+x14790);
evalcond[3]=((((-1.0)*cj6*r21*x14791))+(((-1.0)*r20*sj6*x14791))+(((-1.0)*cj5*x14786)));
evalcond[4]=((((-1.0)*r00*x14793))+((r12*sj0*sj5))+(((-1.0)*r11*x14784*x14785))+(((-1.0)*r01*x14784*x14789))+((r02*x14787))+(((-1.0)*r10*x14785*x14788)));
evalcond[5]=((((-1.0)*r02*sj5*x14785))+(((-1.0)*r10*x14793))+((r12*x14787))+(((-1.0)*r11*x14784*x14789))+((r01*sj0*x14784))+((r00*sj0*x14788)));
evalcond[6]=((-0.0001)+(((0.026255)*x14790))+pz+(((-0.026255)*x14792)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14794=(sj0*sj6);
IkReal x14795=(cj6*r10);
IkReal x14796=((1.0)*sj0);
IkReal x14797=(cj6*r00);
IkReal x14798=(cj0*sj6);
if( IKabs(((((-1.0)*x14796*x14797))+((cj0*x14795))+((r01*x14794))+(((-1.0)*r11*x14798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x14798))+((r11*x14794))+(((-1.0)*x14795*x14796))+(((-1.0)*cj0*x14797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14796*x14797))+((cj0*x14795))+((r01*x14794))+(((-1.0)*r11*x14798))))+IKsqr((((r01*x14798))+((r11*x14794))+(((-1.0)*x14795*x14796))+(((-1.0)*cj0*x14797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x14796*x14797))+((cj0*x14795))+((r01*x14794))+(((-1.0)*r11*x14798))), (((r01*x14798))+((r11*x14794))+(((-1.0)*x14795*x14796))+(((-1.0)*cj0*x14797))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14799=IKsin(j4);
IkReal x14800=IKcos(j4);
IkReal x14801=(r11*sj6);
IkReal x14802=((0.026255)*cj0);
IkReal x14803=(r01*sj6);
IkReal x14804=(sj0*sj5);
IkReal x14805=(cj6*r11);
IkReal x14806=(r10*sj6);
IkReal x14807=(cj5*r12);
IkReal x14808=(cj6*sj0);
IkReal x14809=((1.0)*sj0);
IkReal x14810=(cj5*r02);
IkReal x14811=((1.0)*r10);
IkReal x14812=(cj0*sj5);
IkReal x14813=(r00*sj6);
IkReal x14814=((0.026255)*sj0);
IkReal x14815=(cj0*cj6);
IkReal x14816=((1.0)*cj0);
IkReal x14817=(cj6*r01);
IkReal x14818=((1.0)*x14800);
evalcond[0]=((((-1.0)*x14803*x14809))+(((-1.0)*x14811*x14815))+((r00*x14808))+x14799+((cj0*x14801)));
evalcond[1]=((((-1.0)*r00*x14815))+(((-1.0)*x14818))+((sj0*x14801))+(((-1.0)*x14808*x14811))+((cj0*x14803)));
evalcond[2]=((((-1.0)*x14799))+((sj0*x14807))+((x14804*x14805))+((x14804*x14806))+((cj0*x14810))+((x14812*x14817))+((x14812*x14813)));
evalcond[3]=((((-1.0)*x14804*x14813))+(((-1.0)*x14804*x14817))+((x14806*x14812))+(((-1.0)*x14818))+(((-1.0)*x14809*x14810))+((x14805*x14812))+((cj0*x14807)));
evalcond[4]=((0.08776)+(((-1.0)*py*x14816))+(((0.026255)*r00*x14808))+(((-1.0)*x14803*x14814))+(((0.02626)*x14799))+(((-1.0)*cj6*r10*x14802))+(((0.0718)*x14800))+((px*sj0))+((x14801*x14802)));
evalcond[5]=((-0.0019)+((x14802*x14803))+(((-1.0)*py*x14809))+(((-0.026255)*r10*x14808))+(((-1.0)*cj6*r00*x14802))+(((-1.0)*px*x14816))+(((-0.02626)*x14800))+(((0.0718)*x14799))+((x14801*x14814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14819=(cj5*cj6);
IkReal x14820=((1.0)*sj0);
IkReal x14821=((1.0)*r22);
IkReal x14822=(cj0*sj5);
IkReal x14823=(cj5*sj6);
IkReal x14824=((1.0)*cj0);
IkReal x14825=(cj6*r20);
IkReal x14826=((1.0)*sj5);
IkReal x14827=(r21*sj6);
IkReal x14828=(x14823*x14824);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r21*x14819))+(((-1.0)*sj5*x14821))+((r20*x14823)));
evalcond[2]=(x14825+(((-1.0)*x14827)));
evalcond[3]=((((-1.0)*cj6*r21*x14826))+(((-1.0)*cj5*x14821))+(((-1.0)*r20*sj6*x14826)));
evalcond[4]=(((r02*x14822))+(((-1.0)*r00*x14828))+(((-1.0)*r10*x14820*x14823))+((r12*sj0*sj5))+(((-1.0)*r01*x14819*x14824))+(((-1.0)*r11*x14819*x14820)));
evalcond[5]=((((-1.0)*r10*x14828))+(((-1.0)*r02*sj5*x14820))+((r00*sj0*x14823))+((r12*x14822))+((r01*sj0*x14819))+(((-1.0)*r11*x14819*x14824)));
evalcond[6]=((-0.0001)+(((-0.026255)*x14827))+pz+(((0.026255)*x14825)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14829=(sj0*sj6);
IkReal x14830=(cj0*sj6);
IkReal x14831=(cj6*r00);
IkReal x14832=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*r01*x14829))+((r11*x14830))+(((-1.0)*cj0*x14832))+((sj0*x14831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x14831))+(((-1.0)*sj0*x14832))+((r01*x14830))+((r11*x14829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14829))+((r11*x14830))+(((-1.0)*cj0*x14832))+((sj0*x14831))))+IKsqr(((((-1.0)*cj0*x14831))+(((-1.0)*sj0*x14832))+((r01*x14830))+((r11*x14829))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x14829))+((r11*x14830))+(((-1.0)*cj0*x14832))+((sj0*x14831))), ((((-1.0)*cj0*x14831))+(((-1.0)*sj0*x14832))+((r01*x14830))+((r11*x14829))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14833=IKcos(j4);
IkReal x14834=IKsin(j4);
IkReal x14835=(r11*sj6);
IkReal x14836=((0.026255)*cj0);
IkReal x14837=(r01*sj6);
IkReal x14838=(sj0*sj5);
IkReal x14839=(cj6*r11);
IkReal x14840=(r10*sj6);
IkReal x14841=(cj5*r12);
IkReal x14842=(cj6*sj0);
IkReal x14843=((1.0)*sj0);
IkReal x14844=(cj5*r02);
IkReal x14845=((1.0)*r10);
IkReal x14846=(cj0*sj5);
IkReal x14847=(r00*sj6);
IkReal x14848=((0.026255)*sj0);
IkReal x14849=(cj0*cj6);
IkReal x14850=((1.0)*cj0);
IkReal x14851=(cj6*r01);
IkReal x14852=((1.0)*x14834);
evalcond[0]=(((cj0*x14837))+(((-1.0)*x14833))+(((-1.0)*r00*x14849))+(((-1.0)*x14842*x14845))+((sj0*x14835)));
evalcond[1]=(((cj0*x14835))+(((-1.0)*x14837*x14843))+(((-1.0)*x14845*x14849))+(((-1.0)*x14852))+((r00*x14842)));
evalcond[2]=(((cj0*x14844))+((sj0*x14841))+((x14846*x14851))+((x14846*x14847))+(((-1.0)*x14852))+((x14838*x14839))+((x14838*x14840)));
evalcond[3]=(((cj0*x14841))+((x14840*x14846))+x14833+((x14839*x14846))+(((-1.0)*x14843*x14844))+(((-1.0)*x14838*x14847))+(((-1.0)*x14838*x14851)));
evalcond[4]=((-0.10716)+(((-1.0)*cj6*r10*x14836))+(((-0.02626)*x14834))+(((-1.0)*x14837*x14848))+(((-0.0718)*x14833))+((x14835*x14836))+(((0.026255)*r00*x14842))+((px*sj0))+(((-1.0)*py*x14850)));
evalcond[5]=((-0.0019)+(((-1.0)*cj6*r00*x14836))+(((-0.02626)*x14833))+((x14836*x14837))+(((0.0718)*x14834))+(((-1.0)*px*x14850))+(((-0.026255)*r10*x14842))+(((-1.0)*py*x14843))+((x14835*x14848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14853=(cj5*cj6);
IkReal x14854=((1.0)*sj0);
IkReal x14855=((1.0)*r22);
IkReal x14856=(cj0*sj5);
IkReal x14857=(cj5*sj6);
IkReal x14858=((1.0)*cj0);
IkReal x14859=(cj6*r20);
IkReal x14860=((1.0)*sj5);
IkReal x14861=(r21*sj6);
IkReal x14862=(x14857*x14858);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+((r21*x14853))+((r20*x14857))+(((-1.0)*sj5*x14855)));
evalcond[2]=(x14859+(((-1.0)*x14861)));
evalcond[3]=((((-1.0)*cj5*x14855))+(((-1.0)*cj6*r21*x14860))+(((-1.0)*r20*sj6*x14860)));
evalcond[4]=(((r02*x14856))+(((-1.0)*r10*x14854*x14857))+((r12*sj0*sj5))+(((-1.0)*r01*x14853*x14858))+(((-1.0)*r11*x14853*x14854))+(((-1.0)*r00*x14862)));
evalcond[5]=((((-1.0)*r10*x14862))+(((-1.0)*r02*sj5*x14854))+((r01*sj0*x14853))+((r00*sj0*x14857))+((r12*x14856))+(((-1.0)*r11*x14853*x14858)));
evalcond[6]=((0.0097)+(((0.026255)*x14859))+pz+(((-0.026255)*x14861)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14863=(sj0*sj6);
IkReal x14864=(cj6*r10);
IkReal x14865=((1.0)*sj0);
IkReal x14866=(cj6*r00);
IkReal x14867=(cj0*sj6);
if( IKabs(((((-1.0)*r11*x14867))+((r01*x14863))+(((-1.0)*x14865*x14866))+((cj0*x14864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x14866))+((r01*x14867))+((r11*x14863))+(((-1.0)*x14864*x14865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x14867))+((r01*x14863))+(((-1.0)*x14865*x14866))+((cj0*x14864))))+IKsqr(((((-1.0)*cj0*x14866))+((r01*x14867))+((r11*x14863))+(((-1.0)*x14864*x14865))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r11*x14867))+((r01*x14863))+(((-1.0)*x14865*x14866))+((cj0*x14864))), ((((-1.0)*cj0*x14866))+((r01*x14867))+((r11*x14863))+(((-1.0)*x14864*x14865))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14868=IKsin(j4);
IkReal x14869=IKcos(j4);
IkReal x14870=(r11*sj6);
IkReal x14871=((0.026255)*cj0);
IkReal x14872=(r01*sj6);
IkReal x14873=(sj0*sj5);
IkReal x14874=(cj6*r11);
IkReal x14875=(r10*sj6);
IkReal x14876=(cj5*r12);
IkReal x14877=(cj6*sj0);
IkReal x14878=((1.0)*sj0);
IkReal x14879=(cj5*r02);
IkReal x14880=((1.0)*r10);
IkReal x14881=(cj0*sj5);
IkReal x14882=(r00*sj6);
IkReal x14883=((0.026255)*sj0);
IkReal x14884=(cj0*cj6);
IkReal x14885=((1.0)*cj0);
IkReal x14886=(cj6*r01);
IkReal x14887=((1.0)*x14869);
evalcond[0]=(((cj0*x14870))+(((-1.0)*x14872*x14878))+x14868+((r00*x14877))+(((-1.0)*x14880*x14884)));
evalcond[1]=(((cj0*x14872))+((sj0*x14870))+(((-1.0)*r00*x14884))+(((-1.0)*x14887))+(((-1.0)*x14877*x14880)));
evalcond[2]=(((cj0*x14879))+((x14873*x14874))+((x14873*x14875))+((sj0*x14876))+(((-1.0)*x14868))+((x14881*x14886))+((x14881*x14882)));
evalcond[3]=((((-1.0)*x14878*x14879))+(((-1.0)*x14873*x14882))+(((-1.0)*x14873*x14886))+((cj0*x14876))+((x14875*x14881))+((x14874*x14881))+(((-1.0)*x14887)));
evalcond[4]=((0.09736)+(((-1.0)*x14872*x14883))+(((-1.0)*cj6*r10*x14871))+((x14870*x14871))+(((-1.0)*py*x14885))+(((0.0718)*x14869))+(((0.026255)*r00*x14877))+(((0.02626)*x14868))+((px*sj0)));
evalcond[5]=((-0.0019)+((x14871*x14872))+(((-0.026255)*r10*x14877))+((x14870*x14883))+(((-1.0)*py*x14878))+(((0.0718)*x14868))+(((-1.0)*px*x14885))+(((-1.0)*cj6*r00*x14871))+(((-0.02626)*x14869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14888=(cj5*cj6);
IkReal x14889=((1.0)*sj0);
IkReal x14890=((1.0)*r22);
IkReal x14891=(cj0*sj5);
IkReal x14892=(cj5*sj6);
IkReal x14893=((1.0)*cj0);
IkReal x14894=(cj6*r20);
IkReal x14895=((1.0)*sj5);
IkReal x14896=(r21*sj6);
IkReal x14897=(x14892*x14893);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((1.0)+((r21*x14888))+((r20*x14892))+(((-1.0)*sj5*x14890)));
evalcond[2]=(x14894+(((-1.0)*x14896)));
evalcond[3]=((((-1.0)*cj6*r21*x14895))+(((-1.0)*cj5*x14890))+(((-1.0)*r20*sj6*x14895)));
evalcond[4]=(((r02*x14891))+(((-1.0)*r01*x14888*x14893))+(((-1.0)*r10*x14889*x14892))+(((-1.0)*r00*x14897))+((r12*sj0*sj5))+(((-1.0)*r11*x14888*x14889)));
evalcond[5]=(((r12*x14891))+((r00*sj0*x14892))+((r01*sj0*x14888))+(((-1.0)*r02*sj5*x14889))+(((-1.0)*r11*x14888*x14893))+(((-1.0)*r10*x14897)));
evalcond[6]=((0.0097)+(((0.026255)*x14894))+pz+(((-0.026255)*x14896)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14898=(sj0*sj6);
IkReal x14899=(cj0*sj6);
IkReal x14900=(cj6*r00);
IkReal x14901=((1.0)*cj6*r10);
if( IKabs((((r11*x14899))+(((-1.0)*r01*x14898))+(((-1.0)*cj0*x14901))+((sj0*x14900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x14898))+(((-1.0)*cj0*x14900))+((r01*x14899))+(((-1.0)*sj0*x14901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14899))+(((-1.0)*r01*x14898))+(((-1.0)*cj0*x14901))+((sj0*x14900))))+IKsqr((((r11*x14898))+(((-1.0)*cj0*x14900))+((r01*x14899))+(((-1.0)*sj0*x14901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x14899))+(((-1.0)*r01*x14898))+(((-1.0)*cj0*x14901))+((sj0*x14900))), (((r11*x14898))+(((-1.0)*cj0*x14900))+((r01*x14899))+(((-1.0)*sj0*x14901))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14902=IKcos(j4);
IkReal x14903=IKsin(j4);
IkReal x14904=(r11*sj6);
IkReal x14905=((0.026255)*cj0);
IkReal x14906=(r01*sj6);
IkReal x14907=(sj0*sj5);
IkReal x14908=(cj6*r11);
IkReal x14909=(r10*sj6);
IkReal x14910=(cj5*r12);
IkReal x14911=(cj6*sj0);
IkReal x14912=((1.0)*sj0);
IkReal x14913=(cj5*r02);
IkReal x14914=((1.0)*r10);
IkReal x14915=(cj0*sj5);
IkReal x14916=(r00*sj6);
IkReal x14917=((0.026255)*sj0);
IkReal x14918=(cj0*cj6);
IkReal x14919=((1.0)*cj0);
IkReal x14920=(cj6*r01);
IkReal x14921=((1.0)*x14903);
evalcond[0]=(((cj0*x14906))+(((-1.0)*x14911*x14914))+(((-1.0)*x14902))+(((-1.0)*r00*x14918))+((sj0*x14904)));
evalcond[1]=(((cj0*x14904))+((r00*x14911))+(((-1.0)*x14906*x14912))+(((-1.0)*x14921))+(((-1.0)*x14914*x14918)));
evalcond[2]=(((x14915*x14920))+(((-1.0)*x14921))+((sj0*x14910))+((x14915*x14916))+((x14907*x14909))+((x14907*x14908))+((cj0*x14913)));
evalcond[3]=(((x14909*x14915))+(((-1.0)*x14907*x14916))+x14902+(((-1.0)*x14907*x14920))+(((-1.0)*x14912*x14913))+((cj0*x14910))+((x14908*x14915)));
evalcond[4]=((-0.09756)+(((0.026255)*r00*x14911))+(((-0.0718)*x14902))+(((-1.0)*cj6*r10*x14905))+(((-1.0)*py*x14919))+(((-1.0)*x14906*x14917))+((x14904*x14905))+(((-0.02626)*x14903))+((px*sj0)));
evalcond[5]=((-0.0019)+(((-1.0)*px*x14919))+(((-1.0)*py*x14912))+(((-0.026255)*r10*x14911))+((x14904*x14917))+(((0.0718)*x14903))+(((-1.0)*cj6*r00*x14905))+(((-0.02626)*x14902))+((x14905*x14906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14922=(cj5*cj6);
IkReal x14923=((1.0)*sj0);
IkReal x14924=((1.0)*r22);
IkReal x14925=(cj0*sj5);
IkReal x14926=(cj5*sj6);
IkReal x14927=((1.0)*cj0);
IkReal x14928=(cj6*r20);
IkReal x14929=((1.0)*sj5);
IkReal x14930=(r21*sj6);
IkReal x14931=(x14926*x14927);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r21*x14922))+(((-1.0)*sj5*x14924))+((r20*x14926)));
evalcond[2]=((((-1.0)*x14930))+x14928);
evalcond[3]=((((-1.0)*r20*sj6*x14929))+(((-1.0)*cj6*r21*x14929))+(((-1.0)*cj5*x14924)));
evalcond[4]=((((-1.0)*r11*x14922*x14923))+((r12*sj0*sj5))+(((-1.0)*r00*x14931))+(((-1.0)*r01*x14922*x14927))+((r02*x14925))+(((-1.0)*r10*x14923*x14926)));
evalcond[5]=((((-1.0)*r11*x14922*x14927))+(((-1.0)*r10*x14931))+((r01*sj0*x14922))+((r00*sj0*x14926))+((r12*x14925))+(((-1.0)*r02*sj5*x14923)));
evalcond[6]=((0.0001)+(((-0.026255)*x14930))+(((0.026255)*x14928))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14932=(sj0*sj6);
IkReal x14933=(cj0*sj6);
IkReal x14934=(cj6*r00);
IkReal x14935=((1.0)*cj6*r10);
if( IKabs(((((-1.0)*cj0*x14935))+((sj0*x14934))+((r11*x14933))+(((-1.0)*r01*x14932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x14935))+((r01*x14933))+(((-1.0)*cj0*x14934))+((r11*x14932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x14935))+((sj0*x14934))+((r11*x14933))+(((-1.0)*r01*x14932))))+IKsqr(((((-1.0)*sj0*x14935))+((r01*x14933))+(((-1.0)*cj0*x14934))+((r11*x14932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x14935))+((sj0*x14934))+((r11*x14933))+(((-1.0)*r01*x14932))), ((((-1.0)*sj0*x14935))+((r01*x14933))+(((-1.0)*cj0*x14934))+((r11*x14932))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14936=IKcos(j4);
IkReal x14937=IKsin(j4);
IkReal x14938=(r11*sj6);
IkReal x14939=((0.026255)*cj0);
IkReal x14940=(r01*sj6);
IkReal x14941=(sj0*sj5);
IkReal x14942=(cj6*r11);
IkReal x14943=(r10*sj6);
IkReal x14944=(cj5*r12);
IkReal x14945=(cj6*sj0);
IkReal x14946=((1.0)*sj0);
IkReal x14947=(cj5*r02);
IkReal x14948=((1.0)*r10);
IkReal x14949=(cj0*sj5);
IkReal x14950=(r00*sj6);
IkReal x14951=((0.026255)*sj0);
IkReal x14952=(cj0*cj6);
IkReal x14953=((1.0)*cj0);
IkReal x14954=(cj6*r01);
IkReal x14955=((1.0)*x14937);
evalcond[0]=((((-1.0)*x14936))+((sj0*x14938))+(((-1.0)*x14945*x14948))+((cj0*x14940))+(((-1.0)*r00*x14952)));
evalcond[1]=((((-1.0)*x14940*x14946))+((cj0*x14938))+((r00*x14945))+(((-1.0)*x14955))+(((-1.0)*x14948*x14952)));
evalcond[2]=(((x14949*x14954))+((x14949*x14950))+((cj0*x14947))+((sj0*x14944))+(((-1.0)*x14955))+((x14941*x14943))+((x14941*x14942)));
evalcond[3]=(x14936+((cj0*x14944))+(((-1.0)*x14941*x14954))+(((-1.0)*x14941*x14950))+(((-1.0)*x14946*x14947))+((x14943*x14949))+((x14942*x14949)));
evalcond[4]=((-0.08776)+(((-1.0)*py*x14953))+(((-1.0)*x14940*x14951))+(((-1.0)*cj6*r10*x14939))+(((-0.02626)*x14937))+(((0.026255)*r00*x14945))+((px*sj0))+(((-0.0718)*x14936))+((x14938*x14939)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x14946))+(((0.0718)*x14937))+(((-1.0)*cj6*r00*x14939))+(((-0.02626)*x14936))+((x14938*x14951))+((x14939*x14940))+(((-1.0)*px*x14953))+(((-0.026255)*r10*x14945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14956=(cj5*cj6);
IkReal x14957=((1.0)*sj0);
IkReal x14958=((1.0)*r22);
IkReal x14959=(cj0*sj5);
IkReal x14960=(cj5*sj6);
IkReal x14961=((1.0)*cj0);
IkReal x14962=(cj6*r20);
IkReal x14963=((1.0)*sj5);
IkReal x14964=(r21*sj6);
IkReal x14965=(x14960*x14961);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x14958))+((r21*x14956))+((r20*x14960)));
evalcond[2]=((((-1.0)*x14964))+x14962);
evalcond[3]=((((-1.0)*cj5*x14958))+(((-1.0)*r20*sj6*x14963))+(((-1.0)*cj6*r21*x14963)));
evalcond[4]=((((-1.0)*r01*x14956*x14961))+(((-1.0)*r10*x14957*x14960))+((r12*sj0*sj5))+(((-1.0)*r00*x14965))+((r02*x14959))+(((-1.0)*r11*x14956*x14957)));
evalcond[5]=((((-1.0)*r02*sj5*x14957))+((r12*x14959))+(((-1.0)*r10*x14965))+(((-1.0)*r11*x14956*x14961))+((r01*sj0*x14956))+((r00*sj0*x14960)));
evalcond[6]=((0.0001)+(((-0.026255)*x14964))+pz+(((0.026255)*x14962)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14966=(sj0*sj6);
IkReal x14967=(cj6*r10);
IkReal x14968=((1.0)*sj0);
IkReal x14969=(cj6*r00);
IkReal x14970=(cj0*sj6);
if( IKabs((((r01*x14966))+(((-1.0)*x14968*x14969))+(((-1.0)*r11*x14970))+((cj0*x14967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14967*x14968))+(((-1.0)*cj0*x14969))+((r11*x14966))+((r01*x14970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x14966))+(((-1.0)*x14968*x14969))+(((-1.0)*r11*x14970))+((cj0*x14967))))+IKsqr(((((-1.0)*x14967*x14968))+(((-1.0)*cj0*x14969))+((r11*x14966))+((r01*x14970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x14966))+(((-1.0)*x14968*x14969))+(((-1.0)*r11*x14970))+((cj0*x14967))), ((((-1.0)*x14967*x14968))+(((-1.0)*cj0*x14969))+((r11*x14966))+((r01*x14970))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14971=IKsin(j4);
IkReal x14972=IKcos(j4);
IkReal x14973=(r11*sj6);
IkReal x14974=((0.026255)*cj0);
IkReal x14975=(r01*sj6);
IkReal x14976=(sj0*sj5);
IkReal x14977=(cj6*r11);
IkReal x14978=(r10*sj6);
IkReal x14979=(cj5*r12);
IkReal x14980=(cj6*sj0);
IkReal x14981=((1.0)*sj0);
IkReal x14982=(cj5*r02);
IkReal x14983=((1.0)*r10);
IkReal x14984=(cj0*sj5);
IkReal x14985=(r00*sj6);
IkReal x14986=((0.026255)*sj0);
IkReal x14987=(cj0*cj6);
IkReal x14988=((1.0)*cj0);
IkReal x14989=(cj6*r01);
IkReal x14990=((1.0)*x14972);
evalcond[0]=(x14971+(((-1.0)*x14975*x14981))+((r00*x14980))+(((-1.0)*x14983*x14987))+((cj0*x14973)));
evalcond[1]=((((-1.0)*x14990))+(((-1.0)*r00*x14987))+((sj0*x14973))+(((-1.0)*x14980*x14983))+((cj0*x14975)));
evalcond[2]=(((x14984*x14989))+((x14984*x14985))+(((-1.0)*x14971))+((cj0*x14982))+((sj0*x14979))+((x14976*x14977))+((x14976*x14978)));
evalcond[3]=((((-1.0)*x14976*x14989))+(((-1.0)*x14976*x14985))+(((-1.0)*x14981*x14982))+(((-1.0)*x14990))+((x14977*x14984))+((cj0*x14979))+((x14978*x14984)));
evalcond[4]=((0.10716)+(((-1.0)*py*x14988))+(((0.02626)*x14971))+(((-1.0)*cj6*r10*x14974))+(((-1.0)*x14975*x14986))+((x14973*x14974))+(((0.026255)*r00*x14980))+((px*sj0))+(((0.0718)*x14972)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x14981))+((x14974*x14975))+(((-0.026255)*r10*x14980))+((x14973*x14986))+(((-0.02626)*x14972))+(((-1.0)*px*x14988))+(((0.0718)*x14971))+(((-1.0)*cj6*r00*x14974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14991=(cj6*r10);
IkReal x14992=((1.0)*sj0);
IkReal x14993=(sj0*sj6);
IkReal x14994=(cj6*r00);
IkReal x14995=(cj0*sj6);
CheckValue<IkReal> x14996=IKPowWithIntegerCheck(((((-1.0)*cj1*sj3))+((cj3*sj1))),-1);
if(!x14996.valid){
continue;
}
if( IKabs(((x14996.value)*((((cj0*x14991))+(((-1.0)*x14992*x14994))+(((-1.0)*r11*x14995))+((r01*x14993)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14991*x14992))+((r11*x14993))+((r01*x14995))+(((-1.0)*cj0*x14994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14996.value)*((((cj0*x14991))+(((-1.0)*x14992*x14994))+(((-1.0)*r11*x14995))+((r01*x14993))))))+IKsqr(((((-1.0)*x14991*x14992))+((r11*x14993))+((r01*x14995))+(((-1.0)*cj0*x14994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14996.value)*((((cj0*x14991))+(((-1.0)*x14992*x14994))+(((-1.0)*r11*x14995))+((r01*x14993))))), ((((-1.0)*x14991*x14992))+((r11*x14993))+((r01*x14995))+(((-1.0)*cj0*x14994))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14997=IKsin(j4);
IkReal x14998=IKcos(j4);
IkReal x14999=((1.0)*sj1);
IkReal x15000=(r11*sj0);
IkReal x15001=(sj1*sj3);
IkReal x15002=(cj0*sj6);
IkReal x15003=((0.026255)*r01);
IkReal x15004=(cj5*r12);
IkReal x15005=(cj6*sj5);
IkReal x15006=(r10*sj0);
IkReal x15007=(sj5*sj6);
IkReal x15008=((0.026255)*cj6);
IkReal x15009=(r00*sj0);
IkReal x15010=((1.0)*cj5);
IkReal x15011=(cj1*sj3);
IkReal x15012=((1.0)*cj6);
IkReal x15013=((1.0)*sj0);
IkReal x15014=(cj0*r00);
IkReal x15015=((0.026255)*sj6);
IkReal x15016=(cj1*cj3);
IkReal x15017=(cj0*r10);
IkReal x15018=(cj3*sj1);
IkReal x15019=((1.0)*r21);
IkReal x15020=((1.0)*cj0);
IkReal x15021=(cj3*x14998);
IkReal x15022=((0.02626)*x14997);
IkReal x15023=((1.0)*x14997);
IkReal x15024=((0.0718)*x14998);
evalcond[0]=(((x14997*x15016))+(((-1.0)*sj6*x15019))+((cj6*r20))+((x14997*x15001)));
evalcond[1]=(((r01*x15002))+(((-1.0)*x15012*x15014))+(((-1.0)*x15006*x15012))+(((-1.0)*x14998))+((sj6*x15000)));
evalcond[2]=((((-1.0)*r20*x15007))+(((-1.0)*x15005*x15019))+(((-1.0)*r22*x15010))+(((-1.0)*x14998*x15016))+(((-1.0)*sj3*x14998*x14999)));
evalcond[3]=((((-1.0)*r01*sj6*x15013))+((x14997*x15018))+(((-1.0)*x15011*x15023))+(((-1.0)*x15012*x15017))+((cj6*x15009))+((r11*x15002)));
evalcond[4]=(((r00*sj5*x15002))+((cj0*cj5*r02))+((cj0*r01*x15005))+((x15006*x15007))+(((-1.0)*x15023))+((sj0*x15004))+((x15000*x15005)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x15013))+(((-0.02626)*x14998))+((x15002*x15003))+((x15000*x15015))+(((-1.0)*px*x15020))+(((-1.0)*x15008*x15014))+(((-1.0)*x15006*x15008))+(((0.0718)*x14997)));
evalcond[6]=((((-1.0)*x15007*x15009))+((x14998*x15011))+(((-1.0)*x14999*x15021))+(((-1.0)*r01*x15005*x15013))+((r10*sj5*x15002))+((cj0*x15004))+((cj0*r11*x15005))+(((-1.0)*r02*sj0*x15010)));
evalcond[7]=(((x15016*x15024))+((x15016*x15022))+(((-1.0)*r21*x15015))+(((-0.0001)*sj1))+((r20*x15008))+(((0.09746)*x15016))+(((0.09746)*x15001))+(((-0.0097)*cj1))+pz+((x15001*x15022))+((x15001*x15024)));
evalcond[8]=((((-0.09746)*x15011))+(((-1.0)*x15011*x15024))+(((-1.0)*x15011*x15022))+(((0.09746)*x15018))+(((-1.0)*py*x15020))+(((-0.0097)*sj1))+(((0.026255)*r11*x15002))+(((-1.0)*sj0*sj6*x15003))+(((0.0001)*cj1))+((x15008*x15009))+((px*sj0))+((x15018*x15022))+((x15018*x15024))+(((-1.0)*x15008*x15017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15025=((1.0)*cj6);
CheckValue<IkReal> x15026=IKPowWithIntegerCheck((((sj1*sj3))+((cj1*cj3))),-1);
if(!x15026.valid){
continue;
}
if( IKabs(((x15026.value)*((((r21*sj6))+(((-1.0)*r20*x15025)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x15025))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x15025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15026.value)*((((r21*sj6))+(((-1.0)*r20*x15025))))))+IKsqr((((r11*sj0*sj6))+(((-1.0)*cj0*r00*x15025))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x15025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15026.value)*((((r21*sj6))+(((-1.0)*r20*x15025))))), (((r11*sj0*sj6))+(((-1.0)*cj0*r00*x15025))+((cj0*r01*sj6))+(((-1.0)*r10*sj0*x15025))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15027=IKsin(j4);
IkReal x15028=IKcos(j4);
IkReal x15029=((1.0)*sj1);
IkReal x15030=(r11*sj0);
IkReal x15031=(sj1*sj3);
IkReal x15032=(cj0*sj6);
IkReal x15033=((0.026255)*r01);
IkReal x15034=(cj5*r12);
IkReal x15035=(cj6*sj5);
IkReal x15036=(r10*sj0);
IkReal x15037=(sj5*sj6);
IkReal x15038=((0.026255)*cj6);
IkReal x15039=(r00*sj0);
IkReal x15040=((1.0)*cj5);
IkReal x15041=(cj1*sj3);
IkReal x15042=((1.0)*cj6);
IkReal x15043=((1.0)*sj0);
IkReal x15044=(cj0*r00);
IkReal x15045=((0.026255)*sj6);
IkReal x15046=(cj1*cj3);
IkReal x15047=(cj0*r10);
IkReal x15048=(cj3*sj1);
IkReal x15049=((1.0)*r21);
IkReal x15050=((1.0)*cj0);
IkReal x15051=(cj3*x15028);
IkReal x15052=((0.02626)*x15027);
IkReal x15053=((1.0)*x15027);
IkReal x15054=((0.0718)*x15028);
evalcond[0]=(((x15027*x15046))+((cj6*r20))+((x15027*x15031))+(((-1.0)*sj6*x15049)));
evalcond[1]=(((sj6*x15030))+((r01*x15032))+(((-1.0)*x15028))+(((-1.0)*x15042*x15044))+(((-1.0)*x15036*x15042)));
evalcond[2]=((((-1.0)*x15035*x15049))+(((-1.0)*r20*x15037))+(((-1.0)*r22*x15040))+(((-1.0)*sj3*x15028*x15029))+(((-1.0)*x15028*x15046)));
evalcond[3]=((((-1.0)*x15042*x15047))+((x15027*x15048))+(((-1.0)*x15041*x15053))+((cj6*x15039))+((r11*x15032))+(((-1.0)*r01*sj6*x15043)));
evalcond[4]=(((cj0*cj5*r02))+((r00*sj5*x15032))+((cj0*r01*x15035))+(((-1.0)*x15053))+((x15036*x15037))+((x15030*x15035))+((sj0*x15034)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x15043))+(((-1.0)*x15036*x15038))+((x15032*x15033))+(((-0.02626)*x15028))+(((-1.0)*x15038*x15044))+(((0.0718)*x15027))+(((-1.0)*px*x15050))+((x15030*x15045)));
evalcond[6]=((((-1.0)*x15029*x15051))+(((-1.0)*r01*x15035*x15043))+((x15028*x15041))+(((-1.0)*r02*sj0*x15040))+((r10*sj5*x15032))+(((-1.0)*x15037*x15039))+((cj0*x15034))+((cj0*r11*x15035)));
evalcond[7]=((((-1.0)*r21*x15045))+(((-0.0001)*sj1))+((x15046*x15052))+((x15046*x15054))+(((0.09746)*x15031))+((r20*x15038))+(((-0.0097)*cj1))+pz+(((0.09746)*x15046))+((x15031*x15054))+((x15031*x15052)));
evalcond[8]=((((-0.09746)*x15041))+(((-0.0097)*sj1))+(((-1.0)*x15041*x15052))+(((-1.0)*x15041*x15054))+(((-1.0)*py*x15050))+(((-1.0)*sj0*sj6*x15033))+(((0.026255)*r11*x15032))+(((-1.0)*x15038*x15047))+(((0.0001)*cj1))+((px*sj0))+(((0.09746)*x15048))+((x15038*x15039))+((x15048*x15054))+((x15048*x15052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15055=((1.0)*sj5);
CheckValue<IkReal> x15056=IKPowWithIntegerCheck(IKsign((((sj1*sj3))+((cj1*cj3)))),-1);
if(!x15056.valid){
continue;
}
CheckValue<IkReal> x15057 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x15055))+(((-1.0)*r20*sj6*x15055))+(((-1.0)*cj5*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x15057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15056.value)))+(x15057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15058=IKsin(j4);
IkReal x15059=IKcos(j4);
IkReal x15060=((1.0)*sj1);
IkReal x15061=(r11*sj0);
IkReal x15062=(sj1*sj3);
IkReal x15063=(cj0*sj6);
IkReal x15064=((0.026255)*r01);
IkReal x15065=(cj5*r12);
IkReal x15066=(cj6*sj5);
IkReal x15067=(r10*sj0);
IkReal x15068=(sj5*sj6);
IkReal x15069=((0.026255)*cj6);
IkReal x15070=(r00*sj0);
IkReal x15071=((1.0)*cj5);
IkReal x15072=(cj1*sj3);
IkReal x15073=((1.0)*cj6);
IkReal x15074=((1.0)*sj0);
IkReal x15075=(cj0*r00);
IkReal x15076=((0.026255)*sj6);
IkReal x15077=(cj1*cj3);
IkReal x15078=(cj0*r10);
IkReal x15079=(cj3*sj1);
IkReal x15080=((1.0)*r21);
IkReal x15081=((1.0)*cj0);
IkReal x15082=(cj3*x15059);
IkReal x15083=((0.02626)*x15058);
IkReal x15084=((1.0)*x15058);
IkReal x15085=((0.0718)*x15059);
evalcond[0]=(((x15058*x15077))+((x15058*x15062))+(((-1.0)*sj6*x15080))+((cj6*r20)));
evalcond[1]=((((-1.0)*x15059))+((r01*x15063))+(((-1.0)*x15073*x15075))+(((-1.0)*x15067*x15073))+((sj6*x15061)));
evalcond[2]=((((-1.0)*r20*x15068))+(((-1.0)*x15066*x15080))+(((-1.0)*r22*x15071))+(((-1.0)*x15059*x15077))+(((-1.0)*sj3*x15059*x15060)));
evalcond[3]=(((cj6*x15070))+((x15058*x15079))+(((-1.0)*x15073*x15078))+((r11*x15063))+(((-1.0)*r01*sj6*x15074))+(((-1.0)*x15072*x15084)));
evalcond[4]=(((cj0*r01*x15066))+((cj0*cj5*r02))+((x15061*x15066))+((x15067*x15068))+((r00*sj5*x15063))+(((-1.0)*x15084))+((sj0*x15065)));
evalcond[5]=((-0.0019)+(((-1.0)*py*x15074))+((x15061*x15076))+(((-1.0)*x15069*x15075))+((x15063*x15064))+(((-0.02626)*x15059))+(((0.0718)*x15058))+(((-1.0)*x15067*x15069))+(((-1.0)*px*x15081)));
evalcond[6]=(((x15059*x15072))+(((-1.0)*x15060*x15082))+(((-1.0)*x15068*x15070))+(((-1.0)*r02*sj0*x15071))+((r10*sj5*x15063))+(((-1.0)*r01*x15066*x15074))+((cj0*r11*x15066))+((cj0*x15065)));
evalcond[7]=(((r20*x15069))+(((-0.0001)*sj1))+(((-0.0097)*cj1))+(((0.09746)*x15062))+pz+(((0.09746)*x15077))+((x15077*x15085))+((x15077*x15083))+((x15062*x15085))+((x15062*x15083))+(((-1.0)*r21*x15076)));
evalcond[8]=((((-1.0)*x15069*x15078))+(((0.026255)*r11*x15063))+(((-0.0097)*sj1))+((x15079*x15085))+((x15079*x15083))+(((-1.0)*sj0*sj6*x15064))+((x15069*x15070))+(((0.09746)*x15079))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*py*x15081))+(((-1.0)*x15072*x15083))+(((-1.0)*x15072*x15085))+(((-0.09746)*x15072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15086=(cj0*sj5);
IkReal x15087=(cj5*cj6);
IkReal x15088=((1.0)*sj5);
IkReal x15089=((1.0)*sj0);
IkReal x15090=((1.0)*cj0);
IkReal x15091=(cj5*sj6);
IkReal x15092=(r10*x15091);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x15088))+(((-1.0)*sj1))+((r20*x15091))+((r21*x15087)));
evalcond[2]=((((-1.0)*r01*x15087*x15090))+(((-1.0)*r11*x15087*x15089))+(((-1.0)*r00*x15090*x15091))+((r02*x15086))+((r12*sj0*sj5))+(((-1.0)*x15089*x15092)));
evalcond[3]=(((r12*x15086))+cj1+((r00*sj0*x15091))+(((-1.0)*r02*sj0*x15088))+((r01*sj0*x15087))+(((-1.0)*r11*x15087*x15090))+(((-1.0)*x15090*x15092)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x15093=(cj2*sj6);
IkReal x15094=((1.0)*r21);
IkReal x15095=(r20*sj5);
IkReal x15096=(sj2*sj6);
IkReal x15097=(cj2*cj6);
IkReal x15098=(cj5*r22);
IkReal x15099=(cj6*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*x15093*x15094))+(((-1.0)*sj5*x15094*x15099))+((r20*x15097))+(((-1.0)*sj2*x15098))+(((-1.0)*x15095*x15096)))))+(IKabs((((r20*x15099))+((cj2*x15098))+(((-1.0)*x15094*x15096))+((r21*sj5*x15097))+((x15093*x15095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x15100=(cj1*sj1);
j4eval[0]=x15100;
j4eval[1]=IKsign(x15100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15101=(cj5*cj6);
IkReal x15102=(cj0*sj6);
IkReal x15103=(r01*sj0);
IkReal x15104=((1.0)*sj0);
IkReal x15105=((1.0)*cj5);
IkReal x15106=(cj0*r12);
IkReal x15107=(r02*sj5);
IkReal x15108=((1.0)*sj5);
IkReal x15109=(cj5*sj6);
IkReal x15110=((1.0)*cj0);
IkReal x15111=(cj6*r10);
IkReal x15112=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((r21*x15101))+(((-1.0)*r22*x15108))+((r20*x15109)));
evalcond[2]=((((-1.0)*x15110*x15111))+x15112+(((-1.0)*sj6*x15103))+((r11*x15102)));
evalcond[3]=((((-1.0)*r00*x15102*x15105))+(((-1.0)*r10*x15104*x15109))+((cj0*x15107))+((r12*sj0*sj5))+(((-1.0)*r01*x15101*x15110))+(((-1.0)*r11*x15101*x15104)));
evalcond[4]=((1.0)+((sj5*x15106))+((r00*sj0*x15109))+(((-1.0)*x15104*x15107))+(((-1.0)*r10*x15102*x15105))+(((-1.0)*r11*x15101*x15110))+((x15101*x15103)));
evalcond[5]=((((-1.0)*r00*sj5*sj6*x15104))+(((-1.0)*cj6*x15103*x15108))+(((-1.0)*cj5*r02*x15104))+((cj0*cj6*r11*sj5))+((cj5*x15106))+((r10*sj5*x15102)));
evalcond[6]=((0.0001)+(((-1.0)*py*x15110))+(((-0.026255)*cj0*x15111))+(((0.026255)*x15112))+((px*sj0))+(((0.026255)*r11*x15102))+(((-0.026255)*sj6*x15103)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15113=((1.0)*r21);
IkReal x15114=(cj2*sj6);
IkReal x15115=(cj5*r22);
IkReal x15116=(cj6*sj5);
IkReal x15117=(r20*sj2);
if( IKabs(((((-1.0)*x15113*x15114))+(((-1.0)*sj2*x15113*x15116))+((cj2*cj6*r20))+(((-1.0)*sj2*x15115))+(((-1.0)*sj5*sj6*x15117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*sj6*x15113))+((cj2*x15115))+((r20*sj5*x15114))+((cj2*r21*x15116))+((cj6*x15117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15113*x15114))+(((-1.0)*sj2*x15113*x15116))+((cj2*cj6*r20))+(((-1.0)*sj2*x15115))+(((-1.0)*sj5*sj6*x15117))))+IKsqr(((((-1.0)*sj2*sj6*x15113))+((cj2*x15115))+((r20*sj5*x15114))+((cj2*r21*x15116))+((cj6*x15117))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x15113*x15114))+(((-1.0)*sj2*x15113*x15116))+((cj2*cj6*r20))+(((-1.0)*sj2*x15115))+(((-1.0)*sj5*sj6*x15117))), ((((-1.0)*sj2*sj6*x15113))+((cj2*x15115))+((r20*sj5*x15114))+((cj2*r21*x15116))+((cj6*x15117))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15118=IKcos(j4);
IkReal x15119=IKsin(j4);
IkReal x15120=(r11*sj0);
IkReal x15121=((0.026255)*sj6);
IkReal x15122=(cj0*r01);
IkReal x15123=(cj6*sj5);
IkReal x15124=(r10*sj0);
IkReal x15125=(sj5*sj6);
IkReal x15126=(cj6*r20);
IkReal x15127=((1.0)*cj6);
IkReal x15128=(cj0*r00);
IkReal x15129=((0.026255)*cj6);
IkReal x15130=((1.0)*r21);
IkReal x15131=(cj2*x15118);
IkReal x15132=((0.02626)*x15119);
IkReal x15133=(cj2*x15119);
IkReal x15134=((0.0718)*x15118);
IkReal x15135=(sj2*x15118);
IkReal x15136=(sj2*x15119);
IkReal x15137=((1.0)*x15136);
evalcond[0]=((((-1.0)*sj6*x15130))+x15126+(((-1.0)*x15135))+(((-1.0)*x15133)));
evalcond[1]=((((-1.0)*r20*x15125))+(((-1.0)*x15123*x15130))+(((-1.0)*x15137))+x15131+(((-1.0)*cj5*r22)));
evalcond[2]=((((-1.0)*x15137))+(((-1.0)*x15127*x15128))+x15131+(((-1.0)*x15124*x15127))+((sj6*x15122))+((sj6*x15120)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x15124*x15125))+x15133+x15135+((x15125*x15128))+((x15122*x15123))+((x15120*x15123)));
evalcond[4]=((-0.1255)+(((0.026255)*x15126))+(((-0.02626)*x15135))+(((-0.21326)*cj2))+(((0.0718)*x15136))+(((-0.0009)*sj2))+(((-0.0718)*x15131))+pz+(((-1.0)*r21*x15121))+(((-1.0)*cj2*x15132)));
evalcond[5]=((-0.001)+((x15121*x15122))+(((-1.0)*x15128*x15129))+(((0.02626)*x15131))+(((0.0009)*cj2))+(((-1.0)*x15124*x15129))+(((-0.0718)*x15133))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+(((-1.0)*sj2*x15134))+(((-1.0)*sj2*x15132))+((x15120*x15121))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15138=(cj5*cj6);
IkReal x15139=((1.0)*sj0);
IkReal x15140=((1.0)*r22);
IkReal x15141=(cj0*sj5);
IkReal x15142=(cj5*sj6);
IkReal x15143=((1.0)*cj0);
IkReal x15144=(cj6*r20);
IkReal x15145=((1.0)*sj5);
IkReal x15146=(r21*sj6);
IkReal x15147=(x15142*x15143);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x15138))+(((-1.0)*sj5*x15140))+((r20*x15142)));
evalcond[2]=((((-1.0)*x15146))+x15144);
evalcond[3]=((((-1.0)*cj6*r21*x15145))+(((-1.0)*r20*sj6*x15145))+(((-1.0)*cj5*x15140)));
evalcond[4]=((((-1.0)*r00*x15147))+((r12*sj0*sj5))+((r02*x15141))+(((-1.0)*r01*x15138*x15143))+(((-1.0)*r10*x15139*x15142))+(((-1.0)*r11*x15138*x15139)));
evalcond[5]=(((r12*x15141))+((r01*sj0*x15138))+(((-1.0)*r02*sj5*x15139))+(((-1.0)*r10*x15147))+((r00*sj0*x15142))+(((-1.0)*r11*x15138*x15143)));
evalcond[6]=((-0.0001)+(((-0.026255)*x15146))+pz+(((0.026255)*x15144)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15148=((1.0)*r10);
IkReal x15149=((1.0)*cj2);
IkReal x15150=(r11*sj6);
IkReal x15151=(sj0*sj2);
IkReal x15152=(cj0*cj2);
IkReal x15153=(r01*sj6);
IkReal x15154=(cj0*x15153);
IkReal x15155=(cj6*x15151);
IkReal x15156=(cj0*cj6*sj2);
IkReal x15157=(cj2*cj6*sj0);
if( IKabs((((x15150*x15151))+((x15150*x15152))+(((-1.0)*r00*x15156))+((sj2*x15154))+(((-1.0)*cj6*x15148*x15152))+((r00*x15157))+(((-1.0)*x15148*x15155))+(((-1.0)*sj0*x15149*x15153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x15155))+(((-1.0)*x15149*x15154))+(((-1.0)*x15148*x15156))+((cj6*r00*x15152))+((cj0*sj2*x15150))+((r10*x15157))+(((-1.0)*x15151*x15153))+(((-1.0)*sj0*x15149*x15150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15150*x15151))+((x15150*x15152))+(((-1.0)*r00*x15156))+((sj2*x15154))+(((-1.0)*cj6*x15148*x15152))+((r00*x15157))+(((-1.0)*x15148*x15155))+(((-1.0)*sj0*x15149*x15153))))+IKsqr((((r00*x15155))+(((-1.0)*x15149*x15154))+(((-1.0)*x15148*x15156))+((cj6*r00*x15152))+((cj0*sj2*x15150))+((r10*x15157))+(((-1.0)*x15151*x15153))+(((-1.0)*sj0*x15149*x15150))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x15150*x15151))+((x15150*x15152))+(((-1.0)*r00*x15156))+((sj2*x15154))+(((-1.0)*cj6*x15148*x15152))+((r00*x15157))+(((-1.0)*x15148*x15155))+(((-1.0)*sj0*x15149*x15153))), (((r00*x15155))+(((-1.0)*x15149*x15154))+(((-1.0)*x15148*x15156))+((cj6*r00*x15152))+((cj0*sj2*x15150))+((r10*x15157))+(((-1.0)*x15151*x15153))+(((-1.0)*sj0*x15149*x15150))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15158=IKsin(j4);
IkReal x15159=IKcos(j4);
IkReal x15160=(r11*sj6);
IkReal x15161=((0.026255)*cj0);
IkReal x15162=(r01*sj6);
IkReal x15163=(sj0*sj5);
IkReal x15164=(cj6*r11);
IkReal x15165=(r10*sj6);
IkReal x15166=((0.026255)*sj0);
IkReal x15167=(cj0*cj5);
IkReal x15168=(cj6*r00);
IkReal x15169=((1.0)*sj0);
IkReal x15170=(cj0*sj5);
IkReal x15171=(r00*sj6);
IkReal x15172=((1.0)*cj0);
IkReal x15173=(cj6*r10);
IkReal x15174=(cj6*r01);
IkReal x15175=(cj2*x15159);
IkReal x15176=((1.0)*x15173);
IkReal x15177=((0.02626)*x15158);
IkReal x15178=(cj2*x15158);
IkReal x15179=((0.0718)*x15159);
IkReal x15180=(sj2*x15159);
IkReal x15181=(sj2*x15158);
IkReal x15182=((1.0)*x15181);
evalcond[0]=(((sj0*x15160))+(((-1.0)*x15182))+x15175+(((-1.0)*x15168*x15172))+(((-1.0)*x15169*x15173))+((cj0*x15162)));
evalcond[1]=(((sj0*x15168))+(((-1.0)*x15180))+(((-1.0)*x15162*x15169))+(((-1.0)*x15178))+(((-1.0)*x15172*x15173))+((cj0*x15160)));
evalcond[2]=(((cj5*r12*sj0))+((x15163*x15165))+((x15163*x15164))+((r02*x15167))+((x15170*x15171))+((x15170*x15174))+x15180+x15178);
evalcond[3]=(((r12*x15167))+(((-1.0)*x15182))+((x15164*x15170))+x15175+((x15165*x15170))+(((-1.0)*x15163*x15174))+(((-1.0)*x15163*x15171))+(((-1.0)*cj5*r02*x15169)));
evalcond[4]=((-0.1255)+(((0.0718)*x15181))+(((-1.0)*cj2*x15177))+(((-1.0)*x15162*x15166))+(((-0.21326)*cj2))+(((-1.0)*py*x15172))+(((-0.0009)*sj2))+(((-0.02626)*x15180))+(((-1.0)*x15161*x15173))+((x15166*x15168))+((px*sj0))+((x15160*x15161))+(((-0.0718)*x15175)));
evalcond[5]=((-0.001)+(((-1.0)*sj2*x15177))+(((-1.0)*sj2*x15179))+((x15161*x15162))+(((-1.0)*py*x15169))+(((0.0009)*cj2))+(((0.02626)*x15175))+(((-1.0)*px*x15172))+(((-0.21326)*sj2))+(((-1.0)*x15166*x15173))+(((-1.0)*x15161*x15168))+((x15160*x15166))+(((-0.0718)*x15178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15183=(cj5*cj6);
IkReal x15184=(cj0*sj6);
IkReal x15185=(r01*sj0);
IkReal x15186=((1.0)*sj0);
IkReal x15187=((1.0)*cj5);
IkReal x15188=(cj0*r12);
IkReal x15189=(r02*sj5);
IkReal x15190=((1.0)*sj5);
IkReal x15191=(cj5*sj6);
IkReal x15192=((1.0)*cj0);
IkReal x15193=(cj6*r10);
IkReal x15194=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x15190))+((r20*x15191))+((r21*x15183)));
evalcond[2]=(x15194+(((-1.0)*sj6*x15185))+((r11*x15184))+(((-1.0)*x15192*x15193)));
evalcond[3]=((((-1.0)*r01*x15183*x15192))+(((-1.0)*r11*x15183*x15186))+((r12*sj0*sj5))+(((-1.0)*r10*x15186*x15191))+((cj0*x15189))+(((-1.0)*r00*x15184*x15187)));
evalcond[4]=((-1.0)+((sj5*x15188))+((x15183*x15185))+(((-1.0)*r11*x15183*x15192))+(((-1.0)*x15186*x15189))+(((-1.0)*r10*x15184*x15187))+((r00*sj0*x15191)));
evalcond[5]=((((-1.0)*cj6*x15185*x15190))+((cj5*x15188))+((r10*sj5*x15184))+(((-1.0)*cj5*r02*x15186))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj5*sj6*x15186)));
evalcond[6]=((-0.0001)+(((-1.0)*py*x15192))+(((0.026255)*r11*x15184))+(((-0.026255)*sj6*x15185))+((px*sj0))+(((-0.026255)*cj0*x15193))+(((0.026255)*x15194)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15195=(cj2*r21);
IkReal x15196=(cj6*sj5);
IkReal x15197=(cj5*r22);
IkReal x15198=(r21*sj2);
IkReal x15199=((1.0)*cj2);
IkReal x15200=(cj6*r20);
IkReal x15201=(r20*sj5*sj6);
if( IKabs(((((-1.0)*x15199*x15200))+((sj2*x15201))+((sj6*x15195))+((x15196*x15198))+((sj2*x15197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15199*x15201))+(((-1.0)*sj2*x15200))+(((-1.0)*x15197*x15199))+(((-1.0)*x15195*x15196))+((sj6*x15198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15199*x15200))+((sj2*x15201))+((sj6*x15195))+((x15196*x15198))+((sj2*x15197))))+IKsqr(((((-1.0)*x15199*x15201))+(((-1.0)*sj2*x15200))+(((-1.0)*x15197*x15199))+(((-1.0)*x15195*x15196))+((sj6*x15198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x15199*x15200))+((sj2*x15201))+((sj6*x15195))+((x15196*x15198))+((sj2*x15197))), ((((-1.0)*x15199*x15201))+(((-1.0)*sj2*x15200))+(((-1.0)*x15197*x15199))+(((-1.0)*x15195*x15196))+((sj6*x15198))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15202=IKsin(j4);
IkReal x15203=IKcos(j4);
IkReal x15204=(r11*sj0);
IkReal x15205=((0.026255)*sj6);
IkReal x15206=(cj0*r01);
IkReal x15207=(cj6*sj5);
IkReal x15208=(r10*sj0);
IkReal x15209=(sj5*sj6);
IkReal x15210=((1.0)*cj6);
IkReal x15211=(cj0*r00);
IkReal x15212=((0.026255)*cj6);
IkReal x15213=((1.0)*r21);
IkReal x15214=(sj2*x15203);
IkReal x15215=(cj2*x15202);
IkReal x15216=((0.02626)*x15202);
IkReal x15217=(cj2*x15203);
IkReal x15218=(sj2*x15202);
IkReal x15219=(x15214+x15215);
evalcond[0]=(x15219+(((-1.0)*sj6*x15213))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x15209))+(((-1.0)*x15217))+x15218+(((-1.0)*cj5*r22))+(((-1.0)*x15207*x15213)));
evalcond[2]=((((-1.0)*x15208*x15210))+(((-1.0)*x15210*x15211))+(((-1.0)*x15218))+x15217+((sj6*x15204))+((sj6*x15206)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((x15204*x15207))+((x15206*x15207))+x15219+((x15208*x15209))+((x15209*x15211)));
evalcond[4]=((0.1255)+((r20*x15212))+(((-1.0)*r21*x15205))+(((0.02626)*x15215))+(((0.02626)*x15214))+(((-0.0718)*x15218))+pz+(((0.21326)*cj2))+(((0.0009)*sj2))+(((0.0718)*x15217)));
evalcond[5]=((-0.001)+(((-1.0)*x15208*x15212))+(((0.02626)*x15217))+((x15204*x15205))+(((-0.0718)*x15215))+(((-0.0718)*x15214))+((x15205*x15206))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*py*sj0))+(((-1.0)*x15211*x15212))+(((-1.0)*cj0*px))+(((-1.0)*sj2*x15216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15220=(cj5*cj6);
IkReal x15221=((1.0)*sj0);
IkReal x15222=((1.0)*r22);
IkReal x15223=(cj0*sj5);
IkReal x15224=(cj5*sj6);
IkReal x15225=((1.0)*cj0);
IkReal x15226=(cj6*r20);
IkReal x15227=((1.0)*sj5);
IkReal x15228=(r21*sj6);
IkReal x15229=(x15224*x15225);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x15224))+(((-1.0)*sj5*x15222))+((r21*x15220)));
evalcond[2]=((((-1.0)*x15228))+x15226);
evalcond[3]=((((-1.0)*r20*sj6*x15227))+(((-1.0)*cj6*r21*x15227))+(((-1.0)*cj5*x15222)));
evalcond[4]=((((-1.0)*r01*x15220*x15225))+(((-1.0)*r10*x15221*x15224))+((r12*sj0*sj5))+((r02*x15223))+(((-1.0)*r00*x15229))+(((-1.0)*r11*x15220*x15221)));
evalcond[5]=(((r12*x15223))+((r01*sj0*x15220))+(((-1.0)*r02*sj5*x15221))+(((-1.0)*r11*x15220*x15225))+(((-1.0)*r10*x15229))+((r00*sj0*x15224)));
evalcond[6]=((0.0001)+(((-0.026255)*x15228))+(((0.026255)*x15226))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15230=(cj0*sj6);
IkReal x15231=(r01*sj2);
IkReal x15232=(sj0*sj2);
IkReal x15233=((1.0)*cj6);
IkReal x15234=(sj0*sj6);
IkReal x15235=(cj0*sj2);
IkReal x15236=(cj6*r10);
IkReal x15237=(cj2*sj0);
IkReal x15238=(cj2*r01);
IkReal x15239=(cj0*cj2);
IkReal x15240=((1.0)*cj2*r11);
if( IKabs(((((-1.0)*x15230*x15240))+((x15234*x15238))+((x15236*x15239))+((x15230*x15231))+((r11*sj6*x15232))+(((-1.0)*r10*x15232*x15233))+(((-1.0)*r00*x15233*x15235))+(((-1.0)*r00*x15233*x15237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15232*x15233))+(((-1.0)*r11*sj2*x15230))+((x15236*x15237))+(((-1.0)*x15230*x15238))+((cj6*r00*x15239))+((x15235*x15236))+(((-1.0)*x15234*x15240))+((x15231*x15234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15230*x15240))+((x15234*x15238))+((x15236*x15239))+((x15230*x15231))+((r11*sj6*x15232))+(((-1.0)*r10*x15232*x15233))+(((-1.0)*r00*x15233*x15235))+(((-1.0)*r00*x15233*x15237))))+IKsqr(((((-1.0)*r00*x15232*x15233))+(((-1.0)*r11*sj2*x15230))+((x15236*x15237))+(((-1.0)*x15230*x15238))+((cj6*r00*x15239))+((x15235*x15236))+(((-1.0)*x15234*x15240))+((x15231*x15234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x15230*x15240))+((x15234*x15238))+((x15236*x15239))+((x15230*x15231))+((r11*sj6*x15232))+(((-1.0)*r10*x15232*x15233))+(((-1.0)*r00*x15233*x15235))+(((-1.0)*r00*x15233*x15237))), ((((-1.0)*r00*x15232*x15233))+(((-1.0)*r11*sj2*x15230))+((x15236*x15237))+(((-1.0)*x15230*x15238))+((cj6*r00*x15239))+((x15235*x15236))+(((-1.0)*x15234*x15240))+((x15231*x15234))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15241=IKcos(j4);
IkReal x15242=IKsin(j4);
IkReal x15243=(r11*sj6);
IkReal x15244=((0.026255)*cj0);
IkReal x15245=(r01*sj6);
IkReal x15246=(sj0*sj5);
IkReal x15247=(cj6*r11);
IkReal x15248=(r10*sj6);
IkReal x15249=((0.026255)*sj0);
IkReal x15250=(cj5*r12);
IkReal x15251=(cj6*r00);
IkReal x15252=((1.0)*sj0);
IkReal x15253=(cj5*r02);
IkReal x15254=(cj6*r10);
IkReal x15255=(cj0*sj5);
IkReal x15256=(r00*sj6);
IkReal x15257=((1.0)*cj0);
IkReal x15258=(cj6*r01);
IkReal x15259=(sj2*x15241);
IkReal x15260=(cj2*x15242);
IkReal x15261=(sj2*x15242);
IkReal x15262=((0.0718)*x15241);
IkReal x15263=(cj2*x15241);
IkReal x15264=(x15260+x15259);
evalcond[0]=(((cj0*x15243))+x15264+(((-1.0)*x15254*x15257))+(((-1.0)*x15245*x15252))+((sj0*x15251)));
evalcond[1]=(((cj0*x15245))+(((-1.0)*x15252*x15254))+x15263+(((-1.0)*x15251*x15257))+((sj0*x15243))+(((-1.0)*x15261)));
evalcond[2]=(((x15246*x15248))+((x15246*x15247))+x15264+((cj0*x15253))+((x15255*x15256))+((x15255*x15258))+((sj0*x15250)));
evalcond[3]=(((x15247*x15255))+(((-1.0)*x15252*x15253))+x15261+(((-1.0)*x15246*x15258))+(((-1.0)*x15246*x15256))+((cj0*x15250))+((x15248*x15255))+(((-1.0)*x15263)));
evalcond[4]=((0.1255)+(((-1.0)*py*x15257))+((x15243*x15244))+((x15249*x15251))+((px*sj0))+(((-0.0718)*x15261))+(((0.21326)*cj2))+(((-1.0)*x15245*x15249))+(((0.02626)*x15260))+(((0.0009)*sj2))+(((0.02626)*x15259))+(((-1.0)*x15244*x15254))+((cj2*x15262)));
evalcond[5]=((-0.001)+(((-1.0)*py*x15252))+((x15243*x15249))+(((-1.0)*px*x15257))+(((-0.02626)*x15261))+(((-1.0)*x15249*x15254))+(((0.0009)*cj2))+(((-0.21326)*sj2))+((x15244*x15245))+(((-0.0718)*x15259))+(((-0.0718)*x15260))+(((0.02626)*x15263))+(((-1.0)*x15244*x15251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15265=(cj1*cj2);
IkReal x15266=((1.0)*sj6);
IkReal x15267=(r01*sj0);
IkReal x15268=(cj0*r10);
IkReal x15269=(cj1*sj2);
IkReal x15270=(cj6*r00*sj0);
IkReal x15271=(cj0*r11*sj6);
IkReal x15272=((1.0)*cj6*sj2);
IkReal x15273=(r21*sj1*sj5);
IkReal x15274=(cj5*r22*sj1);
IkReal x15275=(r20*sj1*sj5);
CheckValue<IkReal> x15276=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x15276.valid){
continue;
}
CheckValue<IkReal> x15277 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x15265*x15268))+((x15265*x15271))+((x15265*x15270))+(((-1.0)*sj2*x15274))+(((-1.0)*x15272*x15273))+(((-1.0)*x15265*x15266*x15267))+(((-1.0)*sj2*x15266*x15275)))),(((cj2*sj6*x15275))+((x15269*x15270))+((x15269*x15271))+(((-1.0)*cj6*x15268*x15269))+((cj2*x15274))+(((-1.0)*x15266*x15267*x15269))+((cj2*cj6*x15273))),IKFAST_ATAN2_MAGTHRESH);
if(!x15277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15276.value)))+(x15277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15278=IKcos(j4);
IkReal x15279=IKsin(j4);
IkReal x15280=((0.0718)*sj1);
IkReal x15281=(r11*sj0);
IkReal x15282=((0.02626)*sj2);
IkReal x15283=((0.026255)*sj6);
IkReal x15284=(cj0*r01);
IkReal x15285=(cj5*r12);
IkReal x15286=(cj6*sj5);
IkReal x15287=(cj1*cj2);
IkReal x15288=(cj6*r20);
IkReal x15289=(cj0*r11);
IkReal x15290=((1.0)*sj1);
IkReal x15291=((1.0)*cj5);
IkReal x15292=((0.0009)*sj2);
IkReal x15293=((1.0)*sj6);
IkReal x15294=(r01*sj0);
IkReal x15295=(cj0*r00);
IkReal x15296=(sj5*sj6);
IkReal x15297=((0.0718)*cj1);
IkReal x15298=((1.0)*py);
IkReal x15299=((0.026255)*cj6);
IkReal x15300=(cj0*r10);
IkReal x15301=(r10*sj0);
IkReal x15302=((1.0)*cj1);
IkReal x15303=(cj2*x15278);
IkReal x15304=((1.0)*cj6*r10);
IkReal x15305=(sj2*x15278);
IkReal x15306=(cj2*x15279);
IkReal x15307=(cj6*r00*sj0);
IkReal x15308=(sj2*x15279);
evalcond[0]=((((-1.0)*r21*x15293))+(((-1.0)*x15279*x15287))+x15288+(((-1.0)*x15302*x15305)));
evalcond[1]=((((-1.0)*r22*x15291))+((x15278*x15287))+(((-1.0)*r21*x15286))+(((-1.0)*r20*sj5*x15293))+(((-1.0)*x15302*x15308)));
evalcond[2]=((((-1.0)*x15308))+x15303+((sj6*x15284))+((sj6*x15281))+(((-1.0)*cj6*x15301))+(((-1.0)*cj6*x15295)));
evalcond[3]=((((-1.0)*x15290*x15305))+(((-1.0)*x15290*x15306))+x15307+(((-1.0)*x15293*x15294))+((sj6*x15289))+(((-1.0)*cj6*x15300)));
evalcond[4]=(((cj0*cj5*r02))+((x15281*x15286))+((x15296*x15301))+((sj0*x15285))+x15306+x15305+((x15284*x15286))+((x15295*x15296)));
evalcond[5]=(((x15286*x15289))+((cj0*x15285))+((x15296*x15300))+(((-1.0)*x15286*x15294))+(((-1.0)*x15290*x15308))+(((-1.0)*r00*sj0*sj5*x15293))+((sj1*x15303))+(((-1.0)*r02*sj0*x15291)));
evalcond[6]=((((-0.0718)*x15278*x15287))+(((-0.1255)*cj1))+((x15297*x15308))+(((-0.0001)*sj1))+(((-0.02626)*x15279*x15287))+(((-1.0)*cj1*x15292))+(((-0.21326)*x15287))+pz+(((-1.0)*cj1*x15278*x15282))+(((0.026255)*x15288))+(((-1.0)*r21*x15283)));
evalcond[7]=((-0.001)+((x15283*x15284))+((x15281*x15283))+(((-1.0)*sj0*x15298))+(((0.0009)*cj2))+(((-0.21326)*sj2))+(((-1.0)*x15279*x15282))+(((0.02626)*x15303))+(((-0.0718)*x15305))+(((-0.0718)*x15306))+(((-1.0)*x15299*x15301))+(((-1.0)*cj0*px))+(((-1.0)*x15295*x15299)));
evalcond[8]=(((x15283*x15289))+(((-1.0)*sj1*x15292))+(((-0.1255)*sj1))+(((-1.0)*x15280*x15303))+(((-1.0)*x15283*x15294))+((x15280*x15308))+(((-0.02626)*sj1*x15306))+((r00*sj0*x15299))+(((-1.0)*cj0*x15298))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*sj1*x15278*x15282))+(((-1.0)*x15299*x15300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15309=(cj0*r00);
IkReal x15310=(r10*sj0);
IkReal x15311=(cj1*cj2);
IkReal x15312=(cj1*sj2);
IkReal x15313=(cj6*r20);
IkReal x15314=(r11*sj0*sj6);
IkReal x15315=((1.0)*r21*sj6);
IkReal x15316=(cj0*r01*sj6);
IkReal x15317=((1.0)*cj6*x15312);
CheckValue<IkReal> x15318 = IKatan2WithCheck(IkReal((((x15312*x15316))+((x15312*x15314))+(((-1.0)*cj2*x15315))+(((-1.0)*x15310*x15317))+(((-1.0)*x15309*x15317))+((cj2*x15313)))),(((cj6*x15309*x15311))+(((-1.0)*sj2*x15315))+(((-1.0)*x15311*x15314))+(((-1.0)*x15311*x15316))+((sj2*x15313))+((cj6*x15310*x15311))),IKFAST_ATAN2_MAGTHRESH);
if(!x15318.valid){
continue;
}
CheckValue<IkReal> x15319=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15318.value)+(((1.5707963267949)*(x15319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15320=IKcos(j4);
IkReal x15321=IKsin(j4);
IkReal x15322=((0.0718)*sj1);
IkReal x15323=(r11*sj0);
IkReal x15324=((0.02626)*sj2);
IkReal x15325=((0.026255)*sj6);
IkReal x15326=(cj0*r01);
IkReal x15327=(cj5*r12);
IkReal x15328=(cj6*sj5);
IkReal x15329=(cj1*cj2);
IkReal x15330=(cj6*r20);
IkReal x15331=(cj0*r11);
IkReal x15332=((1.0)*sj1);
IkReal x15333=((1.0)*cj5);
IkReal x15334=((0.0009)*sj2);
IkReal x15335=((1.0)*sj6);
IkReal x15336=(r01*sj0);
IkReal x15337=(cj0*r00);
IkReal x15338=(sj5*sj6);
IkReal x15339=((0.0718)*cj1);
IkReal x15340=((1.0)*py);
IkReal x15341=((0.026255)*cj6);
IkReal x15342=(cj0*r10);
IkReal x15343=(r10*sj0);
IkReal x15344=((1.0)*cj1);
IkReal x15345=(cj2*x15320);
IkReal x15346=((1.0)*cj6*r10);
IkReal x15347=(sj2*x15320);
IkReal x15348=(cj2*x15321);
IkReal x15349=(cj6*r00*sj0);
IkReal x15350=(sj2*x15321);
evalcond[0]=((((-1.0)*r21*x15335))+(((-1.0)*x15321*x15329))+x15330+(((-1.0)*x15344*x15347)));
evalcond[1]=((((-1.0)*x15344*x15350))+((x15320*x15329))+(((-1.0)*r20*sj5*x15335))+(((-1.0)*r21*x15328))+(((-1.0)*r22*x15333)));
evalcond[2]=(((sj6*x15323))+((sj6*x15326))+x15345+(((-1.0)*cj6*x15343))+(((-1.0)*cj6*x15337))+(((-1.0)*x15350)));
evalcond[3]=(((sj6*x15331))+x15349+(((-1.0)*cj6*x15342))+(((-1.0)*x15332*x15348))+(((-1.0)*x15332*x15347))+(((-1.0)*x15335*x15336)));
evalcond[4]=(((x15323*x15328))+((cj0*cj5*r02))+((x15337*x15338))+((x15338*x15343))+x15347+x15348+((x15326*x15328))+((sj0*x15327)));
evalcond[5]=((((-1.0)*x15328*x15336))+((sj1*x15345))+((x15338*x15342))+((cj0*x15327))+((x15328*x15331))+(((-1.0)*x15332*x15350))+(((-1.0)*r00*sj0*sj5*x15335))+(((-1.0)*r02*sj0*x15333)));
evalcond[6]=((((-0.02626)*x15321*x15329))+(((-0.1255)*cj1))+(((-1.0)*cj1*x15334))+(((-0.0001)*sj1))+(((-1.0)*r21*x15325))+pz+(((0.026255)*x15330))+((x15339*x15350))+(((-0.0718)*x15320*x15329))+(((-1.0)*cj1*x15320*x15324))+(((-0.21326)*x15329)));
evalcond[7]=((-0.001)+((x15323*x15325))+(((0.02626)*x15345))+(((-1.0)*x15321*x15324))+(((-0.0718)*x15348))+(((-0.0718)*x15347))+((x15325*x15326))+(((0.0009)*cj2))+(((-1.0)*x15337*x15341))+(((-0.21326)*sj2))+(((-1.0)*x15341*x15343))+(((-1.0)*sj0*x15340))+(((-1.0)*cj0*px)));
evalcond[8]=(((r00*sj0*x15341))+(((-0.1255)*sj1))+(((-1.0)*sj1*x15320*x15324))+(((-1.0)*x15322*x15345))+(((-1.0)*cj0*x15340))+((x15325*x15331))+(((-1.0)*x15341*x15342))+(((-0.02626)*sj1*x15348))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*sj1*x15334))+(((-1.0)*x15325*x15336))+((x15322*x15350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15351=(cj2*r21);
IkReal x15352=((1.0)*sj6);
IkReal x15353=(cj5*r22);
IkReal x15354=(cj6*sj5);
IkReal x15355=(r20*sj5);
IkReal x15356=(cj6*r20);
IkReal x15357=(r21*sj2);
CheckValue<IkReal> x15358=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15358.valid){
continue;
}
CheckValue<IkReal> x15359 = IKatan2WithCheck(IkReal((((cj2*x15356))+(((-1.0)*sj2*x15352*x15355))+(((-1.0)*x15354*x15357))+(((-1.0)*x15351*x15352))+(((-1.0)*sj2*x15353)))),(((cj2*x15353))+(((-1.0)*x15352*x15357))+((x15351*x15354))+((sj2*x15356))+((cj2*sj6*x15355))),IKFAST_ATAN2_MAGTHRESH);
if(!x15359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15358.value)))+(x15359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15360=IKcos(j4);
IkReal x15361=IKsin(j4);
IkReal x15362=((0.0718)*sj1);
IkReal x15363=(r11*sj0);
IkReal x15364=((0.02626)*sj2);
IkReal x15365=((0.026255)*sj6);
IkReal x15366=(cj0*r01);
IkReal x15367=(cj5*r12);
IkReal x15368=(cj6*sj5);
IkReal x15369=(cj1*cj2);
IkReal x15370=(cj6*r20);
IkReal x15371=(cj0*r11);
IkReal x15372=((1.0)*sj1);
IkReal x15373=((1.0)*cj5);
IkReal x15374=((0.0009)*sj2);
IkReal x15375=((1.0)*sj6);
IkReal x15376=(r01*sj0);
IkReal x15377=(cj0*r00);
IkReal x15378=(sj5*sj6);
IkReal x15379=((0.0718)*cj1);
IkReal x15380=((1.0)*py);
IkReal x15381=((0.026255)*cj6);
IkReal x15382=(cj0*r10);
IkReal x15383=(r10*sj0);
IkReal x15384=((1.0)*cj1);
IkReal x15385=(cj2*x15360);
IkReal x15386=((1.0)*cj6*r10);
IkReal x15387=(sj2*x15360);
IkReal x15388=(cj2*x15361);
IkReal x15389=(cj6*r00*sj0);
IkReal x15390=(sj2*x15361);
evalcond[0]=((((-1.0)*x15384*x15387))+x15370+(((-1.0)*r21*x15375))+(((-1.0)*x15361*x15369)));
evalcond[1]=(((x15360*x15369))+(((-1.0)*x15384*x15390))+(((-1.0)*r21*x15368))+(((-1.0)*r20*sj5*x15375))+(((-1.0)*r22*x15373)));
evalcond[2]=(x15385+((sj6*x15366))+((sj6*x15363))+(((-1.0)*cj6*x15383))+(((-1.0)*x15390))+(((-1.0)*cj6*x15377)));
evalcond[3]=(x15389+(((-1.0)*x15372*x15388))+(((-1.0)*x15372*x15387))+(((-1.0)*x15375*x15376))+(((-1.0)*cj6*x15382))+((sj6*x15371)));
evalcond[4]=(((x15366*x15368))+((sj0*x15367))+((cj0*cj5*r02))+((x15378*x15383))+x15387+x15388+((x15377*x15378))+((x15363*x15368)));
evalcond[5]=((((-1.0)*x15368*x15376))+(((-1.0)*r02*sj0*x15373))+((sj1*x15385))+((x15368*x15371))+((x15378*x15382))+(((-1.0)*r00*sj0*sj5*x15375))+(((-1.0)*x15372*x15390))+((cj0*x15367)));
evalcond[6]=(((x15379*x15390))+(((-0.1255)*cj1))+(((-1.0)*cj1*x15374))+(((-0.0001)*sj1))+(((-0.02626)*x15361*x15369))+(((-1.0)*cj1*x15360*x15364))+(((-0.0718)*x15360*x15369))+pz+(((-0.21326)*x15369))+(((0.026255)*x15370))+(((-1.0)*r21*x15365)));
evalcond[7]=((-0.001)+(((-0.0718)*x15387))+(((-0.0718)*x15388))+(((0.02626)*x15385))+(((-1.0)*x15361*x15364))+(((-1.0)*sj0*x15380))+(((0.0009)*cj2))+(((-1.0)*x15377*x15381))+(((-0.21326)*sj2))+((x15363*x15365))+((x15365*x15366))+(((-1.0)*cj0*px))+(((-1.0)*x15381*x15383)));
evalcond[8]=((((-0.1255)*sj1))+((r00*sj0*x15381))+(((-1.0)*sj1*x15360*x15364))+(((-1.0)*x15362*x15385))+((x15362*x15390))+((x15365*x15371))+(((-1.0)*cj0*x15380))+(((-0.02626)*sj1*x15388))+(((0.0001)*cj1))+((px*sj0))+(((-0.21326)*cj2*sj1))+(((-1.0)*sj1*x15374))+(((-1.0)*x15381*x15382))+(((-1.0)*x15365*x15376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15391=(cj0*sj5);
IkReal x15392=(cj5*cj6);
IkReal x15393=((1.0)*sj5);
IkReal x15394=((1.0)*cj0);
IkReal x15395=((1.0)*sj0);
IkReal x15396=(cj5*sj6);
IkReal x15397=(r10*x15396);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(sj1+((r21*x15392))+((r20*x15396))+(((-1.0)*r22*x15393)));
evalcond[2]=((((-1.0)*r11*x15392*x15395))+(((-1.0)*x15395*x15397))+((r02*x15391))+(((-1.0)*r01*x15392*x15394))+(((-1.0)*r00*x15394*x15396))+((r12*sj0*sj5)));
evalcond[3]=((((-1.0)*r11*x15392*x15394))+(((-1.0)*x15394*x15397))+(((-1.0)*r02*sj0*x15393))+((r01*sj0*x15392))+((r12*x15391))+((r00*sj0*x15396))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15398=(cj2*r21);
IkReal x15399=((1.0)*cj6);
IkReal x15400=((1.0)*cj2);
IkReal x15401=(cj5*r22);
IkReal x15402=(r20*sj2);
IkReal x15403=(sj5*sj6);
IkReal x15404=(r21*sj2);
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
j4eval[2]=((IKabs(((((-1.0)*sj2*x15401))+(((-1.0)*x15402*x15403))+(((-1.0)*sj5*x15399*x15404))+((sj6*x15398))+(((-1.0)*cj2*r20*x15399)))))+(IKabs((((cj6*x15402))+(((-1.0)*sj5*x15398*x15399))+(((-1.0)*r20*x15400*x15403))+(((-1.0)*sj6*x15404))+(((-1.0)*x15400*x15401))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj1;
j4eval[1]=IKsign(cj1);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15405=(cj1*sj1);
j4eval[0]=x15405;
j4eval[1]=IKsign(x15405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15406=(cj5*cj6);
IkReal x15407=(cj0*sj6);
IkReal x15408=(r01*sj0);
IkReal x15409=((1.0)*sj0);
IkReal x15410=((1.0)*cj5);
IkReal x15411=(cj0*r12);
IkReal x15412=(r02*sj5);
IkReal x15413=((1.0)*sj5);
IkReal x15414=(cj5*sj6);
IkReal x15415=((1.0)*cj0);
IkReal x15416=(cj6*r10);
IkReal x15417=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((r20*x15414))+(((-1.0)*r22*x15413))+((r21*x15406)));
evalcond[2]=((((-1.0)*sj6*x15408))+x15417+((r11*x15407))+(((-1.0)*x15415*x15416)));
evalcond[3]=((((-1.0)*r01*x15406*x15415))+(((-1.0)*r11*x15406*x15409))+((r12*sj0*sj5))+(((-1.0)*r10*x15409*x15414))+((cj0*x15412))+(((-1.0)*r00*x15407*x15410)));
evalcond[4]=((-1.0)+((r00*sj0*x15414))+(((-1.0)*r11*x15406*x15415))+(((-1.0)*x15409*x15412))+((sj5*x15411))+((x15406*x15408))+(((-1.0)*r10*x15407*x15410)));
evalcond[5]=((((-1.0)*cj5*r02*x15409))+(((-1.0)*r00*sj5*sj6*x15409))+((cj5*x15411))+((cj0*cj6*r11*sj5))+(((-1.0)*cj6*x15408*x15413))+((r10*sj5*x15407)));
evalcond[6]=((0.0001)+(((0.026255)*r11*x15407))+(((-0.026255)*cj0*x15416))+(((-1.0)*py*x15415))+((px*sj0))+(((-0.026255)*sj6*x15408))+(((0.026255)*x15417)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15418=(cj2*r21);
IkReal x15419=((1.0)*cj6);
IkReal x15420=((1.0)*cj2);
IkReal x15421=(cj5*r22);
IkReal x15422=(r20*sj2);
IkReal x15423=(sj5*sj6);
IkReal x15424=(r21*sj2);
if( IKabs(((((-1.0)*x15422*x15423))+(((-1.0)*sj5*x15419*x15424))+(((-1.0)*cj2*r20*x15419))+((sj6*x15418))+(((-1.0)*sj2*x15421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x15418*x15419))+((cj6*x15422))+(((-1.0)*x15420*x15421))+(((-1.0)*r20*x15420*x15423))+(((-1.0)*sj6*x15424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15422*x15423))+(((-1.0)*sj5*x15419*x15424))+(((-1.0)*cj2*r20*x15419))+((sj6*x15418))+(((-1.0)*sj2*x15421))))+IKsqr(((((-1.0)*sj5*x15418*x15419))+((cj6*x15422))+(((-1.0)*x15420*x15421))+(((-1.0)*r20*x15420*x15423))+(((-1.0)*sj6*x15424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x15422*x15423))+(((-1.0)*sj5*x15419*x15424))+(((-1.0)*cj2*r20*x15419))+((sj6*x15418))+(((-1.0)*sj2*x15421))), ((((-1.0)*sj5*x15418*x15419))+((cj6*x15422))+(((-1.0)*x15420*x15421))+(((-1.0)*r20*x15420*x15423))+(((-1.0)*sj6*x15424))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15425=IKcos(j4);
IkReal x15426=IKsin(j4);
IkReal x15427=(r11*sj0);
IkReal x15428=(cj0*sj6);
IkReal x15429=(cj6*sj5);
IkReal x15430=(r10*sj0);
IkReal x15431=(sj5*sj6);
IkReal x15432=((1.0)*cj6);
IkReal x15433=((0.026255)*sj6);
IkReal x15434=((0.026255)*cj6);
IkReal x15435=(cj0*r00);
IkReal x15436=((1.0)*r21);
IkReal x15437=(cj2*x15426);
IkReal x15438=((0.02626)*x15426);
IkReal x15439=(cj2*x15425);
IkReal x15440=(sj2*x15426);
IkReal x15441=(sj2*x15425);
IkReal x15442=((1.0)*x15441);
evalcond[0]=((((-1.0)*sj6*x15436))+x15437+((cj6*r20))+(((-1.0)*x15442)));
evalcond[1]=((((-1.0)*x15429*x15436))+(((-1.0)*x15439))+(((-1.0)*cj5*r22))+(((-1.0)*r20*x15431))+(((-1.0)*x15440)));
evalcond[2]=(((sj6*x15427))+x15440+x15439+((r01*x15428))+(((-1.0)*x15430*x15432))+(((-1.0)*x15432*x15435)));
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((cj0*r01*x15429))+((x15430*x15431))+x15437+(((-1.0)*x15442))+((x15427*x15429))+((r00*sj5*x15428)));
evalcond[4]=((-0.1255)+(((0.02626)*x15437))+(((-0.0009)*sj2))+(((-0.02626)*x15441))+pz+(((-1.0)*r21*x15433))+(((0.0718)*x15440))+(((-0.01834)*cj2))+(((0.0718)*x15439))+((r20*x15434)));
evalcond[5]=((-0.001)+(((0.026255)*r01*x15428))+((sj2*x15438))+(((-0.01834)*sj2))+(((0.02626)*x15439))+(((-0.0718)*x15437))+(((0.0009)*cj2))+(((-1.0)*x15434*x15435))+(((-1.0)*py*sj0))+(((0.0718)*x15441))+((x15427*x15433))+(((-1.0)*x15430*x15434))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15443=(cj5*cj6);
IkReal x15444=((1.0)*sj0);
IkReal x15445=((1.0)*r22);
IkReal x15446=(cj0*sj5);
IkReal x15447=(cj5*sj6);
IkReal x15448=((1.0)*cj0);
IkReal x15449=(cj6*r20);
IkReal x15450=((1.0)*sj5);
IkReal x15451=(r21*sj6);
IkReal x15452=(x15447*x15448);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x15447))+(((-1.0)*sj5*x15445))+((r21*x15443)));
evalcond[2]=(x15449+(((-1.0)*x15451)));
evalcond[3]=((((-1.0)*cj5*x15445))+(((-1.0)*cj6*r21*x15450))+(((-1.0)*r20*sj6*x15450)));
evalcond[4]=((((-1.0)*r01*x15443*x15448))+((r12*sj0*sj5))+(((-1.0)*r00*x15452))+(((-1.0)*r10*x15444*x15447))+((r02*x15446))+(((-1.0)*r11*x15443*x15444)));
evalcond[5]=((((-1.0)*r02*sj5*x15444))+((r12*x15446))+((r01*sj0*x15443))+((r00*sj0*x15447))+(((-1.0)*r10*x15452))+(((-1.0)*r11*x15443*x15448)));
evalcond[6]=((-0.0001)+(((0.026255)*x15449))+(((-0.026255)*x15451))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15453=(sj0*sj2);
IkReal x15454=(cj0*cj2);
IkReal x15455=(r01*sj6);
IkReal x15456=(cj6*r10);
IkReal x15457=(cj2*sj0);
IkReal x15458=(cj0*sj2);
IkReal x15459=(cj6*r00);
IkReal x15460=((1.0)*r11*sj6);
IkReal x15461=((1.0)*x15458);
if( IKabs(((((-1.0)*x15457*x15459))+((x15453*x15456))+(((-1.0)*x15455*x15461))+((x15455*x15457))+(((-1.0)*x15453*x15460))+((x15454*x15456))+(((-1.0)*x15454*x15460))+((x15458*x15459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15453*x15455))+((r11*sj6*x15458))+((x15456*x15457))+(((-1.0)*x15456*x15461))+((x15453*x15459))+((x15454*x15459))+(((-1.0)*x15457*x15460))+(((-1.0)*x15454*x15455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15457*x15459))+((x15453*x15456))+(((-1.0)*x15455*x15461))+((x15455*x15457))+(((-1.0)*x15453*x15460))+((x15454*x15456))+(((-1.0)*x15454*x15460))+((x15458*x15459))))+IKsqr(((((-1.0)*x15453*x15455))+((r11*sj6*x15458))+((x15456*x15457))+(((-1.0)*x15456*x15461))+((x15453*x15459))+((x15454*x15459))+(((-1.0)*x15457*x15460))+(((-1.0)*x15454*x15455))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x15457*x15459))+((x15453*x15456))+(((-1.0)*x15455*x15461))+((x15455*x15457))+(((-1.0)*x15453*x15460))+((x15454*x15456))+(((-1.0)*x15454*x15460))+((x15458*x15459))), ((((-1.0)*x15453*x15455))+((r11*sj6*x15458))+((x15456*x15457))+(((-1.0)*x15456*x15461))+((x15453*x15459))+((x15454*x15459))+(((-1.0)*x15457*x15460))+(((-1.0)*x15454*x15455))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15462=IKsin(j4);
IkReal x15463=IKcos(j4);
IkReal x15464=(r11*sj6);
IkReal x15465=((0.026255)*cj0);
IkReal x15466=(r01*sj6);
IkReal x15467=(sj0*sj5);
IkReal x15468=(cj6*r11);
IkReal x15469=(r10*sj6);
IkReal x15470=(cj5*r12);
IkReal x15471=(cj6*sj0);
IkReal x15472=((1.0)*sj0);
IkReal x15473=(cj5*r02);
IkReal x15474=((1.0)*r10);
IkReal x15475=(cj0*sj5);
IkReal x15476=(r00*sj6);
IkReal x15477=((0.026255)*sj0);
IkReal x15478=(cj0*cj6);
IkReal x15479=((1.0)*cj0);
IkReal x15480=(cj6*r01);
IkReal x15481=(cj2*x15462);
IkReal x15482=(sj2*x15462);
IkReal x15483=((0.0718)*x15463);
IkReal x15484=(cj2*x15463);
IkReal x15485=(sj2*x15463);
IkReal x15486=((1.0)*x15485);
evalcond[0]=((((-1.0)*r00*x15478))+(((-1.0)*x15471*x15474))+((sj0*x15464))+x15482+x15484+((cj0*x15466)));
evalcond[1]=((((-1.0)*x15466*x15472))+(((-1.0)*x15486))+((r00*x15471))+x15481+(((-1.0)*x15474*x15478))+((cj0*x15464)));
evalcond[2]=(((x15475*x15480))+((x15475*x15476))+(((-1.0)*x15486))+((sj0*x15470))+((x15467*x15469))+((x15467*x15468))+x15481+((cj0*x15473)));
evalcond[3]=((((-1.0)*x15467*x15476))+((x15469*x15475))+(((-1.0)*x15467*x15480))+(((-1.0)*x15484))+(((-1.0)*x15482))+((x15468*x15475))+(((-1.0)*x15472*x15473))+((cj0*x15470)));
evalcond[4]=((-0.1255)+(((-0.02626)*x15485))+(((0.02626)*x15481))+(((-1.0)*cj6*r10*x15465))+((cj2*x15483))+(((-1.0)*x15466*x15477))+(((-0.0009)*sj2))+(((0.026255)*r00*x15471))+(((-1.0)*py*x15479))+(((0.0718)*x15482))+((px*sj0))+(((-0.01834)*cj2))+((x15464*x15465)));
evalcond[5]=((-0.001)+((sj2*x15483))+(((-0.01834)*sj2))+(((0.02626)*x15484))+(((0.02626)*x15482))+(((-0.0718)*x15481))+(((-1.0)*px*x15479))+(((0.0009)*cj2))+(((-1.0)*py*x15472))+(((-0.026255)*r10*x15471))+((x15465*x15466))+((x15464*x15477))+(((-1.0)*cj6*r00*x15465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15487=(cj5*cj6);
IkReal x15488=(cj0*sj6);
IkReal x15489=(r01*sj0);
IkReal x15490=((1.0)*sj0);
IkReal x15491=((1.0)*cj5);
IkReal x15492=(cj0*r12);
IkReal x15493=(r02*sj5);
IkReal x15494=((1.0)*sj5);
IkReal x15495=(cj5*sj6);
IkReal x15496=((1.0)*cj0);
IkReal x15497=(cj6*r10);
IkReal x15498=(cj6*r00*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=(((r21*x15487))+((r20*x15495))+(((-1.0)*r22*x15494)));
evalcond[2]=((((-1.0)*x15496*x15497))+((r11*x15488))+x15498+(((-1.0)*sj6*x15489)));
evalcond[3]=((((-1.0)*r10*x15490*x15495))+(((-1.0)*r11*x15487*x15490))+(((-1.0)*r00*x15488*x15491))+((cj0*x15493))+((r12*sj0*sj5))+(((-1.0)*r01*x15487*x15496)));
evalcond[4]=((1.0)+(((-1.0)*r11*x15487*x15496))+(((-1.0)*r10*x15488*x15491))+((sj5*x15492))+((x15487*x15489))+((r00*sj0*x15495))+(((-1.0)*x15490*x15493)));
evalcond[5]=((((-1.0)*cj6*x15489*x15494))+((r10*sj5*x15488))+(((-1.0)*r00*sj5*sj6*x15490))+((cj0*cj6*r11*sj5))+((cj5*x15492))+(((-1.0)*cj5*r02*x15490)));
evalcond[6]=((-0.0001)+(((-1.0)*py*x15496))+(((-0.026255)*sj6*x15489))+(((0.026255)*x15498))+(((0.026255)*r11*x15488))+((px*sj0))+(((-0.026255)*cj0*x15497)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15499=(cj5*r22);
IkReal x15500=(cj6*sj2);
IkReal x15501=(r21*sj5);
IkReal x15502=(r21*sj6);
IkReal x15503=(cj2*cj6);
IkReal x15504=(r20*sj5*sj6);
if( IKabs((((x15500*x15501))+((sj2*x15499))+(((-1.0)*cj2*x15502))+((r20*x15503))+((sj2*x15504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x15500))+((x15501*x15503))+((cj2*x15499))+((cj2*x15504))+((sj2*x15502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15500*x15501))+((sj2*x15499))+(((-1.0)*cj2*x15502))+((r20*x15503))+((sj2*x15504))))+IKsqr(((((-1.0)*r20*x15500))+((x15501*x15503))+((cj2*x15499))+((cj2*x15504))+((sj2*x15502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x15500*x15501))+((sj2*x15499))+(((-1.0)*cj2*x15502))+((r20*x15503))+((sj2*x15504))), ((((-1.0)*r20*x15500))+((x15501*x15503))+((cj2*x15499))+((cj2*x15504))+((sj2*x15502))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15505=IKcos(j4);
IkReal x15506=IKsin(j4);
IkReal x15507=(r11*sj0);
IkReal x15508=(cj0*sj6);
IkReal x15509=(cj6*sj5);
IkReal x15510=(r10*sj0);
IkReal x15511=(sj5*sj6);
IkReal x15512=(cj6*r20);
IkReal x15513=((1.0)*cj6);
IkReal x15514=((0.026255)*sj6);
IkReal x15515=((0.026255)*cj6);
IkReal x15516=(cj0*r00);
IkReal x15517=((1.0)*r21);
IkReal x15518=(cj2*x15505);
IkReal x15519=(sj2*x15506);
IkReal x15520=((0.02626)*x15506);
IkReal x15521=(cj2*x15506);
IkReal x15522=((0.0718)*x15505);
IkReal x15523=(sj2*x15505);
IkReal x15524=(x15519+x15518);
evalcond[0]=((((-1.0)*x15521))+x15523+x15512+(((-1.0)*sj6*x15517)));
evalcond[1]=((((-1.0)*r20*x15511))+(((-1.0)*x15509*x15517))+(((-1.0)*cj5*r22))+x15524);
evalcond[2]=((((-1.0)*x15513*x15516))+((r01*x15508))+((sj6*x15507))+(((-1.0)*x15510*x15513))+x15524);
evalcond[3]=(((cj5*r12*sj0))+((cj0*cj5*r02))+((r00*sj5*x15508))+(((-1.0)*x15523))+((cj0*r01*x15509))+((x15507*x15509))+x15521+((x15510*x15511)));
evalcond[4]=((0.1255)+(((-0.0718)*x15519))+(((-0.0718)*x15518))+(((0.02626)*x15523))+(((-1.0)*r21*x15514))+(((-1.0)*cj2*x15520))+pz+(((0.01834)*cj2))+(((0.0009)*sj2))+(((0.026255)*x15512)));
evalcond[5]=((-0.001)+((sj2*x15522))+(((-0.01834)*sj2))+(((0.026255)*r01*x15508))+((x15507*x15514))+(((0.0009)*cj2))+(((-0.0718)*x15521))+(((0.02626)*x15519))+(((0.02626)*x15518))+(((-1.0)*x15515*x15516))+(((-1.0)*x15510*x15515))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15525=(cj5*cj6);
IkReal x15526=((1.0)*sj0);
IkReal x15527=((1.0)*r22);
IkReal x15528=(cj0*sj5);
IkReal x15529=(cj5*sj6);
IkReal x15530=((1.0)*cj0);
IkReal x15531=(cj6*r20);
IkReal x15532=((1.0)*sj5);
IkReal x15533=(r21*sj6);
IkReal x15534=(x15529*x15530);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x15529))+((r21*x15525))+(((-1.0)*sj5*x15527)));
evalcond[2]=((((-1.0)*x15533))+x15531);
evalcond[3]=((((-1.0)*cj5*x15527))+(((-1.0)*r20*sj6*x15532))+(((-1.0)*cj6*r21*x15532)));
evalcond[4]=((((-1.0)*r11*x15525*x15526))+((r02*x15528))+((r12*sj0*sj5))+(((-1.0)*r01*x15525*x15530))+(((-1.0)*r00*x15534))+(((-1.0)*r10*x15526*x15529)));
evalcond[5]=((((-1.0)*r11*x15525*x15530))+((r12*x15528))+((r01*sj0*x15525))+((r00*sj0*x15529))+(((-1.0)*r10*x15534))+(((-1.0)*r02*sj5*x15526)));
evalcond[6]=((0.0001)+(((-0.026255)*x15533))+(((0.026255)*x15531))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15535=(cj6*r10);
IkReal x15536=(r11*sj0);
IkReal x15537=(r01*sj6);
IkReal x15538=((1.0)*sj0);
IkReal x15539=(cj2*sj6);
IkReal x15540=(cj0*r11);
IkReal x15541=(cj2*sj0);
IkReal x15542=(cj6*r00);
IkReal x15543=(sj0*sj2);
IkReal x15544=((1.0)*cj0*cj2);
IkReal x15545=((1.0)*sj2*sj6);
IkReal x15546=(sj2*x15542);
if( IKabs((((x15541*x15542))+(((-1.0)*x15536*x15545))+(((-1.0)*cj2*x15537*x15538))+(((-1.0)*cj0*sj2*x15537))+((x15539*x15540))+(((-1.0)*x15535*x15544))+((x15535*x15543))+((cj0*x15546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15540*x15545))+((cj0*sj2*x15535))+((cj0*cj2*x15542))+((x15537*x15543))+(((-1.0)*x15537*x15544))+(((-1.0)*x15538*x15546))+((x15535*x15541))+(((-1.0)*x15536*x15539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15541*x15542))+(((-1.0)*x15536*x15545))+(((-1.0)*cj2*x15537*x15538))+(((-1.0)*cj0*sj2*x15537))+((x15539*x15540))+(((-1.0)*x15535*x15544))+((x15535*x15543))+((cj0*x15546))))+IKsqr(((((-1.0)*x15540*x15545))+((cj0*sj2*x15535))+((cj0*cj2*x15542))+((x15537*x15543))+(((-1.0)*x15537*x15544))+(((-1.0)*x15538*x15546))+((x15535*x15541))+(((-1.0)*x15536*x15539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x15541*x15542))+(((-1.0)*x15536*x15545))+(((-1.0)*cj2*x15537*x15538))+(((-1.0)*cj0*sj2*x15537))+((x15539*x15540))+(((-1.0)*x15535*x15544))+((x15535*x15543))+((cj0*x15546))), ((((-1.0)*x15540*x15545))+((cj0*sj2*x15535))+((cj0*cj2*x15542))+((x15537*x15543))+(((-1.0)*x15537*x15544))+(((-1.0)*x15538*x15546))+((x15535*x15541))+(((-1.0)*x15536*x15539))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15547=IKcos(j4);
IkReal x15548=IKsin(j4);
IkReal x15549=(r11*sj6);
IkReal x15550=((0.026255)*cj0);
IkReal x15551=(r01*sj6);
IkReal x15552=(sj0*sj5);
IkReal x15553=(cj6*r11);
IkReal x15554=(r10*sj6);
IkReal x15555=(cj5*r12);
IkReal x15556=(cj6*sj0);
IkReal x15557=((1.0)*sj0);
IkReal x15558=(cj5*r02);
IkReal x15559=((1.0)*r10);
IkReal x15560=(cj0*sj5);
IkReal x15561=(r00*sj6);
IkReal x15562=((0.026255)*sj0);
IkReal x15563=(cj0*cj6);
IkReal x15564=((1.0)*cj0);
IkReal x15565=(cj6*r01);
IkReal x15566=(cj2*x15547);
IkReal x15567=(sj2*x15548);
IkReal x15568=((0.02626)*x15548);
IkReal x15569=(cj2*x15548);
IkReal x15570=((0.0718)*x15547);
IkReal x15571=(sj2*x15547);
IkReal x15572=(x15566+x15567);
evalcond[0]=(((cj0*x15551))+((sj0*x15549))+(((-1.0)*r00*x15563))+(((-1.0)*x15556*x15559))+x15572);
evalcond[1]=((((-1.0)*x15551*x15557))+((r00*x15556))+(((-1.0)*x15559*x15563))+x15571+(((-1.0)*x15569))+((cj0*x15549)));
evalcond[2]=(((sj0*x15555))+((x15552*x15553))+((x15552*x15554))+((cj0*x15558))+((x15560*x15565))+((x15560*x15561))+x15569+(((-1.0)*x15571)));
evalcond[3]=((((-1.0)*x15552*x15561))+(((-1.0)*x15552*x15565))+((x15553*x15560))+((x15554*x15560))+((cj0*x15555))+x15572+(((-1.0)*x15557*x15558)));
evalcond[4]=((0.1255)+(((-1.0)*cj2*x15568))+(((-1.0)*cj6*r10*x15550))+(((-0.0718)*x15567))+(((-0.0718)*x15566))+(((-1.0)*x15551*x15562))+(((-1.0)*py*x15564))+((x15549*x15550))+(((0.01834)*cj2))+(((0.02626)*x15571))+((px*sj0))+(((0.026255)*r00*x15556))+(((0.0009)*sj2)));
evalcond[5]=((-0.001)+(((-1.0)*py*x15557))+((x15550*x15551))+(((-0.01834)*sj2))+(((-0.0718)*x15569))+(((-0.026255)*r10*x15556))+(((0.0009)*cj2))+((sj2*x15570))+(((0.02626)*x15567))+(((0.02626)*x15566))+(((-1.0)*px*x15564))+(((-1.0)*cj6*r00*x15550))+((x15549*x15562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15573=(cj0*cj1);
IkReal x15574=(cj5*r22);
IkReal x15575=(r21*sj5);
IkReal x15576=((1.0)*cj2);
IkReal x15577=(r11*sj6);
IkReal x15578=(cj1*sj0);
IkReal x15579=(cj6*r00);
IkReal x15580=(r01*sj6);
IkReal x15581=((1.0)*cj6*sj2);
IkReal x15582=(sj1*x15576);
IkReal x15583=(r20*sj5*sj6);
IkReal x15584=((1.0)*sj1*sj2);
CheckValue<IkReal> x15585=IKPowWithIntegerCheck(IKsign((cj1*sj1)),-1);
if(!x15585.valid){
continue;
}
CheckValue<IkReal> x15586 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x15575*x15581))+(((-1.0)*x15576*x15578*x15579))+(((-1.0)*x15573*x15576*x15577))+(((-1.0)*x15583*x15584))+((cj2*cj6*r10*x15573))+(((-1.0)*x15574*x15584))+((cj2*x15578*x15580)))),(((sj2*x15578*x15579))+(((-1.0)*sj2*x15578*x15580))+((sj2*x15573*x15577))+(((-1.0)*cj6*x15575*x15582))+(((-1.0)*r10*x15573*x15581))+(((-1.0)*x15582*x15583))+(((-1.0)*x15574*x15582))),IKFAST_ATAN2_MAGTHRESH);
if(!x15586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15585.value)))+(x15586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15587=IKcos(j4);
IkReal x15588=IKsin(j4);
IkReal x15589=((0.0718)*sj1);
IkReal x15590=(sj0*sj6);
IkReal x15591=(cj0*sj6);
IkReal x15592=((0.026255)*r01);
IkReal x15593=(cj5*r12);
IkReal x15594=((1.0)*cj1);
IkReal x15595=(r10*sj5);
IkReal x15596=((0.026255)*r11);
IkReal x15597=((0.026255)*cj6);
IkReal x15598=(r00*sj0);
IkReal x15599=((1.0)*cj5);
IkReal x15600=(cj1*sj2);
IkReal x15601=(cj2*sj1);
IkReal x15602=((1.0)*sj0);
IkReal x15603=(cj6*r10);
IkReal x15604=((1.0)*sj1);
IkReal x15605=(sj1*sj2);
IkReal x15606=(r00*sj5);
IkReal x15607=((1.0)*cj0);
IkReal x15608=(cj6*sj5);
IkReal x15609=((1.0)*r21);
IkReal x15610=(cj2*x15587);
IkReal x15611=((0.02626)*x15588);
IkReal x15612=(cj2*x15588);
IkReal x15613=((0.02626)*x15587);
IkReal x15614=(sj2*x15588);
IkReal x15615=(sj2*x15587);
IkReal x15616=(cj1*x15612);
evalcond[0]=(x15616+(((-1.0)*x15594*x15615))+((cj6*r20))+(((-1.0)*sj6*x15609)));
evalcond[1]=((((-1.0)*cj6*r00*x15607))+((r11*x15590))+(((-1.0)*x15602*x15603))+x15610+x15614+((r01*x15591)));
evalcond[2]=((((-1.0)*r22*x15599))+(((-1.0)*x15594*x15614))+(((-1.0)*x15594*x15610))+(((-1.0)*x15608*x15609))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((cj6*x15598))+(((-1.0)*x15603*x15607))+((x15588*x15601))+((r11*x15591))+(((-1.0)*r01*x15590))+(((-1.0)*x15604*x15615)));
evalcond[4]=(((x15590*x15595))+((cj0*cj5*r02))+((sj0*x15593))+((x15591*x15606))+((cj0*r01*x15608))+(((-1.0)*x15615))+x15612+((r11*sj0*x15608)));
evalcond[5]=((((-1.0)*x15590*x15606))+((cj0*x15593))+((x15591*x15595))+(((-1.0)*x15604*x15614))+(((-1.0)*r02*sj0*x15599))+(((-1.0)*x15587*x15601))+((cj0*r11*x15608))+(((-1.0)*r01*x15602*x15608)));
evalcond[6]=((((0.0718)*x15588*x15600))+(((-0.01834)*cj1*cj2))+((cj1*cj2*x15611))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+(((0.0718)*cj1*x15610))+(((-1.0)*x15600*x15613))+((r20*x15597))+pz+(((-0.0009)*x15600)));
evalcond[7]=((-0.001)+((x15590*x15596))+(((-0.01834)*sj2))+(((0.0718)*x15615))+(((-1.0)*py*x15602))+(((-1.0)*r10*sj0*x15597))+(((-1.0)*px*x15607))+(((-0.0718)*x15612))+(((0.0009)*cj2))+((x15591*x15592))+(((-1.0)*cj0*r00*x15597))+((sj2*x15611))+(((0.02626)*x15610)));
evalcond[8]=((((-0.1255)*sj1))+((x15597*x15598))+(((-0.01834)*x15601))+(((-1.0)*py*x15607))+((x15589*x15614))+((x15589*x15610))+(((-1.0)*cj0*r10*x15597))+((x15591*x15596))+(((-1.0)*x15590*x15592))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x15605*x15613))+((x15601*x15611))+(((-0.0009)*x15605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15617=(cj1*sj2);
IkReal x15618=(cj2*sj6);
IkReal x15619=(cj1*cj2);
IkReal x15620=(cj6*r20);
IkReal x15621=((1.0)*sj6);
IkReal x15622=(cj0*r01);
IkReal x15623=(cj0*cj6*r00);
IkReal x15624=((1.0)*r11*sj0);
IkReal x15625=(cj6*r10*sj0);
CheckValue<IkReal> x15626=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15626.valid){
continue;
}
CheckValue<IkReal> x15627 = IKatan2WithCheck(IkReal((((r21*x15618))+(((-1.0)*r11*sj0*x15617*x15621))+(((-1.0)*cj2*x15620))+(((-1.0)*x15617*x15621*x15622))+((x15617*x15625))+((x15617*x15623)))),(((x15619*x15623))+((x15619*x15625))+(((-1.0)*cj1*x15618*x15624))+(((-1.0)*r21*sj2*x15621))+((sj2*x15620))+(((-1.0)*cj1*x15618*x15622))),IKFAST_ATAN2_MAGTHRESH);
if(!x15627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15626.value)))+(x15627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15628=IKcos(j4);
IkReal x15629=IKsin(j4);
IkReal x15630=((0.0718)*sj1);
IkReal x15631=(sj0*sj6);
IkReal x15632=(cj0*sj6);
IkReal x15633=((0.026255)*r01);
IkReal x15634=(cj5*r12);
IkReal x15635=((1.0)*cj1);
IkReal x15636=(r10*sj5);
IkReal x15637=((0.026255)*r11);
IkReal x15638=((0.026255)*cj6);
IkReal x15639=(r00*sj0);
IkReal x15640=((1.0)*cj5);
IkReal x15641=(cj1*sj2);
IkReal x15642=(cj2*sj1);
IkReal x15643=((1.0)*sj0);
IkReal x15644=(cj6*r10);
IkReal x15645=((1.0)*sj1);
IkReal x15646=(sj1*sj2);
IkReal x15647=(r00*sj5);
IkReal x15648=((1.0)*cj0);
IkReal x15649=(cj6*sj5);
IkReal x15650=((1.0)*r21);
IkReal x15651=(cj2*x15628);
IkReal x15652=((0.02626)*x15629);
IkReal x15653=(cj2*x15629);
IkReal x15654=((0.02626)*x15628);
IkReal x15655=(sj2*x15629);
IkReal x15656=(sj2*x15628);
IkReal x15657=(cj1*x15653);
evalcond[0]=((((-1.0)*sj6*x15650))+(((-1.0)*x15635*x15656))+x15657+((cj6*r20)));
evalcond[1]=((((-1.0)*x15643*x15644))+(((-1.0)*cj6*r00*x15648))+((r01*x15632))+x15655+x15651+((r11*x15631)));
evalcond[2]=((((-1.0)*x15649*x15650))+(((-1.0)*x15635*x15651))+(((-1.0)*x15635*x15655))+(((-1.0)*r22*x15640))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=((((-1.0)*r01*x15631))+((cj6*x15639))+(((-1.0)*x15644*x15648))+(((-1.0)*x15645*x15656))+((r11*x15632))+((x15629*x15642)));
evalcond[4]=(((x15631*x15636))+((cj0*cj5*r02))+x15653+((x15632*x15647))+((sj0*x15634))+(((-1.0)*x15656))+((cj0*r01*x15649))+((r11*sj0*x15649)));
evalcond[5]=((((-1.0)*x15628*x15642))+(((-1.0)*r02*sj0*x15640))+(((-1.0)*x15631*x15647))+((cj0*x15634))+((cj0*r11*x15649))+(((-1.0)*x15645*x15655))+((x15632*x15636))+(((-1.0)*r01*x15643*x15649)));
evalcond[6]=(((r20*x15638))+(((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+(((-0.0009)*x15641))+pz+(((0.0718)*cj1*x15651))+(((-1.0)*x15641*x15654))+(((0.0718)*x15629*x15641))+((cj1*cj2*x15652)));
evalcond[7]=((-0.001)+((sj2*x15652))+(((0.02626)*x15651))+((x15631*x15637))+(((-1.0)*px*x15648))+(((-0.01834)*sj2))+(((-0.0718)*x15653))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x15638))+(((-1.0)*r10*sj0*x15638))+((x15632*x15633))+(((0.0718)*x15656))+(((-1.0)*py*x15643)));
evalcond[8]=((((-0.1255)*sj1))+((x15638*x15639))+(((-1.0)*cj0*r10*x15638))+(((-1.0)*x15631*x15633))+(((-1.0)*x15646*x15654))+(((-0.0009)*x15646))+((x15630*x15655))+((x15630*x15651))+((x15642*x15652))+(((0.0001)*cj1))+((x15632*x15637))+((px*sj0))+(((-0.01834)*x15642))+(((-1.0)*py*x15648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15658=(cj2*r21);
IkReal x15659=((1.0)*cj6);
IkReal x15660=((1.0)*cj2);
IkReal x15661=(cj5*r22);
IkReal x15662=(r20*sj2);
IkReal x15663=(sj5*sj6);
IkReal x15664=(r21*sj2);
CheckValue<IkReal> x15665=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15665.valid){
continue;
}
CheckValue<IkReal> x15666 = IKatan2WithCheck(IkReal((((sj6*x15658))+(((-1.0)*sj5*x15659*x15664))+(((-1.0)*cj2*r20*x15659))+(((-1.0)*x15662*x15663))+(((-1.0)*sj2*x15661)))),(((cj6*x15662))+(((-1.0)*sj5*x15658*x15659))+(((-1.0)*r20*x15660*x15663))+(((-1.0)*sj6*x15664))+(((-1.0)*x15660*x15661))),IKFAST_ATAN2_MAGTHRESH);
if(!x15666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15665.value)))+(x15666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15667=IKcos(j4);
IkReal x15668=IKsin(j4);
IkReal x15669=((0.0718)*sj1);
IkReal x15670=(sj0*sj6);
IkReal x15671=(cj0*sj6);
IkReal x15672=((0.026255)*r01);
IkReal x15673=(cj5*r12);
IkReal x15674=((1.0)*cj1);
IkReal x15675=(r10*sj5);
IkReal x15676=((0.026255)*r11);
IkReal x15677=((0.026255)*cj6);
IkReal x15678=(r00*sj0);
IkReal x15679=((1.0)*cj5);
IkReal x15680=(cj1*sj2);
IkReal x15681=(cj2*sj1);
IkReal x15682=((1.0)*sj0);
IkReal x15683=(cj6*r10);
IkReal x15684=((1.0)*sj1);
IkReal x15685=(sj1*sj2);
IkReal x15686=(r00*sj5);
IkReal x15687=((1.0)*cj0);
IkReal x15688=(cj6*sj5);
IkReal x15689=((1.0)*r21);
IkReal x15690=(cj2*x15667);
IkReal x15691=((0.02626)*x15668);
IkReal x15692=(cj2*x15668);
IkReal x15693=((0.02626)*x15667);
IkReal x15694=(sj2*x15668);
IkReal x15695=(sj2*x15667);
IkReal x15696=(cj1*x15692);
evalcond[0]=((((-1.0)*x15674*x15695))+x15696+((cj6*r20))+(((-1.0)*sj6*x15689)));
evalcond[1]=(((r11*x15670))+((r01*x15671))+x15690+x15694+(((-1.0)*cj6*r00*x15687))+(((-1.0)*x15682*x15683)));
evalcond[2]=((((-1.0)*x15674*x15694))+(((-1.0)*x15674*x15690))+(((-1.0)*x15688*x15689))+(((-1.0)*r22*x15679))+(((-1.0)*r20*sj5*sj6)));
evalcond[3]=(((cj6*x15678))+(((-1.0)*x15683*x15687))+(((-1.0)*x15684*x15695))+((r11*x15671))+((x15668*x15681))+(((-1.0)*r01*x15670)));
evalcond[4]=(((cj0*cj5*r02))+((x15671*x15686))+((sj0*x15673))+x15692+((r11*sj0*x15688))+((cj0*r01*x15688))+(((-1.0)*x15695))+((x15670*x15675)));
evalcond[5]=((((-1.0)*r01*x15682*x15688))+(((-1.0)*x15667*x15681))+(((-1.0)*r02*sj0*x15679))+(((-1.0)*x15684*x15694))+((x15671*x15675))+((cj0*r11*x15688))+(((-1.0)*x15670*x15686))+((cj0*x15673)));
evalcond[6]=((((0.0718)*x15668*x15680))+(((-0.01834)*cj1*cj2))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.026255)*r21*sj6))+(((-0.0009)*x15680))+((r20*x15677))+(((0.0718)*cj1*x15690))+pz+(((-1.0)*x15680*x15693))+((cj1*cj2*x15691)));
evalcond[7]=((-0.001)+(((-1.0)*py*x15682))+(((-0.0718)*x15692))+(((-0.01834)*sj2))+(((-1.0)*r10*sj0*x15677))+((x15671*x15672))+(((-1.0)*px*x15687))+((sj2*x15691))+(((0.02626)*x15690))+(((0.0009)*cj2))+(((-1.0)*cj0*r00*x15677))+(((0.0718)*x15695))+((x15670*x15676)));
evalcond[8]=((((-1.0)*py*x15687))+(((-0.01834)*x15681))+(((-0.1255)*sj1))+(((-1.0)*cj0*r10*x15677))+(((-1.0)*x15685*x15693))+((x15669*x15694))+((x15669*x15690))+(((-0.0009)*x15685))+((x15671*x15676))+(((-1.0)*x15670*x15672))+((x15681*x15691))+(((0.0001)*cj1))+((px*sj0))+((x15677*x15678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15697=(cj0*sj5);
IkReal x15698=(cj5*cj6);
IkReal x15699=((1.0)*sj5);
IkReal x15700=((1.0)*cj0);
IkReal x15701=((1.0)*sj0);
IkReal x15702=(cj5*sj6);
IkReal x15703=(r10*x15702);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=(((r20*x15702))+((r21*x15698))+(((-1.0)*cj3))+(((-1.0)*r22*x15699)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*x15701*x15703))+(((-1.0)*r01*x15698*x15700))+((r02*x15697))+((r12*sj0*sj5))+(((-1.0)*r11*x15698*x15701))+(((-1.0)*r00*x15700*x15702)));
evalcond[3]=((((-1.0)*r02*sj0*x15699))+(((-1.0)*x15700*x15703))+((r12*x15697))+(((-1.0)*r11*x15698*x15700))+((r00*sj0*x15702))+((r01*sj0*x15698)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x15704=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x15704))+(((-1.0)*r20*sj6*x15704))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15705=(cj5*cj6);
IkReal x15706=((1.0)*sj0);
IkReal x15707=((1.0)*r22);
IkReal x15708=(cj0*sj5);
IkReal x15709=(cj5*sj6);
IkReal x15710=((1.0)*cj0);
IkReal x15711=(cj6*r20);
IkReal x15712=((1.0)*sj5);
IkReal x15713=(r21*sj6);
IkReal x15714=(x15709*x15710);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x15709))+((r21*x15705))+(((-1.0)*sj5*x15707)));
evalcond[2]=((((-1.0)*x15713))+x15711);
evalcond[3]=((((-1.0)*cj5*x15707))+(((-1.0)*r20*sj6*x15712))+(((-1.0)*cj6*r21*x15712)));
evalcond[4]=(((r02*x15708))+(((-1.0)*r10*x15706*x15709))+(((-1.0)*r01*x15705*x15710))+((r12*sj0*sj5))+(((-1.0)*r11*x15705*x15706))+(((-1.0)*r00*x15714)));
evalcond[5]=(((r01*sj0*x15705))+((r12*x15708))+(((-1.0)*r02*sj5*x15706))+(((-1.0)*r11*x15705*x15710))+(((-1.0)*r10*x15714))+((r00*sj0*x15709)));
evalcond[6]=((-0.0001)+(((0.026255)*x15711))+pz+(((-0.026255)*x15713)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15715=(sj0*sj6);
IkReal x15716=(cj0*sj6);
IkReal x15717=(cj6*r00);
IkReal x15718=((1.0)*cj6*r10);
if( IKabs((((r01*x15716))+(((-1.0)*sj0*x15718))+((r11*x15715))+(((-1.0)*cj0*x15717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x15715))+(((-1.0)*cj0*x15718))+((sj0*x15717))+((r11*x15716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15716))+(((-1.0)*sj0*x15718))+((r11*x15715))+(((-1.0)*cj0*x15717))))+IKsqr(((((-1.0)*r01*x15715))+(((-1.0)*cj0*x15718))+((sj0*x15717))+((r11*x15716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x15716))+(((-1.0)*sj0*x15718))+((r11*x15715))+(((-1.0)*cj0*x15717))), ((((-1.0)*r01*x15715))+(((-1.0)*cj0*x15718))+((sj0*x15717))+((r11*x15716))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15719=IKcos(j4);
IkReal x15720=IKsin(j4);
IkReal x15721=(r11*sj6);
IkReal x15722=((0.026255)*cj0);
IkReal x15723=(r01*sj6);
IkReal x15724=(sj0*sj5);
IkReal x15725=(cj6*r11);
IkReal x15726=(r10*sj6);
IkReal x15727=(cj5*r12);
IkReal x15728=(cj6*sj0);
IkReal x15729=((1.0)*sj0);
IkReal x15730=(cj5*r02);
IkReal x15731=((1.0)*r10);
IkReal x15732=(cj0*sj5);
IkReal x15733=(r00*sj6);
IkReal x15734=((0.026255)*sj0);
IkReal x15735=(cj0*cj6);
IkReal x15736=((1.0)*cj0);
IkReal x15737=(cj6*r01);
IkReal x15738=((1.0)*x15720);
evalcond[0]=((((-1.0)*x15738))+(((-1.0)*r00*x15735))+((cj0*x15723))+(((-1.0)*x15728*x15731))+((sj0*x15721)));
evalcond[1]=((((-1.0)*x15719))+((r00*x15728))+(((-1.0)*x15723*x15729))+((cj0*x15721))+(((-1.0)*x15731*x15735)));
evalcond[2]=(((x15724*x15725))+((x15724*x15726))+((cj0*x15730))+((sj0*x15727))+x15719+((x15732*x15737))+((x15732*x15733)));
evalcond[3]=((((-1.0)*x15738))+((cj0*x15727))+((x15725*x15732))+((x15726*x15732))+(((-1.0)*x15724*x15737))+(((-1.0)*x15724*x15733))+(((-1.0)*x15729*x15730)));
evalcond[4]=((-0.1264)+(((0.026255)*r00*x15728))+(((-1.0)*cj6*r10*x15722))+(((0.0718)*x15720))+(((-1.0)*x15723*x15734))+((x15721*x15722))+((px*sj0))+(((-1.0)*py*x15736))+(((-0.02626)*x15719)));
evalcond[5]=((-0.21426)+((x15722*x15723))+(((-1.0)*px*x15736))+(((-0.0718)*x15719))+(((-0.026255)*r10*x15728))+(((-1.0)*cj6*r00*x15722))+((x15721*x15734))+(((-0.02626)*x15720))+(((-1.0)*py*x15729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15739=(cj5*cj6);
IkReal x15740=((1.0)*sj0);
IkReal x15741=((1.0)*r22);
IkReal x15742=(cj0*sj5);
IkReal x15743=(cj5*sj6);
IkReal x15744=((1.0)*cj0);
IkReal x15745=(cj6*r20);
IkReal x15746=((1.0)*sj5);
IkReal x15747=(r21*sj6);
IkReal x15748=(x15743*x15744);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x15741))+((r21*x15739))+((r20*x15743)));
evalcond[2]=((((-1.0)*x15747))+x15745);
evalcond[3]=((((-1.0)*cj6*r21*x15746))+(((-1.0)*cj5*x15741))+(((-1.0)*r20*sj6*x15746)));
evalcond[4]=((((-1.0)*r00*x15748))+((r02*x15742))+(((-1.0)*r10*x15740*x15743))+((r12*sj0*sj5))+(((-1.0)*r11*x15739*x15740))+(((-1.0)*r01*x15739*x15744)));
evalcond[5]=(((r01*sj0*x15739))+(((-1.0)*r11*x15739*x15744))+((r00*sj0*x15743))+((r12*x15742))+(((-1.0)*r02*sj5*x15740))+(((-1.0)*r10*x15748)));
evalcond[6]=((-0.0001)+pz+(((0.026255)*x15745))+(((-0.026255)*x15747)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15749=(cj0*cj6);
IkReal x15750=(cj6*sj0);
IkReal x15751=(cj0*sj6);
IkReal x15752=((1.0)*sj0*sj6);
if( IKabs((((r00*x15749))+((r10*x15750))+(((-1.0)*r01*x15751))+(((-1.0)*r11*x15752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15749))+((r00*x15750))+((r11*x15751))+(((-1.0)*r01*x15752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15749))+((r10*x15750))+(((-1.0)*r01*x15751))+(((-1.0)*r11*x15752))))+IKsqr(((((-1.0)*r10*x15749))+((r00*x15750))+((r11*x15751))+(((-1.0)*r01*x15752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x15749))+((r10*x15750))+(((-1.0)*r01*x15751))+(((-1.0)*r11*x15752))), ((((-1.0)*r10*x15749))+((r00*x15750))+((r11*x15751))+(((-1.0)*r01*x15752))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15753=IKsin(j4);
IkReal x15754=IKcos(j4);
IkReal x15755=(r11*sj6);
IkReal x15756=((0.026255)*cj0);
IkReal x15757=(r01*sj6);
IkReal x15758=(sj0*sj5);
IkReal x15759=(cj6*r11);
IkReal x15760=(r10*sj6);
IkReal x15761=(cj5*r12);
IkReal x15762=(cj6*sj0);
IkReal x15763=((1.0)*sj0);
IkReal x15764=(cj5*r02);
IkReal x15765=((1.0)*r10);
IkReal x15766=(cj0*sj5);
IkReal x15767=(r00*sj6);
IkReal x15768=((0.026255)*sj0);
IkReal x15769=(cj0*cj6);
IkReal x15770=((1.0)*cj0);
IkReal x15771=(cj6*r01);
IkReal x15772=((1.0)*x15754);
evalcond[0]=(((sj0*x15755))+(((-1.0)*r00*x15769))+x15753+((cj0*x15757))+(((-1.0)*x15762*x15765)));
evalcond[1]=((((-1.0)*x15757*x15763))+(((-1.0)*x15772))+((r00*x15762))+((cj0*x15755))+(((-1.0)*x15765*x15769)));
evalcond[2]=(((x15766*x15771))+((x15758*x15759))+((x15766*x15767))+((sj0*x15761))+((x15758*x15760))+(((-1.0)*x15772))+((cj0*x15764)));
evalcond[3]=((((-1.0)*x15758*x15767))+(((-1.0)*x15758*x15771))+((x15760*x15766))+((x15759*x15766))+(((-1.0)*x15753))+(((-1.0)*x15763*x15764))+((cj0*x15761)));
evalcond[4]=((-0.1264)+(((-1.0)*x15757*x15768))+((x15755*x15756))+(((-0.02626)*x15754))+(((0.026255)*r00*x15762))+(((-1.0)*py*x15770))+((px*sj0))+(((-1.0)*cj6*r10*x15756))+(((0.0718)*x15753)));
evalcond[5]=((-0.01934)+(((0.02626)*x15753))+(((-1.0)*py*x15763))+((x15756*x15757))+(((-0.026255)*r10*x15762))+(((0.0718)*x15754))+(((-1.0)*cj6*r00*x15756))+(((-1.0)*px*x15770))+((x15755*x15768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15773=((1.0)*cj6);
CheckValue<IkReal> x15774=IKPowWithIntegerCheck(sj3,-1);
if(!x15774.valid){
continue;
}
if( IKabs(((x15774.value)*((((r21*sj6))+(((-1.0)*r20*x15773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x15773))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15774.value)*((((r21*sj6))+(((-1.0)*r20*x15773))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x15773))+(((-1.0)*r01*sj0*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15774.value)*((((r21*sj6))+(((-1.0)*r20*x15773))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x15773))+(((-1.0)*r01*sj0*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15775=IKcos(j4);
IkReal x15776=IKsin(j4);
IkReal x15777=(r11*sj0);
IkReal x15778=((0.026255)*sj6);
IkReal x15779=(cj0*r01);
IkReal x15780=(cj6*sj5);
IkReal x15781=(r10*sj0);
IkReal x15782=(sj5*sj6);
IkReal x15783=(cj0*r11);
IkReal x15784=((1.0)*cj5);
IkReal x15785=((1.0)*cj6);
IkReal x15786=(cj0*r10);
IkReal x15787=((1.0)*sj0);
IkReal x15788=(cj0*r00);
IkReal x15789=(cj5*r12);
IkReal x15790=((0.026255)*cj6);
IkReal x15791=((1.0)*r21);
IkReal x15792=((1.0)*cj0);
IkReal x15793=((1.0)*x15776);
IkReal x15794=(sj3*x15776);
IkReal x15795=(cj6*r00*sj0);
IkReal x15796=((1.0)*x15775);
IkReal x15797=(cj3*x15775);
evalcond[0]=(x15794+((cj6*r20))+(((-1.0)*sj6*x15791)));
evalcond[1]=((((-1.0)*x15780*x15791))+(((-1.0)*r20*x15782))+(((-1.0)*r22*x15784))+(((-1.0)*sj3*x15796)));
evalcond[2]=((((-1.0)*x15785*x15786))+(((-1.0)*x15796))+((sj6*x15783))+(((-1.0)*r01*sj6*x15787))+x15795);
evalcond[3]=((((-1.0)*x15785*x15788))+((sj6*x15777))+((sj6*x15779))+(((-1.0)*cj3*x15793))+(((-1.0)*x15781*x15785)));
evalcond[4]=((-0.0001)+((r20*x15790))+(((-1.0)*r21*x15778))+pz+(((0.0718)*sj3*x15775))+(((0.02626)*x15794))+(((0.09746)*sj3)));
evalcond[5]=(((x15777*x15780))+((cj0*cj5*r02))+((x15782*x15788))+((sj0*x15789))+((x15779*x15780))+x15797+((x15781*x15782)));
evalcond[6]=(((x15782*x15786))+(((-1.0)*x15793))+(((-1.0)*r02*sj0*x15784))+((cj0*x15789))+(((-1.0)*r01*x15780*x15787))+((x15780*x15783))+(((-1.0)*r00*x15782*x15787)));
evalcond[7]=((-0.1264)+(((-0.02626)*x15775))+(((0.0718)*x15776))+(((-1.0)*x15786*x15790))+((r00*sj0*x15790))+(((-1.0)*r01*sj0*x15778))+((x15778*x15783))+((px*sj0))+(((-1.0)*py*x15792)));
evalcond[8]=((-0.1168)+(((-1.0)*py*x15787))+((x15777*x15778))+(((-1.0)*x15781*x15790))+(((-1.0)*x15788*x15790))+(((-1.0)*px*x15792))+(((-0.09746)*cj3))+(((-0.02626)*cj3*x15776))+(((-0.0718)*x15797))+((x15778*x15779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15798=((1.0)*sj5);
CheckValue<IkReal> x15799=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x15799.valid){
continue;
}
CheckValue<IkReal> x15800 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*cj6*r21*x15798))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj6*x15798))),IKFAST_ATAN2_MAGTHRESH);
if(!x15800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15799.value)))+(x15800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15801=IKcos(j4);
IkReal x15802=IKsin(j4);
IkReal x15803=(r11*sj0);
IkReal x15804=((0.026255)*sj6);
IkReal x15805=(cj0*r01);
IkReal x15806=(cj6*sj5);
IkReal x15807=(r10*sj0);
IkReal x15808=(sj5*sj6);
IkReal x15809=(cj0*r11);
IkReal x15810=((1.0)*cj5);
IkReal x15811=((1.0)*cj6);
IkReal x15812=(cj0*r10);
IkReal x15813=((1.0)*sj0);
IkReal x15814=(cj0*r00);
IkReal x15815=(cj5*r12);
IkReal x15816=((0.026255)*cj6);
IkReal x15817=((1.0)*r21);
IkReal x15818=((1.0)*cj0);
IkReal x15819=((1.0)*x15802);
IkReal x15820=(sj3*x15802);
IkReal x15821=(cj6*r00*sj0);
IkReal x15822=((1.0)*x15801);
IkReal x15823=(cj3*x15801);
evalcond[0]=(((cj6*r20))+x15820+(((-1.0)*sj6*x15817)));
evalcond[1]=((((-1.0)*r20*x15808))+(((-1.0)*x15806*x15817))+(((-1.0)*r22*x15810))+(((-1.0)*sj3*x15822)));
evalcond[2]=((((-1.0)*x15822))+(((-1.0)*x15811*x15812))+(((-1.0)*r01*sj6*x15813))+x15821+((sj6*x15809)));
evalcond[3]=((((-1.0)*cj3*x15819))+(((-1.0)*x15811*x15814))+((sj6*x15805))+((sj6*x15803))+(((-1.0)*x15807*x15811)));
evalcond[4]=((-0.0001)+(((0.02626)*x15820))+pz+(((0.0718)*sj3*x15801))+(((0.09746)*sj3))+(((-1.0)*r21*x15804))+((r20*x15816)));
evalcond[5]=(((cj0*cj5*r02))+((sj0*x15815))+((x15803*x15806))+((x15808*x15814))+((x15807*x15808))+((x15805*x15806))+x15823);
evalcond[6]=((((-1.0)*r00*x15808*x15813))+(((-1.0)*x15819))+((x15808*x15812))+(((-1.0)*r01*x15806*x15813))+((cj0*x15815))+(((-1.0)*r02*sj0*x15810))+((x15806*x15809)));
evalcond[7]=((-0.1264)+((r00*sj0*x15816))+(((0.0718)*x15802))+(((-0.02626)*x15801))+(((-1.0)*x15812*x15816))+((x15804*x15809))+(((-1.0)*r01*sj0*x15804))+((px*sj0))+(((-1.0)*py*x15818)));
evalcond[8]=((-0.1168)+(((-1.0)*x15814*x15816))+((x15803*x15804))+(((-0.0718)*x15823))+((x15804*x15805))+(((-0.02626)*cj3*x15802))+(((-0.09746)*cj3))+(((-1.0)*py*x15813))+(((-1.0)*px*x15818))+(((-1.0)*x15807*x15816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15824=(cj0*sj5);
IkReal x15825=(cj5*cj6);
IkReal x15826=((1.0)*sj5);
IkReal x15827=((1.0)*cj0);
IkReal x15828=((1.0)*sj0);
IkReal x15829=(cj5*sj6);
IkReal x15830=(r10*x15829);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(cj3+((r20*x15829))+(((-1.0)*r22*x15826))+((r21*x15825)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r01*x15825*x15827))+((r12*sj0*sj5))+((r02*x15824))+(((-1.0)*r00*x15827*x15829))+(((-1.0)*x15828*x15830))+(((-1.0)*r11*x15825*x15828)));
evalcond[3]=((((-1.0)*x15827*x15830))+((r00*sj0*x15829))+(((-1.0)*r02*sj0*x15826))+((r01*sj0*x15825))+((r12*x15824))+(((-1.0)*r11*x15825*x15827)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15831=(cj5*cj6);
IkReal x15832=((1.0)*sj0);
IkReal x15833=((1.0)*r22);
IkReal x15834=(cj0*sj5);
IkReal x15835=(cj5*sj6);
IkReal x15836=((1.0)*cj0);
IkReal x15837=(cj6*r20);
IkReal x15838=((1.0)*sj5);
IkReal x15839=(r21*sj6);
IkReal x15840=(x15835*x15836);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x15835))+(((-1.0)*sj5*x15833))+((r21*x15831)));
evalcond[2]=((((-1.0)*x15839))+x15837);
evalcond[3]=((((-1.0)*cj6*r21*x15838))+(((-1.0)*r20*sj6*x15838))+(((-1.0)*cj5*x15833)));
evalcond[4]=(((r02*x15834))+(((-1.0)*r01*x15831*x15836))+((r12*sj0*sj5))+(((-1.0)*r11*x15831*x15832))+(((-1.0)*r00*x15840))+(((-1.0)*r10*x15832*x15835)));
evalcond[5]=((((-1.0)*r10*x15840))+((r12*x15834))+(((-1.0)*r11*x15831*x15836))+((r00*sj0*x15835))+((r01*sj0*x15831))+(((-1.0)*r02*sj5*x15832)));
evalcond[6]=((0.0001)+(((0.026255)*x15837))+(((-0.026255)*x15839))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15841=(sj0*sj6);
IkReal x15842=(cj6*r10);
IkReal x15843=((1.0)*sj0);
IkReal x15844=(cj6*r00);
IkReal x15845=(cj0*sj6);
if( IKabs((((r11*x15841))+((r01*x15845))+(((-1.0)*cj0*x15844))+(((-1.0)*x15842*x15843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x15841))+(((-1.0)*x15843*x15844))+(((-1.0)*r11*x15845))+((cj0*x15842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x15841))+((r01*x15845))+(((-1.0)*cj0*x15844))+(((-1.0)*x15842*x15843))))+IKsqr((((r01*x15841))+(((-1.0)*x15843*x15844))+(((-1.0)*r11*x15845))+((cj0*x15842))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x15841))+((r01*x15845))+(((-1.0)*cj0*x15844))+(((-1.0)*x15842*x15843))), (((r01*x15841))+(((-1.0)*x15843*x15844))+(((-1.0)*r11*x15845))+((cj0*x15842))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15846=IKcos(j4);
IkReal x15847=IKsin(j4);
IkReal x15848=(r11*sj6);
IkReal x15849=((0.026255)*cj0);
IkReal x15850=(r01*sj6);
IkReal x15851=(sj0*sj5);
IkReal x15852=(cj6*r11);
IkReal x15853=(r10*sj6);
IkReal x15854=(cj5*r12);
IkReal x15855=(cj6*sj0);
IkReal x15856=((1.0)*sj0);
IkReal x15857=(cj5*r02);
IkReal x15858=((1.0)*r10);
IkReal x15859=(cj0*sj5);
IkReal x15860=(r00*sj6);
IkReal x15861=((0.026255)*sj0);
IkReal x15862=(cj0*cj6);
IkReal x15863=((1.0)*cj0);
IkReal x15864=(cj6*r01);
evalcond[0]=(((r00*x15855))+(((-1.0)*x15858*x15862))+(((-1.0)*x15850*x15856))+((cj0*x15848))+x15846);
evalcond[1]=(((cj0*x15850))+(((-1.0)*x15855*x15858))+(((-1.0)*r00*x15862))+((sj0*x15848))+(((-1.0)*x15847)));
evalcond[2]=(((x15851*x15852))+((x15851*x15853))+((cj0*x15857))+((x15859*x15860))+((x15859*x15864))+x15846+((sj0*x15854)));
evalcond[3]=(((cj0*x15854))+((x15852*x15859))+((x15853*x15859))+(((-1.0)*x15851*x15860))+(((-1.0)*x15851*x15864))+(((-1.0)*x15856*x15857))+x15847);
evalcond[4]=((0.1264)+(((-1.0)*py*x15863))+(((-1.0)*cj6*r10*x15849))+(((-0.0718)*x15847))+(((0.02626)*x15846))+((px*sj0))+((x15848*x15849))+(((-1.0)*x15850*x15861))+(((0.026255)*r00*x15855)));
evalcond[5]=((-0.21426)+(((-1.0)*py*x15856))+((x15848*x15861))+(((-0.02626)*x15847))+(((-0.0718)*x15846))+(((-1.0)*px*x15863))+((x15849*x15850))+(((-1.0)*cj6*r00*x15849))+(((-0.026255)*r10*x15855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15865=(cj5*cj6);
IkReal x15866=((1.0)*sj0);
IkReal x15867=((1.0)*r22);
IkReal x15868=(cj0*sj5);
IkReal x15869=(cj5*sj6);
IkReal x15870=((1.0)*cj0);
IkReal x15871=(cj6*r20);
IkReal x15872=((1.0)*sj5);
IkReal x15873=(r21*sj6);
IkReal x15874=(x15869*x15870);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x15865))+(((-1.0)*sj5*x15867))+((r20*x15869)));
evalcond[2]=((((-1.0)*x15873))+x15871);
evalcond[3]=((((-1.0)*cj5*x15867))+(((-1.0)*cj6*r21*x15872))+(((-1.0)*r20*sj6*x15872)));
evalcond[4]=(((r02*x15868))+(((-1.0)*r01*x15865*x15870))+(((-1.0)*r10*x15866*x15869))+((r12*sj0*sj5))+(((-1.0)*r11*x15865*x15866))+(((-1.0)*r00*x15874)));
evalcond[5]=((((-1.0)*r11*x15865*x15870))+(((-1.0)*r10*x15874))+((r01*sj0*x15865))+((r12*x15868))+(((-1.0)*r02*sj5*x15866))+((r00*sj0*x15869)));
evalcond[6]=((0.0001)+(((-0.026255)*x15873))+(((0.026255)*x15871))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15875=(cj0*cj6);
IkReal x15876=(sj0*sj6);
IkReal x15877=((1.0)*r11);
IkReal x15878=(cj6*sj0);
IkReal x15879=(cj0*sj6);
if( IKabs((((r00*x15875))+(((-1.0)*r01*x15879))+((r10*x15878))+(((-1.0)*x15876*x15877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15878))+((r01*x15876))+((r10*x15875))+(((-1.0)*x15877*x15879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15875))+(((-1.0)*r01*x15879))+((r10*x15878))+(((-1.0)*x15876*x15877))))+IKsqr(((((-1.0)*r00*x15878))+((r01*x15876))+((r10*x15875))+(((-1.0)*x15877*x15879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x15875))+(((-1.0)*r01*x15879))+((r10*x15878))+(((-1.0)*x15876*x15877))), ((((-1.0)*r00*x15878))+((r01*x15876))+((r10*x15875))+(((-1.0)*x15877*x15879))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15880=IKcos(j4);
IkReal x15881=IKsin(j4);
IkReal x15882=(r11*sj6);
IkReal x15883=((0.026255)*cj0);
IkReal x15884=(r01*sj6);
IkReal x15885=(sj0*sj5);
IkReal x15886=(cj6*r11);
IkReal x15887=(r10*sj6);
IkReal x15888=(cj5*r12);
IkReal x15889=(cj6*sj0);
IkReal x15890=((1.0)*sj0);
IkReal x15891=(cj5*r02);
IkReal x15892=((1.0)*r10);
IkReal x15893=(cj0*sj5);
IkReal x15894=(r00*sj6);
IkReal x15895=((0.026255)*sj0);
IkReal x15896=(cj0*cj6);
IkReal x15897=((1.0)*cj0);
IkReal x15898=(cj6*r01);
evalcond[0]=(((sj0*x15882))+(((-1.0)*x15889*x15892))+((cj0*x15884))+(((-1.0)*r00*x15896))+x15881);
evalcond[1]=((((-1.0)*x15892*x15896))+((r00*x15889))+((cj0*x15882))+(((-1.0)*x15884*x15890))+x15880);
evalcond[2]=(((x15893*x15898))+((x15893*x15894))+(((-1.0)*x15880))+((sj0*x15888))+((cj0*x15891))+((x15885*x15887))+((x15885*x15886)));
evalcond[3]=((((-1.0)*x15885*x15894))+(((-1.0)*x15885*x15898))+((cj0*x15888))+((x15886*x15893))+((x15887*x15893))+x15881+(((-1.0)*x15890*x15891)));
evalcond[4]=((0.1264)+(((0.026255)*r00*x15889))+(((0.02626)*x15880))+(((-1.0)*cj6*r10*x15883))+((x15882*x15883))+(((-1.0)*py*x15897))+(((-0.0718)*x15881))+(((-1.0)*x15884*x15895))+((px*sj0)));
evalcond[5]=((-0.01934)+(((-1.0)*px*x15897))+((x15883*x15884))+(((0.02626)*x15881))+(((-1.0)*cj6*r00*x15883))+(((0.0718)*x15880))+((x15882*x15895))+(((-0.026255)*r10*x15889))+(((-1.0)*py*x15890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15899=((1.0)*sj6);
CheckValue<IkReal> x15900=IKPowWithIntegerCheck(sj3,-1);
if(!x15900.valid){
continue;
}
if( IKabs(((x15900.value)*((((cj6*r20))+(((-1.0)*r21*x15899)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x15899))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15900.value)*((((cj6*r20))+(((-1.0)*r21*x15899))))))+IKsqr(((((-1.0)*cj0*r11*x15899))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15900.value)*((((cj6*r20))+(((-1.0)*r21*x15899))))), ((((-1.0)*cj0*r11*x15899))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15901=IKcos(j4);
IkReal x15902=IKsin(j4);
IkReal x15903=(r11*sj0);
IkReal x15904=((0.026255)*sj6);
IkReal x15905=(cj0*r01);
IkReal x15906=(cj6*sj5);
IkReal x15907=(r10*sj0);
IkReal x15908=(sj5*sj6);
IkReal x15909=(cj0*r11);
IkReal x15910=((1.0)*cj5);
IkReal x15911=((1.0)*cj6);
IkReal x15912=(cj0*r10);
IkReal x15913=((1.0)*sj0);
IkReal x15914=(cj0*r00);
IkReal x15915=(cj5*r12);
IkReal x15916=((0.026255)*cj6);
IkReal x15917=((1.0)*r21);
IkReal x15918=((1.0)*cj0);
IkReal x15919=((1.0)*x15902);
IkReal x15920=((0.02626)*x15902);
IkReal x15921=(sj3*x15901);
IkReal x15922=(cj6*r00*sj0);
IkReal x15923=(cj3*x15901);
evalcond[0]=((((-1.0)*sj3*x15919))+((cj6*r20))+(((-1.0)*sj6*x15917)));
evalcond[1]=((((-1.0)*x15906*x15917))+(((-1.0)*r20*x15908))+(((-1.0)*r22*x15910))+x15921);
evalcond[2]=((((-1.0)*r01*sj6*x15913))+(((-1.0)*x15911*x15912))+((sj6*x15909))+x15901+x15922);
evalcond[3]=((((-1.0)*x15907*x15911))+(((-1.0)*cj3*x15919))+(((-1.0)*x15911*x15914))+((sj6*x15905))+((sj6*x15903)));
evalcond[4]=((0.0001)+(((-0.0718)*x15921))+pz+(((-0.09746)*sj3))+(((-1.0)*sj3*x15920))+((r20*x15916))+(((-1.0)*r21*x15904)));
evalcond[5]=(((x15903*x15906))+((cj0*cj5*r02))+((x15907*x15908))+((x15908*x15914))+((sj0*x15915))+x15923+((x15905*x15906)));
evalcond[6]=(((x15908*x15912))+(((-1.0)*r00*x15908*x15913))+(((-1.0)*r02*sj0*x15910))+((cj0*x15915))+x15902+((x15906*x15909))+(((-1.0)*r01*x15906*x15913)));
evalcond[7]=((0.1264)+(((-1.0)*py*x15918))+(((-1.0)*r01*sj0*x15904))+((r00*sj0*x15916))+(((0.02626)*x15901))+((x15904*x15909))+(((-0.0718)*x15902))+((px*sj0))+(((-1.0)*x15912*x15916)));
evalcond[8]=((-0.1168)+(((-1.0)*cj3*x15920))+((x15903*x15904))+(((-1.0)*py*x15913))+(((-1.0)*x15907*x15916))+(((-0.0718)*x15923))+((x15904*x15905))+(((-1.0)*x15914*x15916))+(((-0.09746)*cj3))+(((-1.0)*px*x15918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15924=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x15924.valid){
continue;
}
CheckValue<IkReal> x15925 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x15925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15924.value)))+(x15925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15926=IKcos(j4);
IkReal x15927=IKsin(j4);
IkReal x15928=(r11*sj0);
IkReal x15929=((0.026255)*sj6);
IkReal x15930=(cj0*r01);
IkReal x15931=(cj6*sj5);
IkReal x15932=(r10*sj0);
IkReal x15933=(sj5*sj6);
IkReal x15934=(cj0*r11);
IkReal x15935=((1.0)*cj5);
IkReal x15936=((1.0)*cj6);
IkReal x15937=(cj0*r10);
IkReal x15938=((1.0)*sj0);
IkReal x15939=(cj0*r00);
IkReal x15940=(cj5*r12);
IkReal x15941=((0.026255)*cj6);
IkReal x15942=((1.0)*r21);
IkReal x15943=((1.0)*cj0);
IkReal x15944=((1.0)*x15927);
IkReal x15945=((0.02626)*x15927);
IkReal x15946=(sj3*x15926);
IkReal x15947=(cj6*r00*sj0);
IkReal x15948=(cj3*x15926);
evalcond[0]=((((-1.0)*sj6*x15942))+(((-1.0)*sj3*x15944))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x15933))+(((-1.0)*x15931*x15942))+(((-1.0)*r22*x15935))+x15946);
evalcond[2]=((((-1.0)*x15936*x15937))+(((-1.0)*r01*sj6*x15938))+((sj6*x15934))+x15947+x15926);
evalcond[3]=((((-1.0)*x15936*x15939))+(((-1.0)*x15932*x15936))+(((-1.0)*cj3*x15944))+((sj6*x15928))+((sj6*x15930)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x15929))+(((-1.0)*sj3*x15945))+((r20*x15941))+pz+(((-0.09746)*sj3))+(((-0.0718)*x15946)));
evalcond[5]=(((cj0*cj5*r02))+((x15930*x15931))+((x15932*x15933))+((x15928*x15931))+((x15933*x15939))+x15948+((sj0*x15940)));
evalcond[6]=(((x15931*x15934))+(((-1.0)*r01*x15931*x15938))+(((-1.0)*r00*x15933*x15938))+((cj0*x15940))+((x15933*x15937))+(((-1.0)*r02*sj0*x15935))+x15927);
evalcond[7]=((0.1264)+(((-0.0718)*x15927))+(((-1.0)*py*x15943))+(((-1.0)*r01*sj0*x15929))+(((-1.0)*x15937*x15941))+((x15929*x15934))+((px*sj0))+(((0.02626)*x15926))+((r00*sj0*x15941)));
evalcond[8]=((-0.1168)+(((-1.0)*px*x15943))+(((-1.0)*x15932*x15941))+((x15928*x15929))+(((-0.09746)*cj3))+(((-1.0)*cj3*x15945))+((x15929*x15930))+(((-1.0)*x15939*x15941))+(((-0.0718)*x15948))+(((-1.0)*py*x15938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15949=(cj5*cj6);
IkReal x15950=(r11*sj0);
IkReal x15951=(cj0*sj6);
IkReal x15952=(cj6*sj5);
IkReal x15953=((1.0)*cj0);
IkReal x15954=(r10*sj0);
IkReal x15955=((1.0)*cj5);
IkReal x15956=(cj0*r02);
IkReal x15957=((1.0)*sj5);
IkReal x15958=(cj5*sj6);
IkReal x15959=(cj6*r00);
IkReal x15960=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x15957))+((r20*x15958))+((r21*x15949)));
evalcond[2]=((((-1.0)*cj6*x15954))+((r01*x15951))+((sj6*x15950))+(((-1.0)*x15953*x15959)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x15954*x15955))+(((-1.0)*r01*x15949*x15953))+(((-1.0)*x15949*x15950))+((sj5*x15956))+(((-1.0)*r00*x15951*x15955))+((sj5*x15960)));
evalcond[4]=(((cj5*x15960))+((x15950*x15952))+((r00*sj5*x15951))+((cj5*x15956))+((cj0*r01*x15952))+((sj5*sj6*x15954)));
evalcond[5]=(((r01*sj0*x15949))+(((-1.0)*r11*x15949*x15953))+(((-1.0)*r02*sj0*x15957))+((cj0*r12*sj5))+(((-1.0)*r10*x15951*x15955))+((r00*sj0*x15958)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x15951))+(((-1.0)*px*x15953))+(((0.026255)*sj6*x15950))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x15954))+(((-0.026255)*cj0*x15959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15961=(cj1*r20);
IkReal x15962=((1.0)*sj6);
IkReal x15963=(r20*sj1);
IkReal x15964=((1.0)*cj5*r22);
IkReal x15965=((1.0)*cj6*r21*sj5);
if( IKabs(((((-1.0)*cj6*x15963))+((r21*sj1*sj6))+(((-1.0)*sj5*x15961*x15962))+(((-1.0)*cj1*x15964))+(((-1.0)*cj1*x15965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x15961))+(((-1.0)*sj1*x15964))+(((-1.0)*sj1*x15965))+(((-1.0)*sj5*x15962*x15963))+(((-1.0)*cj1*r21*x15962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x15963))+((r21*sj1*sj6))+(((-1.0)*sj5*x15961*x15962))+(((-1.0)*cj1*x15964))+(((-1.0)*cj1*x15965))))+IKsqr((((cj6*x15961))+(((-1.0)*sj1*x15964))+(((-1.0)*sj1*x15965))+(((-1.0)*sj5*x15962*x15963))+(((-1.0)*cj1*r21*x15962))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*x15963))+((r21*sj1*sj6))+(((-1.0)*sj5*x15961*x15962))+(((-1.0)*cj1*x15964))+(((-1.0)*cj1*x15965))), (((cj6*x15961))+(((-1.0)*sj1*x15964))+(((-1.0)*sj1*x15965))+(((-1.0)*sj5*x15962*x15963))+(((-1.0)*cj1*r21*x15962))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15966=IKcos(j4);
IkReal x15967=IKsin(j4);
IkReal x15968=((1.0)*cj1);
IkReal x15969=((1.0)*cj5);
IkReal x15970=((0.02626)*cj1);
IkReal x15971=((1.0)*cj6);
IkReal x15972=(cj0*r10);
IkReal x15973=((0.026255)*cj6);
IkReal x15974=((1.0)*sj6);
IkReal x15975=(sj0*sj5);
IkReal x15976=(sj1*x15966);
IkReal x15977=(cj0*r11*sj6);
IkReal x15978=((0.0718)*x15967);
IkReal x15979=(sj1*x15967);
IkReal x15980=(cj6*r00*sj0);
IkReal x15981=(r01*sj0*sj6);
IkReal x15982=(cj1*x15966);
IkReal x15983=((1.0)*x15976);
IkReal x15984=(x15967*x15968);
IkReal x15985=(x15984+x15983);
evalcond[0]=((((-1.0)*x15966*x15968))+((cj6*r20))+(((-1.0)*r21*x15974))+x15979);
evalcond[1]=((((-1.0)*x15985))+(((-1.0)*r20*sj5*x15974))+(((-1.0)*r21*sj5*x15971))+(((-1.0)*r22*x15969)));
evalcond[2]=((((-1.0)*x15985))+(((-1.0)*r01*sj0*x15974))+(((-1.0)*x15971*x15972))+x15977+x15980);
evalcond[3]=(((cj1*x15978))+(((0.09736)*sj1))+(((0.02626)*x15979))+(((-1.0)*x15966*x15970))+(((-0.026255)*r21*sj6))+(((-0.1264)*cj1))+((r20*x15973))+(((0.0718)*x15976))+pz);
evalcond[4]=((((-1.0)*x15979))+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x15969))+(((-1.0)*r01*x15971*x15975))+((cj0*cj6*r11*sj5))+((sj5*sj6*x15972))+(((-1.0)*r00*x15974*x15975))+x15982);
evalcond[5]=((((-0.02626)*x15976))+((r00*sj0*x15973))+((sj1*x15978))+(((-0.1264)*sj1))+(((-0.09736)*cj1))+(((-0.026255)*x15981))+(((-1.0)*x15967*x15970))+(((-1.0)*x15972*x15973))+(((0.026255)*x15977))+((px*sj0))+(((-0.0718)*x15982))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15986=(cj5*cj6);
IkReal x15987=(r11*sj0);
IkReal x15988=(cj0*sj6);
IkReal x15989=(cj6*sj5);
IkReal x15990=((1.0)*cj0);
IkReal x15991=(r10*sj0);
IkReal x15992=((1.0)*cj5);
IkReal x15993=(cj0*r02);
IkReal x15994=((1.0)*sj5);
IkReal x15995=(cj5*sj6);
IkReal x15996=(cj6*r00);
IkReal x15997=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=(((r20*x15995))+(((-1.0)*r22*x15994))+((r21*x15986)));
evalcond[2]=(((sj6*x15987))+(((-1.0)*x15990*x15996))+((r01*x15988))+(((-1.0)*cj6*x15991)));
evalcond[3]=((1.0)+(((-1.0)*r01*x15986*x15990))+(((-1.0)*r00*x15988*x15992))+((sj5*x15997))+((sj5*x15993))+(((-1.0)*sj6*x15991*x15992))+(((-1.0)*x15986*x15987)));
evalcond[4]=(((x15987*x15989))+((cj5*x15997))+((cj5*x15993))+((cj0*r01*x15989))+((sj5*sj6*x15991))+((r00*sj5*x15988)));
evalcond[5]=(((r00*sj0*x15995))+(((-1.0)*r02*sj0*x15994))+(((-1.0)*r10*x15988*x15992))+((r01*sj0*x15986))+((cj0*r12*sj5))+(((-1.0)*r11*x15986*x15990)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x15990))+(((0.026255)*sj6*x15987))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x15996))+(((0.026255)*r01*x15988))+(((-0.026255)*cj6*x15991)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15998=(sj1*sj6);
IkReal x15999=(r20*sj5);
IkReal x16000=(cj1*cj6);
IkReal x16001=((1.0)*r21);
IkReal x16002=(cj5*r22);
IkReal x16003=(cj1*sj6);
IkReal x16004=(cj6*sj1);
if( IKabs(((((-1.0)*cj1*x16002))+((r20*x16004))+(((-1.0)*x15998*x16001))+(((-1.0)*sj5*x16000*x16001))+(((-1.0)*x15999*x16003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x16001*x16003))+((r20*x16000))+((r21*sj5*x16004))+((sj1*x16002))+((x15998*x15999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x16002))+((r20*x16004))+(((-1.0)*x15998*x16001))+(((-1.0)*sj5*x16000*x16001))+(((-1.0)*x15999*x16003))))+IKsqr(((((-1.0)*x16001*x16003))+((r20*x16000))+((r21*sj5*x16004))+((sj1*x16002))+((x15998*x15999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x16002))+((r20*x16004))+(((-1.0)*x15998*x16001))+(((-1.0)*sj5*x16000*x16001))+(((-1.0)*x15999*x16003))), ((((-1.0)*x16001*x16003))+((r20*x16000))+((r21*sj5*x16004))+((sj1*x16002))+((x15998*x15999))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16005=IKcos(j4);
IkReal x16006=IKsin(j4);
IkReal x16007=((1.0)*cj1);
IkReal x16008=(cj0*sj6);
IkReal x16009=((1.0)*cj5);
IkReal x16010=((1.0)*cj6);
IkReal x16011=(cj0*r10);
IkReal x16012=((0.026255)*cj6);
IkReal x16013=((1.0)*sj6);
IkReal x16014=(sj0*sj5);
IkReal x16015=(sj1*x16005);
IkReal x16016=(cj1*x16006);
IkReal x16017=(sj1*x16006);
IkReal x16018=(cj6*r00*sj0);
IkReal x16019=(r01*sj0*sj6);
IkReal x16020=(cj1*x16005);
IkReal x16021=((1.0)*x16017);
IkReal x16022=(x16005*x16007);
IkReal x16023=(x16022+x16021);
evalcond[0]=((((-1.0)*x16023))+(((-1.0)*r21*x16013))+((cj6*r20)));
evalcond[1]=(x16015+(((-1.0)*r22*x16009))+(((-1.0)*r20*sj5*x16013))+(((-1.0)*r21*sj5*x16010))+(((-1.0)*x16006*x16007)));
evalcond[2]=((((-1.0)*x16010*x16011))+(((-1.0)*r01*sj0*x16013))+((r11*x16008))+x16016+x16018+(((-1.0)*x16015)));
evalcond[3]=((((-0.02626)*x16020))+(((-0.0718)*x16015))+(((-0.02626)*x16017))+(((-0.026255)*r21*sj6))+((r20*x16012))+(((-0.1264)*cj1))+(((-0.09756)*sj1))+pz+(((0.0718)*x16016)));
evalcond[4]=(((r10*sj5*x16008))+(((-1.0)*r01*x16010*x16014))+(((-1.0)*r00*x16013*x16014))+(((-1.0)*x16023))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x16009)));
evalcond[5]=((((-1.0)*x16011*x16012))+(((-0.1264)*sj1))+(((0.026255)*r11*x16008))+(((-0.02626)*x16015))+(((0.02626)*x16016))+(((0.09756)*cj1))+((r00*sj0*x16012))+(((-0.026255)*x16019))+((px*sj0))+(((0.0718)*x16017))+(((0.0718)*x16020))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16024=(cj0*sj5);
IkReal x16025=(cj5*cj6);
IkReal x16026=((1.0)*sj5);
IkReal x16027=((1.0)*cj0);
IkReal x16028=((1.0)*sj0);
IkReal x16029=(cj5*sj6);
IkReal x16030=(r10*x16029);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x16026))+((r20*x16029))+((r21*x16025))+(((-1.0)*cj3)));
evalcond[2]=(sj3+((r02*x16024))+((r12*sj0*sj5))+(((-1.0)*r01*x16025*x16027))+(((-1.0)*r11*x16025*x16028))+(((-1.0)*x16028*x16030))+(((-1.0)*r00*x16027*x16029)));
evalcond[3]=(((r01*sj0*x16025))+(((-1.0)*r02*sj0*x16026))+((r00*sj0*x16029))+((r12*x16024))+(((-1.0)*r11*x16025*x16027))+(((-1.0)*x16027*x16030)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x16031=((1.0)*sj5);
j4eval[0]=sj3;
j4eval[1]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x16031))+(((-1.0)*cj6*r21*x16031))+(((-1.0)*cj5*r22))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16032=(cj5*cj6);
IkReal x16033=(r11*sj0);
IkReal x16034=(cj0*sj6);
IkReal x16035=(cj6*sj5);
IkReal x16036=((1.0)*cj0);
IkReal x16037=(r10*sj0);
IkReal x16038=((1.0)*cj5);
IkReal x16039=(cj0*r02);
IkReal x16040=((1.0)*sj5);
IkReal x16041=(cj5*sj6);
IkReal x16042=(cj6*r00);
IkReal x16043=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16040))+((r20*x16041))+((r21*x16032)));
evalcond[2]=((((-1.0)*x16036*x16042))+((r01*x16034))+(((-1.0)*cj6*x16037))+((sj6*x16033)));
evalcond[3]=((1.0)+(((-1.0)*sj6*x16037*x16038))+(((-1.0)*x16032*x16033))+((sj5*x16039))+(((-1.0)*r00*x16034*x16038))+(((-1.0)*r01*x16032*x16036))+((sj5*x16043)));
evalcond[4]=(((r00*sj5*x16034))+((x16033*x16035))+((cj0*r01*x16035))+((cj5*x16043))+((cj5*x16039))+((sj5*sj6*x16037)));
evalcond[5]=((((-1.0)*r10*x16034*x16038))+((cj0*r12*sj5))+((r01*sj0*x16032))+(((-1.0)*r11*x16032*x16036))+((r00*sj0*x16041))+(((-1.0)*r02*sj0*x16040)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x16037))+(((-1.0)*px*x16036))+(((0.026255)*r01*x16034))+(((0.026255)*sj6*x16033))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x16042)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16044=(cj6*r20);
IkReal x16045=(r21*sj6);
if( IKabs(((((-1.0)*x16044))+x16045)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16044))+(((-6.96378830083565e-5)*x16045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16044))+x16045))+IKsqr(((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16044))+(((-6.96378830083565e-5)*x16045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x16044))+x16045), ((-1.35598885793872)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16044))+(((-6.96378830083565e-5)*x16045))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16046=IKcos(j4);
IkReal x16047=IKsin(j4);
IkReal x16048=((1.0)*cj5);
IkReal x16049=(cj0*r10);
IkReal x16050=(sj5*sj6);
IkReal x16051=((1.0)*cj6);
IkReal x16052=((0.026255)*cj6);
IkReal x16053=(r21*sj6);
IkReal x16054=(cj0*r11*sj6);
IkReal x16055=(cj6*r00*sj0);
IkReal x16056=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16053))+x16047+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x16051))+(((-1.0)*x16046))+(((-1.0)*r22*x16048))+(((-1.0)*r20*x16050)));
evalcond[2]=((0.09736)+(((-0.026255)*x16053))+(((0.0718)*x16046))+(((0.02626)*x16047))+pz+((r20*x16052)));
evalcond[3]=((((-1.0)*x16056))+(((-1.0)*x16049*x16051))+x16055+x16054+x16046);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x16051))+((cj0*cj6*r11*sj5))+x16047+((x16049*x16050))+(((-1.0)*r00*sj0*x16050))+(((-1.0)*r02*sj0*x16048)));
evalcond[5]=((-0.1246)+(((-0.026255)*x16056))+(((-1.0)*x16049*x16052))+(((0.02626)*x16046))+(((0.026255)*x16054))+((px*sj0))+((r00*sj0*x16052))+(((-1.0)*cj0*py))+(((-0.0718)*x16047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16057=(cj5*cj6);
IkReal x16058=(r11*sj0);
IkReal x16059=(cj0*sj6);
IkReal x16060=(cj6*sj5);
IkReal x16061=((1.0)*cj0);
IkReal x16062=(r10*sj0);
IkReal x16063=((1.0)*cj5);
IkReal x16064=(cj0*r02);
IkReal x16065=((1.0)*sj5);
IkReal x16066=(cj5*sj6);
IkReal x16067=(cj6*r00);
IkReal x16068=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r21*x16057))+((r20*x16066))+(((-1.0)*r22*x16065)));
evalcond[2]=((((-1.0)*cj6*x16062))+((sj6*x16058))+(((-1.0)*x16061*x16067))+((r01*x16059)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x16059*x16063))+(((-1.0)*sj6*x16062*x16063))+(((-1.0)*r01*x16057*x16061))+(((-1.0)*x16057*x16058))+((sj5*x16064))+((sj5*x16068)));
evalcond[4]=(((cj5*x16068))+((cj5*x16064))+((x16058*x16060))+((r00*sj5*x16059))+((cj0*r01*x16060))+((sj5*sj6*x16062)));
evalcond[5]=((((-1.0)*r10*x16059*x16063))+(((-1.0)*r11*x16057*x16061))+(((-1.0)*r02*sj0*x16065))+((r00*sj0*x16066))+((cj0*r12*sj5))+((r01*sj0*x16057)));
evalcond[6]=((0.1148)+(((0.026255)*r01*x16059))+(((0.026255)*sj6*x16058))+(((-1.0)*px*x16061))+(((-0.026255)*cj0*x16067))+(((-0.026255)*cj6*x16062))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16069=IKcos(j4);
IkReal x16070=IKsin(j4);
IkReal x16071=((1.0)*cj5);
IkReal x16072=(cj0*r10);
IkReal x16073=(sj5*sj6);
IkReal x16074=((1.0)*cj6);
IkReal x16075=((0.026255)*cj6);
IkReal x16076=(r21*sj6);
IkReal x16077=(cj0*r11*sj6);
IkReal x16078=(cj6*r00*sj0);
IkReal x16079=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16076))+(((-1.0)*x16070))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x16071))+(((-1.0)*r20*x16073))+x16069+(((-1.0)*r21*sj5*x16074)));
evalcond[2]=((-0.09756)+(((-0.026255)*x16076))+((r20*x16075))+pz+(((-0.02626)*x16070))+(((-0.0718)*x16069)));
evalcond[3]=((((-1.0)*x16079))+x16069+x16078+x16077+(((-1.0)*x16072*x16074)));
evalcond[4]=((((-1.0)*r01*sj0*sj5*x16074))+((cj0*cj5*r12))+((x16072*x16073))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x16073))+x16070+(((-1.0)*r02*sj0*x16071)));
evalcond[5]=((-0.1246)+((r00*sj0*x16075))+(((-0.026255)*x16079))+(((0.02626)*x16069))+(((-1.0)*x16072*x16075))+(((-0.0718)*x16070))+((px*sj0))+(((0.026255)*x16077))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16080=(cj5*cj6);
IkReal x16081=((1.0)*sj0);
IkReal x16082=((1.0)*r22);
IkReal x16083=(cj0*sj5);
IkReal x16084=(cj5*sj6);
IkReal x16085=((1.0)*cj0);
IkReal x16086=(cj6*r20);
IkReal x16087=((1.0)*sj5);
IkReal x16088=(r21*sj6);
IkReal x16089=(x16084*x16085);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r21*x16080))+((r20*x16084))+(((-1.0)*sj5*x16082)));
evalcond[2]=((((-1.0)*x16088))+x16086);
evalcond[3]=((((-1.0)*cj6*r21*x16087))+(((-1.0)*cj5*x16082))+(((-1.0)*r20*sj6*x16087)));
evalcond[4]=((((-1.0)*r11*x16080*x16081))+(((-1.0)*r01*x16080*x16085))+(((-1.0)*r10*x16081*x16084))+((r12*sj0*sj5))+(((-1.0)*r00*x16089))+((r02*x16083)));
evalcond[5]=((((-1.0)*r11*x16080*x16085))+((r12*x16083))+(((-1.0)*r10*x16089))+(((-1.0)*r02*sj5*x16081))+((r00*sj0*x16084))+((r01*sj0*x16080)));
evalcond[6]=((-0.0001)+(((0.026255)*x16086))+pz+(((-0.026255)*x16088)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16090=(cj0*cj6);
IkReal x16091=(sj0*sj6);
IkReal x16092=((1.0)*r11);
IkReal x16093=(cj6*sj0);
IkReal x16094=(cj0*sj6);
if( IKabs(((((-1.0)*x16091*x16092))+((r10*x16093))+(((-1.0)*r01*x16094))+((r00*x16090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x16093))+(((-1.0)*x16092*x16094))+((r10*x16090))+((r01*x16091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x16091*x16092))+((r10*x16093))+(((-1.0)*r01*x16094))+((r00*x16090))))+IKsqr(((((-1.0)*r00*x16093))+(((-1.0)*x16092*x16094))+((r10*x16090))+((r01*x16091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x16091*x16092))+((r10*x16093))+(((-1.0)*r01*x16094))+((r00*x16090))), ((((-1.0)*r00*x16093))+(((-1.0)*x16092*x16094))+((r10*x16090))+((r01*x16091))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16095=IKcos(j4);
IkReal x16096=IKsin(j4);
IkReal x16097=(r11*sj6);
IkReal x16098=((0.026255)*cj0);
IkReal x16099=(r01*sj6);
IkReal x16100=(sj0*sj5);
IkReal x16101=(cj6*r11);
IkReal x16102=(r10*sj6);
IkReal x16103=(cj5*r12);
IkReal x16104=(cj6*sj0);
IkReal x16105=((1.0)*sj0);
IkReal x16106=(cj5*r02);
IkReal x16107=((1.0)*r10);
IkReal x16108=(cj0*sj5);
IkReal x16109=(r00*sj6);
IkReal x16110=((0.026255)*sj0);
IkReal x16111=(cj0*cj6);
IkReal x16112=((1.0)*cj0);
IkReal x16113=(cj6*r01);
evalcond[0]=((((-1.0)*r00*x16111))+((sj0*x16097))+x16096+(((-1.0)*x16104*x16107))+((cj0*x16099)));
evalcond[1]=(x16095+((cj0*x16097))+(((-1.0)*x16107*x16111))+(((-1.0)*x16099*x16105))+((r00*x16104)));
evalcond[2]=((((-1.0)*x16095))+((cj0*x16106))+((sj0*x16103))+((x16108*x16109))+((x16100*x16102))+((x16100*x16101))+((x16108*x16113)));
evalcond[3]=(((x16102*x16108))+(((-1.0)*x16100*x16109))+(((-1.0)*x16100*x16113))+((cj0*x16103))+(((-1.0)*x16105*x16106))+x16096+((x16101*x16108)));
evalcond[4]=((-0.1246)+(((-0.0718)*x16096))+(((0.026255)*r00*x16104))+(((-1.0)*x16099*x16110))+(((-1.0)*cj6*r10*x16098))+((px*sj0))+(((-1.0)*py*x16112))+((x16097*x16098))+(((0.02626)*x16095)));
evalcond[5]=((0.21226)+(((0.0718)*x16095))+(((-1.0)*px*x16112))+((x16097*x16110))+(((-0.026255)*r10*x16104))+(((-1.0)*cj6*r00*x16098))+(((-1.0)*py*x16105))+(((0.02626)*x16096))+((x16098*x16099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16114=(cj5*cj6);
IkReal x16115=((1.0)*sj0);
IkReal x16116=((1.0)*r22);
IkReal x16117=(cj0*sj5);
IkReal x16118=(cj5*sj6);
IkReal x16119=((1.0)*cj0);
IkReal x16120=(cj6*r20);
IkReal x16121=((1.0)*sj5);
IkReal x16122=(r21*sj6);
IkReal x16123=(x16118*x16119);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x16114))+((r20*x16118))+(((-1.0)*sj5*x16116)));
evalcond[2]=((((-1.0)*x16122))+x16120);
evalcond[3]=((((-1.0)*r20*sj6*x16121))+(((-1.0)*cj5*x16116))+(((-1.0)*cj6*r21*x16121)));
evalcond[4]=((((-1.0)*r11*x16114*x16115))+((r12*sj0*sj5))+(((-1.0)*r01*x16114*x16119))+((r02*x16117))+(((-1.0)*r10*x16115*x16118))+(((-1.0)*r00*x16123)));
evalcond[5]=(((r01*sj0*x16114))+(((-1.0)*r11*x16114*x16119))+((r12*x16117))+((r00*sj0*x16118))+(((-1.0)*r02*sj5*x16115))+(((-1.0)*r10*x16123)));
evalcond[6]=((-0.0001)+(((-0.026255)*x16122))+pz+(((0.026255)*x16120)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16124=(sj0*sj6);
IkReal x16125=(cj6*r10);
IkReal x16126=((1.0)*sj0);
IkReal x16127=(cj6*r00);
IkReal x16128=(cj0*sj6);
if( IKabs((((r11*x16124))+(((-1.0)*cj0*x16127))+(((-1.0)*x16125*x16126))+((r01*x16128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x16128))+(((-1.0)*x16126*x16127))+((r01*x16124))+((cj0*x16125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x16124))+(((-1.0)*cj0*x16127))+(((-1.0)*x16125*x16126))+((r01*x16128))))+IKsqr(((((-1.0)*r11*x16128))+(((-1.0)*x16126*x16127))+((r01*x16124))+((cj0*x16125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x16124))+(((-1.0)*cj0*x16127))+(((-1.0)*x16125*x16126))+((r01*x16128))), ((((-1.0)*r11*x16128))+(((-1.0)*x16126*x16127))+((r01*x16124))+((cj0*x16125))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16129=IKcos(j4);
IkReal x16130=IKsin(j4);
IkReal x16131=(r11*sj6);
IkReal x16132=((0.026255)*cj0);
IkReal x16133=(r01*sj6);
IkReal x16134=(sj0*sj5);
IkReal x16135=(cj6*r11);
IkReal x16136=(r10*sj6);
IkReal x16137=(cj5*r12);
IkReal x16138=(cj6*sj0);
IkReal x16139=((1.0)*sj0);
IkReal x16140=(cj5*r02);
IkReal x16141=((1.0)*r10);
IkReal x16142=(cj0*sj5);
IkReal x16143=(r00*sj6);
IkReal x16144=((0.026255)*sj0);
IkReal x16145=(cj0*cj6);
IkReal x16146=((1.0)*cj0);
IkReal x16147=(cj6*r01);
evalcond[0]=(((cj0*x16131))+x16129+(((-1.0)*x16133*x16139))+(((-1.0)*x16141*x16145))+((r00*x16138)));
evalcond[1]=(((cj0*x16133))+(((-1.0)*x16130))+(((-1.0)*x16138*x16141))+((sj0*x16131))+(((-1.0)*r00*x16145)));
evalcond[2]=(((cj0*x16140))+((x16134*x16136))+((x16134*x16135))+x16129+((x16142*x16147))+((x16142*x16143))+((sj0*x16137)));
evalcond[3]=(((cj0*x16137))+x16130+(((-1.0)*x16134*x16147))+(((-1.0)*x16134*x16143))+(((-1.0)*x16139*x16140))+((x16136*x16142))+((x16135*x16142)));
evalcond[4]=((-0.1246)+(((-0.0718)*x16130))+(((0.026255)*r00*x16138))+((x16131*x16132))+(((-1.0)*py*x16146))+(((0.02626)*x16129))+((px*sj0))+(((-1.0)*x16133*x16144))+(((-1.0)*cj6*r10*x16132)));
evalcond[5]=((0.01734)+(((-0.02626)*x16130))+(((-0.0718)*x16129))+((x16131*x16144))+(((-0.026255)*r10*x16138))+((x16132*x16133))+(((-1.0)*py*x16139))+(((-1.0)*cj6*r00*x16132))+(((-1.0)*px*x16146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16148=((1.0)*sj5);
IkReal x16149=((1.0)*sj6);
CheckValue<IkReal> x16150=IKPowWithIntegerCheck(cj3,-1);
if(!x16150.valid){
continue;
}
CheckValue<IkReal> x16151=IKPowWithIntegerCheck(sj3,-1);
if(!x16151.valid){
continue;
}
if( IKabs(((x16150.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16149))+(((-1.0)*cj0*r01*x16149))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16151.value)*(((((-1.0)*cj6*r21*x16148))+(((-1.0)*r20*sj6*x16148))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16150.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16149))+(((-1.0)*cj0*r01*x16149))+((cj0*cj6*r00))))))+IKsqr(((x16151.value)*(((((-1.0)*cj6*r21*x16148))+(((-1.0)*r20*sj6*x16148))+(((-1.0)*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16150.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16149))+(((-1.0)*cj0*r01*x16149))+((cj0*cj6*r00))))), ((x16151.value)*(((((-1.0)*cj6*r21*x16148))+(((-1.0)*r20*sj6*x16148))+(((-1.0)*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16152=IKcos(j4);
IkReal x16153=IKsin(j4);
IkReal x16154=(r11*sj0);
IkReal x16155=((0.026255)*sj6);
IkReal x16156=(cj0*r01);
IkReal x16157=(cj5*r12);
IkReal x16158=(cj6*sj5);
IkReal x16159=(r10*sj0);
IkReal x16160=(sj5*sj6);
IkReal x16161=(cj0*r11);
IkReal x16162=((1.0)*cj5);
IkReal x16163=((1.0)*cj6);
IkReal x16164=(cj0*r10);
IkReal x16165=((1.0)*sj0);
IkReal x16166=(cj0*r00);
IkReal x16167=((0.026255)*cj6);
IkReal x16168=((1.0)*r21);
IkReal x16169=((1.0)*cj0);
IkReal x16170=(sj3*x16153);
IkReal x16171=(r00*x16167);
IkReal x16172=((1.0)*x16152);
IkReal x16173=(cj3*x16153);
IkReal x16174=((0.0718)*x16152);
evalcond[0]=(x16170+(((-1.0)*sj6*x16168))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x16160))+(((-1.0)*sj3*x16172))+(((-1.0)*x16158*x16168))+(((-1.0)*r22*x16162)));
evalcond[2]=(((cj6*r00*sj0))+x16152+(((-1.0)*x16163*x16164))+(((-1.0)*r01*sj6*x16165))+((sj6*x16161)));
evalcond[3]=((((-1.0)*x16159*x16163))+x16173+(((-1.0)*x16163*x16166))+((sj6*x16154))+((sj6*x16156)));
evalcond[4]=((-0.0001)+(((-1.0)*r21*x16155))+(((0.02626)*x16170))+((r20*x16167))+((sj3*x16174))+pz+(((0.09746)*sj3)));
evalcond[5]=(((sj0*x16157))+((cj0*cj5*r02))+((x16156*x16158))+((x16159*x16160))+((x16154*x16158))+((x16160*x16166))+(((-1.0)*cj3*x16172)));
evalcond[6]=(((cj0*x16157))+(((-1.0)*r02*sj0*x16162))+((x16158*x16161))+x16153+((x16160*x16164))+(((-1.0)*r01*x16158*x16165))+(((-1.0)*r00*x16160*x16165)));
evalcond[7]=((-0.1246)+((sj0*x16171))+(((0.02626)*x16152))+(((-1.0)*r01*sj0*x16155))+((x16155*x16161))+(((-0.0718)*x16153))+(((-1.0)*py*x16169))+((px*sj0))+(((-1.0)*x16164*x16167)));
evalcond[8]=((0.1148)+(((-1.0)*px*x16169))+(((-1.0)*x16159*x16167))+(((-1.0)*x16166*x16167))+(((0.02626)*x16173))+((x16155*x16156))+(((-1.0)*py*x16165))+((x16154*x16155))+(((0.09746)*cj3))+((cj3*x16174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16175=((1.0)*cj6);
CheckValue<IkReal> x16176=IKPowWithIntegerCheck(sj3,-1);
if(!x16176.valid){
continue;
}
if( IKabs(((x16176.value)*(((((-1.0)*r20*x16175))+((r21*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x16175))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16176.value)*(((((-1.0)*r20*x16175))+((r21*sj6))))))+IKsqr((((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x16175))+(((-1.0)*cj0*r11*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16176.value)*(((((-1.0)*r20*x16175))+((r21*sj6))))), (((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*r00*sj0*x16175))+(((-1.0)*cj0*r11*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16177=IKcos(j4);
IkReal x16178=IKsin(j4);
IkReal x16179=(r11*sj0);
IkReal x16180=((0.026255)*sj6);
IkReal x16181=(cj0*r01);
IkReal x16182=(cj5*r12);
IkReal x16183=(cj6*sj5);
IkReal x16184=(r10*sj0);
IkReal x16185=(sj5*sj6);
IkReal x16186=(cj0*r11);
IkReal x16187=((1.0)*cj5);
IkReal x16188=((1.0)*cj6);
IkReal x16189=(cj0*r10);
IkReal x16190=((1.0)*sj0);
IkReal x16191=(cj0*r00);
IkReal x16192=((0.026255)*cj6);
IkReal x16193=((1.0)*r21);
IkReal x16194=((1.0)*cj0);
IkReal x16195=(sj3*x16178);
IkReal x16196=(r00*x16192);
IkReal x16197=((1.0)*x16177);
IkReal x16198=(cj3*x16178);
IkReal x16199=((0.0718)*x16177);
evalcond[0]=(x16195+((cj6*r20))+(((-1.0)*sj6*x16193)));
evalcond[1]=((((-1.0)*r22*x16187))+(((-1.0)*x16183*x16193))+(((-1.0)*r20*x16185))+(((-1.0)*sj3*x16197)));
evalcond[2]=(((sj6*x16186))+(((-1.0)*x16188*x16189))+((cj6*r00*sj0))+x16177+(((-1.0)*r01*sj6*x16190)));
evalcond[3]=(((sj6*x16181))+(((-1.0)*x16188*x16191))+x16198+((sj6*x16179))+(((-1.0)*x16184*x16188)));
evalcond[4]=((-0.0001)+pz+(((-1.0)*r21*x16180))+(((0.09746)*sj3))+((r20*x16192))+(((0.02626)*x16195))+((sj3*x16199)));
evalcond[5]=(((cj0*cj5*r02))+((x16179*x16183))+((x16184*x16185))+((sj0*x16182))+((x16181*x16183))+((x16185*x16191))+(((-1.0)*cj3*x16197)));
evalcond[6]=(((x16185*x16189))+((x16183*x16186))+x16178+(((-1.0)*r01*x16183*x16190))+((cj0*x16182))+(((-1.0)*r02*sj0*x16187))+(((-1.0)*r00*x16185*x16190)));
evalcond[7]=((-0.1246)+(((-1.0)*r01*sj0*x16180))+(((0.02626)*x16177))+(((-1.0)*x16189*x16192))+(((-0.0718)*x16178))+((sj0*x16196))+((x16180*x16186))+(((-1.0)*py*x16194))+((px*sj0)));
evalcond[8]=((0.1148)+((x16179*x16180))+(((-1.0)*px*x16194))+((x16180*x16181))+(((-1.0)*py*x16190))+(((0.09746)*cj3))+((cj3*x16199))+(((-1.0)*x16184*x16192))+(((0.02626)*x16198))+(((-1.0)*x16191*x16192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16200=((1.0)*sj5);
CheckValue<IkReal> x16201=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x16201.valid){
continue;
}
CheckValue<IkReal> x16202 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),((((-1.0)*r20*sj6*x16200))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x16200))),IKFAST_ATAN2_MAGTHRESH);
if(!x16202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16201.value)))+(x16202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16203=IKcos(j4);
IkReal x16204=IKsin(j4);
IkReal x16205=(r11*sj0);
IkReal x16206=((0.026255)*sj6);
IkReal x16207=(cj0*r01);
IkReal x16208=(cj5*r12);
IkReal x16209=(cj6*sj5);
IkReal x16210=(r10*sj0);
IkReal x16211=(sj5*sj6);
IkReal x16212=(cj0*r11);
IkReal x16213=((1.0)*cj5);
IkReal x16214=((1.0)*cj6);
IkReal x16215=(cj0*r10);
IkReal x16216=((1.0)*sj0);
IkReal x16217=(cj0*r00);
IkReal x16218=((0.026255)*cj6);
IkReal x16219=((1.0)*r21);
IkReal x16220=((1.0)*cj0);
IkReal x16221=(sj3*x16204);
IkReal x16222=(r00*x16218);
IkReal x16223=((1.0)*x16203);
IkReal x16224=(cj3*x16204);
IkReal x16225=((0.0718)*x16203);
evalcond[0]=((((-1.0)*sj6*x16219))+x16221+((cj6*r20)));
evalcond[1]=((((-1.0)*x16209*x16219))+(((-1.0)*sj3*x16223))+(((-1.0)*r22*x16213))+(((-1.0)*r20*x16211)));
evalcond[2]=(((cj6*r00*sj0))+x16203+(((-1.0)*r01*sj6*x16216))+((sj6*x16212))+(((-1.0)*x16214*x16215)));
evalcond[3]=(x16224+((sj6*x16205))+((sj6*x16207))+(((-1.0)*x16210*x16214))+(((-1.0)*x16214*x16217)));
evalcond[4]=((-0.0001)+(((0.02626)*x16221))+((sj3*x16225))+((r20*x16218))+pz+(((0.09746)*sj3))+(((-1.0)*r21*x16206)));
evalcond[5]=(((x16210*x16211))+((x16207*x16209))+((cj0*cj5*r02))+((sj0*x16208))+(((-1.0)*cj3*x16223))+((x16211*x16217))+((x16205*x16209)));
evalcond[6]=((((-1.0)*r02*sj0*x16213))+((x16209*x16212))+(((-1.0)*r00*x16211*x16216))+x16204+((x16211*x16215))+(((-1.0)*r01*x16209*x16216))+((cj0*x16208)));
evalcond[7]=((-0.1246)+(((-1.0)*py*x16220))+(((-1.0)*x16215*x16218))+(((-0.0718)*x16204))+(((-1.0)*r01*sj0*x16206))+(((0.02626)*x16203))+((px*sj0))+((x16206*x16212))+((sj0*x16222)));
evalcond[8]=((0.1148)+(((-1.0)*py*x16216))+(((0.02626)*x16224))+((x16206*x16207))+(((-1.0)*x16217*x16218))+(((-1.0)*px*x16220))+((x16205*x16206))+((cj3*x16225))+(((0.09746)*cj3))+(((-1.0)*x16210*x16218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16226=(cj0*sj5);
IkReal x16227=(cj5*cj6);
IkReal x16228=((1.0)*sj5);
IkReal x16229=((1.0)*cj0);
IkReal x16230=((1.0)*sj0);
IkReal x16231=(cj5*sj6);
IkReal x16232=(r10*x16231);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=(cj3+((r20*x16231))+(((-1.0)*r22*x16228))+((r21*x16227)));
evalcond[2]=(sj3+(((-1.0)*r11*x16227*x16230))+((r12*sj0*sj5))+(((-1.0)*r00*x16229*x16231))+(((-1.0)*x16230*x16232))+((r02*x16226))+(((-1.0)*r01*x16227*x16229)));
evalcond[3]=((((-1.0)*r11*x16227*x16229))+((r12*x16226))+((r00*sj0*x16231))+((r01*sj0*x16227))+(((-1.0)*r02*sj0*x16228))+(((-1.0)*x16229*x16232)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
j4eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
j4eval[2]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j4eval[0]=cj3;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16233=(cj5*cj6);
IkReal x16234=(r11*sj0);
IkReal x16235=(cj0*sj6);
IkReal x16236=(cj6*sj5);
IkReal x16237=((1.0)*cj0);
IkReal x16238=(r10*sj0);
IkReal x16239=((1.0)*cj5);
IkReal x16240=(cj0*r02);
IkReal x16241=((1.0)*sj5);
IkReal x16242=(cj5*sj6);
IkReal x16243=(cj6*r00);
IkReal x16244=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r20*x16242))+((r21*x16233))+(((-1.0)*r22*x16241)));
evalcond[2]=(((sj6*x16234))+((r01*x16235))+(((-1.0)*x16237*x16243))+(((-1.0)*cj6*x16238)));
evalcond[3]=((1.0)+(((-1.0)*r00*x16235*x16239))+((sj5*x16240))+((sj5*x16244))+(((-1.0)*x16233*x16234))+(((-1.0)*sj6*x16238*x16239))+(((-1.0)*r01*x16233*x16237)));
evalcond[4]=(((sj5*sj6*x16238))+((r00*sj5*x16235))+((cj5*x16244))+((cj5*x16240))+((cj0*r01*x16236))+((x16234*x16236)));
evalcond[5]=(((r01*sj0*x16233))+(((-1.0)*r10*x16235*x16239))+((cj0*r12*sj5))+(((-1.0)*r11*x16233*x16237))+((r00*sj0*x16242))+(((-1.0)*r02*sj0*x16241)));
evalcond[6]=((0.1148)+(((-1.0)*px*x16237))+(((-0.026255)*cj0*x16243))+(((-0.026255)*cj6*x16238))+(((-1.0)*py*sj0))+(((0.026255)*r01*x16235))+(((0.026255)*sj6*x16234)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r20))+(((-1.0)*r21*sj6))))+IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r20))+(((-1.0)*r21*sj6))), (((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16245=IKcos(j4);
IkReal x16246=IKsin(j4);
IkReal x16247=((1.0)*cj5);
IkReal x16248=(cj0*r10);
IkReal x16249=(sj5*sj6);
IkReal x16250=((1.0)*cj6);
IkReal x16251=((0.026255)*cj6);
IkReal x16252=(r21*sj6);
IkReal x16253=((1.0)*x16246);
IkReal x16254=(cj0*r11*sj6);
IkReal x16255=(cj6*r00*sj0);
IkReal x16256=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16252))+((cj6*r20))+(((-1.0)*x16253)));
evalcond[1]=(x16245+(((-1.0)*r22*x16247))+(((-1.0)*r20*x16249))+(((-1.0)*r21*sj5*x16250)));
evalcond[2]=((-0.09736)+(((-0.02626)*x16246))+(((-0.026255)*x16252))+pz+((r20*x16251))+(((-0.0718)*x16245)));
evalcond[3]=(x16255+x16254+(((-1.0)*x16256))+(((-1.0)*x16248*x16250))+(((-1.0)*x16245)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x16250))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x16249))+(((-1.0)*x16253))+((x16248*x16249))+(((-1.0)*r02*sj0*x16247)));
evalcond[5]=((0.1246)+(((-0.02626)*x16245))+(((-0.026255)*x16256))+((r00*sj0*x16251))+(((0.026255)*x16254))+((px*sj0))+(((0.0718)*x16246))+(((-1.0)*x16248*x16251))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16257=(cj5*cj6);
IkReal x16258=(r11*sj0);
IkReal x16259=(cj0*sj6);
IkReal x16260=(cj6*sj5);
IkReal x16261=((1.0)*cj0);
IkReal x16262=(r10*sj0);
IkReal x16263=((1.0)*cj5);
IkReal x16264=(cj0*r02);
IkReal x16265=((1.0)*sj5);
IkReal x16266=(cj5*sj6);
IkReal x16267=(cj6*r00);
IkReal x16268=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16265))+((r21*x16257))+((r20*x16266)));
evalcond[2]=(((r01*x16259))+(((-1.0)*cj6*x16262))+((sj6*x16258))+(((-1.0)*x16261*x16267)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x16262*x16263))+(((-1.0)*x16257*x16258))+(((-1.0)*r00*x16259*x16263))+((sj5*x16264))+((sj5*x16268))+(((-1.0)*r01*x16257*x16261)));
evalcond[4]=(((r00*sj5*x16259))+((sj5*sj6*x16262))+((x16258*x16260))+((cj0*r01*x16260))+((cj5*x16268))+((cj5*x16264)));
evalcond[5]=((((-1.0)*r11*x16257*x16261))+(((-1.0)*r02*sj0*x16265))+((r01*sj0*x16257))+((cj0*r12*sj5))+((r00*sj0*x16266))+(((-1.0)*r10*x16259*x16263)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x16267))+(((-0.026255)*cj6*x16262))+(((0.026255)*sj6*x16258))+(((-1.0)*py*sj0))+(((0.026255)*r01*x16259))+(((-1.0)*px*x16261)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16269=(cj6*r20);
IkReal x16270=(r21*sj6);
if( IKabs((x16270+(((-1.0)*x16269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x16270))+(((6.96378830083565e-5)*x16269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16270+(((-1.0)*x16269))))+IKsqr(((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x16270))+(((6.96378830083565e-5)*x16269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16270+(((-1.0)*x16269))), ((-1.35877437325905)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x16270))+(((6.96378830083565e-5)*x16269))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16271=IKcos(j4);
IkReal x16272=IKsin(j4);
IkReal x16273=((1.0)*cj5);
IkReal x16274=(cj0*r10);
IkReal x16275=(sj5*sj6);
IkReal x16276=((1.0)*cj6);
IkReal x16277=((0.026255)*cj6);
IkReal x16278=(r21*sj6);
IkReal x16279=((1.0)*x16271);
IkReal x16280=(cj0*r11*sj6);
IkReal x16281=(cj6*r00*sj0);
IkReal x16282=(r01*sj0*sj6);
evalcond[0]=(x16272+(((-1.0)*x16278))+((cj6*r20)));
evalcond[1]=((((-1.0)*x16279))+(((-1.0)*r21*sj5*x16276))+(((-1.0)*r22*x16273))+(((-1.0)*r20*x16275)));
evalcond[2]=((0.09756)+(((0.0718)*x16271))+(((0.02626)*x16272))+(((-0.026255)*x16278))+pz+((r20*x16277)));
evalcond[3]=((((-1.0)*x16279))+(((-1.0)*x16282))+x16280+x16281+(((-1.0)*x16274*x16276)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*x16275))+(((-1.0)*x16272))+((x16274*x16275))+(((-1.0)*r02*sj0*x16273))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x16276)));
evalcond[5]=((0.1246)+((r00*sj0*x16277))+(((0.0718)*x16272))+(((0.026255)*x16280))+(((-1.0)*x16274*x16277))+(((-0.026255)*x16282))+(((-0.02626)*x16271))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16283=(cj5*cj6);
IkReal x16284=((1.0)*sj0);
IkReal x16285=((1.0)*r22);
IkReal x16286=(cj0*sj5);
IkReal x16287=(cj5*sj6);
IkReal x16288=((1.0)*cj0);
IkReal x16289=(cj6*r20);
IkReal x16290=((1.0)*sj5);
IkReal x16291=(r21*sj6);
IkReal x16292=(x16287*x16288);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x16283))+(((-1.0)*sj5*x16285))+((r20*x16287)));
evalcond[2]=((((-1.0)*x16291))+x16289);
evalcond[3]=((((-1.0)*cj6*r21*x16290))+(((-1.0)*r20*sj6*x16290))+(((-1.0)*cj5*x16285)));
evalcond[4]=((((-1.0)*r11*x16283*x16284))+(((-1.0)*r10*x16284*x16287))+((r02*x16286))+(((-1.0)*r00*x16292))+(((-1.0)*r01*x16283*x16288))+((r12*sj0*sj5)));
evalcond[5]=((((-1.0)*r11*x16283*x16288))+(((-1.0)*r02*sj5*x16284))+((r01*sj0*x16283))+((r00*sj0*x16287))+(((-1.0)*r10*x16292))+((r12*x16286)));
evalcond[6]=((0.0001)+(((0.026255)*x16289))+pz+(((-0.026255)*x16291)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16293=(cj0*cj6);
IkReal x16294=(cj6*sj0);
IkReal x16295=(cj0*sj6);
IkReal x16296=((1.0)*sj0*sj6);
if( IKabs((((r00*x16293))+(((-1.0)*r01*x16295))+(((-1.0)*r11*x16296))+((r10*x16294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x16296))+((r00*x16294))+(((-1.0)*r10*x16293))+((r11*x16295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x16293))+(((-1.0)*r01*x16295))+(((-1.0)*r11*x16296))+((r10*x16294))))+IKsqr(((((-1.0)*r01*x16296))+((r00*x16294))+(((-1.0)*r10*x16293))+((r11*x16295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*x16293))+(((-1.0)*r01*x16295))+(((-1.0)*r11*x16296))+((r10*x16294))), ((((-1.0)*r01*x16296))+((r00*x16294))+(((-1.0)*r10*x16293))+((r11*x16295))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16297=IKsin(j4);
IkReal x16298=IKcos(j4);
IkReal x16299=(r11*sj6);
IkReal x16300=((0.026255)*cj0);
IkReal x16301=(r01*sj6);
IkReal x16302=(sj0*sj5);
IkReal x16303=(cj6*r11);
IkReal x16304=(r10*sj6);
IkReal x16305=(cj5*r12);
IkReal x16306=(cj6*sj0);
IkReal x16307=((1.0)*sj0);
IkReal x16308=(cj5*r02);
IkReal x16309=((1.0)*r10);
IkReal x16310=(cj0*sj5);
IkReal x16311=(r00*sj6);
IkReal x16312=((0.026255)*sj0);
IkReal x16313=(cj0*cj6);
IkReal x16314=((1.0)*cj0);
IkReal x16315=(cj6*r01);
IkReal x16316=((1.0)*x16298);
evalcond[0]=(x16297+((cj0*x16301))+(((-1.0)*x16306*x16309))+(((-1.0)*r00*x16313))+((sj0*x16299)));
evalcond[1]=(((r00*x16306))+((cj0*x16299))+(((-1.0)*x16301*x16307))+(((-1.0)*x16309*x16313))+(((-1.0)*x16316)));
evalcond[2]=(((x16310*x16311))+((x16310*x16315))+((sj0*x16305))+((cj0*x16308))+(((-1.0)*x16316))+((x16302*x16303))+((x16302*x16304)));
evalcond[3]=((((-1.0)*x16297))+(((-1.0)*x16302*x16311))+(((-1.0)*x16302*x16315))+((x16304*x16310))+((cj0*x16305))+((x16303*x16310))+(((-1.0)*x16307*x16308)));
evalcond[4]=((0.1246)+(((-1.0)*py*x16314))+(((-1.0)*cj6*r10*x16300))+(((-0.02626)*x16298))+(((0.0718)*x16297))+(((-1.0)*x16301*x16312))+((x16299*x16300))+(((0.026255)*r00*x16306))+((px*sj0)));
evalcond[5]=((0.21226)+(((0.02626)*x16297))+(((-1.0)*cj6*r00*x16300))+(((-0.026255)*r10*x16306))+(((-1.0)*py*x16307))+((x16300*x16301))+(((0.0718)*x16298))+((x16299*x16312))+(((-1.0)*px*x16314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16317=(cj5*cj6);
IkReal x16318=((1.0)*sj0);
IkReal x16319=((1.0)*r22);
IkReal x16320=(cj0*sj5);
IkReal x16321=(cj5*sj6);
IkReal x16322=((1.0)*cj0);
IkReal x16323=(cj6*r20);
IkReal x16324=((1.0)*sj5);
IkReal x16325=(r21*sj6);
IkReal x16326=(x16321*x16322);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x16321))+((r21*x16317))+(((-1.0)*sj5*x16319)));
evalcond[2]=((((-1.0)*x16325))+x16323);
evalcond[3]=((((-1.0)*cj6*r21*x16324))+(((-1.0)*cj5*x16319))+(((-1.0)*r20*sj6*x16324)));
evalcond[4]=(((r02*x16320))+(((-1.0)*r11*x16317*x16318))+((r12*sj0*sj5))+(((-1.0)*r00*x16326))+(((-1.0)*r10*x16318*x16321))+(((-1.0)*r01*x16317*x16322)));
evalcond[5]=((((-1.0)*r11*x16317*x16322))+((r12*x16320))+(((-1.0)*r02*sj5*x16318))+((r00*sj0*x16321))+((r01*sj0*x16317))+(((-1.0)*r10*x16326)));
evalcond[6]=((0.0001)+(((0.026255)*x16323))+pz+(((-0.026255)*x16325)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16327=(sj0*sj6);
IkReal x16328=(cj0*sj6);
IkReal x16329=(cj6*r00);
IkReal x16330=((1.0)*cj6*r10);
if( IKabs((((r01*x16328))+(((-1.0)*cj0*x16329))+(((-1.0)*sj0*x16330))+((r11*x16327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x16330))+((sj0*x16329))+(((-1.0)*r01*x16327))+((r11*x16328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x16328))+(((-1.0)*cj0*x16329))+(((-1.0)*sj0*x16330))+((r11*x16327))))+IKsqr(((((-1.0)*cj0*x16330))+((sj0*x16329))+(((-1.0)*r01*x16327))+((r11*x16328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x16328))+(((-1.0)*cj0*x16329))+(((-1.0)*sj0*x16330))+((r11*x16327))), ((((-1.0)*cj0*x16330))+((sj0*x16329))+(((-1.0)*r01*x16327))+((r11*x16328))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16331=IKcos(j4);
IkReal x16332=IKsin(j4);
IkReal x16333=(r11*sj6);
IkReal x16334=((0.026255)*cj0);
IkReal x16335=(r01*sj6);
IkReal x16336=(sj0*sj5);
IkReal x16337=(cj6*r11);
IkReal x16338=(r10*sj6);
IkReal x16339=(cj5*r12);
IkReal x16340=(cj6*sj0);
IkReal x16341=((1.0)*sj0);
IkReal x16342=(cj5*r02);
IkReal x16343=((1.0)*r10);
IkReal x16344=(cj0*sj5);
IkReal x16345=(r00*sj6);
IkReal x16346=((0.026255)*sj0);
IkReal x16347=(cj0*cj6);
IkReal x16348=((1.0)*cj0);
IkReal x16349=(cj6*r01);
IkReal x16350=((1.0)*x16332);
evalcond[0]=((((-1.0)*x16350))+(((-1.0)*x16340*x16343))+(((-1.0)*r00*x16347))+((sj0*x16333))+((cj0*x16335)));
evalcond[1]=((((-1.0)*x16331))+(((-1.0)*x16343*x16347))+((cj0*x16333))+((r00*x16340))+(((-1.0)*x16335*x16341)));
evalcond[2]=(((x16344*x16345))+((x16344*x16349))+x16331+((x16336*x16338))+((x16336*x16337))+((sj0*x16339))+((cj0*x16342)));
evalcond[3]=(((x16338*x16344))+(((-1.0)*x16350))+((x16337*x16344))+(((-1.0)*x16341*x16342))+((cj0*x16339))+(((-1.0)*x16336*x16349))+(((-1.0)*x16336*x16345)));
evalcond[4]=((0.1246)+(((-1.0)*cj6*r10*x16334))+(((0.0718)*x16332))+((x16333*x16334))+(((0.026255)*r00*x16340))+((px*sj0))+(((-1.0)*py*x16348))+(((-0.02626)*x16331))+(((-1.0)*x16335*x16346)));
evalcond[5]=((0.01734)+(((-0.026255)*r10*x16340))+(((-0.0718)*x16331))+((x16333*x16346))+((x16334*x16335))+(((-1.0)*px*x16348))+(((-1.0)*py*x16341))+(((-0.02626)*x16332))+(((-1.0)*cj6*r00*x16334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16351=((1.0)*sj6);
CheckValue<IkReal> x16352=IKPowWithIntegerCheck(cj3,-1);
if(!x16352.valid){
continue;
}
CheckValue<IkReal> x16353=IKPowWithIntegerCheck(sj3,-1);
if(!x16353.valid){
continue;
}
if( IKabs(((x16352.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16351))+(((-1.0)*cj0*r01*x16351))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16353.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16352.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16351))+(((-1.0)*cj0*r01*x16351))+((cj0*cj6*r00))))))+IKsqr(((x16353.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16352.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16351))+(((-1.0)*cj0*r01*x16351))+((cj0*cj6*r00))))), ((x16353.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16354=IKsin(j4);
IkReal x16355=IKcos(j4);
IkReal x16356=(r11*sj0);
IkReal x16357=((0.026255)*sj6);
IkReal x16358=(cj0*r01);
IkReal x16359=(cj5*r12);
IkReal x16360=(cj6*sj5);
IkReal x16361=(r10*sj0);
IkReal x16362=(sj5*sj6);
IkReal x16363=(cj0*r11);
IkReal x16364=((1.0)*cj5);
IkReal x16365=((1.0)*cj6);
IkReal x16366=(cj0*r10);
IkReal x16367=((1.0)*sj0);
IkReal x16368=(cj0*r00);
IkReal x16369=((0.026255)*cj6);
IkReal x16370=((1.0)*r21);
IkReal x16371=((1.0)*cj0);
IkReal x16372=(sj3*x16354);
IkReal x16373=(sj3*x16355);
IkReal x16374=(r00*x16369);
IkReal x16375=(cj3*x16354);
IkReal x16376=((1.0)*x16355);
evalcond[0]=((((-1.0)*x16372))+(((-1.0)*sj6*x16370))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x16364))+x16373+(((-1.0)*r20*x16362))+(((-1.0)*x16360*x16370)));
evalcond[2]=(((sj6*x16358))+((sj6*x16356))+(((-1.0)*x16361*x16365))+x16375+(((-1.0)*x16365*x16368)));
evalcond[3]=((((-1.0)*r01*sj6*x16367))+((cj6*r00*sj0))+(((-1.0)*x16376))+(((-1.0)*x16365*x16366))+((sj6*x16363)));
evalcond[4]=((0.0001)+(((-0.02626)*x16372))+((r20*x16369))+pz+(((-1.0)*r21*x16357))+(((-0.09746)*sj3))+(((-0.0718)*x16373)));
evalcond[5]=(((x16356*x16360))+((cj0*cj5*r02))+((sj0*x16359))+((x16362*x16368))+(((-1.0)*cj3*x16376))+((x16361*x16362))+((x16358*x16360)));
evalcond[6]=((((-1.0)*x16354))+(((-1.0)*r00*x16362*x16367))+(((-1.0)*r01*x16360*x16367))+(((-1.0)*r02*sj0*x16364))+((x16362*x16366))+((x16360*x16363))+((cj0*x16359)));
evalcond[7]=((0.1246)+((sj0*x16374))+(((0.0718)*x16354))+(((-1.0)*r01*sj0*x16357))+(((-1.0)*py*x16371))+((x16357*x16363))+(((-1.0)*x16366*x16369))+((px*sj0))+(((-0.02626)*x16355)));
evalcond[8]=((0.1148)+((x16356*x16357))+(((-1.0)*x16361*x16369))+(((0.0718)*cj3*x16355))+(((-1.0)*px*x16371))+((x16357*x16358))+(((-1.0)*x16368*x16369))+(((-1.0)*py*x16367))+(((0.09746)*cj3))+(((0.02626)*x16375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16377=((1.0)*sj6);
CheckValue<IkReal> x16378=IKPowWithIntegerCheck(sj3,-1);
if(!x16378.valid){
continue;
}
if( IKabs(((x16378.value)*(((((-1.0)*r21*x16377))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x16377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16378.value)*(((((-1.0)*r21*x16377))+((cj6*r20))))))+IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x16377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16378.value)*(((((-1.0)*r21*x16377))+((cj6*r20))))), (((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*cj6*r10))+(((-1.0)*r01*sj0*x16377))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16379=IKsin(j4);
IkReal x16380=IKcos(j4);
IkReal x16381=(r11*sj0);
IkReal x16382=((0.026255)*sj6);
IkReal x16383=(cj0*r01);
IkReal x16384=(cj5*r12);
IkReal x16385=(cj6*sj5);
IkReal x16386=(r10*sj0);
IkReal x16387=(sj5*sj6);
IkReal x16388=(cj0*r11);
IkReal x16389=((1.0)*cj5);
IkReal x16390=((1.0)*cj6);
IkReal x16391=(cj0*r10);
IkReal x16392=((1.0)*sj0);
IkReal x16393=(cj0*r00);
IkReal x16394=((0.026255)*cj6);
IkReal x16395=((1.0)*r21);
IkReal x16396=((1.0)*cj0);
IkReal x16397=(sj3*x16379);
IkReal x16398=(sj3*x16380);
IkReal x16399=(r00*x16394);
IkReal x16400=(cj3*x16379);
IkReal x16401=((1.0)*x16380);
evalcond[0]=((((-1.0)*sj6*x16395))+(((-1.0)*x16397))+((cj6*r20)));
evalcond[1]=((((-1.0)*x16385*x16395))+x16398+(((-1.0)*r20*x16387))+(((-1.0)*r22*x16389)));
evalcond[2]=((((-1.0)*x16386*x16390))+x16400+(((-1.0)*x16390*x16393))+((sj6*x16381))+((sj6*x16383)));
evalcond[3]=(((cj6*r00*sj0))+(((-1.0)*x16401))+(((-1.0)*x16390*x16391))+(((-1.0)*r01*sj6*x16392))+((sj6*x16388)));
evalcond[4]=((0.0001)+(((-1.0)*r21*x16382))+(((-0.02626)*x16397))+pz+(((-0.0718)*x16398))+((r20*x16394))+(((-0.09746)*sj3)));
evalcond[5]=(((sj0*x16384))+((cj0*cj5*r02))+((x16383*x16385))+((x16381*x16385))+((x16386*x16387))+((x16387*x16393))+(((-1.0)*cj3*x16401)));
evalcond[6]=(((cj0*x16384))+(((-1.0)*x16379))+((x16387*x16391))+((x16385*x16388))+(((-1.0)*r00*x16387*x16392))+(((-1.0)*r02*sj0*x16389))+(((-1.0)*r01*x16385*x16392)));
evalcond[7]=((0.1246)+(((-0.02626)*x16380))+((sj0*x16399))+(((-1.0)*py*x16396))+((x16382*x16388))+(((-1.0)*x16391*x16394))+(((-1.0)*r01*sj0*x16382))+((px*sj0))+(((0.0718)*x16379)));
evalcond[8]=((0.1148)+(((0.0718)*cj3*x16380))+(((-1.0)*x16393*x16394))+(((-1.0)*x16386*x16394))+(((-1.0)*px*x16396))+((x16381*x16382))+(((-1.0)*py*x16392))+((x16382*x16383))+(((0.09746)*cj3))+(((0.02626)*x16400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16402=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x16402.valid){
continue;
}
CheckValue<IkReal> x16403 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x16403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16402.value)))+(x16403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16404=IKsin(j4);
IkReal x16405=IKcos(j4);
IkReal x16406=(r11*sj0);
IkReal x16407=((0.026255)*sj6);
IkReal x16408=(cj0*r01);
IkReal x16409=(cj5*r12);
IkReal x16410=(cj6*sj5);
IkReal x16411=(r10*sj0);
IkReal x16412=(sj5*sj6);
IkReal x16413=(cj0*r11);
IkReal x16414=((1.0)*cj5);
IkReal x16415=((1.0)*cj6);
IkReal x16416=(cj0*r10);
IkReal x16417=((1.0)*sj0);
IkReal x16418=(cj0*r00);
IkReal x16419=((0.026255)*cj6);
IkReal x16420=((1.0)*r21);
IkReal x16421=((1.0)*cj0);
IkReal x16422=(sj3*x16404);
IkReal x16423=(sj3*x16405);
IkReal x16424=(r00*x16419);
IkReal x16425=(cj3*x16404);
IkReal x16426=((1.0)*x16405);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x16420))+(((-1.0)*x16422)));
evalcond[1]=((((-1.0)*r22*x16414))+(((-1.0)*x16410*x16420))+x16423+(((-1.0)*r20*x16412)));
evalcond[2]=((((-1.0)*x16411*x16415))+x16425+(((-1.0)*x16415*x16418))+((sj6*x16408))+((sj6*x16406)));
evalcond[3]=((((-1.0)*x16426))+(((-1.0)*r01*sj6*x16417))+((cj6*r00*sj0))+((sj6*x16413))+(((-1.0)*x16415*x16416)));
evalcond[4]=((0.0001)+(((-0.02626)*x16422))+pz+(((-0.0718)*x16423))+(((-0.09746)*sj3))+(((-1.0)*r21*x16407))+((r20*x16419)));
evalcond[5]=(((sj0*x16409))+((cj0*cj5*r02))+((x16412*x16418))+((x16406*x16410))+(((-1.0)*cj3*x16426))+((x16411*x16412))+((x16408*x16410)));
evalcond[6]=((((-1.0)*r02*sj0*x16414))+(((-1.0)*r01*x16410*x16417))+((cj0*x16409))+((x16412*x16416))+(((-1.0)*r00*x16412*x16417))+((x16410*x16413))+(((-1.0)*x16404)));
evalcond[7]=((0.1246)+(((-1.0)*r01*sj0*x16407))+(((0.0718)*x16404))+((sj0*x16424))+(((-1.0)*x16416*x16419))+(((-1.0)*py*x16421))+((px*sj0))+((x16407*x16413))+(((-0.02626)*x16405)));
evalcond[8]=((0.1148)+(((-1.0)*px*x16421))+(((-1.0)*x16411*x16419))+((x16407*x16408))+(((-1.0)*x16418*x16419))+(((-1.0)*py*x16417))+(((0.02626)*x16425))+(((0.09746)*cj3))+((x16406*x16407))+(((0.0718)*cj3*x16405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16427=(cj5*cj6);
IkReal x16428=(r11*sj0);
IkReal x16429=(cj0*sj6);
IkReal x16430=(cj6*sj5);
IkReal x16431=((1.0)*cj0);
IkReal x16432=(r10*sj0);
IkReal x16433=((1.0)*cj5);
IkReal x16434=(cj0*r02);
IkReal x16435=((1.0)*sj5);
IkReal x16436=(cj5*sj6);
IkReal x16437=(cj6*r00);
IkReal x16438=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=(((r20*x16436))+(((-1.0)*r22*x16435))+((r21*x16427)));
evalcond[2]=(((r01*x16429))+(((-1.0)*x16431*x16437))+((sj6*x16428))+(((-1.0)*cj6*x16432)));
evalcond[3]=((1.0)+(((-1.0)*sj6*x16432*x16433))+((sj5*x16438))+((sj5*x16434))+(((-1.0)*r01*x16427*x16431))+(((-1.0)*x16427*x16428))+(((-1.0)*r00*x16429*x16433)));
evalcond[4]=(((cj0*r01*x16430))+((x16428*x16430))+((cj5*x16438))+((cj5*x16434))+((r00*sj5*x16429))+((sj5*sj6*x16432)));
evalcond[5]=((((-1.0)*r02*sj0*x16435))+((r01*sj0*x16427))+((cj0*r12*sj5))+(((-1.0)*r11*x16427*x16431))+((r00*sj0*x16436))+(((-1.0)*r10*x16429*x16433)));
evalcond[6]=((0.1148)+(((-1.0)*px*x16431))+(((-0.026255)*cj6*x16432))+(((0.026255)*sj6*x16428))+(((-1.0)*py*sj0))+(((-0.026255)*cj0*x16437))+(((0.026255)*r01*x16429)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16439=(cj6*r21);
IkReal x16440=(r20*sj6);
IkReal x16441=(r21*sj6);
IkReal x16442=(cj1*sj5);
IkReal x16443=(cj5*r22);
IkReal x16444=((1.0)*sj1*sj5);
IkReal x16445=((1.0)*cj6*r20);
if( IKabs(((((-1.0)*sj1*x16445))+((cj1*x16443))+((x16439*x16442))+((x16440*x16442))+((sj1*x16441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x16443))+((cj1*x16441))+(((-1.0)*x16439*x16444))+(((-1.0)*cj1*x16445))+(((-1.0)*x16440*x16444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x16445))+((cj1*x16443))+((x16439*x16442))+((x16440*x16442))+((sj1*x16441))))+IKsqr(((((-1.0)*sj1*x16443))+((cj1*x16441))+(((-1.0)*x16439*x16444))+(((-1.0)*cj1*x16445))+(((-1.0)*x16440*x16444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x16445))+((cj1*x16443))+((x16439*x16442))+((x16440*x16442))+((sj1*x16441))), ((((-1.0)*sj1*x16443))+((cj1*x16441))+(((-1.0)*x16439*x16444))+(((-1.0)*cj1*x16445))+(((-1.0)*x16440*x16444))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16446=IKsin(j4);
IkReal x16447=IKcos(j4);
IkReal x16448=((1.0)*cj5);
IkReal x16449=((1.0)*cj0);
IkReal x16450=(cj6*r10);
IkReal x16451=(cj6*r20);
IkReal x16452=((1.0)*sj5);
IkReal x16453=(r21*sj6);
IkReal x16454=(cj0*sj5);
IkReal x16455=(cj1*x16447);
IkReal x16456=(sj1*x16446);
IkReal x16457=(sj1*x16447);
IkReal x16458=(cj0*r11*sj6);
IkReal x16459=(cj1*x16446);
IkReal x16460=(cj6*r00*sj0);
IkReal x16461=(r01*sj0*sj6);
IkReal x16462=(x16456+x16455);
evalcond[0]=(x16462+x16451+(((-1.0)*x16453)));
evalcond[1]=((((-1.0)*r22*x16448))+(((-1.0)*r20*sj6*x16452))+x16459+(((-1.0)*cj6*r21*x16452))+(((-1.0)*x16457)));
evalcond[2]=((((-1.0)*x16449*x16450))+x16460+x16458+x16457+(((-1.0)*x16461))+(((-1.0)*x16459)));
evalcond[3]=((((0.0718)*x16457))+(((0.09736)*sj1))+pz+(((-0.026255)*x16453))+(((0.02626)*x16456))+(((0.02626)*x16455))+(((-0.1246)*cj1))+(((-0.0718)*x16459))+(((0.026255)*x16451)));
evalcond[4]=((((-1.0)*cj6*r01*sj0*x16452))+((cj6*r11*x16454))+((cj0*cj5*r12))+x16462+(((-1.0)*r00*sj0*sj6*x16452))+((r10*sj6*x16454))+(((-1.0)*r02*sj0*x16448)));
evalcond[5]=((((-0.02626)*x16459))+(((-0.026255)*x16461))+(((-0.1246)*sj1))+(((-0.09736)*cj1))+(((0.026255)*x16460))+(((0.02626)*x16457))+((px*sj0))+(((-0.0718)*x16455))+(((-0.0718)*x16456))+(((-1.0)*py*x16449))+(((-0.026255)*cj0*x16450))+(((0.026255)*x16458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16463=(cj5*cj6);
IkReal x16464=(r11*sj0);
IkReal x16465=(cj0*sj6);
IkReal x16466=(cj6*sj5);
IkReal x16467=((1.0)*cj0);
IkReal x16468=(r10*sj0);
IkReal x16469=((1.0)*cj5);
IkReal x16470=(cj0*r02);
IkReal x16471=((1.0)*sj5);
IkReal x16472=(cj5*sj6);
IkReal x16473=(cj6*r00);
IkReal x16474=(r12*sj0);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x16471))+((r20*x16472))+((r21*x16463)));
evalcond[2]=(((sj6*x16464))+(((-1.0)*x16467*x16473))+(((-1.0)*cj6*x16468))+((r01*x16465)));
evalcond[3]=((-1.0)+((sj5*x16474))+((sj5*x16470))+(((-1.0)*x16463*x16464))+(((-1.0)*r01*x16463*x16467))+(((-1.0)*r00*x16465*x16469))+(((-1.0)*sj6*x16468*x16469)));
evalcond[4]=(((cj0*r01*x16466))+((x16464*x16466))+((sj5*sj6*x16468))+((cj5*x16474))+((cj5*x16470))+((r00*sj5*x16465)));
evalcond[5]=(((r01*sj0*x16463))+(((-1.0)*r02*sj0*x16471))+(((-1.0)*r11*x16463*x16467))+((cj0*r12*sj5))+(((-1.0)*r10*x16465*x16469))+((r00*sj0*x16472)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x16473))+(((-1.0)*px*x16467))+(((-0.026255)*cj6*x16468))+(((-1.0)*py*sj0))+(((0.026255)*r01*x16465))+(((0.026255)*sj6*x16464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16475=(cj5*r22);
IkReal x16476=(cj6*r20);
IkReal x16477=(r21*sj1);
IkReal x16478=(cj6*sj5);
IkReal x16479=(cj1*r21);
IkReal x16480=(r20*sj5*sj6);
if( IKabs((((cj1*x16480))+((sj1*x16476))+((cj1*x16475))+(((-1.0)*sj6*x16477))+((x16478*x16479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x16479))+((sj1*x16475))+(((-1.0)*cj1*x16476))+((x16477*x16478))+((sj1*x16480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x16480))+((sj1*x16476))+((cj1*x16475))+(((-1.0)*sj6*x16477))+((x16478*x16479))))+IKsqr((((sj6*x16479))+((sj1*x16475))+(((-1.0)*cj1*x16476))+((x16477*x16478))+((sj1*x16480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x16480))+((sj1*x16476))+((cj1*x16475))+(((-1.0)*sj6*x16477))+((x16478*x16479))), (((sj6*x16479))+((sj1*x16475))+(((-1.0)*cj1*x16476))+((x16477*x16478))+((sj1*x16480))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16481=IKcos(j4);
IkReal x16482=IKsin(j4);
IkReal x16483=(cj0*sj6);
IkReal x16484=((1.0)*cj5);
IkReal x16485=((1.0)*cj0);
IkReal x16486=(cj6*r10);
IkReal x16487=(cj6*r20);
IkReal x16488=((1.0)*sj5);
IkReal x16489=(r21*sj6);
IkReal x16490=(sj1*x16481);
IkReal x16491=(cj1*x16482);
IkReal x16492=(cj1*x16481);
IkReal x16493=(sj1*x16482);
IkReal x16494=(cj6*r00*sj0);
IkReal x16495=(r01*sj0*sj6);
IkReal x16496=(x16491+x16490);
evalcond[0]=(x16492+x16487+(((-1.0)*x16493))+(((-1.0)*x16489)));
evalcond[1]=((((-1.0)*r22*x16484))+x16496+(((-1.0)*cj6*r21*x16488))+(((-1.0)*r20*sj6*x16488)));
evalcond[2]=(x16496+x16494+((r11*x16483))+(((-1.0)*x16495))+(((-1.0)*x16485*x16486)));
evalcond[3]=((((0.026255)*x16487))+(((-0.02626)*x16493))+(((0.02626)*x16492))+(((-0.026255)*x16489))+(((-0.0718)*x16491))+(((-0.0718)*x16490))+(((-0.09756)*sj1))+pz+(((-0.1246)*cj1)));
evalcond[4]=((((-1.0)*r02*sj0*x16484))+(((-1.0)*cj6*r01*sj0*x16488))+((cj0*cj5*r12))+x16493+((r10*sj5*x16483))+((cj0*cj6*r11*sj5))+(((-1.0)*x16492))+(((-1.0)*r00*sj0*sj6*x16488)));
evalcond[5]=((((0.026255)*x16494))+(((-0.1246)*sj1))+(((-0.026255)*cj0*x16486))+(((0.026255)*r11*x16483))+(((0.0718)*x16492))+(((0.02626)*x16491))+(((0.02626)*x16490))+(((-0.026255)*x16495))+(((-0.0718)*x16493))+(((0.09756)*cj1))+(((-1.0)*py*x16485))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16497=(cj0*sj5);
IkReal x16498=(cj5*cj6);
IkReal x16499=((1.0)*sj5);
IkReal x16500=((1.0)*cj0);
IkReal x16501=((1.0)*sj0);
IkReal x16502=(cj5*sj6);
IkReal x16503=(r10*x16502);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x16499))+((r20*x16502))+((r21*x16498))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r00*x16500*x16502))+(((-1.0)*sj2))+(((-1.0)*r01*x16498*x16500))+((r02*x16497))+((r12*sj0*sj5))+(((-1.0)*r11*x16498*x16501))+(((-1.0)*x16501*x16503)));
evalcond[3]=((((-1.0)*r02*sj0*x16499))+((r12*x16497))+((r00*sj0*x16502))+(((-1.0)*r11*x16498*x16500))+(((-1.0)*x16500*x16503))+((r01*sj0*x16498)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x16504=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*sj6*x16504))+((cj6*r20)))))+(IKabs(((((-1.0)*cj6*sj5*x16504))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16505=(cj5*cj6);
IkReal x16506=((1.0)*sj0);
IkReal x16507=((1.0)*r22);
IkReal x16508=(cj0*sj5);
IkReal x16509=(cj5*sj6);
IkReal x16510=((1.0)*cj0);
IkReal x16511=(cj6*r20);
IkReal x16512=((1.0)*sj5);
IkReal x16513=(r21*sj6);
IkReal x16514=(x16509*x16510);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x16509))+(((-1.0)*sj5*x16507))+((r21*x16505)));
evalcond[2]=(x16511+(((-1.0)*x16513)));
evalcond[3]=((((-1.0)*cj6*r21*x16512))+(((-1.0)*r20*sj6*x16512))+(((-1.0)*cj5*x16507)));
evalcond[4]=((((-1.0)*r01*x16505*x16510))+((r12*sj0*sj5))+(((-1.0)*r10*x16506*x16509))+((r02*x16508))+(((-1.0)*r00*x16514))+(((-1.0)*r11*x16505*x16506)));
evalcond[5]=(((r12*x16508))+((r01*sj0*x16505))+(((-1.0)*r11*x16505*x16510))+((r00*sj0*x16509))+(((-1.0)*r10*x16514))+(((-1.0)*r02*sj5*x16506)));
evalcond[6]=((-0.2413)+(((0.026255)*x16511))+pz+(((-0.026255)*x16513)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16515=(cj0*cj6);
IkReal x16516=(cj6*sj0);
IkReal x16517=(cj0*sj6);
IkReal x16518=((1.0)*sj0*sj6);
if( IKabs(((((-1.0)*r10*x16515))+((r00*x16516))+((r11*x16517))+(((-1.0)*r01*x16518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x16515))+(((-1.0)*r11*x16518))+(((-1.0)*r01*x16517))+((r10*x16516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x16515))+((r00*x16516))+((r11*x16517))+(((-1.0)*r01*x16518))))+IKsqr((((r00*x16515))+(((-1.0)*r11*x16518))+(((-1.0)*r01*x16517))+((r10*x16516))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x16515))+((r00*x16516))+((r11*x16517))+(((-1.0)*r01*x16518))), (((r00*x16515))+(((-1.0)*r11*x16518))+(((-1.0)*r01*x16517))+((r10*x16516))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16519=IKsin(j4);
IkReal x16520=IKcos(j4);
IkReal x16521=(r11*sj6);
IkReal x16522=((0.026255)*cj0);
IkReal x16523=(r01*sj6);
IkReal x16524=(sj0*sj5);
IkReal x16525=(cj6*r11);
IkReal x16526=(r10*sj6);
IkReal x16527=(cj5*r12);
IkReal x16528=(cj6*sj0);
IkReal x16529=((1.0)*sj0);
IkReal x16530=(cj5*r02);
IkReal x16531=((1.0)*r10);
IkReal x16532=(cj0*sj5);
IkReal x16533=(r00*sj6);
IkReal x16534=((0.026255)*sj0);
IkReal x16535=(cj0*cj6);
IkReal x16536=((1.0)*cj0);
IkReal x16537=(cj6*r01);
evalcond[0]=(((sj0*x16521))+x16520+(((-1.0)*x16528*x16531))+((cj0*x16523))+(((-1.0)*r00*x16535)));
evalcond[1]=((((-1.0)*x16531*x16535))+((r00*x16528))+((cj0*x16521))+(((-1.0)*x16523*x16529))+(((-1.0)*x16519)));
evalcond[2]=(((sj0*x16527))+((x16532*x16533))+((x16532*x16537))+x16519+((x16524*x16526))+((x16524*x16525))+((cj0*x16530)));
evalcond[3]=(x16520+((x16526*x16532))+(((-1.0)*x16529*x16530))+((x16525*x16532))+(((-1.0)*x16524*x16533))+(((-1.0)*x16524*x16537))+((cj0*x16527)));
evalcond[4]=((-0.09736)+(((-1.0)*py*x16536))+(((-0.02626)*x16519))+((x16521*x16522))+(((-0.0718)*x16520))+(((-1.0)*cj6*r10*x16522))+(((0.026255)*r00*x16528))+((px*sj0))+(((-1.0)*x16523*x16534)));
evalcond[5]=((-0.0001)+((x16522*x16523))+(((-1.0)*py*x16529))+(((-1.0)*cj6*r00*x16522))+(((-1.0)*px*x16536))+(((-0.0718)*x16519))+(((0.02626)*x16520))+(((-0.026255)*r10*x16528))+((x16521*x16534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16538=(cj5*cj6);
IkReal x16539=(r11*sj0);
IkReal x16540=(cj0*sj6);
IkReal x16541=(cj6*sj5);
IkReal x16542=((1.0)*cj0);
IkReal x16543=(r10*sj0);
IkReal x16544=((1.0)*cj5);
IkReal x16545=(cj0*r02);
IkReal x16546=((1.0)*sj5);
IkReal x16547=(cj5*sj6);
IkReal x16548=(cj6*r00);
IkReal x16549=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16546))+((r20*x16547))+((r21*x16538)));
evalcond[2]=(((sj6*x16539))+(((-1.0)*cj6*x16543))+(((-1.0)*x16542*x16548))+((r01*x16540)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x16538*x16542))+((sj5*x16549))+((sj5*x16545))+(((-1.0)*sj6*x16543*x16544))+(((-1.0)*x16538*x16539))+(((-1.0)*r00*x16540*x16544)));
evalcond[4]=(((r00*sj5*x16540))+((x16539*x16541))+((sj5*sj6*x16543))+((cj0*r01*x16541))+((cj5*x16549))+((cj5*x16545)));
evalcond[5]=((((-1.0)*r10*x16540*x16544))+((cj0*r12*sj5))+((r00*sj0*x16547))+(((-1.0)*r11*x16538*x16542))+((r01*sj0*x16538))+(((-1.0)*r02*sj0*x16546)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x16540))+(((-1.0)*px*x16542))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x16543))+(((-0.026255)*cj0*x16548))+(((0.026255)*sj6*x16539)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16550=(cj6*r20);
IkReal x16551=(r21*sj6);
if( IKabs(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16550))+(((-6.96378830083565e-5)*x16551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16550+(((-1.0)*x16551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16550))+(((-6.96378830083565e-5)*x16551))))+IKsqr((x16550+(((-1.0)*x16551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16550))+(((-6.96378830083565e-5)*x16551))), (x16550+(((-1.0)*x16551))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16552=IKsin(j4);
IkReal x16553=IKcos(j4);
IkReal x16554=((1.0)*cj5);
IkReal x16555=(cj0*r10);
IkReal x16556=(sj5*sj6);
IkReal x16557=((1.0)*cj6);
IkReal x16558=((0.026255)*cj6);
IkReal x16559=(r21*sj6);
IkReal x16560=((1.0)*x16552);
IkReal x16561=(cj0*r11*sj6);
IkReal x16562=(cj6*r00*sj0);
IkReal x16563=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16553))+(((-1.0)*x16559))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x16554))+(((-1.0)*r20*x16556))+(((-1.0)*x16560))+(((-1.0)*r21*sj5*x16557)));
evalcond[2]=((-0.1264)+(((-0.02626)*x16553))+(((0.0718)*x16552))+(((-0.026255)*x16559))+pz+((r20*x16558)));
evalcond[3]=(x16562+x16561+(((-1.0)*x16560))+(((-1.0)*x16563))+(((-1.0)*x16555*x16557)));
evalcond[4]=(((x16555*x16556))+(((-1.0)*r02*sj0*x16554))+x16553+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x16556))+(((-1.0)*r01*sj0*sj5*x16557)));
evalcond[5]=((-0.09736)+(((-0.026255)*x16563))+(((-0.0718)*x16553))+(((0.026255)*x16561))+(((-0.02626)*x16552))+((px*sj0))+((r00*sj0*x16558))+(((-1.0)*x16555*x16558))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16564=(cj5*cj6);
IkReal x16565=(r11*sj0);
IkReal x16566=(cj0*sj6);
IkReal x16567=(cj6*sj5);
IkReal x16568=((1.0)*cj0);
IkReal x16569=(r10*sj0);
IkReal x16570=((1.0)*cj5);
IkReal x16571=(cj0*r02);
IkReal x16572=((1.0)*sj5);
IkReal x16573=(cj5*sj6);
IkReal x16574=(cj6*r00);
IkReal x16575=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x16564))+(((-1.0)*r22*x16572))+((r20*x16573)));
evalcond[2]=(((r01*x16566))+(((-1.0)*cj6*x16569))+(((-1.0)*x16568*x16574))+((sj6*x16565)));
evalcond[3]=((1.0)+(((-1.0)*x16564*x16565))+(((-1.0)*sj6*x16569*x16570))+(((-1.0)*r01*x16564*x16568))+(((-1.0)*r00*x16566*x16570))+((sj5*x16575))+((sj5*x16571)));
evalcond[4]=(((cj0*r01*x16567))+((cj5*x16575))+((cj5*x16571))+((x16565*x16567))+((sj5*sj6*x16569))+((r00*sj5*x16566)));
evalcond[5]=(((r00*sj0*x16573))+(((-1.0)*r10*x16566*x16570))+(((-1.0)*r02*sj0*x16572))+(((-1.0)*r11*x16564*x16568))+((cj0*r12*sj5))+((r01*sj0*x16564)));
evalcond[6]=((0.1148)+(((-1.0)*px*x16568))+(((-0.026255)*cj0*x16574))+(((-0.026255)*cj6*x16569))+(((-1.0)*py*sj0))+(((0.026255)*sj6*x16565))+(((0.026255)*r01*x16566)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16576=IKcos(j4);
IkReal x16577=IKsin(j4);
IkReal x16578=((1.0)*cj5);
IkReal x16579=(cj0*r10);
IkReal x16580=(sj5*sj6);
IkReal x16581=((1.0)*cj6);
IkReal x16582=((0.026255)*cj6);
IkReal x16583=(r21*sj6);
IkReal x16584=(cj0*r11*sj6);
IkReal x16585=(cj6*r00*sj0);
IkReal x16586=(r01*sj0*sj6);
evalcond[0]=(x16576+(((-1.0)*x16583))+((cj6*r20)));
evalcond[1]=(x16577+(((-1.0)*r20*x16580))+(((-1.0)*r22*x16578))+(((-1.0)*r21*sj5*x16581)));
evalcond[2]=((-0.1246)+((r20*x16582))+(((-0.026255)*x16583))+pz+(((0.02626)*x16576))+(((-0.0718)*x16577)));
evalcond[3]=(x16585+x16584+(((-1.0)*x16586))+(((-1.0)*x16579*x16581))+(((-1.0)*x16577)));
evalcond[4]=(x16576+((cj0*cj5*r12))+(((-1.0)*r02*sj0*x16578))+(((-1.0)*r01*sj0*sj5*x16581))+((cj0*cj6*r11*sj5))+((x16579*x16580))+(((-1.0)*r00*sj0*x16580)));
evalcond[5]=((-0.09736)+(((0.026255)*x16584))+((r00*sj0*x16582))+(((-0.026255)*x16586))+(((-0.02626)*x16577))+(((-1.0)*x16579*x16582))+((px*sj0))+(((-0.0718)*x16576))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16587=((1.0)*sj5);
IkReal x16588=((1.0)*sj6);
CheckValue<IkReal> x16589=IKPowWithIntegerCheck(sj2,-1);
if(!x16589.valid){
continue;
}
CheckValue<IkReal> x16590=IKPowWithIntegerCheck(cj2,-1);
if(!x16590.valid){
continue;
}
if( IKabs(((x16589.value)*(((((-1.0)*cj6*r21*x16587))+(((-1.0)*r20*sj6*x16587))+(((-1.0)*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16590.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16588))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16588)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16589.value)*(((((-1.0)*cj6*r21*x16587))+(((-1.0)*r20*sj6*x16587))+(((-1.0)*cj5*r22))))))+IKsqr(((x16590.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16588))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16588))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16589.value)*(((((-1.0)*cj6*r21*x16587))+(((-1.0)*r20*sj6*x16587))+(((-1.0)*cj5*r22))))), ((x16590.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16588))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16588))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16591=IKcos(j4);
IkReal x16592=IKsin(j4);
IkReal x16593=(r11*sj0);
IkReal x16594=(cj0*sj6);
IkReal x16595=((0.026255)*r01);
IkReal x16596=(cj5*r12);
IkReal x16597=(cj6*sj5);
IkReal x16598=(r10*sj5);
IkReal x16599=(sj0*sj6);
IkReal x16600=((1.0)*cj5);
IkReal x16601=((1.0)*r01);
IkReal x16602=(r00*sj5);
IkReal x16603=((0.026255)*sj6);
IkReal x16604=((1.0)*py);
IkReal x16605=((0.026255)*cj6);
IkReal x16606=((1.0)*r21);
IkReal x16607=((1.0)*cj0);
IkReal x16608=((1.0)*cj6*r10);
IkReal x16609=(cj2*x16592);
IkReal x16610=(cj6*r00*sj0);
IkReal x16611=(cj2*x16591);
IkReal x16612=((1.0)*x16592);
IkReal x16613=(sj2*x16591);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x16606))+(((-1.0)*x16613)));
evalcond[1]=((((-1.0)*x16597*x16606))+(((-1.0)*r22*x16600))+(((-1.0)*sj2*x16612))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x16611+((sj6*x16593))+(((-1.0)*sj0*x16608))+(((-1.0)*cj6*r00*x16607))+((r01*x16594)));
evalcond[3]=((((-1.0)*x16599*x16601))+x16610+(((-1.0)*x16612))+(((-1.0)*cj6*r10*x16607))+((r11*x16594)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x16603))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((0.0718)*sj2*x16592))+(((-0.02626)*x16613))+((r20*x16605)));
evalcond[5]=(((x16598*x16599))+x16609+((cj0*cj5*r02))+((sj0*x16596))+((cj0*r01*x16597))+((x16594*x16602))+((x16593*x16597)));
evalcond[6]=(((x16594*x16598))+x16591+(((-1.0)*sj0*x16597*x16601))+((cj0*r11*x16597))+(((-1.0)*r02*sj0*x16600))+((cj0*x16596))+(((-1.0)*x16599*x16602)));
evalcond[7]=((-0.09736)+((r00*sj0*x16605))+(((-0.0718)*x16591))+(((-1.0)*cj0*r10*x16605))+(((0.026255)*r11*x16594))+(((-1.0)*cj0*x16604))+((px*sj0))+(((-0.02626)*x16592))+(((-1.0)*x16595*x16599)));
evalcond[8]=((-0.001)+((x16593*x16603))+((x16594*x16595))+(((-1.0)*px*x16607))+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x16605))+(((-1.0)*r10*sj0*x16605))+(((0.02626)*x16611))+(((-1.0)*sj0*x16604))+(((0.0009)*cj2))+(((-0.0718)*x16609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16614=((1.0)*sj6);
CheckValue<IkReal> x16615=IKPowWithIntegerCheck(sj2,-1);
if(!x16615.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x16614))+(((-1.0)*cj0*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16615.value)*(((((-1.0)*r21*x16614))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x16614))+(((-1.0)*cj0*cj6*r10))))+IKsqr(((x16615.value)*(((((-1.0)*r21*x16614))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*r01*sj0*x16614))+(((-1.0)*cj0*cj6*r10))), ((x16615.value)*(((((-1.0)*r21*x16614))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16616=IKcos(j4);
IkReal x16617=IKsin(j4);
IkReal x16618=(r11*sj0);
IkReal x16619=(cj0*sj6);
IkReal x16620=((0.026255)*r01);
IkReal x16621=(cj5*r12);
IkReal x16622=(cj6*sj5);
IkReal x16623=(r10*sj5);
IkReal x16624=(sj0*sj6);
IkReal x16625=((1.0)*cj5);
IkReal x16626=((1.0)*r01);
IkReal x16627=(r00*sj5);
IkReal x16628=((0.026255)*sj6);
IkReal x16629=((1.0)*py);
IkReal x16630=((0.026255)*cj6);
IkReal x16631=((1.0)*r21);
IkReal x16632=((1.0)*cj0);
IkReal x16633=((1.0)*cj6*r10);
IkReal x16634=(cj2*x16617);
IkReal x16635=(cj6*r00*sj0);
IkReal x16636=(cj2*x16616);
IkReal x16637=((1.0)*x16617);
IkReal x16638=(sj2*x16616);
evalcond[0]=((((-1.0)*sj6*x16631))+((cj6*r20))+(((-1.0)*x16638)));
evalcond[1]=((((-1.0)*sj2*x16637))+(((-1.0)*r22*x16625))+(((-1.0)*x16622*x16631))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x16636+(((-1.0)*cj6*r00*x16632))+((r01*x16619))+((sj6*x16618))+(((-1.0)*sj0*x16633)));
evalcond[3]=((((-1.0)*cj6*r10*x16632))+x16635+((r11*x16619))+(((-1.0)*x16637))+(((-1.0)*x16624*x16626)));
evalcond[4]=((-0.1255)+((r20*x16630))+(((-0.1158)*cj2))+(((0.0718)*sj2*x16617))+(((-0.0009)*sj2))+pz+(((-1.0)*r21*x16628))+(((-0.02626)*x16638)));
evalcond[5]=(x16634+((cj0*cj5*r02))+((x16619*x16627))+((x16618*x16622))+((sj0*x16621))+((x16623*x16624))+((cj0*r01*x16622)));
evalcond[6]=((((-1.0)*r02*sj0*x16625))+x16616+((x16619*x16623))+((cj0*r11*x16622))+(((-1.0)*x16624*x16627))+((cj0*x16621))+(((-1.0)*sj0*x16622*x16626)));
evalcond[7]=((-0.09736)+((r00*sj0*x16630))+(((-1.0)*cj0*r10*x16630))+(((-1.0)*cj0*x16629))+(((0.026255)*r11*x16619))+(((-0.0718)*x16616))+((px*sj0))+(((-1.0)*x16620*x16624))+(((-0.02626)*x16617)));
evalcond[8]=((-0.001)+(((-1.0)*px*x16632))+(((-0.1158)*sj2))+((x16619*x16620))+((x16618*x16628))+(((-1.0)*cj0*r00*x16630))+(((-1.0)*sj0*x16629))+(((0.0009)*cj2))+(((-0.0718)*x16634))+(((-1.0)*r10*sj0*x16630))+(((0.02626)*x16636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16639=((1.0)*r21);
CheckValue<IkReal> x16640 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x16639))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),((((-1.0)*sj6*x16639))+((cj6*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16640.valid){
continue;
}
CheckValue<IkReal> x16641=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x16641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16640.value)+(((1.5707963267949)*(x16641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16642=IKcos(j4);
IkReal x16643=IKsin(j4);
IkReal x16644=(r11*sj0);
IkReal x16645=(cj0*sj6);
IkReal x16646=((0.026255)*r01);
IkReal x16647=(cj5*r12);
IkReal x16648=(cj6*sj5);
IkReal x16649=(r10*sj5);
IkReal x16650=(sj0*sj6);
IkReal x16651=((1.0)*cj5);
IkReal x16652=((1.0)*r01);
IkReal x16653=(r00*sj5);
IkReal x16654=((0.026255)*sj6);
IkReal x16655=((1.0)*py);
IkReal x16656=((0.026255)*cj6);
IkReal x16657=((1.0)*r21);
IkReal x16658=((1.0)*cj0);
IkReal x16659=((1.0)*cj6*r10);
IkReal x16660=(cj2*x16643);
IkReal x16661=(cj6*r00*sj0);
IkReal x16662=(cj2*x16642);
IkReal x16663=((1.0)*x16643);
IkReal x16664=(sj2*x16642);
evalcond[0]=((((-1.0)*sj6*x16657))+((cj6*r20))+(((-1.0)*x16664)));
evalcond[1]=((((-1.0)*x16648*x16657))+(((-1.0)*sj2*x16663))+(((-1.0)*r22*x16651))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x16662+((sj6*x16644))+(((-1.0)*cj6*r00*x16658))+((r01*x16645))+(((-1.0)*sj0*x16659)));
evalcond[3]=(x16661+(((-1.0)*cj6*r10*x16658))+(((-1.0)*x16650*x16652))+((r11*x16645))+(((-1.0)*x16663)));
evalcond[4]=((-0.1255)+(((-0.1158)*cj2))+(((-1.0)*r21*x16654))+((r20*x16656))+(((-0.0009)*sj2))+(((0.0718)*sj2*x16643))+pz+(((-0.02626)*x16664)));
evalcond[5]=(x16660+((cj0*cj5*r02))+((sj0*x16647))+((x16644*x16648))+((x16649*x16650))+((x16645*x16653))+((cj0*r01*x16648)));
evalcond[6]=(x16642+((x16645*x16649))+(((-1.0)*sj0*x16648*x16652))+(((-1.0)*x16650*x16653))+(((-1.0)*r02*sj0*x16651))+((cj0*r11*x16648))+((cj0*x16647)));
evalcond[7]=((-0.09736)+(((-1.0)*cj0*x16655))+((r00*sj0*x16656))+(((-1.0)*cj0*r10*x16656))+(((-0.02626)*x16643))+((px*sj0))+(((0.026255)*r11*x16645))+(((-1.0)*x16646*x16650))+(((-0.0718)*x16642)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+((x16645*x16646))+(((-1.0)*px*x16658))+(((-1.0)*cj0*r00*x16656))+((x16644*x16654))+(((0.0009)*cj2))+(((-0.0718)*x16660))+(((-1.0)*sj0*x16655))+(((-1.0)*r10*sj0*x16656))+(((0.02626)*x16662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16665=(cj0*sj5);
IkReal x16666=(cj5*cj6);
IkReal x16667=((1.0)*sj5);
IkReal x16668=((1.0)*cj0);
IkReal x16669=((1.0)*sj0);
IkReal x16670=(cj5*sj6);
IkReal x16671=(r10*x16670);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=(cj2+(((-1.0)*r22*x16667))+((r21*x16666))+((r20*x16670)));
evalcond[2]=((((-1.0)*r11*x16666*x16669))+sj2+(((-1.0)*r01*x16666*x16668))+((r02*x16665))+((r12*sj0*sj5))+(((-1.0)*r00*x16668*x16670))+(((-1.0)*x16669*x16671)));
evalcond[3]=((((-1.0)*x16668*x16671))+((r00*sj0*x16670))+(((-1.0)*r11*x16666*x16668))+((r12*x16665))+(((-1.0)*r02*sj0*x16667))+((r01*sj0*x16666)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x16672=((1.0)*r21);
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*sj6*x16672)))))+(IKabs(((((-1.0)*cj5*r22))+(((-1.0)*cj6*sj5*x16672))+(((-1.0)*r20*sj5*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=0;
sj1=0;
cj1=1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16673=(cj5*cj6);
IkReal x16674=((1.0)*sj0);
IkReal x16675=((1.0)*r22);
IkReal x16676=(cj0*sj5);
IkReal x16677=(cj5*sj6);
IkReal x16678=((1.0)*cj0);
IkReal x16679=(cj6*r20);
IkReal x16680=((1.0)*sj5);
IkReal x16681=(r21*sj6);
IkReal x16682=(x16677*x16678);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj5*x16675))+((r21*x16673))+((r20*x16677)));
evalcond[2]=((((-1.0)*x16681))+x16679);
evalcond[3]=((((-1.0)*r20*sj6*x16680))+(((-1.0)*cj5*x16675))+(((-1.0)*cj6*r21*x16680)));
evalcond[4]=((((-1.0)*r10*x16674*x16677))+((r02*x16676))+((r12*sj0*sj5))+(((-1.0)*r01*x16673*x16678))+(((-1.0)*r00*x16682))+(((-1.0)*r11*x16673*x16674)));
evalcond[5]=(((r00*sj0*x16677))+(((-1.0)*r02*sj5*x16674))+(((-1.0)*r10*x16682))+((r12*x16676))+((r01*sj0*x16673))+(((-1.0)*r11*x16673*x16678)));
evalcond[6]=((-0.2413)+(((-0.026255)*x16681))+(((0.026255)*x16679))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16683=(cj0*cj6);
IkReal x16684=(sj0*sj6);
IkReal x16685=((1.0)*r11);
IkReal x16686=(cj6*sj0);
IkReal x16687=(cj0*sj6);
if( IKabs((((r10*x16683))+((r01*x16684))+(((-1.0)*x16685*x16687))+(((-1.0)*r00*x16686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16686))+((r00*x16683))+(((-1.0)*x16684*x16685))+(((-1.0)*r01*x16687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x16683))+((r01*x16684))+(((-1.0)*x16685*x16687))+(((-1.0)*r00*x16686))))+IKsqr((((r10*x16686))+((r00*x16683))+(((-1.0)*x16684*x16685))+(((-1.0)*r01*x16687))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r10*x16683))+((r01*x16684))+(((-1.0)*x16685*x16687))+(((-1.0)*r00*x16686))), (((r10*x16686))+((r00*x16683))+(((-1.0)*x16684*x16685))+(((-1.0)*r01*x16687))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16688=IKsin(j4);
IkReal x16689=IKcos(j4);
IkReal x16690=(r11*sj6);
IkReal x16691=((0.026255)*cj0);
IkReal x16692=(r01*sj6);
IkReal x16693=(sj0*sj5);
IkReal x16694=(cj6*r11);
IkReal x16695=(r10*sj6);
IkReal x16696=(cj5*r12);
IkReal x16697=(cj6*sj0);
IkReal x16698=((1.0)*sj0);
IkReal x16699=(cj5*r02);
IkReal x16700=((1.0)*r10);
IkReal x16701=(cj0*sj5);
IkReal x16702=(r00*sj6);
IkReal x16703=((0.026255)*sj0);
IkReal x16704=(cj0*cj6);
IkReal x16705=((1.0)*cj0);
IkReal x16706=(cj6*r01);
evalcond[0]=((((-1.0)*x16697*x16700))+x16689+((cj0*x16692))+(((-1.0)*r00*x16704))+((sj0*x16690)));
evalcond[1]=(x16688+((cj0*x16690))+(((-1.0)*x16700*x16704))+(((-1.0)*x16692*x16698))+((r00*x16697)));
evalcond[2]=(x16688+((x16701*x16706))+((x16701*x16702))+((cj0*x16699))+((sj0*x16696))+((x16693*x16695))+((x16693*x16694)));
evalcond[3]=((((-1.0)*x16689))+(((-1.0)*x16698*x16699))+((cj0*x16696))+((x16695*x16701))+((x16694*x16701))+(((-1.0)*x16693*x16706))+(((-1.0)*x16693*x16702)));
evalcond[4]=((0.09756)+(((-1.0)*cj6*r10*x16691))+(((-1.0)*py*x16705))+(((-1.0)*x16692*x16703))+(((0.02626)*x16688))+((px*sj0))+(((0.0718)*x16689))+((x16690*x16691))+(((0.026255)*r00*x16697)));
evalcond[5]=((-0.0001)+(((-0.0718)*x16688))+(((-0.026255)*r10*x16697))+(((0.02626)*x16689))+(((-1.0)*py*x16698))+(((-1.0)*px*x16705))+((x16691*x16692))+(((-1.0)*cj6*r00*x16691))+((x16690*x16703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16707=(cj5*cj6);
IkReal x16708=(r11*sj0);
IkReal x16709=(cj0*sj6);
IkReal x16710=(cj6*sj5);
IkReal x16711=((1.0)*cj0);
IkReal x16712=(r10*sj0);
IkReal x16713=((1.0)*cj5);
IkReal x16714=(cj0*r02);
IkReal x16715=((1.0)*sj5);
IkReal x16716=(cj5*sj6);
IkReal x16717=(cj6*r00);
IkReal x16718=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16715))+((r21*x16707))+((r20*x16716)));
evalcond[2]=(((sj6*x16708))+((r01*x16709))+(((-1.0)*cj6*x16712))+(((-1.0)*x16711*x16717)));
evalcond[3]=((1.0)+(((-1.0)*x16707*x16708))+(((-1.0)*sj6*x16712*x16713))+(((-1.0)*r01*x16707*x16711))+(((-1.0)*r00*x16709*x16713))+((sj5*x16718))+((sj5*x16714)));
evalcond[4]=(((sj5*sj6*x16712))+((cj0*r01*x16710))+((cj5*x16718))+((cj5*x16714))+((x16708*x16710))+((r00*sj5*x16709)));
evalcond[5]=(((r01*sj0*x16707))+(((-1.0)*r10*x16709*x16713))+((cj0*r12*sj5))+(((-1.0)*r11*x16707*x16711))+(((-1.0)*r02*sj0*x16715))+((r00*sj0*x16716)));
evalcond[6]=((-0.1168)+(((-0.026255)*cj6*x16712))+(((-0.026255)*cj0*x16717))+(((0.026255)*sj6*x16708))+(((0.026255)*r01*x16709))+(((-1.0)*px*x16711))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16719=(cj6*r20);
IkReal x16720=(r21*sj6);
if( IKabs(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16719))+(((-6.96378830083565e-5)*x16720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16719+(((-1.0)*x16720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16719))+(((-6.96378830083565e-5)*x16720))))+IKsqr((x16719+(((-1.0)*x16720))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.76044568245125)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16719))+(((-6.96378830083565e-5)*x16720))), (x16719+(((-1.0)*x16720))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16721=IKsin(j4);
IkReal x16722=IKcos(j4);
IkReal x16723=((1.0)*cj5);
IkReal x16724=(cj0*r10);
IkReal x16725=(sj5*sj6);
IkReal x16726=((1.0)*cj6);
IkReal x16727=((0.026255)*cj6);
IkReal x16728=(r21*sj6);
IkReal x16729=((1.0)*x16722);
IkReal x16730=(cj0*r11*sj6);
IkReal x16731=(cj6*r00*sj0);
IkReal x16732=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16729))+(((-1.0)*x16728))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x16726))+(((-1.0)*r22*x16723))+(((-1.0)*r20*x16725))+(((-1.0)*x16721)));
evalcond[2]=((-0.1264)+(((0.0718)*x16721))+((r20*x16727))+(((-0.02626)*x16722))+pz+(((-0.026255)*x16728)));
evalcond[3]=(x16721+x16730+x16731+(((-1.0)*x16724*x16726))+(((-1.0)*x16732)));
evalcond[4]=((((-1.0)*r02*sj0*x16723))+(((-1.0)*x16729))+((cj0*cj5*r12))+((x16724*x16725))+(((-1.0)*r01*sj0*sj5*x16726))+((cj0*cj6*r11*sj5))+(((-1.0)*r00*sj0*x16725)));
evalcond[5]=((0.09756)+(((0.0718)*x16722))+((r00*sj0*x16727))+(((0.026255)*x16730))+(((-1.0)*x16724*x16727))+(((0.02626)*x16721))+((px*sj0))+(((-0.026255)*x16732))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16733=(cj5*cj6);
IkReal x16734=(r11*sj0);
IkReal x16735=(cj0*sj6);
IkReal x16736=(cj6*sj5);
IkReal x16737=((1.0)*cj0);
IkReal x16738=(r10*sj0);
IkReal x16739=((1.0)*cj5);
IkReal x16740=(cj0*r02);
IkReal x16741=((1.0)*sj5);
IkReal x16742=(cj5*sj6);
IkReal x16743=(cj6*r00);
IkReal x16744=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16741))+((r21*x16733))+((r20*x16742)));
evalcond[2]=((((-1.0)*x16737*x16743))+((sj6*x16734))+((r01*x16735))+(((-1.0)*cj6*x16738)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x16733*x16737))+(((-1.0)*r00*x16735*x16739))+((sj5*x16740))+((sj5*x16744))+(((-1.0)*sj6*x16738*x16739))+(((-1.0)*x16733*x16734)));
evalcond[4]=(((r00*sj5*x16735))+((sj5*sj6*x16738))+((cj0*r01*x16736))+((x16734*x16736))+((cj5*x16740))+((cj5*x16744)));
evalcond[5]=((((-1.0)*r02*sj0*x16741))+(((-1.0)*r10*x16735*x16739))+(((-1.0)*r11*x16733*x16737))+((cj0*r12*sj5))+((r01*sj0*x16733))+((r00*sj0*x16742)));
evalcond[6]=((0.1148)+(((-0.026255)*cj6*x16738))+(((-0.026255)*cj0*x16743))+(((0.026255)*sj6*x16734))+(((-1.0)*px*x16737))+(((-1.0)*py*sj0))+(((0.026255)*r01*x16735)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16745=IKcos(j4);
IkReal x16746=IKsin(j4);
IkReal x16747=((1.0)*cj5);
IkReal x16748=(cj0*r10);
IkReal x16749=(sj5*sj6);
IkReal x16750=((1.0)*cj6);
IkReal x16751=((0.026255)*cj6);
IkReal x16752=(r21*sj6);
IkReal x16753=(cj0*r11*sj6);
IkReal x16754=(cj6*r00*sj0);
IkReal x16755=(r01*sj0*sj6);
evalcond[0]=(x16745+(((-1.0)*x16752))+((cj6*r20)));
evalcond[1]=(x16746+(((-1.0)*r22*x16747))+(((-1.0)*r20*x16749))+(((-1.0)*r21*sj5*x16750)));
evalcond[2]=((-0.1246)+(((0.02626)*x16745))+(((-0.026255)*x16752))+pz+((r20*x16751))+(((-0.0718)*x16746)));
evalcond[3]=((((-1.0)*x16748*x16750))+x16746+x16753+x16754+(((-1.0)*x16755)));
evalcond[4]=((((-1.0)*r02*sj0*x16747))+(((-1.0)*x16745))+((x16748*x16749))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x16750))+(((-1.0)*r00*sj0*x16749)));
evalcond[5]=((0.09756)+(((-1.0)*x16748*x16751))+((r00*sj0*x16751))+(((0.02626)*x16746))+(((-0.026255)*x16755))+(((0.0718)*x16745))+((px*sj0))+(((0.026255)*x16753))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16756=((1.0)*sj5);
IkReal x16757=((1.0)*sj6);
CheckValue<IkReal> x16758=IKPowWithIntegerCheck(sj2,-1);
if(!x16758.valid){
continue;
}
CheckValue<IkReal> x16759=IKPowWithIntegerCheck(cj2,-1);
if(!x16759.valid){
continue;
}
if( IKabs(((x16758.value)*(((((-1.0)*r20*sj6*x16756))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x16756)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16759.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16757))+(((-1.0)*cj0*r01*x16757))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16758.value)*(((((-1.0)*r20*sj6*x16756))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x16756))))))+IKsqr(((x16759.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16757))+(((-1.0)*cj0*r01*x16757))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16758.value)*(((((-1.0)*r20*sj6*x16756))+(((-1.0)*cj5*r22))+(((-1.0)*cj6*r21*x16756))))), ((x16759.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16757))+(((-1.0)*cj0*r01*x16757))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16760=IKsin(j4);
IkReal x16761=IKcos(j4);
IkReal x16762=(r11*sj0);
IkReal x16763=(cj0*sj6);
IkReal x16764=((0.026255)*r01);
IkReal x16765=(cj5*r12);
IkReal x16766=(cj6*sj5);
IkReal x16767=(r10*sj5);
IkReal x16768=(sj0*sj6);
IkReal x16769=((1.0)*cj5);
IkReal x16770=((1.0)*r01);
IkReal x16771=(r00*sj5);
IkReal x16772=((0.026255)*sj6);
IkReal x16773=((1.0)*py);
IkReal x16774=((1.0)*sj2);
IkReal x16775=((0.026255)*cj6);
IkReal x16776=((1.0)*r21);
IkReal x16777=((1.0)*cj0);
IkReal x16778=((1.0)*cj6*r10);
IkReal x16779=(cj2*x16760);
IkReal x16780=(cj6*r00*sj0);
IkReal x16781=(cj2*x16761);
evalcond[0]=((((-1.0)*sj6*x16776))+(((-1.0)*x16761*x16774))+((cj6*r20)));
evalcond[1]=((((-1.0)*r22*x16769))+(((-1.0)*x16760*x16774))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*x16766*x16776)));
evalcond[2]=(x16780+x16760+(((-1.0)*x16768*x16770))+(((-1.0)*cj6*r10*x16777))+((r11*x16763)));
evalcond[3]=(x16781+((r01*x16763))+(((-1.0)*sj0*x16778))+(((-1.0)*cj6*r00*x16777))+((sj6*x16762)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x16772))+((r20*x16775))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+(((-0.02626)*sj2*x16761))+(((0.0718)*sj2*x16760)));
evalcond[5]=(x16779+((cj0*cj5*r02))+((cj0*r01*x16766))+((x16767*x16768))+((x16762*x16766))+((x16763*x16771))+((sj0*x16765)));
evalcond[6]=((((-1.0)*sj0*x16766*x16770))+(((-1.0)*x16768*x16771))+((cj0*r11*x16766))+(((-1.0)*x16761))+((x16763*x16767))+((cj0*x16765))+(((-1.0)*r02*sj0*x16769)));
evalcond[7]=((0.09756)+((r00*sj0*x16775))+(((0.0718)*x16761))+(((0.026255)*r11*x16763))+(((-1.0)*cj0*x16773))+(((-1.0)*cj0*r10*x16775))+((px*sj0))+(((-1.0)*x16764*x16768))+(((0.02626)*x16760)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*cj0*r00*x16775))+(((-1.0)*sj0*x16773))+(((0.0009)*cj2))+(((-0.0718)*x16779))+((x16763*x16764))+((x16762*x16772))+(((0.02626)*x16781))+(((-1.0)*r10*sj0*x16775))+(((-1.0)*px*x16777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16782=((1.0)*sj6);
CheckValue<IkReal> x16783=IKPowWithIntegerCheck(sj2,-1);
if(!x16783.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r11*x16782))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16783.value)*(((((-1.0)*r21*x16782))+((cj6*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r11*x16782))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))))+IKsqr(((x16783.value)*(((((-1.0)*r21*x16782))+((cj6*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r11*x16782))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj6*r00*sj0))), ((x16783.value)*(((((-1.0)*r21*x16782))+((cj6*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16784=IKsin(j4);
IkReal x16785=IKcos(j4);
IkReal x16786=(r11*sj0);
IkReal x16787=(cj0*sj6);
IkReal x16788=((0.026255)*r01);
IkReal x16789=(cj5*r12);
IkReal x16790=(cj6*sj5);
IkReal x16791=(r10*sj5);
IkReal x16792=(sj0*sj6);
IkReal x16793=((1.0)*cj5);
IkReal x16794=((1.0)*r01);
IkReal x16795=(r00*sj5);
IkReal x16796=((0.026255)*sj6);
IkReal x16797=((1.0)*py);
IkReal x16798=((1.0)*sj2);
IkReal x16799=((0.026255)*cj6);
IkReal x16800=((1.0)*r21);
IkReal x16801=((1.0)*cj0);
IkReal x16802=((1.0)*cj6*r10);
IkReal x16803=(cj2*x16784);
IkReal x16804=(cj6*r00*sj0);
IkReal x16805=(cj2*x16785);
evalcond[0]=((((-1.0)*x16785*x16798))+((cj6*r20))+(((-1.0)*sj6*x16800)));
evalcond[1]=((((-1.0)*x16790*x16800))+(((-1.0)*r22*x16793))+(((-1.0)*x16784*x16798))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x16784+x16804+((r11*x16787))+(((-1.0)*cj6*r10*x16801))+(((-1.0)*x16792*x16794)));
evalcond[3]=(x16805+((sj6*x16786))+(((-1.0)*sj0*x16802))+((r01*x16787))+(((-1.0)*cj6*r00*x16801)));
evalcond[4]=((-0.1255)+(((0.0718)*sj2*x16784))+(((-0.02626)*sj2*x16785))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+pz+((r20*x16799))+(((-1.0)*r21*x16796)));
evalcond[5]=(x16803+((sj0*x16789))+((x16786*x16790))+((cj0*cj5*r02))+((x16791*x16792))+((x16787*x16795))+((cj0*r01*x16790)));
evalcond[6]=((((-1.0)*r02*sj0*x16793))+(((-1.0)*x16792*x16795))+((cj0*x16789))+((cj0*r11*x16790))+(((-1.0)*sj0*x16790*x16794))+(((-1.0)*x16785))+((x16787*x16791)));
evalcond[7]=((0.09756)+(((-1.0)*cj0*x16797))+(((-1.0)*cj0*r10*x16799))+(((-1.0)*x16788*x16792))+(((0.026255)*r11*x16787))+((px*sj0))+((r00*sj0*x16799))+(((0.0718)*x16785))+(((0.02626)*x16784)));
evalcond[8]=((-0.001)+(((-1.0)*sj0*x16797))+((x16786*x16796))+(((-0.1158)*sj2))+(((0.02626)*x16805))+(((-0.0718)*x16803))+(((0.0009)*cj2))+(((-1.0)*px*x16801))+(((-1.0)*cj0*r00*x16799))+(((-1.0)*r10*sj0*x16799))+((x16787*x16788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16806=((1.0)*r21);
CheckValue<IkReal> x16807 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj5*x16806))+(((-1.0)*cj5*r22))+(((-1.0)*r20*sj5*sj6)))),(((cj6*r20))+(((-1.0)*sj6*x16806))),IKFAST_ATAN2_MAGTHRESH);
if(!x16807.valid){
continue;
}
CheckValue<IkReal> x16808=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x16808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16807.value)+(((1.5707963267949)*(x16808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16809=IKsin(j4);
IkReal x16810=IKcos(j4);
IkReal x16811=(r11*sj0);
IkReal x16812=(cj0*sj6);
IkReal x16813=((0.026255)*r01);
IkReal x16814=(cj5*r12);
IkReal x16815=(cj6*sj5);
IkReal x16816=(r10*sj5);
IkReal x16817=(sj0*sj6);
IkReal x16818=((1.0)*cj5);
IkReal x16819=((1.0)*r01);
IkReal x16820=(r00*sj5);
IkReal x16821=((0.026255)*sj6);
IkReal x16822=((1.0)*py);
IkReal x16823=((1.0)*sj2);
IkReal x16824=((0.026255)*cj6);
IkReal x16825=((1.0)*r21);
IkReal x16826=((1.0)*cj0);
IkReal x16827=((1.0)*cj6*r10);
IkReal x16828=(cj2*x16809);
IkReal x16829=(cj6*r00*sj0);
IkReal x16830=(cj2*x16810);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x16825))+(((-1.0)*x16810*x16823)));
evalcond[1]=((((-1.0)*r22*x16818))+(((-1.0)*x16809*x16823))+(((-1.0)*x16815*x16825))+(((-1.0)*r20*sj5*sj6)));
evalcond[2]=(x16809+x16829+(((-1.0)*x16817*x16819))+(((-1.0)*cj6*r10*x16826))+((r11*x16812)));
evalcond[3]=(x16830+((sj6*x16811))+(((-1.0)*sj0*x16827))+((r01*x16812))+(((-1.0)*cj6*r00*x16826)));
evalcond[4]=((-0.1255)+(((-1.0)*r21*x16821))+(((-0.1158)*cj2))+(((0.0718)*sj2*x16809))+(((-0.0009)*sj2))+pz+((r20*x16824))+(((-0.02626)*sj2*x16810)));
evalcond[5]=(x16828+((cj0*cj5*r02))+((x16816*x16817))+((x16812*x16820))+((sj0*x16814))+((x16811*x16815))+((cj0*r01*x16815)));
evalcond[6]=(((cj0*r11*x16815))+((cj0*x16814))+(((-1.0)*x16817*x16820))+(((-1.0)*x16810))+(((-1.0)*sj0*x16815*x16819))+(((-1.0)*r02*sj0*x16818))+((x16812*x16816)));
evalcond[7]=((0.09756)+(((-1.0)*cj0*x16822))+(((0.0718)*x16810))+(((0.02626)*x16809))+((r00*sj0*x16824))+((px*sj0))+(((-1.0)*cj0*r10*x16824))+(((0.026255)*r11*x16812))+(((-1.0)*x16813*x16817)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((0.02626)*x16830))+(((-0.0718)*x16828))+(((-1.0)*px*x16826))+(((-1.0)*cj0*r00*x16824))+(((-1.0)*sj0*x16822))+((x16811*x16821))+(((0.0009)*cj2))+(((-1.0)*r10*sj0*x16824))+((x16812*x16813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16831=(cj0*sj5);
IkReal x16832=(cj5*cj6);
IkReal x16833=((1.0)*sj5);
IkReal x16834=((1.0)*cj0);
IkReal x16835=((1.0)*sj0);
IkReal x16836=(cj5*sj6);
IkReal x16837=(r10*x16836);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=(((r21*x16832))+cj2+(((-1.0)*r22*x16833))+((r20*x16836)));
evalcond[2]=((((-1.0)*sj2))+(((-1.0)*x16835*x16837))+(((-1.0)*r11*x16832*x16835))+((r12*sj0*sj5))+(((-1.0)*r00*x16834*x16836))+(((-1.0)*r01*x16832*x16834))+((r02*x16831)));
evalcond[3]=((((-1.0)*r02*sj0*x16833))+((r12*x16831))+(((-1.0)*r11*x16832*x16834))+((r01*sj0*x16832))+(((-1.0)*x16834*x16837))+((r00*sj0*x16836)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16838=(cj5*cj6);
IkReal x16839=((1.0)*sj0);
IkReal x16840=((1.0)*r22);
IkReal x16841=(cj0*sj5);
IkReal x16842=(cj5*sj6);
IkReal x16843=((1.0)*cj0);
IkReal x16844=(cj6*r20);
IkReal x16845=((1.0)*sj5);
IkReal x16846=(r21*sj6);
IkReal x16847=(x16842*x16843);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+((r21*x16838))+(((-1.0)*sj5*x16840))+((r20*x16842)));
evalcond[2]=(x16844+(((-1.0)*x16846)));
evalcond[3]=((((-1.0)*cj6*r21*x16845))+(((-1.0)*cj5*x16840))+(((-1.0)*r20*sj6*x16845)));
evalcond[4]=((((-1.0)*r11*x16838*x16839))+((r02*x16841))+((r12*sj0*sj5))+(((-1.0)*r10*x16839*x16842))+(((-1.0)*r00*x16847))+(((-1.0)*r01*x16838*x16843)));
evalcond[5]=(((r12*x16841))+(((-1.0)*r10*x16847))+(((-1.0)*r02*sj5*x16839))+((r01*sj0*x16838))+(((-1.0)*r11*x16838*x16843))+((r00*sj0*x16842)));
evalcond[6]=((0.2413)+(((-0.026255)*x16846))+pz+(((0.026255)*x16844)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16848=(cj0*cj6);
IkReal x16849=(sj0*sj6);
IkReal x16850=((1.0)*r11);
IkReal x16851=(cj6*sj0);
IkReal x16852=(cj0*sj6);
if( IKabs(((((-1.0)*r00*x16851))+(((-1.0)*x16850*x16852))+((r10*x16848))+((r01*x16849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x16852))+((r00*x16848))+((r10*x16851))+(((-1.0)*x16849*x16850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x16851))+(((-1.0)*x16850*x16852))+((r10*x16848))+((r01*x16849))))+IKsqr(((((-1.0)*r01*x16852))+((r00*x16848))+((r10*x16851))+(((-1.0)*x16849*x16850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x16851))+(((-1.0)*x16850*x16852))+((r10*x16848))+((r01*x16849))), ((((-1.0)*r01*x16852))+((r00*x16848))+((r10*x16851))+(((-1.0)*x16849*x16850))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16853=IKsin(j4);
IkReal x16854=IKcos(j4);
IkReal x16855=(r11*sj6);
IkReal x16856=((0.026255)*cj0);
IkReal x16857=(r01*sj6);
IkReal x16858=(sj0*sj5);
IkReal x16859=(cj6*r11);
IkReal x16860=(r10*sj6);
IkReal x16861=(cj5*r12);
IkReal x16862=(cj6*sj0);
IkReal x16863=((1.0)*sj0);
IkReal x16864=(cj5*r02);
IkReal x16865=((1.0)*r10);
IkReal x16866=(cj0*sj5);
IkReal x16867=(r00*sj6);
IkReal x16868=((0.026255)*sj0);
IkReal x16869=(cj0*cj6);
IkReal x16870=((1.0)*cj0);
IkReal x16871=(cj6*r01);
evalcond[0]=(x16854+((sj0*x16855))+(((-1.0)*x16862*x16865))+((cj0*x16857))+(((-1.0)*r00*x16869)));
evalcond[1]=(x16853+(((-1.0)*x16857*x16863))+(((-1.0)*x16865*x16869))+((cj0*x16855))+((r00*x16862)));
evalcond[2]=(x16853+((x16858*x16859))+((cj0*x16864))+((x16858*x16860))+((x16866*x16867))+((sj0*x16861))+((x16866*x16871)));
evalcond[3]=(((cj0*x16861))+(((-1.0)*x16858*x16867))+((x16860*x16866))+((x16859*x16866))+(((-1.0)*x16863*x16864))+(((-1.0)*x16854))+(((-1.0)*x16858*x16871)));
evalcond[4]=((0.09736)+(((0.02626)*x16853))+(((-1.0)*x16857*x16868))+(((0.026255)*r00*x16862))+((x16855*x16856))+(((-1.0)*py*x16870))+((px*sj0))+(((-1.0)*cj6*r10*x16856))+(((0.0718)*x16854)));
evalcond[5]=((-0.0001)+(((0.02626)*x16854))+(((-1.0)*px*x16870))+((x16856*x16857))+(((-0.0718)*x16853))+(((-0.026255)*r10*x16862))+((x16855*x16868))+(((-1.0)*py*x16863))+(((-1.0)*cj6*r00*x16856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16872=(cj5*cj6);
IkReal x16873=(r11*sj0);
IkReal x16874=(cj0*sj6);
IkReal x16875=(cj6*sj5);
IkReal x16876=((1.0)*cj0);
IkReal x16877=(r10*sj0);
IkReal x16878=((1.0)*cj5);
IkReal x16879=(cj0*r02);
IkReal x16880=((1.0)*sj5);
IkReal x16881=(cj5*sj6);
IkReal x16882=(cj6*r00);
IkReal x16883=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16880))+((r20*x16881))+((r21*x16872)));
evalcond[2]=((((-1.0)*x16876*x16882))+(((-1.0)*cj6*x16877))+((sj6*x16873))+((r01*x16874)));
evalcond[3]=((-1.0)+(((-1.0)*sj6*x16877*x16878))+((sj5*x16879))+(((-1.0)*x16872*x16873))+((sj5*x16883))+(((-1.0)*r00*x16874*x16878))+(((-1.0)*r01*x16872*x16876)));
evalcond[4]=(((sj5*sj6*x16877))+((cj5*x16883))+((cj5*x16879))+((cj0*r01*x16875))+((x16873*x16875))+((r00*sj5*x16874)));
evalcond[5]=(((r00*sj0*x16881))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x16880))+((r01*sj0*x16872))+(((-1.0)*r11*x16872*x16876))+(((-1.0)*r10*x16874*x16878)));
evalcond[6]=((-0.1168)+(((-1.0)*px*x16876))+(((-0.026255)*cj6*x16877))+(((-0.026255)*cj0*x16882))+(((0.026255)*sj6*x16873))+(((-1.0)*py*sj0))+(((0.026255)*r01*x16874)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16884=IKcos(j4);
IkReal x16885=IKsin(j4);
IkReal x16886=((1.0)*cj5);
IkReal x16887=(cj0*r10);
IkReal x16888=(sj5*sj6);
IkReal x16889=((1.0)*cj6);
IkReal x16890=((0.026255)*cj6);
IkReal x16891=(r21*sj6);
IkReal x16892=(cj0*r11*sj6);
IkReal x16893=(cj6*r00*sj0);
IkReal x16894=(r01*sj0*sj6);
evalcond[0]=(x16884+((cj6*r20))+(((-1.0)*x16891)));
evalcond[1]=(x16885+(((-1.0)*r22*x16886))+(((-1.0)*r20*x16888))+(((-1.0)*r21*sj5*x16889)));
evalcond[2]=((0.1264)+pz+(((-0.0718)*x16885))+(((0.02626)*x16884))+((r20*x16890))+(((-0.026255)*x16891)));
evalcond[3]=(x16885+x16893+x16892+(((-1.0)*x16887*x16889))+(((-1.0)*x16894)));
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r01*sj0*sj5*x16889))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x16886))+(((-1.0)*x16884))+((x16887*x16888))+(((-1.0)*r00*sj0*x16888)));
evalcond[5]=((0.09736)+(((0.0718)*x16884))+(((-1.0)*x16887*x16890))+(((0.02626)*x16885))+((px*sj0))+(((0.026255)*x16892))+(((-0.026255)*x16894))+((r00*sj0*x16890))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16895=(cj5*cj6);
IkReal x16896=(r11*sj0);
IkReal x16897=(cj0*sj6);
IkReal x16898=(cj6*sj5);
IkReal x16899=((1.0)*cj0);
IkReal x16900=(r10*sj0);
IkReal x16901=((1.0)*cj5);
IkReal x16902=(cj0*r02);
IkReal x16903=((1.0)*sj5);
IkReal x16904=(cj5*sj6);
IkReal x16905=(cj6*r00);
IkReal x16906=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*x16903))+((r21*x16895))+((r20*x16904)));
evalcond[2]=((((-1.0)*cj6*x16900))+(((-1.0)*x16899*x16905))+((sj6*x16896))+((r01*x16897)));
evalcond[3]=((1.0)+(((-1.0)*x16895*x16896))+(((-1.0)*r00*x16897*x16901))+(((-1.0)*r01*x16895*x16899))+((sj5*x16902))+((sj5*x16906))+(((-1.0)*sj6*x16900*x16901)));
evalcond[4]=(((r00*sj5*x16897))+((x16896*x16898))+((sj5*sj6*x16900))+((cj5*x16902))+((cj5*x16906))+((cj0*r01*x16898)));
evalcond[5]=(((r01*sj0*x16895))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x16903))+(((-1.0)*r10*x16897*x16901))+((r00*sj0*x16904))+(((-1.0)*r11*x16895*x16899)));
evalcond[6]=((0.1148)+(((-0.026255)*cj0*x16905))+(((-0.026255)*cj6*x16900))+(((0.026255)*r01*x16897))+(((-1.0)*py*sj0))+(((-1.0)*px*x16899))+(((0.026255)*sj6*x16896)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16907=(cj6*r20);
IkReal x16908=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16907))+(((-6.96378830083565e-5)*x16908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x16908))+x16907)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16907))+(((-6.96378830083565e-5)*x16908))))+IKsqr(((((-1.0)*x16908))+x16907))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((6.96378830083565e-5)*x16907))+(((-6.96378830083565e-5)*x16908))), ((((-1.0)*x16908))+x16907));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16909=IKsin(j4);
IkReal x16910=IKcos(j4);
IkReal x16911=((1.0)*cj5);
IkReal x16912=(cj0*r10);
IkReal x16913=(sj5*sj6);
IkReal x16914=((1.0)*cj6);
IkReal x16915=((0.026255)*cj6);
IkReal x16916=(r21*sj6);
IkReal x16917=((1.0)*x16910);
IkReal x16918=(cj0*r11*sj6);
IkReal x16919=(cj6*r00*sj0);
IkReal x16920=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x16917))+(((-1.0)*x16916))+((cj6*r20)));
evalcond[1]=((((-1.0)*r21*sj5*x16914))+(((-1.0)*x16909))+(((-1.0)*r22*x16911))+(((-1.0)*r20*x16913)));
evalcond[2]=((0.1246)+pz+(((0.0718)*x16909))+(((-0.02626)*x16910))+(((-0.026255)*x16916))+((r20*x16915)));
evalcond[3]=((((-1.0)*x16920))+(((-1.0)*x16912*x16914))+x16909+x16918+x16919);
evalcond[4]=((((-1.0)*r01*sj0*sj5*x16914))+(((-1.0)*x16917))+(((-1.0)*r00*sj0*x16913))+((x16912*x16913))+((cj0*cj5*r12))+((cj0*cj6*r11*sj5))+(((-1.0)*r02*sj0*x16911)));
evalcond[5]=((0.09736)+(((-0.026255)*x16920))+((r00*sj0*x16915))+(((-1.0)*x16912*x16915))+(((0.02626)*x16909))+(((0.0718)*x16910))+((px*sj0))+(((0.026255)*x16918))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16921=((1.0)*sj6);
CheckValue<IkReal> x16922=IKPowWithIntegerCheck(sj2,-1);
if(!x16922.valid){
continue;
}
CheckValue<IkReal> x16923=IKPowWithIntegerCheck(cj2,-1);
if(!x16923.valid){
continue;
}
if( IKabs(((x16922.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16923.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16921))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16921)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16922.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x16923.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16921))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16921))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16922.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x16923.value)*((((cj6*r10*sj0))+(((-1.0)*r11*sj0*x16921))+((cj0*cj6*r00))+(((-1.0)*cj0*r01*x16921))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16924=IKsin(j4);
IkReal x16925=IKcos(j4);
IkReal x16926=(r11*sj0);
IkReal x16927=(cj0*sj6);
IkReal x16928=((0.026255)*r01);
IkReal x16929=(cj0*cj5);
IkReal x16930=(cj6*sj5);
IkReal x16931=(r10*sj0);
IkReal x16932=(sj5*sj6);
IkReal x16933=((1.0)*cj5);
IkReal x16934=((1.0)*cj6);
IkReal x16935=((1.0)*sj0);
IkReal x16936=((0.026255)*sj6);
IkReal x16937=(cj0*r10);
IkReal x16938=((0.026255)*cj6);
IkReal x16939=((1.0)*r21);
IkReal x16940=((1.0)*cj0);
IkReal x16941=(cj0*r00);
IkReal x16942=(cj2*x16924);
IkReal x16943=(cj6*r00*sj0);
IkReal x16944=(cj2*x16925);
IkReal x16945=(sj2*x16924);
IkReal x16946=(sj2*x16925);
evalcond[0]=((((-1.0)*sj6*x16939))+((cj6*r20))+x16946);
evalcond[1]=((((-1.0)*r22*x16933))+(((-1.0)*r20*x16932))+(((-1.0)*x16930*x16939))+x16945);
evalcond[2]=((((-1.0)*x16934*x16937))+(((-1.0)*r01*sj6*x16935))+((r11*x16927))+x16924+x16943);
evalcond[3]=((((-1.0)*x16934*x16941))+((r01*x16927))+((sj6*x16926))+(((-1.0)*x16931*x16934))+x16944);
evalcond[4]=((0.1255)+(((0.1158)*cj2))+pz+(((-1.0)*r21*x16936))+(((0.0009)*sj2))+(((0.02626)*x16946))+(((-0.0718)*x16945))+((r20*x16938)));
evalcond[5]=(((cj5*r12*sj0))+((x16926*x16930))+((r00*sj5*x16927))+((cj0*r01*x16930))+((r02*x16929))+((x16931*x16932))+x16942);
evalcond[6]=((((-1.0)*x16925))+(((-1.0)*r00*x16932*x16935))+((r12*x16929))+(((-1.0)*r02*sj0*x16933))+(((-1.0)*r01*x16930*x16935))+((r10*sj5*x16927))+((cj0*r11*x16930)));
evalcond[7]=((0.09736)+(((0.026255)*r11*x16927))+(((-1.0)*py*x16940))+(((0.02626)*x16924))+(((-1.0)*sj0*sj6*x16928))+(((-1.0)*x16937*x16938))+((px*sj0))+((r00*sj0*x16938))+(((0.0718)*x16925)));
evalcond[8]=((-0.001)+(((-1.0)*py*x16935))+(((-1.0)*x16938*x16941))+(((-0.1158)*sj2))+((x16926*x16936))+(((0.0009)*cj2))+(((-1.0)*px*x16940))+(((-1.0)*x16931*x16938))+((x16927*x16928))+(((0.02626)*x16944))+(((-0.0718)*x16942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16947=((1.0)*cj6);
CheckValue<IkReal> x16948=IKPowWithIntegerCheck(sj2,-1);
if(!x16948.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0*x16947))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16948.value)*((((r21*sj6))+(((-1.0)*r20*x16947)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0*x16947))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))))+IKsqr(((x16948.value)*((((r21*sj6))+(((-1.0)*r20*x16947))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0*x16947))+((r01*sj0*sj6))+((cj0*cj6*r10))+(((-1.0)*cj0*r11*sj6))), ((x16948.value)*((((r21*sj6))+(((-1.0)*r20*x16947))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16949=IKsin(j4);
IkReal x16950=IKcos(j4);
IkReal x16951=(r11*sj0);
IkReal x16952=(cj0*sj6);
IkReal x16953=((0.026255)*r01);
IkReal x16954=(cj0*cj5);
IkReal x16955=(cj6*sj5);
IkReal x16956=(r10*sj0);
IkReal x16957=(sj5*sj6);
IkReal x16958=((1.0)*cj5);
IkReal x16959=((1.0)*cj6);
IkReal x16960=((1.0)*sj0);
IkReal x16961=((0.026255)*sj6);
IkReal x16962=(cj0*r10);
IkReal x16963=((0.026255)*cj6);
IkReal x16964=((1.0)*r21);
IkReal x16965=((1.0)*cj0);
IkReal x16966=(cj0*r00);
IkReal x16967=(cj2*x16949);
IkReal x16968=(cj6*r00*sj0);
IkReal x16969=(cj2*x16950);
IkReal x16970=(sj2*x16949);
IkReal x16971=(sj2*x16950);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x16964))+x16971);
evalcond[1]=((((-1.0)*r20*x16957))+(((-1.0)*r22*x16958))+(((-1.0)*x16955*x16964))+x16970);
evalcond[2]=((((-1.0)*x16959*x16962))+(((-1.0)*r01*sj6*x16960))+((r11*x16952))+x16968+x16949);
evalcond[3]=((((-1.0)*x16959*x16966))+((r01*x16952))+(((-1.0)*x16956*x16959))+((sj6*x16951))+x16969);
evalcond[4]=((0.1255)+(((-0.0718)*x16970))+(((0.1158)*cj2))+((r20*x16963))+(((-1.0)*r21*x16961))+pz+(((0.0009)*sj2))+(((0.02626)*x16971)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x16955))+((r02*x16954))+((r00*sj5*x16952))+((x16956*x16957))+x16967+((x16951*x16955)));
evalcond[6]=(((r12*x16954))+((cj0*r11*x16955))+(((-1.0)*r01*x16955*x16960))+(((-1.0)*r00*x16957*x16960))+(((-1.0)*x16950))+((r10*sj5*x16952))+(((-1.0)*r02*sj0*x16958)));
evalcond[7]=((0.09736)+(((-1.0)*x16962*x16963))+(((-1.0)*py*x16965))+((r00*sj0*x16963))+(((-1.0)*sj0*sj6*x16953))+(((0.0718)*x16950))+((px*sj0))+(((0.026255)*r11*x16952))+(((0.02626)*x16949)));
evalcond[8]=((-0.001)+(((0.02626)*x16969))+(((-0.0718)*x16967))+(((-0.1158)*sj2))+(((-1.0)*x16963*x16966))+(((-1.0)*py*x16960))+(((0.0009)*cj2))+((x16952*x16953))+(((-1.0)*px*x16965))+((x16951*x16961))+(((-1.0)*x16956*x16963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16972=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x16972.valid){
continue;
}
CheckValue<IkReal> x16973 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x16973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16972.value)))+(x16973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16974=IKsin(j4);
IkReal x16975=IKcos(j4);
IkReal x16976=(r11*sj0);
IkReal x16977=(cj0*sj6);
IkReal x16978=((0.026255)*r01);
IkReal x16979=(cj0*cj5);
IkReal x16980=(cj6*sj5);
IkReal x16981=(r10*sj0);
IkReal x16982=(sj5*sj6);
IkReal x16983=((1.0)*cj5);
IkReal x16984=((1.0)*cj6);
IkReal x16985=((1.0)*sj0);
IkReal x16986=((0.026255)*sj6);
IkReal x16987=(cj0*r10);
IkReal x16988=((0.026255)*cj6);
IkReal x16989=((1.0)*r21);
IkReal x16990=((1.0)*cj0);
IkReal x16991=(cj0*r00);
IkReal x16992=(cj2*x16974);
IkReal x16993=(cj6*r00*sj0);
IkReal x16994=(cj2*x16975);
IkReal x16995=(sj2*x16974);
IkReal x16996=(sj2*x16975);
evalcond[0]=((((-1.0)*sj6*x16989))+((cj6*r20))+x16996);
evalcond[1]=((((-1.0)*r22*x16983))+(((-1.0)*r20*x16982))+(((-1.0)*x16980*x16989))+x16995);
evalcond[2]=(((r11*x16977))+(((-1.0)*r01*sj6*x16985))+(((-1.0)*x16984*x16987))+x16993+x16974);
evalcond[3]=(((sj6*x16976))+(((-1.0)*x16981*x16984))+((r01*x16977))+(((-1.0)*x16984*x16991))+x16994);
evalcond[4]=((0.1255)+(((-0.0718)*x16995))+(((0.1158)*cj2))+(((0.02626)*x16996))+pz+(((-1.0)*r21*x16986))+(((0.0009)*sj2))+((r20*x16988)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x16977))+((r02*x16979))+((cj0*r01*x16980))+((x16981*x16982))+((x16976*x16980))+x16992);
evalcond[6]=(((r10*sj5*x16977))+(((-1.0)*r00*x16982*x16985))+(((-1.0)*r02*sj0*x16983))+(((-1.0)*x16975))+((cj0*r11*x16980))+((r12*x16979))+(((-1.0)*r01*x16980*x16985)));
evalcond[7]=((0.09736)+(((-1.0)*sj0*sj6*x16978))+(((0.026255)*r11*x16977))+(((-1.0)*x16987*x16988))+(((0.0718)*x16975))+((px*sj0))+((r00*sj0*x16988))+(((-1.0)*py*x16990))+(((0.02626)*x16974)));
evalcond[8]=((-0.001)+(((-1.0)*py*x16985))+(((-0.0718)*x16992))+(((-1.0)*x16988*x16991))+(((-0.1158)*sj2))+(((-1.0)*x16981*x16988))+(((-1.0)*px*x16990))+(((0.0009)*cj2))+(((0.02626)*x16994))+((x16977*x16978))+((x16976*x16986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16997=(cj0*sj5);
IkReal x16998=(cj5*cj6);
IkReal x16999=((1.0)*sj5);
IkReal x17000=((1.0)*cj0);
IkReal x17001=((1.0)*sj0);
IkReal x17002=(cj5*sj6);
IkReal x17003=(r10*x17002);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((((-1.0)*r22*x16999))+((r21*x16998))+((r20*x17002))+(((-1.0)*cj2)));
evalcond[2]=(sj2+((r12*sj0*sj5))+(((-1.0)*r01*x16998*x17000))+(((-1.0)*r11*x16998*x17001))+(((-1.0)*r00*x17000*x17002))+((r02*x16997))+(((-1.0)*x17001*x17003)));
evalcond[3]=((((-1.0)*x17000*x17003))+((r01*sj0*x16998))+((r12*x16997))+((r00*sj0*x17002))+(((-1.0)*r02*sj0*x16999))+(((-1.0)*r11*x16998*x17000)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
j4eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4eval[0]=sj2;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17004=(cj5*cj6);
IkReal x17005=((1.0)*sj0);
IkReal x17006=((1.0)*r22);
IkReal x17007=(cj0*sj5);
IkReal x17008=(cj5*sj6);
IkReal x17009=((1.0)*cj0);
IkReal x17010=(cj6*r20);
IkReal x17011=((1.0)*sj5);
IkReal x17012=(r21*sj6);
IkReal x17013=(x17008*x17009);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj5*x17006))+((r20*x17008))+((r21*x17004)));
evalcond[2]=((((-1.0)*x17012))+x17010);
evalcond[3]=((((-1.0)*cj6*r21*x17011))+(((-1.0)*r20*sj6*x17011))+(((-1.0)*cj5*x17006)));
evalcond[4]=((((-1.0)*r01*x17004*x17009))+((r12*sj0*sj5))+(((-1.0)*r10*x17005*x17008))+(((-1.0)*r00*x17013))+(((-1.0)*r11*x17004*x17005))+((r02*x17007)));
evalcond[5]=((((-1.0)*r10*x17013))+(((-1.0)*r02*sj5*x17005))+((r00*sj0*x17008))+((r12*x17007))+((r01*sj0*x17004))+(((-1.0)*r11*x17004*x17009)));
evalcond[6]=((0.2413)+(((-0.026255)*x17012))+pz+(((0.026255)*x17010)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17014=(cj0*cj6);
IkReal x17015=(cj6*sj0);
IkReal x17016=(cj0*sj6);
IkReal x17017=((1.0)*sj0*sj6);
if( IKabs((((r11*x17016))+(((-1.0)*r10*x17014))+((r00*x17015))+(((-1.0)*r01*x17017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x17015))+(((-1.0)*r01*x17016))+((r00*x17014))+(((-1.0)*r11*x17017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x17016))+(((-1.0)*r10*x17014))+((r00*x17015))+(((-1.0)*r01*x17017))))+IKsqr((((r10*x17015))+(((-1.0)*r01*x17016))+((r00*x17014))+(((-1.0)*r11*x17017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x17016))+(((-1.0)*r10*x17014))+((r00*x17015))+(((-1.0)*r01*x17017))), (((r10*x17015))+(((-1.0)*r01*x17016))+((r00*x17014))+(((-1.0)*r11*x17017))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x17018=IKsin(j4);
IkReal x17019=IKcos(j4);
IkReal x17020=(r11*sj6);
IkReal x17021=((0.026255)*cj0);
IkReal x17022=(r01*sj6);
IkReal x17023=(sj0*sj5);
IkReal x17024=(cj6*r11);
IkReal x17025=(r10*sj6);
IkReal x17026=(cj5*r12);
IkReal x17027=(cj6*sj0);
IkReal x17028=((1.0)*sj0);
IkReal x17029=(cj5*r02);
IkReal x17030=((1.0)*r10);
IkReal x17031=(cj0*sj5);
IkReal x17032=(r00*sj6);
IkReal x17033=((0.026255)*sj0);
IkReal x17034=(cj0*cj6);
IkReal x17035=((1.0)*cj0);
IkReal x17036=(cj6*r01);
evalcond[0]=(((sj0*x17020))+((cj0*x17022))+(((-1.0)*x17027*x17030))+x17019+(((-1.0)*r00*x17034)));
evalcond[1]=((((-1.0)*x17018))+((cj0*x17020))+(((-1.0)*x17030*x17034))+(((-1.0)*x17022*x17028))+((r00*x17027)));
evalcond[2]=(((sj0*x17026))+((cj0*x17029))+((x17031*x17032))+((x17031*x17036))+x17018+((x17023*x17025))+((x17023*x17024)));
evalcond[3]=(((x17024*x17031))+((x17025*x17031))+((cj0*x17026))+(((-1.0)*x17023*x17032))+(((-1.0)*x17023*x17036))+x17019+(((-1.0)*x17028*x17029)));
evalcond[4]=((-0.09756)+(((0.026255)*r00*x17027))+(((-1.0)*cj6*r10*x17021))+(((-0.02626)*x17018))+(((-1.0)*py*x17035))+(((-0.0718)*x17019))+((px*sj0))+((x17020*x17021))+(((-1.0)*x17022*x17033)));
evalcond[5]=((-0.0001)+(((-1.0)*cj6*r00*x17021))+(((-1.0)*px*x17035))+(((0.02626)*x17019))+(((-0.026255)*r10*x17027))+(((-1.0)*py*x17028))+(((-0.0718)*x17018))+((x17021*x17022))+((x17020*x17033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17037=(cj5*cj6);
IkReal x17038=(r11*sj0);
IkReal x17039=(cj0*sj6);
IkReal x17040=(cj6*sj5);
IkReal x17041=((1.0)*cj0);
IkReal x17042=(r10*sj0);
IkReal x17043=((1.0)*cj5);
IkReal x17044=(cj0*r02);
IkReal x17045=((1.0)*sj5);
IkReal x17046=(cj5*sj6);
IkReal x17047=(cj6*r00);
IkReal x17048=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x17046))+((r21*x17037))+(((-1.0)*r22*x17045)));
evalcond[2]=((((-1.0)*cj6*x17042))+((sj6*x17038))+(((-1.0)*x17041*x17047))+((r01*x17039)));
evalcond[3]=((1.0)+(((-1.0)*x17037*x17038))+(((-1.0)*r01*x17037*x17041))+(((-1.0)*r00*x17039*x17043))+(((-1.0)*sj6*x17042*x17043))+((sj5*x17044))+((sj5*x17048)));
evalcond[4]=(((sj5*sj6*x17042))+((cj0*r01*x17040))+((r00*sj5*x17039))+((x17038*x17040))+((cj5*x17048))+((cj5*x17044)));
evalcond[5]=(((r00*sj0*x17046))+(((-1.0)*r10*x17039*x17043))+(((-1.0)*r11*x17037*x17041))+((cj0*r12*sj5))+((r01*sj0*x17037))+(((-1.0)*r02*sj0*x17045)));
evalcond[6]=((-0.1168)+(((0.026255)*r01*x17039))+(((-0.026255)*cj0*x17047))+(((0.026255)*sj6*x17038))+(((-1.0)*px*x17041))+(((-0.026255)*cj6*x17042))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))+IKsqr(((((-1.0)*cj6*r20))+((r21*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))), ((((-1.0)*cj6*r20))+((r21*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x17049=IKcos(j4);
IkReal x17050=IKsin(j4);
IkReal x17051=((1.0)*cj5);
IkReal x17052=(cj0*r10);
IkReal x17053=(sj5*sj6);
IkReal x17054=((1.0)*cj6);
IkReal x17055=((0.026255)*cj6);
IkReal x17056=(r21*sj6);
IkReal x17057=(cj0*r11*sj6);
IkReal x17058=(cj6*r00*sj0);
IkReal x17059=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x17056))+((cj6*r20))+x17049);
evalcond[1]=((((-1.0)*r21*sj5*x17054))+(((-1.0)*r20*x17053))+(((-1.0)*r22*x17051))+x17050);
evalcond[2]=((0.1264)+(((0.02626)*x17049))+((r20*x17055))+(((-0.0718)*x17050))+pz+(((-0.026255)*x17056)));
evalcond[3]=((((-1.0)*x17052*x17054))+(((-1.0)*x17050))+(((-1.0)*x17059))+x17057+x17058);
evalcond[4]=(((x17052*x17053))+((cj0*cj5*r12))+(((-1.0)*r00*sj0*x17053))+((cj0*cj6*r11*sj5))+(((-1.0)*r01*sj0*sj5*x17054))+(((-1.0)*r02*sj0*x17051))+x17049);
evalcond[5]=((-0.09756)+(((0.026255)*x17057))+(((-0.0718)*x17049))+(((-1.0)*x17052*x17055))+(((-0.02626)*x17050))+(((-0.026255)*x17059))+((px*sj0))+((r00*sj0*x17055))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17060=(cj5*cj6);
IkReal x17061=(r11*sj0);
IkReal x17062=(cj0*sj6);
IkReal x17063=(cj6*sj5);
IkReal x17064=((1.0)*cj0);
IkReal x17065=(r10*sj0);
IkReal x17066=((1.0)*cj5);
IkReal x17067=(cj0*r02);
IkReal x17068=((1.0)*sj5);
IkReal x17069=(cj5*sj6);
IkReal x17070=(cj6*r00);
IkReal x17071=(r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x17069))+(((-1.0)*r22*x17068))+((r21*x17060)));
evalcond[2]=(((r01*x17062))+(((-1.0)*cj6*x17065))+((sj6*x17061))+(((-1.0)*x17064*x17070)));
evalcond[3]=((-1.0)+(((-1.0)*x17060*x17061))+(((-1.0)*r00*x17062*x17066))+(((-1.0)*sj6*x17065*x17066))+(((-1.0)*r01*x17060*x17064))+((sj5*x17067))+((sj5*x17071)));
evalcond[4]=(((sj5*sj6*x17065))+((cj0*r01*x17063))+((x17061*x17063))+((cj5*x17071))+((r00*sj5*x17062))+((cj5*x17067)));
evalcond[5]=((((-1.0)*r10*x17062*x17066))+((cj0*r12*sj5))+(((-1.0)*r02*sj0*x17068))+((r01*sj0*x17060))+(((-1.0)*r11*x17060*x17064))+((r00*sj0*x17069)));
evalcond[6]=((0.1148)+(((0.026255)*sj6*x17061))+(((-0.026255)*cj0*x17070))+(((-1.0)*px*x17064))+(((-1.0)*py*sj0))+(((-0.026255)*cj6*x17065))+(((0.026255)*r01*x17062)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17072=(cj6*r20);
IkReal x17073=(r21*sj6);
if( IKabs(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x17073))+(((6.96378830083565e-5)*x17072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17073))+x17072)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x17073))+(((6.96378830083565e-5)*x17072))))+IKsqr(((((-1.0)*x17073))+x17072))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.73537604456825)+(((-13.9275766016713)*pz))+(((-6.96378830083565e-5)*x17073))+(((6.96378830083565e-5)*x17072))), ((((-1.0)*x17073))+x17072));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x17074=IKsin(j4);
IkReal x17075=IKcos(j4);
IkReal x17076=((1.0)*cj5);
IkReal x17077=(cj0*r10);
IkReal x17078=(sj5*sj6);
IkReal x17079=((1.0)*cj6);
IkReal x17080=((0.026255)*cj6);
IkReal x17081=(r21*sj6);
IkReal x17082=((1.0)*x17074);
IkReal x17083=(cj0*r11*sj6);
IkReal x17084=(cj6*r00*sj0);
IkReal x17085=(r01*sj0*sj6);
evalcond[0]=((((-1.0)*x17081))+(((-1.0)*x17075))+((cj6*r20)));
evalcond[1]=((((-1.0)*r20*x17078))+(((-1.0)*r21*sj5*x17079))+(((-1.0)*r22*x17076))+(((-1.0)*x17082)));
evalcond[2]=((0.1246)+pz+((r20*x17080))+(((-0.02626)*x17075))+(((-0.026255)*x17081))+(((0.0718)*x17074)));
evalcond[3]=((((-1.0)*x17077*x17079))+(((-1.0)*x17085))+(((-1.0)*x17082))+x17083+x17084);
evalcond[4]=(((cj0*cj5*r12))+(((-1.0)*r00*sj0*x17078))+(((-1.0)*r01*sj0*sj5*x17079))+(((-1.0)*r02*sj0*x17076))+((cj0*cj6*r11*sj5))+((x17077*x17078))+x17075);
evalcond[5]=((-0.09756)+(((-0.0718)*x17075))+((r00*sj0*x17080))+(((-1.0)*x17077*x17080))+(((0.026255)*x17083))+(((-0.02626)*x17074))+(((-0.026255)*x17085))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17086=((1.0)*sj6);
CheckValue<IkReal> x17087=IKPowWithIntegerCheck(sj2,-1);
if(!x17087.valid){
continue;
}
CheckValue<IkReal> x17088=IKPowWithIntegerCheck(cj2,-1);
if(!x17088.valid){
continue;
}
if( IKabs(((x17087.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17088.value)*(((((-1.0)*r11*sj0*x17086))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x17086))+((cj0*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17087.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))))+IKsqr(((x17088.value)*(((((-1.0)*r11*sj0*x17086))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x17086))+((cj0*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x17087.value)*((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5))))), ((x17088.value)*(((((-1.0)*r11*sj0*x17086))+((cj6*r10*sj0))+(((-1.0)*cj0*r01*x17086))+((cj0*cj6*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17089=IKcos(j4);
IkReal x17090=IKsin(j4);
IkReal x17091=(r11*sj0);
IkReal x17092=(cj0*sj6);
IkReal x17093=((0.026255)*r01);
IkReal x17094=(cj0*cj5);
IkReal x17095=(cj6*sj5);
IkReal x17096=(r10*sj0);
IkReal x17097=(sj5*sj6);
IkReal x17098=((1.0)*cj5);
IkReal x17099=((1.0)*cj6);
IkReal x17100=((1.0)*sj0);
IkReal x17101=((0.026255)*sj6);
IkReal x17102=(cj0*r10);
IkReal x17103=((0.026255)*cj6);
IkReal x17104=((1.0)*r21);
IkReal x17105=((1.0)*cj0);
IkReal x17106=(cj0*r00);
IkReal x17107=(cj2*x17090);
IkReal x17108=(cj6*r00*sj0);
IkReal x17109=(cj2*x17089);
IkReal x17110=(sj2*x17090);
IkReal x17111=(sj2*x17089);
evalcond[0]=(((cj6*r20))+(((-1.0)*sj6*x17104))+x17111);
evalcond[1]=((((-1.0)*x17095*x17104))+(((-1.0)*r22*x17098))+(((-1.0)*r20*x17097))+x17110);
evalcond[2]=(((sj6*x17091))+(((-1.0)*x17099*x17106))+(((-1.0)*x17096*x17099))+((r01*x17092))+x17109);
evalcond[3]=((((-1.0)*x17099*x17102))+((r11*x17092))+(((-1.0)*x17090))+(((-1.0)*r01*sj6*x17100))+x17108);
evalcond[4]=((0.1255)+(((0.1158)*cj2))+((r20*x17103))+pz+(((-1.0)*r21*x17101))+(((-0.0718)*x17110))+(((0.0009)*sj2))+(((0.02626)*x17111)));
evalcond[5]=(((cj5*r12*sj0))+((cj0*r01*x17095))+((x17091*x17095))+((r00*sj5*x17092))+x17107+((r02*x17094))+((x17096*x17097)));
evalcond[6]=((((-1.0)*r00*x17097*x17100))+(((-1.0)*r01*x17095*x17100))+((cj0*r11*x17095))+((r12*x17094))+(((-1.0)*r02*sj0*x17098))+x17089+((r10*sj5*x17092)));
evalcond[7]=((-0.09756)+(((-0.0718)*x17089))+(((-1.0)*x17102*x17103))+(((-1.0)*sj0*sj6*x17093))+((r00*sj0*x17103))+((px*sj0))+(((-0.02626)*x17090))+(((-1.0)*py*x17105))+(((0.026255)*r11*x17092)));
evalcond[8]=((-0.001)+(((-0.1158)*sj2))+(((-1.0)*x17096*x17103))+(((-1.0)*x17103*x17106))+(((0.0009)*cj2))+((x17092*x17093))+(((-0.0718)*x17107))+((x17091*x17101))+(((-1.0)*py*x17100))+(((0.02626)*x17109))+(((-1.0)*px*x17105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17112=((1.0)*cj6);
CheckValue<IkReal> x17113=IKPowWithIntegerCheck(sj2,-1);
if(!x17113.valid){
continue;
}
if( IKabs((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x17112))+(((-1.0)*r01*sj0*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17113.value)*((((r21*sj6))+(((-1.0)*r20*x17112)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x17112))+(((-1.0)*r01*sj0*sj6))))+IKsqr(((x17113.value)*((((r21*sj6))+(((-1.0)*r20*x17112))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r00*sj0))+((cj0*r11*sj6))+(((-1.0)*cj0*r10*x17112))+(((-1.0)*r01*sj0*sj6))), ((x17113.value)*((((r21*sj6))+(((-1.0)*r20*x17112))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17114=IKcos(j4);
IkReal x17115=IKsin(j4);
IkReal x17116=(r11*sj0);
IkReal x17117=(cj0*sj6);
IkReal x17118=((0.026255)*r01);
IkReal x17119=(cj0*cj5);
IkReal x17120=(cj6*sj5);
IkReal x17121=(r10*sj0);
IkReal x17122=(sj5*sj6);
IkReal x17123=((1.0)*cj5);
IkReal x17124=((1.0)*cj6);
IkReal x17125=((1.0)*sj0);
IkReal x17126=((0.026255)*sj6);
IkReal x17127=(cj0*r10);
IkReal x17128=((0.026255)*cj6);
IkReal x17129=((1.0)*r21);
IkReal x17130=((1.0)*cj0);
IkReal x17131=(cj0*r00);
IkReal x17132=(cj2*x17115);
IkReal x17133=(cj6*r00*sj0);
IkReal x17134=(cj2*x17114);
IkReal x17135=(sj2*x17115);
IkReal x17136=(sj2*x17114);
evalcond[0]=(((cj6*r20))+x17136+(((-1.0)*sj6*x17129)));
evalcond[1]=((((-1.0)*r20*x17122))+(((-1.0)*x17120*x17129))+x17135+(((-1.0)*r22*x17123)));
evalcond[2]=(((sj6*x17116))+(((-1.0)*x17124*x17131))+((r01*x17117))+x17134+(((-1.0)*x17121*x17124)));
evalcond[3]=(((r11*x17117))+(((-1.0)*x17115))+(((-1.0)*r01*sj6*x17125))+x17133+(((-1.0)*x17124*x17127)));
evalcond[4]=((0.1255)+(((0.1158)*cj2))+((r20*x17128))+(((-1.0)*r21*x17126))+pz+(((0.02626)*x17136))+(((0.0009)*sj2))+(((-0.0718)*x17135)));
evalcond[5]=(((cj5*r12*sj0))+((x17116*x17120))+((x17121*x17122))+((r02*x17119))+((cj0*r01*x17120))+((r00*sj5*x17117))+x17132);
evalcond[6]=(((cj0*r11*x17120))+(((-1.0)*r01*x17120*x17125))+((r10*sj5*x17117))+((r12*x17119))+x17114+(((-1.0)*r02*sj0*x17123))+(((-1.0)*r00*x17122*x17125)));
evalcond[7]=((-0.09756)+(((0.026255)*r11*x17117))+(((-1.0)*x17127*x17128))+(((-0.02626)*x17115))+((r00*sj0*x17128))+(((-1.0)*sj0*sj6*x17118))+((px*sj0))+(((-0.0718)*x17114))+(((-1.0)*py*x17130)));
evalcond[8]=((-0.001)+((x17117*x17118))+(((-0.1158)*sj2))+(((-1.0)*px*x17130))+((x17116*x17126))+(((-1.0)*x17128*x17131))+(((0.0009)*cj2))+(((0.02626)*x17134))+(((-1.0)*py*x17125))+(((-1.0)*x17121*x17128))+(((-0.0718)*x17132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x17137=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x17137.valid){
continue;
}
CheckValue<IkReal> x17138 = IKatan2WithCheck(IkReal((((cj5*r22))+((r20*sj5*sj6))+((cj6*r21*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x17138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17137.value)))+(x17138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17139=IKcos(j4);
IkReal x17140=IKsin(j4);
IkReal x17141=(r11*sj0);
IkReal x17142=(cj0*sj6);
IkReal x17143=((0.026255)*r01);
IkReal x17144=(cj0*cj5);
IkReal x17145=(cj6*sj5);
IkReal x17146=(r10*sj0);
IkReal x17147=(sj5*sj6);
IkReal x17148=((1.0)*cj5);
IkReal x17149=((1.0)*cj6);
IkReal x17150=((1.0)*sj0);
IkReal x17151=((0.026255)*sj6);
IkReal x17152=(cj0*r10);
IkReal x17153=((0.026255)*cj6);
IkReal x17154=((1.0)*r21);
IkReal x17155=((1.0)*cj0);
IkReal x17156=(cj0*r00);
IkReal x17157=(cj2*x17140);
IkReal x17158=(cj6*r00*sj0);
IkReal x17159=(cj2*x17139);
IkReal x17160=(sj2*x17140);
IkReal x17161=(sj2*x17139);
evalcond[0]=((((-1.0)*sj6*x17154))+((cj6*r20))+x17161);
evalcond[1]=((((-1.0)*r22*x17148))+(((-1.0)*r20*x17147))+(((-1.0)*x17145*x17154))+x17160);
evalcond[2]=(((sj6*x17141))+(((-1.0)*x17149*x17156))+(((-1.0)*x17146*x17149))+((r01*x17142))+x17159);
evalcond[3]=(((r11*x17142))+(((-1.0)*x17140))+(((-1.0)*x17149*x17152))+(((-1.0)*r01*sj6*x17150))+x17158);
evalcond[4]=((0.1255)+(((-1.0)*r21*x17151))+(((0.02626)*x17161))+(((0.1158)*cj2))+(((-0.0718)*x17160))+pz+((r20*x17153))+(((0.0009)*sj2)));
evalcond[5]=(((cj5*r12*sj0))+((r00*sj5*x17142))+((cj0*r01*x17145))+((r02*x17144))+((x17146*x17147))+((x17141*x17145))+x17157);
evalcond[6]=(((r12*x17144))+(((-1.0)*r00*x17147*x17150))+(((-1.0)*r01*x17145*x17150))+((cj0*r11*x17145))+((r10*sj5*x17142))+(((-1.0)*r02*sj0*x17148))+x17139);
evalcond[7]=((-0.09756)+(((0.026255)*r11*x17142))+(((-1.0)*sj0*sj6*x17143))+(((-1.0)*x17152*x17153))+(((-0.02626)*x17140))+(((-1.0)*py*x17155))+((px*sj0))+((r00*sj0*x17153))+(((-0.0718)*x17139)));
evalcond[8]=((-0.001)+(((-1.0)*x17153*x17156))+(((-1.0)*x17146*x17153))+(((0.02626)*x17159))+(((-0.1158)*sj2))+((x17142*x17143))+(((-0.0718)*x17157))+(((-1.0)*py*x17150))+(((0.0009)*cj2))+(((-1.0)*px*x17155))+((x17141*x17151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17162=cj3*cj3;
IkReal x17163=(cj2*cj6);
IkReal x17164=((1.0)*sj5);
IkReal x17165=(cj1*sj0);
IkReal x17166=(cj2*sj6);
IkReal x17167=(r11*sj6);
IkReal x17168=(sj1*sj3);
IkReal x17169=((1.0)*cj6);
IkReal x17170=(cj0*r00);
IkReal x17171=((1.0)*cj3);
IkReal x17172=(cj5*r22);
IkReal x17173=(cj1*cj2);
IkReal x17174=(sj2*x17173);
IkReal x17175=((1.0)*x17162);
IkReal x17176=(cj0*cj1*r01);
CheckValue<IkReal> x17177=IKPowWithIntegerCheck(((((-1.0)*x17174*x17175))+((cj3*sj2*x17168))+x17174),-1);
if(!x17177.valid){
continue;
}
CheckValue<IkReal> x17178=IKPowWithIntegerCheck((x17173+(((-1.0)*x17173*x17175))+((cj3*x17168))),-1);
if(!x17178.valid){
continue;
}
if( IKabs(((x17177.value)*((((sj0*x17167*x17168))+(((-1.0)*x17168*x17169*x17170))+(((-1.0)*cj2*x17172))+((cj0*r01*sj6*x17168))+(((-1.0)*x17166*x17171*x17176))+((cj1*cj3*x17163*x17170))+(((-1.0)*r10*sj0*x17168*x17169))+(((-1.0)*r21*x17163*x17164))+(((-1.0)*r20*x17164*x17166))+(((-1.0)*r11*x17165*x17166*x17171))+((cj3*r10*x17163*x17165)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17178.value)*(((((-1.0)*x17171*x17172))+((cj6*r10*x17165))+(((-1.0)*x17165*x17167))+(((-1.0)*cj3*cj6*r21*x17164))+(((-1.0)*cj3*r20*sj6*x17164))+((cj1*cj6*x17170))+(((-1.0)*sj6*x17176)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17177.value)*((((sj0*x17167*x17168))+(((-1.0)*x17168*x17169*x17170))+(((-1.0)*cj2*x17172))+((cj0*r01*sj6*x17168))+(((-1.0)*x17166*x17171*x17176))+((cj1*cj3*x17163*x17170))+(((-1.0)*r10*sj0*x17168*x17169))+(((-1.0)*r21*x17163*x17164))+(((-1.0)*r20*x17164*x17166))+(((-1.0)*r11*x17165*x17166*x17171))+((cj3*r10*x17163*x17165))))))+IKsqr(((x17178.value)*(((((-1.0)*x17171*x17172))+((cj6*r10*x17165))+(((-1.0)*x17165*x17167))+(((-1.0)*cj3*cj6*r21*x17164))+(((-1.0)*cj3*r20*sj6*x17164))+((cj1*cj6*x17170))+(((-1.0)*sj6*x17176))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x17177.value)*((((sj0*x17167*x17168))+(((-1.0)*x17168*x17169*x17170))+(((-1.0)*cj2*x17172))+((cj0*r01*sj6*x17168))+(((-1.0)*x17166*x17171*x17176))+((cj1*cj3*x17163*x17170))+(((-1.0)*r10*sj0*x17168*x17169))+(((-1.0)*r21*x17163*x17164))+(((-1.0)*r20*x17164*x17166))+(((-1.0)*r11*x17165*x17166*x17171))+((cj3*r10*x17163*x17165))))), ((x17178.value)*(((((-1.0)*x17171*x17172))+((cj6*r10*x17165))+(((-1.0)*x17165*x17167))+(((-1.0)*cj3*cj6*r21*x17164))+(((-1.0)*cj3*r20*sj6*x17164))+((cj1*cj6*x17170))+(((-1.0)*sj6*x17176))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17179=IKsin(j4);
IkReal x17180=IKcos(j4);
IkReal x17181=(cj0*sj6);
IkReal x17182=((0.026255)*r01);
IkReal x17183=((1.0)*cj5);
IkReal x17184=(cj2*sj1);
IkReal x17185=((1.0)*cj3);
IkReal x17186=((0.026255)*sj6);
IkReal x17187=(r11*sj0);
IkReal x17188=((0.0718)*cj1);
IkReal x17189=(cj6*sj0);
IkReal x17190=(cj5*r12);
IkReal x17191=((1.0)*r21);
IkReal x17192=((1.0)*sj5);
IkReal x17193=((0.02626)*cj3);
IkReal x17194=(r10*sj5);
IkReal x17195=(sj0*sj6);
IkReal x17196=((0.0009)*sj2);
IkReal x17197=((1.0)*sj2);
IkReal x17198=((1.0)*py);
IkReal x17199=(cj6*sj5);
IkReal x17200=((1.0)*cj0);
IkReal x17201=(cj1*cj2);
IkReal x17202=(cj6*r20);
IkReal x17203=((0.09746)*cj3);
IkReal x17204=((0.09746)*sj3);
IkReal x17205=(cj1*sj3);
IkReal x17206=((0.02626)*sj2);
IkReal x17207=(cj2*x17179);
IkReal x17208=(cj3*x17180);
IkReal x17209=(sj2*x17179);
IkReal x17210=((0.026255)*cj0*cj6);
IkReal x17211=(cj2*x17180);
IkReal x17212=(sj1*x17180);
IkReal x17213=(cj1*x17180);
IkReal x17214=(sj1*sj3*x17179);
evalcond[0]=((((-1.0)*x17197*x17213))+x17202+x17214+(((-1.0)*sj6*x17191))+(((-1.0)*x17179*x17185*x17201)));
evalcond[1]=((((-1.0)*cj6*r00*x17200))+x17211+(((-1.0)*x17185*x17209))+((r01*x17181))+((sj6*x17187))+(((-1.0)*r10*x17189)));
evalcond[2]=(((x17201*x17208))+(((-1.0)*sj3*x17212))+(((-1.0)*r20*sj6*x17192))+(((-1.0)*x17191*x17199))+(((-1.0)*cj1*x17179*x17197))+(((-1.0)*r22*x17183)));
evalcond[3]=(((sj2*x17208))+((x17187*x17199))+((cj0*cj5*r02))+((sj0*x17190))+((cj0*r01*x17199))+((x17194*x17195))+x17207+((r00*sj5*x17181)));
evalcond[4]=((((-1.0)*x17179*x17184*x17185))+(((-1.0)*r01*x17195))+(((-1.0)*x17179*x17205))+(((-1.0)*cj6*r10*x17200))+(((-1.0)*x17197*x17212))+((r11*x17181))+((r00*x17189)));
evalcond[5]=(((cj0*r11*x17199))+((x17181*x17194))+((x17184*x17208))+(((-1.0)*r01*x17189*x17192))+(((-1.0)*sj1*x17179*x17197))+((cj0*x17190))+((x17180*x17205))+(((-1.0)*r00*x17192*x17195))+(((-1.0)*r02*sj0*x17183)));
evalcond[6]=((-0.001)+(((0.02626)*x17211))+(((-0.026255)*r10*x17189))+(((-1.0)*x17193*x17209))+(((-0.1158)*sj2))+((x17186*x17187))+((x17181*x17182))+(((-0.0718)*x17207))+(((0.0009)*cj2))+(((-0.0718)*sj2*x17208))+(((-1.0)*sj2*x17203))+(((-1.0)*sj0*x17198))+(((-1.0)*r00*x17210))+(((-1.0)*px*x17200)));
evalcond[7]=((((0.02626)*x17214))+(((-1.0)*x17201*x17203))+(((-1.0)*x17179*x17193*x17201))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-1.0)*cj1*x17196))+((sj1*x17204))+((x17188*x17209))+pz+(((0.026255)*x17202))+(((-1.0)*r21*x17186))+(((-1.0)*x17206*x17213))+(((0.0718)*sj3*x17212))+(((-1.0)*cj2*x17188*x17208))+(((-0.1158)*x17201)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*sj3*x17180*x17188))+(((-1.0)*x17179*x17184*x17193))+(((-1.0)*sj1*x17196))+(((0.0718)*sj1*x17209))+(((0.026255)*r00*x17189))+(((-1.0)*x17184*x17203))+(((-0.02626)*x17179*x17205))+(((-0.1158)*x17184))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*x17206*x17212))+(((-1.0)*x17182*x17195))+(((-1.0)*cj0*x17198))+(((-1.0)*cj1*x17204))+(((-1.0)*r10*x17210))+(((-0.0718)*x17184*x17208))+(((0.026255)*r11*x17181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17215=cj1*cj1;
IkReal x17216=cj3*cj3;
IkReal x17217=cj2*cj2;
IkReal x17218=((1.0)*sj5);
IkReal x17219=(cj1*sj2);
IkReal x17220=(r20*sj6);
IkReal x17221=(sj1*sj3);
IkReal x17222=(cj6*r20);
IkReal x17223=(cj6*r21);
IkReal x17224=(r21*x17221);
IkReal x17225=(cj1*cj2*cj3);
IkReal x17226=((1.0)*r21*sj6);
IkReal x17227=((1.0)*cj5*r22);
IkReal x17228=(x17215*x17216);
CheckValue<IkReal> x17229=IKPowWithIntegerCheck(IKsign(((1.0)+((x17217*x17228))+(((-1.0)*x17215*x17217))+(((-1.0)*x17216))+(((-2.0)*x17221*x17225))+x17228)),-1);
if(!x17229.valid){
continue;
}
CheckValue<IkReal> x17230 = IKatan2WithCheck(IkReal(((((-1.0)*x17219*x17227))+((x17222*x17225))+((sj6*x17224))+(((-1.0)*x17218*x17219*x17220))+(((-1.0)*x17218*x17219*x17223))+(((-1.0)*x17221*x17222))+(((-1.0)*x17225*x17226)))),((((-1.0)*x17219*x17226))+(((-1.0)*x17218*x17220*x17221))+((cj5*r22*x17225))+((sj5*x17223*x17225))+((sj5*x17220*x17225))+((x17219*x17222))+(((-1.0)*x17221*x17227))+(((-1.0)*x17218*x17221*x17223))),IKFAST_ATAN2_MAGTHRESH);
if(!x17230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17229.value)))+(x17230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17231=IKsin(j4);
IkReal x17232=IKcos(j4);
IkReal x17233=(cj0*sj6);
IkReal x17234=((0.026255)*r01);
IkReal x17235=((1.0)*cj5);
IkReal x17236=(cj2*sj1);
IkReal x17237=((1.0)*cj3);
IkReal x17238=((0.026255)*sj6);
IkReal x17239=(r11*sj0);
IkReal x17240=((0.0718)*cj1);
IkReal x17241=(cj6*sj0);
IkReal x17242=(cj5*r12);
IkReal x17243=((1.0)*r21);
IkReal x17244=((1.0)*sj5);
IkReal x17245=((0.02626)*cj3);
IkReal x17246=(r10*sj5);
IkReal x17247=(sj0*sj6);
IkReal x17248=((0.0009)*sj2);
IkReal x17249=((1.0)*sj2);
IkReal x17250=((1.0)*py);
IkReal x17251=(cj6*sj5);
IkReal x17252=((1.0)*cj0);
IkReal x17253=(cj1*cj2);
IkReal x17254=(cj6*r20);
IkReal x17255=((0.09746)*cj3);
IkReal x17256=((0.09746)*sj3);
IkReal x17257=(cj1*sj3);
IkReal x17258=((0.02626)*sj2);
IkReal x17259=(cj2*x17231);
IkReal x17260=(cj3*x17232);
IkReal x17261=(sj2*x17231);
IkReal x17262=((0.026255)*cj0*cj6);
IkReal x17263=(cj2*x17232);
IkReal x17264=(sj1*x17232);
IkReal x17265=(cj1*x17232);
IkReal x17266=(sj1*sj3*x17231);
evalcond[0]=((((-1.0)*x17249*x17265))+(((-1.0)*sj6*x17243))+(((-1.0)*x17231*x17237*x17253))+x17254+x17266);
evalcond[1]=((((-1.0)*x17237*x17261))+((sj6*x17239))+((r01*x17233))+(((-1.0)*r10*x17241))+x17263+(((-1.0)*cj6*r00*x17252)));
evalcond[2]=((((-1.0)*x17243*x17251))+((x17253*x17260))+(((-1.0)*sj3*x17264))+(((-1.0)*r20*sj6*x17244))+(((-1.0)*r22*x17235))+(((-1.0)*cj1*x17231*x17249)));
evalcond[3]=(((x17239*x17251))+((sj0*x17242))+((cj0*cj5*r02))+((r00*sj5*x17233))+((cj0*r01*x17251))+x17259+((x17246*x17247))+((sj2*x17260)));
evalcond[4]=((((-1.0)*x17249*x17264))+((r11*x17233))+(((-1.0)*x17231*x17236*x17237))+((r00*x17241))+(((-1.0)*r01*x17247))+(((-1.0)*x17231*x17257))+(((-1.0)*cj6*r10*x17252)));
evalcond[5]=((((-1.0)*r01*x17241*x17244))+((x17233*x17246))+((cj0*r11*x17251))+((x17236*x17260))+(((-1.0)*r02*sj0*x17235))+((x17232*x17257))+((cj0*x17242))+(((-1.0)*sj1*x17231*x17249))+(((-1.0)*r00*x17244*x17247)));
evalcond[6]=((-0.001)+(((-1.0)*px*x17252))+(((-0.1158)*sj2))+(((-1.0)*sj2*x17255))+(((-1.0)*sj0*x17250))+(((0.0009)*cj2))+(((-1.0)*x17245*x17261))+((x17233*x17234))+(((-0.0718)*sj2*x17260))+(((-0.0718)*x17259))+((x17238*x17239))+(((-1.0)*r00*x17262))+(((0.02626)*x17263))+(((-0.026255)*r10*x17241)));
evalcond[7]=((((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.1158)*x17253))+(((-1.0)*x17258*x17265))+(((-1.0)*x17231*x17245*x17253))+(((0.026255)*x17254))+(((0.0718)*sj3*x17264))+pz+(((-1.0)*cj1*x17248))+(((-1.0)*cj2*x17240*x17260))+(((-1.0)*x17253*x17255))+((x17240*x17261))+((sj1*x17256))+(((0.02626)*x17266))+(((-1.0)*r21*x17238)));
evalcond[8]=((((-1.0)*sj1*x17248))+(((-0.1255)*sj1))+(((-1.0)*r10*x17262))+(((-1.0)*cj0*x17250))+(((-1.0)*x17231*x17236*x17245))+(((-1.0)*x17234*x17247))+(((-1.0)*x17236*x17255))+(((0.026255)*r11*x17233))+(((-1.0)*x17258*x17264))+(((-0.0718)*x17236*x17260))+(((-1.0)*sj3*x17232*x17240))+(((0.0718)*sj1*x17261))+(((-1.0)*cj1*x17256))+(((0.0001)*cj1))+((px*sj0))+(((-0.02626)*x17231*x17257))+(((0.026255)*r00*x17241))+(((-0.1158)*x17236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17267=(cj0*r00);
IkReal x17268=(r10*sj0);
IkReal x17269=(sj1*sj3);
IkReal x17270=((1.0)*cj2);
IkReal x17271=((1.0)*cj6);
IkReal x17272=(cj1*sj2);
IkReal x17273=(r21*sj6);
IkReal x17274=(cj3*sj2);
IkReal x17275=(cj1*cj3);
IkReal x17276=(cj6*r20);
IkReal x17277=(r11*sj0*sj6);
IkReal x17278=(cj0*r01*sj6);
IkReal x17279=(x17271*x17272);
IkReal x17280=(cj2*cj6*x17275);
CheckValue<IkReal> x17281=IKPowWithIntegerCheck(IKsign((x17275+(((-1.0)*x17269*x17270)))),-1);
if(!x17281.valid){
continue;
}
CheckValue<IkReal> x17282 = IKatan2WithCheck(IkReal(((((-1.0)*x17270*x17273))+((x17272*x17277))+((x17272*x17278))+((cj2*x17276))+(((-1.0)*x17267*x17279))+(((-1.0)*x17268*x17279)))),(((x17274*x17276))+((x17267*x17280))+(((-1.0)*x17273*x17274))+(((-1.0)*x17267*x17269*x17271))+(((-1.0)*x17270*x17275*x17278))+(((-1.0)*x17270*x17275*x17277))+((x17269*x17277))+((x17269*x17278))+(((-1.0)*x17268*x17269*x17271))+((x17268*x17280))),IKFAST_ATAN2_MAGTHRESH);
if(!x17282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17281.value)))+(x17282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x17283=IKsin(j4);
IkReal x17284=IKcos(j4);
IkReal x17285=(cj0*sj6);
IkReal x17286=((0.026255)*r01);
IkReal x17287=((1.0)*cj5);
IkReal x17288=(cj2*sj1);
IkReal x17289=((1.0)*cj3);
IkReal x17290=((0.026255)*sj6);
IkReal x17291=(r11*sj0);
IkReal x17292=((0.0718)*cj1);
IkReal x17293=(cj6*sj0);
IkReal x17294=(cj5*r12);
IkReal x17295=((1.0)*r21);
IkReal x17296=((1.0)*sj5);
IkReal x17297=((0.02626)*cj3);
IkReal x17298=(r10*sj5);
IkReal x17299=(sj0*sj6);
IkReal x17300=((0.0009)*sj2);
IkReal x17301=((1.0)*sj2);
IkReal x17302=((1.0)*py);
IkReal x17303=(cj6*sj5);
IkReal x17304=((1.0)*cj0);
IkReal x17305=(cj1*cj2);
IkReal x17306=(cj6*r20);
IkReal x17307=((0.09746)*cj3);
IkReal x17308=((0.09746)*sj3);
IkReal x17309=(cj1*sj3);
IkReal x17310=((0.02626)*sj2);
IkReal x17311=(cj2*x17283);
IkReal x17312=(cj3*x17284);
IkReal x17313=(sj2*x17283);
IkReal x17314=((0.026255)*cj0*cj6);
IkReal x17315=(cj2*x17284);
IkReal x17316=(sj1*x17284);
IkReal x17317=(cj1*x17284);
IkReal x17318=(sj1*sj3*x17283);
evalcond[0]=((((-1.0)*sj6*x17295))+(((-1.0)*x17301*x17317))+x17318+x17306+(((-1.0)*x17283*x17289*x17305)));
evalcond[1]=(((r01*x17285))+(((-1.0)*r10*x17293))+(((-1.0)*x17289*x17313))+((sj6*x17291))+(((-1.0)*cj6*r00*x17304))+x17315);
evalcond[2]=((((-1.0)*x17295*x17303))+((x17305*x17312))+(((-1.0)*r22*x17287))+(((-1.0)*sj3*x17316))+(((-1.0)*r20*sj6*x17296))+(((-1.0)*cj1*x17283*x17301)));
evalcond[3]=(((sj0*x17294))+((r00*sj5*x17285))+((x17291*x17303))+((cj0*cj5*r02))+((x17298*x17299))+((cj0*r01*x17303))+((sj2*x17312))+x17311);
evalcond[4]=(((r11*x17285))+(((-1.0)*cj6*r10*x17304))+((r00*x17293))+(((-1.0)*x17283*x17309))+(((-1.0)*x17301*x17316))+(((-1.0)*r01*x17299))+(((-1.0)*x17283*x17288*x17289)));
evalcond[5]=((((-1.0)*sj1*x17283*x17301))+(((-1.0)*r01*x17293*x17296))+((x17284*x17309))+(((-1.0)*r00*x17296*x17299))+(((-1.0)*r02*sj0*x17287))+((cj0*x17294))+((x17288*x17312))+((cj0*r11*x17303))+((x17285*x17298)));
evalcond[6]=((-0.001)+((x17285*x17286))+(((-1.0)*sj0*x17302))+(((-0.0718)*x17311))+(((-0.1158)*sj2))+(((-0.0718)*sj2*x17312))+(((-1.0)*px*x17304))+(((-1.0)*x17297*x17313))+(((0.0009)*cj2))+(((-1.0)*r00*x17314))+(((-1.0)*sj2*x17307))+(((0.02626)*x17315))+(((-0.026255)*r10*x17293))+((x17290*x17291)));
evalcond[7]=((((0.026255)*x17306))+(((-1.0)*cj2*x17292*x17312))+(((-0.1158)*x17305))+(((-1.0)*x17283*x17297*x17305))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+((x17292*x17313))+(((-1.0)*r21*x17290))+(((-1.0)*x17310*x17317))+(((-1.0)*cj1*x17300))+(((-1.0)*x17305*x17307))+pz+(((0.0718)*sj3*x17316))+(((0.02626)*x17318))+((sj1*x17308)));
evalcond[8]=((((-0.1255)*sj1))+(((-1.0)*r10*x17314))+(((-0.0718)*x17288*x17312))+(((-0.02626)*x17283*x17309))+(((-1.0)*sj3*x17284*x17292))+(((-1.0)*x17310*x17316))+(((0.0718)*sj1*x17313))+(((-1.0)*cj1*x17308))+(((-1.0)*x17288*x17307))+(((-1.0)*sj1*x17300))+(((-1.0)*x17286*x17299))+(((-1.0)*x17283*x17288*x17297))+(((0.026255)*r11*x17285))+(((0.0001)*cj1))+((px*sj0))+(((-1.0)*cj0*x17302))+(((-0.1158)*x17288))+(((0.026255)*r00*x17293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cyton_gamma_1500 (368e4f7c66e10768da9bc06eed619639)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
